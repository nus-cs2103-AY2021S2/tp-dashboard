[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W17-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"* **BookCoin To The Moon** is a CLI facility management system which allows users to type in commands to manage bookings and presents users a structured and detailed information on facility availability."},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"* Our targeted users are administrative personnels of schools or organisations who need to manage bookings and usage of a large number of facilities. They have to ensure that bookings and usages of facilities abide by restrictions in addition to checking that the bookings are valid.*"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"* For the detailed documentation of this project, see the **[BookCoin To The Moon Product Website](https://ay2021s2-cs2103-w17-3.github.io/tp/)**."},{"lineNumber":10,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."}],"authorContributionMap":{"vvan-essa":1,"-":4,"xuanqi966":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"#About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"Bookcoin to the Moon was developed by the team CS2103-W17-3."},{"lineNumber":4,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"### Wang Xuanqi"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/xuanqi966.png\" width\u003d\"200px\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"[[github](https://github.com/xuanqi966)]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"* Role: Developer, team lead"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"* Responsibilities:"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"### Ni Jiaying"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ninijiaying.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ninijiaying)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"* Role: Developer, integration"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"* Responsibilities:"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"### Vanessa Tay"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/vvan-essa.png\" width\u003d\"200px\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/vvan-essa)] [[portfolio](team/johndoe.md)]"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"* Role: Developer, deliverables and deadlines"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"* Responsibilities:"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"### Ho Jie Feng"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/hojiefeng.png\" width\u003d\"200px\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/hojiefeng)]"},{"lineNumber":42,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"* Role: Developer, code quality"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"* Responsibilities:"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"### Wu Weiming"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ming-00.png\" width\u003d\"200px\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ming-00)]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"* Role: Developer, documentation"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"* Responsibilities:"}],"authorContributionMap":{"ming-00":27,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"hojiefeng"},"content":"* has a need to manage a large number of venue bookings"},{"lineNumber":240,"author":{"gitId":"hojiefeng"},"content":"* has to ensure bookings abide by restrictions"},{"lineNumber":241,"author":{"gitId":"hojiefeng"},"content":"* need to check that the bookings are valid"},{"lineNumber":242,"author":{"gitId":"hojiefeng"},"content":"* are administrative personnels of schools or organisations"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"hojiefeng"},"content":"**Value proposition**:"},{"lineNumber":249,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":250,"author":{"gitId":"hojiefeng"},"content":"* manage bookings faster than a typical mouse/GUI driven app"},{"lineNumber":251,"author":{"gitId":"hojiefeng"},"content":"* ease of managing bookings since it is a centralised system"},{"lineNumber":252,"author":{"gitId":"hojiefeng"},"content":"* automatically keeps track of room usage, conflicts and rule violations"},{"lineNumber":253,"author":{"gitId":"hojiefeng"},"content":"* clear and structured way to avoid ambiguity"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":262,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add venues                     |                                                                        |"},{"lineNumber":263,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit venues                    | reflect the most up to date details of the venue                       |"},{"lineNumber":264,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete venues                  |                                                                        |"},{"lineNumber":265,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add bookings                   |                                                                        |"},{"lineNumber":266,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit bookings                  | change booking details when the booker decides to amend the booking    |"},{"lineNumber":267,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete bookings                |                                                                        |"},{"lineNumber":268,"author":{"gitId":"hojiefeng"},"content":"| `* *`    | admin in charge of facilities              | query booking information of a particular venue | quickly find out the relevant information instead of search one by one |"},{"lineNumber":269,"author":{"gitId":"hojiefeng"},"content":"| `*`      | admin in charge of facilities              | be able to access past data           | easily check the history of certain venues                      |"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"vvan-essa"},"content":"(For all use cases below, the **System** is `BookCoin To The Moon` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC01 - Delete a venue**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific venue."},{"lineNumber":280,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the venue."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given venue is invalid."},{"lineNumber":287,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":288,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":289,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":290,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1."},{"lineNumber":291,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":292,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":293,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC02 - Delete a booking**"},{"lineNumber":294,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":295,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":296,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":297,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific booking."},{"lineNumber":298,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the booking."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given booking is invalid."},{"lineNumber":305,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":306,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":307,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":308,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1."},{"lineNumber":309,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":310,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":311,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC03 - Add a venue**"},{"lineNumber":312,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":313,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":314,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":315,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new venue into the system."},{"lineNumber":316,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the venue into the system."},{"lineNumber":317,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":318,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":319,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":320,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":321,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":322,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue to be added is already in the system."},{"lineNumber":323,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":324,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":325,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":326,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":327,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":328,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC04 - Add a booking**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":331,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":332,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new booking into the system."},{"lineNumber":333,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the booking into the system."},{"lineNumber":334,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":335,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":336,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":337,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":339,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking to be added is already in the system."},{"lineNumber":340,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":341,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":342,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":343,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":344,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC05 - List all bookings**"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":347,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":348,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all bookings."},{"lineNumber":349,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of bookings."},{"lineNumber":350,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":351,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":352,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":353,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC06 - List all venues**"},{"lineNumber":354,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":355,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":356,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":357,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all venues."},{"lineNumber":358,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of venues."},{"lineNumber":359,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":360,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":361,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":362,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC07 - Find a booking**"},{"lineNumber":363,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":364,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":365,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":366,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific booking."},{"lineNumber":367,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that booking."},{"lineNumber":368,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":369,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":370,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":371,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":372,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":373,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found."},{"lineNumber":374,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":375,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":376,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":377,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":378,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC08 - Find a venue**"},{"lineNumber":379,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":380,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":381,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":382,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific venue."},{"lineNumber":383,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that venue."},{"lineNumber":384,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":385,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":386,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":387,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":388,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":389,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found."},{"lineNumber":390,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":391,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":392,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":393,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":394,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC09 - Edit a venue**"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific venue."},{"lineNumber":399,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the venue information."},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found."},{"lineNumber":406,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC10 - Edit a booking**"},{"lineNumber":411,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":412,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":413,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":414,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific booking."},{"lineNumber":415,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the booking information."},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":418,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":419,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":420,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":421,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found."},{"lineNumber":422,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":423,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":424,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":425,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":426,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":427,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC11 - Exit the program**"},{"lineNumber":428,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":429,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":430,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":431,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to exit the program."},{"lineNumber":432,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon closes the window and terminates."},{"lineNumber":433,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":434,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":441,"author":{"gitId":"hojiefeng"},"content":"2.  Should be able to hold up to 1000 venues and bookings without a noticeable sluggishness in performance for typical usage."},{"lineNumber":442,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":443,"author":{"gitId":"hojiefeng"},"content":"4.  Should be able to perform queries quickly even with significant amounts of data present."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":448,"author":{"gitId":"hojiefeng"},"content":"* **Booking**: A person\u0027s request to occupy the room for a specific amount of time at a specific date"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":457,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":474,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":485,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":488,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":491,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"hojiefeng":21,"-":345,"vvan-essa":135}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon is a **desktop app for managing bookings and presents users a structured and detailed information on facility availability via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookCoinToTheMoon can get your facility management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"1. Download the latest `bookcointothemoon.jar` `[coming in v2.0]`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your BookCoinToTheMoon."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"   ![Ui](images/Ui_Booking.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"   * **`list_venues`** : Lists all venues."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"   * **`create_venue`**`n/Chua Thian Poh Hall max/40` : Adds a venue named `Chua Thian Poh Hall` to the BookCoinToTheMoon."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"   * **`bye`** : Exits the app."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"  e.g. in `find_venue v/VENUE_ID`, `VENUE_ID` is a parameter which can be used as `find_venue v/1`."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"  e.g. `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` can be used as `n/Chua Thian Poh Hall max/40` or as `n/Chua Thian Poh Hall`."},{"lineNumber":48,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `bye`) will be ignored.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"  e.g. if the command specifies `bye 123`, it will be interpreted as `bye`."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"### Adding a venue : `create_venue`"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"Adds a new venue for the booking app."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"* `create_venue n/Chua Thian Poh Hall max/40`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"### Adding a booking : `create_booking`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"Adds a new booking into the booking app. The default booking is set to one hour for the first iteration."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_booking d/DATE t/TIMING n/VENUE_NAME`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"* `create_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"### Listing all venues : `list_venues`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all venues and their corresponding IDs in the booking app."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_venues`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"### Listing all bookings : `list_bookings`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all bookings and their corresponding IDs in the booking app."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_bookings`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"### Finding a venue : `find_venue`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given venue ID."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_venue v/VENUE_ID`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"* `find_venue v/1`"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"### Finding a booking : `find_booking`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given booking ID."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_booking b/BOOKING_ID`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"* `find_booking b/2`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a venue : `delete_venue`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"Deletes a venue corresponding to the venue ID specified."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_venue v/VENUE_ID`"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"* `delete_venue v/1`"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a booking : `delete_booking`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"Deletes booking corresponding to the booking ID specified."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_booking b/BOOKING_ID`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"* `delete_booking b/2`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"### Exiting the program : `bye`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"Format: `bye`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"### Editing the data file `[coming in v2.0]`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"_Details coming soon ..._"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous BookCoinToTheMoon home folder."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":152,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"**Add** | `add_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` \u003cbr\u003e e.g., `add_venue n/Chua Thian Poh Hall max/40`\u003cbr\u003e\u003cbr\u003e `add_booking`e.g., `add_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"**Delete** | `delete_venue v/VENUE_ID`\u003cbr\u003e e.g., `delete_venue v/1` \u003cbr\u003e\u003cbr\u003e `delete_booking b/BOOKING_ID`\u003cbr\u003e e.g., `delete_booking b/2`"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"**Find** | `find_venue v/VENUE_ID`\u003cbr\u003e e.g., `find_venue v/1`\u003cbr\u003e\u003cbr\u003e `find_booking b/BOOKING_ID`\u003cbr\u003e e.g., `find_booking b/2`"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"**List** | `list_venues` \u003cbr\u003e `list_bookings`"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"**Exit** | `bye`"}],"authorContributionMap":{"-":102,"NiniJiaying":55}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"Interface ReadOnlyBookingSystem \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ObservableList \u003c\u003cInterface\u003e\u003e"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"Class BookingSystem"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"Class ReadOnlyBookingSystem"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Package Person {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Person"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Email"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Phone"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class UniquePersonList"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Package Tag {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class Tag"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":32,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"BookingSystem .up.|\u003e ReadOnlyBookingSystem"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Model .right.\u003e ObservableList"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"ModelManager o--\u003e \"1\" BookingSystem"},{"lineNumber":39,"author":{"gitId":"-"},"content":"ModelManager o-left-\u003e \"1\" UserPrefs"},{"lineNumber":40,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *--\u003e \"1\" UniquePersonList"},{"lineNumber":43,"author":{"gitId":"-"},"content":"UniquePersonList o--\u003e \"*\" Person"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Person *--\u003e Name"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Person *--\u003e Phone"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Person *--\u003e Email"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Person *--\u003e Address"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"ModelManager -----\u003e\" ~* filtered list\" Person"},{"lineNumber":55,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"hojiefeng":6,"-":49}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"Interface BookingSystemStorage \u003c\u003cInterface\u003e\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class StorageManager"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"Class JsonBookingSystemStorage"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"StorageManager .left.|\u003e Storage"},{"lineNumber":16,"author":{"gitId":"-"},"content":"StorageManager o-right-\u003e UserPrefsStorage"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"StorageManager o--\u003e BookingSystemStorage"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"JsonBookingSystemStorage .left.|\u003e BookingSystemStorage"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"JsonBookingSystemStorage .down.\u003e JsonSerializableBookingSystemStorage"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"JsonSerializableBookingSystemStorage .right.\u003e JsonSerializablePerson"},{"lineNumber":23,"author":{"gitId":"-"},"content":"JsonSerializablePerson .right.\u003e JsonAdaptedTag"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"hojiefeng":6,"-":18}},{"path":"docs/diagrams/UndoRedoState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"title Initial state"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\""},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3"},{"lineNumber":15,"author":{"gitId":"-"},"content":"hide State2"},{"lineNumber":16,"author":{"gitId":"-"},"content":"hide State3"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"list\""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\""},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState5.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"clear\""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\""},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab3:BookingSystem__\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3"},{"lineNumber":20,"author":{"gitId":"-"},"content":"note right on link: State ab2 deleted."},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end"}],"authorContributionMap":{"hojiefeng":3,"-":18}},{"path":"gradle/wrapper/gradle-wrapper.properties","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"distributionBase\u003dGRADLE_USER_HOME"},{"lineNumber":2,"author":{"gitId":"-"},"content":"distributionPath\u003dwrapper/dists"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.3-all.zip"},{"lineNumber":4,"author":{"gitId":"-"},"content":"zipStoreBase\u003dGRADLE_USER_HOME"},{"lineNumber":5,"author":{"gitId":"-"},"content":"zipStorePath\u003dwrapper/dists"}],"authorContributionMap":{"-":4,"NiniJiaying":1}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.storage.BookingSystemStorage;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.storage.JsonBookingSystemStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BookingSystem ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStorage bookingSystemStorage \u003d new JsonBookingSystemStorage(userPrefs.getBookingSystemFilePath());"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        Optional\u003cReadOnlyBookingSystem\u003e bookingSystemOptional;"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"            bookingSystemOptional \u003d storage.readBookingSystem();"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"            if (!bookingSystemOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"                logger.info(\"Data file not found. Will be starting with a sample BookingSystem\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d bookingSystemOptional.orElseGet(SampleDataUtil::getSampleBookingSystem);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookingSystem\");"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d new BookingSystem();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingSystem\");"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d new BookingSystem();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingSystem\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"hojiefeng"},"content":"        logger.info(\"Starting BookingSystem \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":19,"-":164}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    private static final String LOG_FILE \u003d \"bookingsystem.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":111}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_BOOKING_DISPLAYED \u003d \"%1$d Booking listed!\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_INVALID_VENUE_NAME \u003d \"The venue name provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_VENUE_DISPLAYED \u003d \"%1$d Venue(s) displayed!\";"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_INVALID_BOOKING_ID \u003d \"The booking id provided does not exist\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_EMPTY \u003d \"There are no venues in the system.\\n\";"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_EMPTY \u003d \"There are no bookings in the system.\\n\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":13,"vvan-essa":3,"xuanqi966":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"     * Returns the c."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"     * @see seedu.address.model.Model#getBookingSystem()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    ReadOnlyBookingSystem getBookingSystem();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the upcoming list of bookings */"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getUpcomingBookingList();"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the filtered list of bookings */"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getFilteredBookingList();"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the filtered list of venue */"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cVenue\u003e getFilteredVenueList();"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":16,"-":45}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.logic.parser.BookingSystemParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystemParser bookingSystemParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"        bookingSystemParser \u003d new BookingSystemParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        Command command \u003d bookingSystemParser.parseCommand(commandText);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            storage.saveBookingSystem(model.getBookingSystem());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        return model.getBookingSystem();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getUpcomingBookingList() {"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        return model.getUpcomingBookingList();"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        return model.getFilteredBookingList();"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cVenue\u003e getFilteredVenueList() {"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        return model.getFilteredVenueList();"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        return model.getBookingSystemFilePath();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":25,"-":72,"NiniJiaying":1}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":63,"NiniJiaying":2}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        model.setBookingSystem(new BookingSystem());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":2,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/CreateBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKER;"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGEND;"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGSTART;"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":" */"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"public class CreateBookingCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final String COMMAND_WORD \u003d \"create_booking\";"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking to the address book. \""},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKER + \"BOOKER \""},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_VENUE + \"VENUE \""},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKINGSTART + \"DATETIME \""},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKINGEND + \"DATETIME\\n\""},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKER + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_VENUE + \"UTOWN Hall 2 \""},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_DESCRIPTION + \"NA \""},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKINGSTART + \"2012-01-31 22:59:59 \""},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKINGEND + \"2012-01-31 23:59:59\";"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New booking added: %1$s\";"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This booking already exists in the address book.\";"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_TIME \u003d"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"            \"This booking\u0027s starting time is not earlier than the ending time.\";"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_VENUE \u003d \"This venue does not exist in the system.\";"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_PERSON \u003d \"This booker does not exist in the system.\";"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"    private final Booking toAdd;"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    private final Venue venueInBooking;"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"    private final Person personInBooking;"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"     * Creates an CreateBookingCommand to add the specified {@code Booking}"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"    public CreateBookingCommand(Booking booking) {"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        toAdd \u003d booking;"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        venueInBooking \u003d booking.getVenue();"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        personInBooking \u003d booking.getBooker();"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(model);"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        if (model.hasBooking(toAdd)) {"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"        if (!toAdd.isValidTime()) {"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_TIME);"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"        if (!model.hasVenue(venueInBooking)) {"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_VENUE);"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"        if (!model.hasPerson(personInBooking)) {"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"        model.addBooking(toAdd);"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof CreateBookingCommand // instanceof handles nulls"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 toAdd.equals(((CreateBookingCommand) other).toAdd));"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"}"}],"authorContributionMap":{"ming-00":1,"NiniJiaying":88}},{"path":"src/main/java/seedu/address/logic/commands/CreateVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":" * Adds a booking venue to the system."},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":" */"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"    public static final String COMMAND_WORD \u003d \"create_venue\";"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking venue to the system. \""},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"            + \"Parameters: \""},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"            + \"[\" + PREFIX_CAPACITY + \"MAXIMUM CAPACITY]\\n\""},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"            + PREFIX_NAME + \"Victoria Hall \""},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"            + PREFIX_CAPACITY + \"50\";"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New venue added: %1$s\";"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"This venue already exists in the system\";"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"    private final Venue toAdd;"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"     * Creates an AddVenue to add the specified {@code Venue}"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"    public CreateVenueCommand(Venue venue) {"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"        toAdd \u003d venue;"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        requireNonNull(model);"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"        if (model.hasVenue(toAdd)) {"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_VENUE);"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        model.addVenue(toAdd);"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof CreateVenueCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 toAdd.equals(((CreateVenueCommand) other).toAdd));"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"ming-00":51,"NiniJiaying":5}},{"path":"src/main/java/seedu/address/logic/commands/DeleteBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class DeleteBookingCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"delete_booking\";"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \": Deletes the booking identified by its booking id.\\n\""},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: Booking ID (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD + \" bid/12345 \";"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted booking: %1$d\";"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    private final int bookingId;"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    public DeleteBookingCommand(int bookingId) {"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"        this.bookingId \u003d bookingId;"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        if (!lastShownList.stream().anyMatch(booking -\u003e booking.isId(bookingId))) {"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_ID);"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        model.deleteBooking(bookingId);"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, bookingId));"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"}"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":""}],"authorContributionMap":{"xuanqi966":45}},{"path":"src/main/java/seedu/address/logic/commands/DeleteVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":" * Deletes an existing venue from the system."},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"delete_venue\";"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"            + \": Deletes the venue identified by the venue name used in the displayed list.\\n\""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: v/VENUE NAME\\n\""},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" v/Sports Hall\";"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_DELETE_VENUE_SUCCESS \u003d \"Deleted Venue: %1$s\";"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    private final Venue targetVenue;"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public DeleteVenueCommand(Venue targetVenue) {"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        this.targetVenue \u003d targetVenue;"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        List\u003cVenue\u003e lastShownList \u003d model.getFilteredVenueList();"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        if (!lastShownList.stream().anyMatch(targetVenue::isSameVenue)) {"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_VENUE_NAME);"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        model.deleteVenue(targetVenue);"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_VENUE_SUCCESS, targetVenue.getName()));"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof DeleteVenueCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 targetVenue.equals(((DeleteVenueCommand) other).targetVenue)); // state check"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"ming-00":1,"vvan-essa":50}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":189,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":189,"NiniJiaying":3}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Booking App as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.BookingIdContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Finds and lists the booking in the system whose id corresponds to that of the argument keyword."},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"find_booking\";"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the booking whose id contains \""},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"            + \"the specified keyword and displays it as a list with its index number.\\n\""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: bid/ID\\n\""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" bid/1\";"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    private final BookingIdContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public FindBookingCommand(BookingIdContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredBookingList(predicate);"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult("},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"                String.format(Messages.MESSAGE_BOOKING_DISPLAYED, model.getFilteredBookingList().size()));"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof FindBookingCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 predicate.equals(((FindBookingCommand) other).predicate)); // state check"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"}"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":""}],"authorContributionMap":{"vvan-essa":42}},{"path":"src/main/java/seedu/address/logic/commands/FindVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Finds and lists the venue in the system whose name corresponds to that of the argument keyword."},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"find_venue\";"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all venues whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: v/NAME\\n\""},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" v/Victoria Hall\";"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    private final VenueNameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public FindVenueCommand(VenueNameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredVenueList(predicate);"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"                String.format(Messages.MESSAGE_VENUE_DISPLAYED, model.getFilteredVenueList().size()));"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof FindVenueCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 predicate.equals(((FindVenueCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":42}},{"path":"src/main/java/seedu/address/logic/commands/ListBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Displays all existing bookings to the terminal"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class ListBookingCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"list_booking\";"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \": Displays all existing bookings.\\n\""},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: NILL\\n\""},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_SUCCESS \u003d \"Here are all current bookings:\\n\";"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_LINEBREAK \u003d \"-------------------------------\\n\";"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        String outputString \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        if (lastShownList.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_BOOKING_LISTED_EMPTY);"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"        outputString +\u003d MESSAGE_BOOKING_LISTED_SUCCESS;"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"        for (Booking booking : lastShownList) {"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d MESSAGE_BOOKING_LISTED_LINEBREAK;"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Booking ID: \" + String.valueOf(booking.getId()) + \"\\n\");"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Venue: \" + booking.getVenue().getName() + \"\\n\");"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Booker: \" + booking.getBooker() + \"\\n\");"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Description: \" + booking.getDescription() + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"From: \" + booking.getBookingStart() + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Till: \" + booking.getBookingEnd() + \"\\n\");"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (MESSAGE_BOOKING_LISTED_LINEBREAK);"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":51,"author":{"gitId":"xuanqi966"},"content":"        System.out.println(outputString);"},{"lineNumber":52,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":53,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(outputString);"},{"lineNumber":54,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xuanqi966"},"content":"}"}],"authorContributionMap":{"xuanqi966":55}},{"path":"src/main/java/seedu/address/logic/commands/ListVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Displays all existing venues to the terminal"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class ListVenueCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"list_venue\";"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \": Displays all existing venues.\\n\""},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: NILL\\n\""},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_SUCCESS \u003d \"Here are all current venues:\\n\";"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_LINEBREAK \u003d \"-------------------------------\\n\";"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        List\u003cVenue\u003e lastShownList \u003d model.getFilteredVenueList();"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        String outputString \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        if (lastShownList.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_VENUE_LISTED_EMPTY);"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        System.out.println(outputString);"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"        outputString +\u003d MESSAGE_VENUE_LISTED_SUCCESS;"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        for (Venue venue : lastShownList) {"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d MESSAGE_VENUE_LISTED_LINEBREAK;"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Venue Name: \" + venue.getName() + \"\\n\");"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Capacity: \" + String.valueOf(venue.getCapacity()) + \"\\n\");"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (MESSAGE_VENUE_LISTED_LINEBREAK);"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"        System.out.println(outputString);"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(outputString);"},{"lineNumber":51,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":52,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"xuanqi966"},"content":"}"}],"authorContributionMap":{"xuanqi966":53}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":17,"NiniJiaying":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"        Person person \u003d new Person(name, phone, email);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":50,"NiniJiaying":4}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":61,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":60,"xuanqi966":2}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":149,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":148,"xuanqi966":2}},{"path":"src/main/java/seedu/address/logic/parser/BookingSystemParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.CreateBookingCommand;"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.CreateVenueCommand;"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.DeleteBookingCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.DeleteVenueCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindBookingCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindVenueCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.ListBookingCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.ListVenueCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemParser {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"        case DeleteVenueCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"            return new DeleteVenueCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"        case FindVenueCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"            return new FindVenueCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"        case FindBookingCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"            return new FindBookingCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"        case CreateBookingCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"            return new CreateBookingCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":92,"author":{"gitId":"NiniJiaying"},"content":"        case CreateVenueCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"            return new CreateVenueCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":95,"author":{"gitId":"xuanqi966"},"content":"        case DeleteBookingCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitId":"xuanqi966"},"content":"            return new DeleteBookingCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":98,"author":{"gitId":"xuanqi966"},"content":"        case ListVenueCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitId":"xuanqi966"},"content":"            return new ListVenueCommand();"},{"lineNumber":100,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":101,"author":{"gitId":"xuanqi966"},"content":"        case ListBookingCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitId":"xuanqi966"},"content":"            return new ListBookingCommand();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":75,"NiniJiaying":9,"vvan-essa":12,"xuanqi966":11}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"max/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKER \u003d new Prefix(\"b/\");"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKINGSTART \u003d new Prefix(\"bs/\");"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKINGEND \u003d new Prefix(\"be/\");"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final Prefix PREFIX_BOOKINGID \u003d new Prefix(\"bid/\");"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ming-00":4,"-":16,"NiniJiaying":3,"xuanqi966":1}},{"path":"src/main/java/seedu/address/logic/parser/CreateBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKER;"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGEND;"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGSTART;"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.CreateBookingCommand;"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":" */"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"public class CreateBookingCommandParser implements Parser\u003cCreateBookingCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"     * Parses the given {@code String} of arguments in the context of the AddBookingCommand"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    public CreateBookingCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_BOOKER, PREFIX_VENUE,"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"                        PREFIX_DESCRIPTION, PREFIX_BOOKINGSTART, PREFIX_BOOKINGEND);"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKER, PREFIX_VENUE,"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"                PREFIX_DESCRIPTION, PREFIX_BOOKINGSTART, PREFIX_BOOKINGEND)"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"                    CreateBookingCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        Person booker \u003d ParserUtil.parseBooker(argMultimap.getValue(PREFIX_BOOKER).get());"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        String description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime bookingStart \u003d ParserUtil.parseBookingStart(argMultimap.getValue(PREFIX_BOOKINGSTART).get());"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime bookingEnd \u003d ParserUtil.parseBookingEnd(argMultimap.getValue(PREFIX_BOOKINGEND).get());"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"        Booking booking \u003d new Booking(booker, venue, description,"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"                bookingStart, bookingEnd, Booking.getNewBookingId());"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        return new CreateBookingCommand(booking);"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"}"}],"authorContributionMap":{"NiniJiaying":61}},{"path":"src/main/java/seedu/address/logic/parser/CreateVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.CreateVenueCommand;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":" * Parses input arguments and creates a new AddVenue object"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":" */"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandParser implements Parser\u003cCreateVenueCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"     * Parses the given {@code String} of arguments in the context of the AddVenue"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"     * and returns an AddVenue object for execution."},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    public CreateVenueCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CAPACITY);"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CAPACITY)"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateVenueCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"        String name \u003d ParserUtil.parseVenueName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"        int capacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"        Venue venue \u003d new Venue(name, capacity);"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"        return new CreateVenueCommand(venue);"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"ming-00":41,"NiniJiaying":6}},{"path":"src/main/java/seedu/address/logic/parser/DeleteBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGID;"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.commands.DeleteBookingCommand;"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteBookingCommand"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"     * and returns a DeleteBookingCommand object for execution."},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"    public DeleteBookingCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"                PREFIX_BOOKINGID);"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"        int bookingId;"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKINGID)"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"                    DeleteBookingCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"            bookingId \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKINGID).get());"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        } catch (ParseException pe) {"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"            System.out.println(\"Exception throwing\\n\");"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"                    DeleteBookingCommand.MESSAGE_USAGE), pe);"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        return new DeleteBookingCommand(bookingId);"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"}"}],"authorContributionMap":{"xuanqi966":43}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":""}],"authorContributionMap":{"-":29,"vvan-essa":2}},{"path":"src/main/java/seedu/address/logic/parser/DeleteVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.DeleteVenueCommand;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new DeleteVenueCommand object."},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandParser implements Parser\u003cDeleteVenueCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteVenueCommand"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a DeleteVenueCommand object for execution."},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public DeleteVenueCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VENUE);"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        Venue venue;"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE)"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_VENUE).isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVenueCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        return new DeleteVenueCommand(venue);"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"ming-00":1,"vvan-essa":43}},{"path":"src/main/java/seedu/address/logic/parser/FindBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKINGID;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindBookingCommand;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.BookingIdContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new FindBookingCommand object."},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandParser implements Parser\u003cFindBookingCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the FindBookingCommand"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a FindBookingCommand object for execution."},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public FindBookingCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_BOOKINGID);"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        String bookingId;"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKINGID)"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"                || argMultimap.getValue(PREFIX_BOOKINGID).isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        bookingId \u003d String.valueOf(ParserUtil"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"                .parseBookingId(argMultimap.getValue(PREFIX_BOOKINGID).get()));"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        return new FindBookingCommand(new BookingIdContainsKeywordsPredicate(bookingId));"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":44,"xuanqi966":5}},{"path":"src/main/java/seedu/address/logic/parser/FindVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindVenueCommand;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new FindVenueCommand object."},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandParser implements Parser\u003cFindVenueCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the FindVenueCommand"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a FindVenueCommand object for execution."},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public FindVenueCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VENUE);"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE)"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_VENUE).isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindVenueCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        String[] nameKeywords \u003d argMultimap.getValue(PREFIX_VENUE).get().split(\" \");"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        return new FindVenueCommand(new VenueNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":44}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    private static final int DEFAULT_CAPACITY \u003d 0;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"     * Parses a {@code String bookingId} into a {@code int}."},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"    public static int parseBookingId(String bookingId) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"        String trimmedIndex \u003d bookingId.trim();"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"        return Integer.parseInt(trimmedIndex);"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String booker} into a {@code String trimmedBooker}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"    public static Person parseBooker(String booker) {"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booker);"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBooker \u003d booker.trim();"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(new Name(trimmedBooker));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String description} into a {@code String description}."},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"    public static String parseDescription(String description) {"},{"lineNumber":116,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(description);"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"        return trimmedDescription;"},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String bookingStart} into a {@code LocalDateTime}."},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"    public static LocalDateTime parseBookingStart(String bookingStart) {"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(bookingStart);"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBookingStart \u003d bookingStart.trim();"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedBookingStart, formatter);"},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"        return dateTime;"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String bookingStart} into a {@code LocalDateTime}."},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"    public static LocalDateTime parseBookingEnd(String bookingEnd) {"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(bookingEnd);"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBookingEnd \u003d bookingEnd.trim();"},{"lineNumber":144,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedBookingEnd, formatter);"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"        return dateTime;"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"     * Parses a {@code String venue} into a {@code Venue}."},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"vvan-essa"},"content":"    public static Venue parseVenue(String venue) throws ParseException {"},{"lineNumber":155,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(venue);"},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"        String trimmedVenue \u003d venue.trim();"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"        return new Venue(trimmedVenue, DEFAULT_CAPACITY);"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"     * Parses a {@code String capacity} into an integer."},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"     *"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"     * @throws NumberFormatException if the given {@code capacity} is invalid."},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"ming-00"},"content":"    public static int parseCapacity(String capacity) {"},{"lineNumber":167,"author":{"gitId":"ming-00"},"content":"        requireNonNull(capacity);"},{"lineNumber":168,"author":{"gitId":"ming-00"},"content":"        String trimmedCapacity \u003d capacity.trim();"},{"lineNumber":169,"author":{"gitId":"ming-00"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"ming-00"},"content":"            return Integer.parseInt(trimmedCapacity);"},{"lineNumber":171,"author":{"gitId":"ming-00"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":172,"author":{"gitId":"ming-00"},"content":"            throw new NumberFormatException();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":176,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"ming-00"},"content":"     * Parses a {@code String name}."},{"lineNumber":178,"author":{"gitId":"ming-00"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":179,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"ming-00"},"content":"    public static String parseVenueName(String name) {"},{"lineNumber":181,"author":{"gitId":"ming-00"},"content":"        requireNonNull(name);"},{"lineNumber":182,"author":{"gitId":"ming-00"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":183,"author":{"gitId":"ming-00"},"content":"        return trimmedName;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ming-00":23,"-":89,"NiniJiaying":48,"vvan-essa":11,"xuanqi966":14}},{"path":"src/main/java/seedu/address/model/BookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.NonOverlappingBookingList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.UniqueVenueList;"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * Wraps all data at the booking-system level"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * Duplicates and overlaps are not allowed (by .isSame/isOverlapping comparison)"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystem implements ReadOnlyBookingSystem {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    private final NonOverlappingBookingList bookings;"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    private final UniqueVenueList venues;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        bookings \u003d new NonOverlappingBookingList();"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        venues \u003d new UniqueVenueList();"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem() {}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"     * Creates an BookingSystem using the Persons in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem(ReadOnlyBookingSystem toBeCopied) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"     * Replaces the contents of the venue list with {@code venues}."},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"     * {@code venues} must not contain duplicate venues."},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"    public void setVenues(List\u003cVenue\u003e venues) {"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"        this.venues.setVenues(venues);"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"     * Resets the existing data of this {@code BookingSystem} with {@code newData}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    public void resetData(ReadOnlyBookingSystem newData) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"        setVenues(newData.getVenueList());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"     * Adds a booking to the address book."},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"     * The booking must not already exist in the address book."},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"    public void addBooking(Booking b) {"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"        bookings.add(b);"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"     * Removes {@code key} from this {@code BookingSystem}."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"     * Removes {@code key} from this {@code BookingSystem}."},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"    public void removeVenue(Venue key) {"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"        venues.remove(key);"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":134,"author":{"gitId":"xuanqi966"},"content":"    //// booking-level operations"},{"lineNumber":135,"author":{"gitId":"xuanqi966"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"     * Removes {@code bookingId} from this {@code BookingSystem}."},{"lineNumber":137,"author":{"gitId":"xuanqi966"},"content":"     * {@code bookingId} must exist in the address book."},{"lineNumber":138,"author":{"gitId":"xuanqi966"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"xuanqi966"},"content":"    public void removeBooking(int bookingId) {"},{"lineNumber":140,"author":{"gitId":"xuanqi966"},"content":"        bookings.removeById(bookingId);"},{"lineNumber":141,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"    public ObservableList\u003cVenue\u003e getVenueList() {"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"        return venues.asUnmodifiableObservableList();"},{"lineNumber":159,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof BookingSystem // instanceof handles nulls"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 persons.equals(((BookingSystem) other).persons));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":173,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":174,"author":{"gitId":"NiniJiaying"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"NiniJiaying"},"content":"    public ObservableList\u003cBooking\u003e getBookingList() {"},{"lineNumber":176,"author":{"gitId":"NiniJiaying"},"content":"        return bookings.asUnmodifiableObservableList();"},{"lineNumber":177,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":179,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":180,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a booking with the same identity as {@code booking} exists in the address book."},{"lineNumber":182,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasBooking(Booking booking) {"},{"lineNumber":184,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);"},{"lineNumber":185,"author":{"gitId":"NiniJiaying"},"content":"        return bookings.contains(booking);"},{"lineNumber":186,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":188,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"ming-00"},"content":"     * Returns true if a venue with the same identity as {@code venue} exists in the system."},{"lineNumber":190,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"ming-00"},"content":"    public boolean hasVenue(Venue venue) {"},{"lineNumber":192,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);"},{"lineNumber":193,"author":{"gitId":"ming-00"},"content":"        return venues.contains(venue);"},{"lineNumber":194,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":196,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"ming-00"},"content":"     * Adds a venue to the system."},{"lineNumber":198,"author":{"gitId":"ming-00"},"content":"     * The venue must not already exist in the system."},{"lineNumber":199,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"ming-00"},"content":"    public void addVenue(Venue v) {"},{"lineNumber":201,"author":{"gitId":"ming-00"},"content":"        venues.add(v);"},{"lineNumber":202,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":13,"ming-00":26,"-":109,"NiniJiaying":30,"vvan-essa":15,"xuanqi966":10}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    void setBookingSystemFilePath(Path bookingSystemFilePath);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * Replaces address book data with the data in {@code bookingSystem}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    void setBookingSystem(ReadOnlyBookingSystem bookingSystem);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    /** Returns the BookingSystem */"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"    ReadOnlyBookingSystem getBookingSystem();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a booking with the same identity as {@code booking} exists in the address book."},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"    boolean hasBooking(Booking booking);"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"     * Deletes the given venue."},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"     * The venue must exist in the system."},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"    void deleteVenue(Venue target);"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"NiniJiaying"},"content":"     * Adds the given booking."},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"     * {@code booking} must not already exist in the address book."},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"    void addBooking(Booking booking);"},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the upcoming booking list */"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getUpcomingBookingList();"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the filtered booking list */"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getFilteredBookingList();"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    /** Returns an unmodifiable view of the filtered venue list */"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"    ObservableList\u003cVenue\u003e getFilteredVenueList();"},{"lineNumber":115,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":121,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"     * Updates the filter of the filtered booking list to filter by the given {@code predicate}."},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"     * Updates the filter of the filtered venue list to filter by the given {@code predicate}."},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"     * @param predicate"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"    void updateFilteredVenueList(VenueNameContainsKeywordsPredicate predicate);"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"     * Returns true if a venue with the same name as {@code venue} exists in the system."},{"lineNumber":138,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":"    boolean hasVenue(Venue venue);"},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"     * Adds the given venue."},{"lineNumber":143,"author":{"gitId":"ming-00"},"content":"     * {@code venue} must not already exist in the system."},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"ming-00"},"content":"    void addVenue(Venue venue);"},{"lineNumber":146,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":147,"author":{"gitId":"xuanqi966"},"content":"    /// logic related to bookings"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"     * Deletes the given booking."},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"     * The booking must exist in the system."},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"xuanqi966"},"content":"    void deleteBooking(int bookingId);"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":12,"ming-00":10,"-":80,"vvan-essa":22,"NiniJiaying":21,"xuanqi966":9}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystem bookingSystem;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    private final FilteredList\u003cBooking\u003e filteredBookings;"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    private final FilteredList\u003cVenue\u003e filteredVenues;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"     * Initializes a ModelManager with the given bookingSystem and userPrefs."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    public ModelManager(ReadOnlyBookingSystem bookingSystem, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(bookingSystem, userPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        logger.fine(\"Initializing with address book: \" + bookingSystem + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem \u003d new BookingSystem(bookingSystem);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.bookingSystem.getPersonList());"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        filteredBookings \u003d new FilteredList\u003c\u003e(this.bookingSystem.getBookingList());"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        filteredVenues \u003d new FilteredList\u003c\u003e(this.bookingSystem.getVenueList());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        this(new BookingSystem(), new UserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        return userPrefs.getBookingSystemFilePath();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystemFilePath(Path bookingSystemFilePath) {"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystemFilePath);"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(bookingSystemFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingSystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystem(ReadOnlyBookingSystem bookingSystem) {"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem.resetData(bookingSystem);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"    public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasPerson(person);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasBooking(Booking booking) {"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasBooking(booking);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removePerson(target);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(person);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"    public void addBooking(Booking booking) {"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addBooking(booking);"},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.setPerson(target, editedPerson);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"ming-00"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":"    public boolean hasVenue(Venue venue) {"},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasVenue(venue);"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"    public void addVenue(Venue venue) {"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addVenue(venue);"},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getUpcomingBookingList() {"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"        return filteredBookings;"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":187,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.equals(other.bookingSystem)"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":189,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 filteredBookings.equals(other.filteredBookings)"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"vvan-essa"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Venue List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":194,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":195,"author":{"gitId":"vvan-essa"},"content":"    public void deleteVenue(Venue target) {"},{"lineNumber":196,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removeVenue(target);"},{"lineNumber":197,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"vvan-essa"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Venue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the list of {@code Venues} backed by the internal list of"},{"lineNumber":203,"author":{"gitId":"vvan-essa"},"content":"     * {@code versionedBookCoinToTheMoon}"},{"lineNumber":204,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":206,"author":{"gitId":"vvan-essa"},"content":"    public ObservableList\u003cVenue\u003e getFilteredVenueList() {"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"        return filteredVenues;"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":211,"author":{"gitId":"vvan-essa"},"content":"    public void updateFilteredVenueList(VenueNameContainsKeywordsPredicate predicate) {"},{"lineNumber":212,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(predicate);"},{"lineNumber":213,"author":{"gitId":"vvan-essa"},"content":"        filteredVenues.setPredicate(predicate);"},{"lineNumber":214,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":216,"author":{"gitId":"xuanqi966"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":217,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":218,"author":{"gitId":"xuanqi966"},"content":"    @Override"},{"lineNumber":219,"author":{"gitId":"xuanqi966"},"content":"    public void deleteBooking(int bookingId) {"},{"lineNumber":220,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removeBooking(bookingId);"},{"lineNumber":221,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":223,"author":{"gitId":"xuanqi966"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Booking List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":224,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":225,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"hojiefeng"},"content":"     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of"},{"lineNumber":227,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}"},{"lineNumber":228,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":230,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getFilteredBookingList() {"},{"lineNumber":231,"author":{"gitId":"hojiefeng"},"content":"        return filteredBookings;"},{"lineNumber":232,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":234,"author":{"gitId":"xuanqi966"},"content":"    @Override"},{"lineNumber":235,"author":{"gitId":"xuanqi966"},"content":"    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"},{"lineNumber":236,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(predicate);"},{"lineNumber":237,"author":{"gitId":"xuanqi966"},"content":"        filteredBookings.setPredicate(predicate);"},{"lineNumber":238,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":49,"ming-00":9,"-":132,"vvan-essa":22,"NiniJiaying":11,"xuanqi966":16}},{"path":"src/main/java/seedu/address/model/ReadOnlyBookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":" * Unmodifiable view of an booking system state"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public interface ReadOnlyBookingSystem {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"     * Returns an unmodifiable view of the bookings list."},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"     * This list will not contain any duplicate bookings."},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    ObservableList\u003cBooking\u003e getBookingList();"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the venues list."},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     * This list will not contain any duplicate venues."},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    ObservableList\u003cVenue\u003e getVenueList();"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":2,"ming-00":1,"-":15,"NiniJiaying":8,"vvan-essa":4}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":15}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    private Path bookingSystemFilePath \u003d Paths.get(\"data\" , \"bookingsystem.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        setBookingSystemFilePath(newUserPrefs.getBookingSystemFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystemFilePath(Path bookingSystemFilePath) {"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystemFilePath);"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystemFilePath \u003d bookingSystemFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 bookingSystemFilePath.equals(o.bookingSystemFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        return Objects.hash(guiSettings, bookingSystemFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        sb.append(\"\\nLocal data file location : \" + bookingSystemFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":10,"-":77}},{"path":"src/main/java/seedu/address/model/booking/Booking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.Random;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" * Represents a booking in the booking list."},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"public class Booking {"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    // Random object used to generate booking id."},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final Random BOOKING_RANDOM \u003d new Random();"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"    // Data fields"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    private final Person booker;"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private final Venue venue;"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    private final String description;"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    private final LocalDateTime bookingStart;"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    private final LocalDateTime bookingEnd;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    private final int id;"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"     * Booking id is provided."},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"    public Booking(Person booker, Venue venue, String description,"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"                   LocalDateTime bookingStart, LocalDateTime bookingEnd, int id) {"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(booker, venue, description, bookingStart, bookingEnd);"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"        this.booker \u003d booker;"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        this.venue \u003d venue;"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        this.description \u003d description;"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        this.bookingStart \u003d bookingStart;"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"        this.bookingEnd \u003d bookingEnd;"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        this.id \u003d id;"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"     * Every field must be present and not null."},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"     * Booking id is not provided."},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    public Booking(Person booker, Venue venue, String description,"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"                   LocalDateTime bookingStart, LocalDateTime bookingEnd) {"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(booker, venue, description, bookingStart, bookingEnd);"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        this.booker \u003d booker;"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        this.venue \u003d venue;"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        this.description \u003d description;"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingStart \u003d bookingStart;"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingEnd \u003d bookingEnd;"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"        this.id \u003d getNewBookingId();"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"    public Person getBooker() {"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        return booker;"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    public Venue getVenue() {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        return venue;"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"    public String getDescription() {"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        return description;"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public LocalDateTime getBookingStart() {"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        return bookingStart;"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"    public LocalDateTime getBookingEnd() {"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"        return bookingEnd;"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"    public int getId() {"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"        return id;"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"    public static int getNewBookingId() {"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        return Math.abs(BOOKING_RANDOM.nextInt());"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings overlap."},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"     * This can be used to test for booking conflicts."},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"    public boolean isOverlapping(seedu.address.model.booking.Booking otherBooking) {"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"        return !this.bookingStart.isBefore(otherBooking.bookingEnd)"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 !this.bookingEnd.isAfter(otherBooking.bookingStart);"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if it is the same id."},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"    public boolean isId(int id) {"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"        return this.id \u003d\u003d id;"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields."},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings."},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof seedu.address.model.booking.Booking)) {"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"        seedu.address.model.booking.Booking otherBooking \u003d (seedu.address.model.booking.Booking) other;"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"        return otherBooking.getBooker().equals(getBooker())"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getVenue().equals(getVenue())"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getDescription().equals(getDescription())"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingStart().equals(getBookingStart())"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingEnd().equals(getBookingEnd());"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if the start time is earlier than the end time."},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isValidTime() {"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"        return this.bookingStart.isBefore(this.bookingEnd);"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"        return Objects.hash(booker, booker, bookingStart, bookingEnd);"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"        builder.append(\" Booker: \")"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"                .append(getBooker().getName())"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Venue: \")"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"                .append(getVenue())"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Description: \")"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"                .append(getDescription())"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Start of booking: \")"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"                .append(getBookingStart())"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; End of booking: \")"},{"lineNumber":156,"author":{"gitId":"xuanqi966"},"content":"                .append(getBookingEnd())"},{"lineNumber":157,"author":{"gitId":"xuanqi966"},"content":"                .append(\"; ID: \")"},{"lineNumber":158,"author":{"gitId":"xuanqi966"},"content":"                .append(getId());"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":126,"NiniJiaying":34,"xuanqi966":3}},{"path":"src/main/java/seedu/address/model/booking/BookingIdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":" * Tests that a {@code Booking}\u0027s {@code Id} matches the keyword given."},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"public class BookingIdContainsKeywordsPredicate implements Predicate\u003cBooking\u003e {"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"    public BookingIdContainsKeywordsPredicate(String keyword) {"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    public boolean test(Booking booking) {"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"        return keyword.equals(String.valueOf(booking.getId()));"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof BookingIdContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 keyword.equals(((BookingIdContainsKeywordsPredicate) other).keyword)); // state check"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":28}},{"path":"src/main/java/seedu/address/model/booking/NonOverlappingBookingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.BookingNotFoundException;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.DuplicateBookingException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.OverlappingBookingException;"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * A list of bookings that enforces that is it non overlapping between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A booking is considered non overlapping by comparing using {@code Booking#isOverlapping(Booking)}."},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * As such, adding and updating of booking uses Booking#isOverlapping(Booking) for checking"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * so as to ensure that the booking being added or updated is non overlapping in terms of booking timing"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * in the NonOverlappingBookingList. However, the removal of a venue uses Venue#equals(Object) so"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" * @see Booking#isOverlapping(Booking)"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"public class NonOverlappingBookingList implements Iterable\u003cBooking\u003e {"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent booking as the given argument."},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Booking toCheck) {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::equals);"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains a booking with the id."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public boolean containsId(int toCheck) {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(x -\u003e x.isId(toCheck));"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an overlapping booking as the given argument."},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public boolean overlaps(Booking toCheck) {"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isOverlapping);"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"     * Adds a booking to the list."},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"     * The booking must not already exist in the list."},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public void add(Booking toAdd) {"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (overlaps(toAdd)) {"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the booking {@code target} in the list with {@code editedBooking}."},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list."},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * The booking data of {@code editedPerson} must not be the same and not be overlapping"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     * as another existing booking in the list."},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    public void setBooking(Booking target, Booking editedBooking) {"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedBooking);"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        if (!target.equals(editedBooking) \u0026\u0026 contains(editedBooking)) {"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isOverlapping(editedBooking) \u0026\u0026 overlaps(editedBooking)) {"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedBooking);"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent booking from the list."},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"     * The booking must exist in the list."},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Booking toRemove) {"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":106,"author":{"gitId":"xuanqi966"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"xuanqi966"},"content":"     * Removes the equivalent booking from the list by bookingId."},{"lineNumber":108,"author":{"gitId":"xuanqi966"},"content":"     * The booking must exist in the list."},{"lineNumber":109,"author":{"gitId":"xuanqi966"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"xuanqi966"},"content":"    public void removeById(int bookingId) {"},{"lineNumber":111,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(bookingId);"},{"lineNumber":112,"author":{"gitId":"xuanqi966"},"content":"        internalList.removeIf(x -\u003e x.isId(bookingId));"},{"lineNumber":113,"author":{"gitId":"xuanqi966"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"    public void setBookings(NonOverlappingBookingList replacement) {"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code bookings}."},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"     * {@code bookings} must not contain duplicate persons."},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"    public void setPersons(List\u003cBooking\u003e bookings) {"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(bookings);"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        if (!bookingsAreNonOverlapping(bookings)) {"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(bookings);"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cBooking\u003e iterator() {"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":148,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof NonOverlappingBookingList // instanceof handles nulls"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((NonOverlappingBookingList) other).internalList));"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code bookings} contains only unique bookings."},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"    private boolean bookingsAreNonOverlapping(List\u003cBooking\u003e bookings) {"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"                if (bookings.get(i).isOverlapping(bookings.get(j))) {"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"                    return false;"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"                }"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"hojiefeng"},"content":"        return true;"},{"lineNumber":169,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":161,"xuanqi966":9}},{"path":"src/main/java/seedu/address/model/booking/VenueNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Tests that a {@code Venue}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class VenueNameContainsKeywordsPredicate implements Predicate\u003cVenue\u003e {"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    public VenueNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    public boolean test(Venue venue) {"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(venue.getName(), keyword));"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof VenueNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 keywords.equals(((VenueNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":32}},{"path":"src/main/java/seedu/address/model/booking/exceptions/BookingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified booking."},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class BookingNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"hojiefeng":6}},{"path":"src/main/java/seedu/address/model/booking/exceptions/DuplicateBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Bookings"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * (Bookings are considered duplicates if they have the same data)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateBookingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateBookingException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate bookings\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/address/model/booking/exceptions/OverlappingBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in overlapping Bookings (Bookings are considered overlaps if their booking"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * timing overlaps)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class OverlappingBookingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public OverlappingBookingException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in overlapping bookings\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":" * Represents a Person\u0027s name in the booking system."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":58}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public Person(Name name, Phone phone, Email email) {"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(name, phone, email);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"     * Only name is available."},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    public Person(Name name) {"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(name);"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        this.phone \u003d null;"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        this.email \u003d null;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"        return Objects.hash(name, phone, email);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"                .append(getEmail());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":88,"NiniJiaying":13}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":" * Represents a Person\u0027s phone number in the booking system."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":52}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * Contains utility methods for populating {@code BookingSystem} with sample data."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\")),"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\")),"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\")),"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\")),"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\")),"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"))"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    public static ReadOnlyBookingSystem getSampleBookingSystem() {"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem sampleAb \u003d new BookingSystem();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":5,"-":23,"NiniJiaying":6}},{"path":"src/main/java/seedu/address/model/venue/UniqueVenueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.exceptions.DuplicateVenueException;"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.exceptions.VenueNotFoundException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * A list of venues that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A venue is considered unique by comparing using {@code Venue#isSameVenue(Venue)}. As such, adding and updating of"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * venues uses Venue#isSameVenue(Venue) for equality so as to ensure that the venue being added or updated is"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * unique in terms of identity in the UniqueVenueList. However, the removal of a venue uses Venue#equals(Object) so"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed."},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" * @see Venue#isSameVenue(Venue)"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"public class UniqueVenueList implements Iterable\u003cVenue\u003e {"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalUnmodifiableList \u003d"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent venue as the given argument."},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Venue toCheck) {"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isSameVenue);"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     * Adds a venue to the list."},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * The venue must not already exist in the list."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public void add(Venue toAdd) {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the venue {@code target} in the list with {@code editedVenue}."},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the list."},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"    public void setVenue(Venue target, Venue editedVenue) {"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedVenue);"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isSameVenue(editedVenue) \u0026\u0026 contains(editedVenue)) {"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedVenue);"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent venue from the list."},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * The venue must exist in the list."},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Venue toRemove) {"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"        if (!containsName(internalList, toRemove)) {"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"            if (!(internalList.get(i).getName().equals(toRemove.getName()))) {"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"                continue;"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"            internalList.remove(i);"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if the list contains a venue with an equivalent name as the given venue."},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"     * @param list of venues in the system."},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"     * @param venue to be checked against the list."},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"     * @return true if the name of the given venue is found in the list."},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"    public boolean containsName(ObservableList\u003cVenue\u003e list, Venue venue) {"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"        return list.stream().anyMatch(x -\u003e x.getName().equals(venue.getName()));"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(UniqueVenueList replacement) {"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code venues}."},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"     * {@code Venue} must not contain duplicate venues."},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(List\u003cVenue\u003e venues) {"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(venues);"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"        if (!venuesAreUnique(venues)) {"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(venues);"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cVenue\u003e asUnmodifiableObservableList() {"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cVenue\u003e iterator() {"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof UniqueVenueList // instanceof handles nulls"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((UniqueVenueList) other).internalList));"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code venues} contains only unique venues."},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"    private boolean venuesAreUnique(List\u003cVenue\u003e venues) {"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c venues.size() - 1; i++) {"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c venues.size(); j++) {"},{"lineNumber":148,"author":{"gitId":"hojiefeng"},"content":"                if (venues.get(i).isSameVenue(venues.get(j))) {"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"                    return false;"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"                }"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"        return true;"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":134,"ming-00":3,"vvan-essa":18}},{"path":"src/main/java/seedu/address/model/venue/Venue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":" * Represents a venue in the booking list."},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public class Venue {"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    // Data fields"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    private final String name;"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private final int capacity;"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null."},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    public Venue(String name, int capacity) {"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"        requireAllNonNull(name, capacity);"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"        if (capacity \u003c\u003d -1) {"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"            throw new IllegalArgumentException(\"Capacity cannot be 0 or less.\");"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    public String getName() {"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        return name;"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    public int getCapacity() {"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        return capacity;"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both venues have the same name"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"     * This defines a weaker notion of equality between two venues."},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    public boolean isSameVenue(Venue otherVenue) {"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"        if (otherVenue \u003d\u003d this) {"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        return otherVenue !\u003d null \u0026\u0026 this.name.equals(otherVenue.name);"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields."},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings."},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof Venue)) {"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        Venue otherBooking \u003d (Venue) other;"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        return otherBooking.getName().equals(getName())"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getCapacity() \u003d\u003d getCapacity();"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        return Objects.hash(name, capacity);"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"        builder.append(\"Name: \")"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"                .append(getName());"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":"        int capacity \u003d getCapacity();"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"        if (capacity !\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"            builder.append(\"; Capacity: \")"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"                    .append(getCapacity());"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":74,"ming-00":12,"vvan-essa":2}},{"path":"src/main/java/seedu/address/model/venue/exceptions/DuplicateVenueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Venues (Venues are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * data)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateVenueException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateVenueException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate venues\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":10,"ming-00":1}},{"path":"src/main/java/seedu/address/model/venue/exceptions/VenueNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified venue."},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class VenueNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"hojiefeng":5,"ming-00":1}},{"path":"src/main/java/seedu/address/storage/BookingSystemStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" * Represents a storage for {@link BookingSystem}."},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"public interface BookingSystemStorage {"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     * Returns BookingSystem data as a {@link ReadOnlyBookingSystem}."},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"     * @see #getBookingSystemFilePath()"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     * Saves the given {@link ReadOnlyBookingSystem} to the storage."},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"     * @param bookingSystem cannot be null."},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException;"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * @see #saveBookingSystem(ReadOnlyBookingSystem)"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":46}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedBooking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"public class JsonAdaptedBooking {"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    private final String booker;"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    private final String venue;"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    private final String description;"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookingStart;"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookingEnd;"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    private final String id;"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs a {@code JsonAdaptedBooking} with the given booking details."},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    public JsonAdaptedBooking(@JsonProperty(\"booker\") String booker, @JsonProperty(\"venue\") String venue,"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"          @JsonProperty(\"description\") String description, @JsonProperty(\"bookingStart\") String bookingStart,"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"          @JsonProperty(\"bookingEnd\") String bookingEnd, @JsonProperty(\"id\") String id) {"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        this.booker \u003d booker;"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        this.venue \u003d venue;"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        this.description \u003d description;"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingStart \u003d bookingStart;"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingEnd \u003d bookingEnd;"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"        this.id \u003d id;"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"     * Converts a given {@code Booking} into this class for Jackson use."},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    public JsonAdaptedBooking(Booking source) {"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"        booker \u003d source.getBooker().getName().fullName;"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"        venue \u003d source.getVenue().getName();"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"        description \u003d source.getDescription();"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"        bookingStart \u003d source.getBookingStart().toString();"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        bookingEnd \u003d source.getBookingEnd().toString();"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        id \u003d String.valueOf(source.getId());"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"     * Converts this Jackson-friendly adapted booking object into the model\u0027s {@code Booking} object."},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted booking."},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"    public Booking toModelType() throws IllegalValueException {"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"        if (booker \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"        final Person modelBooker \u003d new Person(new Name(booker));"},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"        if (venue \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"        final Venue modelVenue \u003d new Venue(venue, 100);"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"        final String modelDescription \u003d description;"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"        if (bookingStart \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"                    LocalDateTime.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"        //Build formatter"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ISO_DATE_TIME;"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"        //Parse String to LocalDateTime"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"        final LocalDateTime modelBookingStart \u003d LocalDateTime.parse(bookingStart, formatter);"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"        if (bookingEnd \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"                    LocalDateTime.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"        //Parse String to LocalDateTime"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"        final LocalDateTime modelBookingEnd \u003d LocalDateTime.parse(bookingEnd, formatter);"},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"        if (id \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        final int modelId \u003d Integer.parseInt(id);"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"        return new Booking(modelBooker, modelVenue, modelDescription, modelBookingStart, modelBookingEnd, modelId);"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"}"}],"authorContributionMap":{"NiniJiaying":106}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            @JsonProperty(\"email\") String email) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(modelName, modelPhone, modelEmail);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":75,"NiniJiaying":4}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedVenue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"public class JsonAdaptedVenue {"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Venue\u0027s %s field is missing!\";"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"    private final String name;"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"    private final String capacity;"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"     * Constructs a {@code JsonAdaptedVenue} with the given venue details."},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    @JsonCreator"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"    public JsonAdaptedVenue(@JsonProperty(\"name\") String name, @JsonProperty(\"capacity\") String capacity) {"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"        this.name \u003d name;"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"     * Converts a given {@code Venue} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    public JsonAdaptedVenue(Venue source) {"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"        name \u003d source.getName();"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"        capacity \u003d String.valueOf(source.getCapacity());"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"     * Converts this Jackson-friendly adapted venue object into the model\u0027s {@code Venue} object."},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted venue."},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"    public Venue toModelType() throws IllegalValueException {"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"        // needs to be changed after implementation of classes for each of the attributes"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        final String modelName \u003d name;"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        if (capacity \u003d\u003d null) {"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"        final int modelCapacity \u003d Integer.parseInt(capacity);"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"        if (modelCapacity \u003c 1) {"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"        return new Venue(modelName, modelCapacity);"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"ming-00":59}},{"path":"src/main/java/seedu/address/storage/JsonBookingSystemStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * A class to access BookingSystem data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"public class JsonBookingSystemStorage implements BookingSystemStorage {"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookingSystemStorage.class);"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public JsonBookingSystemStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        return readBookingSystem(filePath);"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"     * Similar to {@link #readBookingSystem()}."},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        Optional\u003cJsonSerializableBookingSystem\u003e jsonBookingSystem \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"                filePath, JsonSerializableBookingSystem.class);"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"        if (!jsonBookingSystem.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"            return Optional.of(jsonBookingSystem.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException {"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        saveBookingSystem(bookingSystem, filePath);"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"     * Similar to {@link #saveBookingSystem(ReadOnlyBookingSystem)}."},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystem);"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableBookingSystem(bookingSystem), filePath);"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":80}},{"path":"src/main/java/seedu/address/storage/JsonSerializableBookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * An Immutable BookingSystem that is serializable to JSON format."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"@JsonRootName(value \u003d \"bookingsystem\")"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"class JsonSerializableBookingSystem {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"Venues list contains duplicate venue(s).\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    private final List\u003cJsonAdaptedVenue\u003e venues \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"     * Constructs a {@code JsonSerializableBookingSystem} with the given persons."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    public JsonSerializableBookingSystem(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"                                         @JsonProperty(\"venues\") List\u003cJsonAdaptedVenue\u003e venues) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"        this.venues.addAll(venues);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"     * Converts a given {@code ReadOnlyBookingSystem} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableBookingSystem}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public JsonSerializableBookingSystem(ReadOnlyBookingSystem source) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        venues.addAll(source.getVenueList().stream().map(JsonAdaptedVenue::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"     * Converts this booking system into the model\u0027s {@code BookingSystem} object."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem bookingSystem \u003d new BookingSystem();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"            if (bookingSystem.hasPerson(person)) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"            bookingSystem.addPerson(person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"        for (JsonAdaptedVenue jsonAdaptedVenue : venues) {"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"            Venue venue \u003d jsonAdaptedVenue.toModelType();"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            if (bookingSystem.hasVenue(venue)) {"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_VENUE);"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"            bookingSystem.addVenue(venue);"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":18,"ming-00":12,"-":44}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"public interface Storage extends BookingSystemStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":5,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Manages storage of BookingSystem data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"    private BookingSystemStorage bookingSystemStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code StorageManager} with the given {@code BookingSystemStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public StorageManager(BookingSystemStorage bookingSystemStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystemStorage \u003d bookingSystemStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingSystem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemStorage.getBookingSystemFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        return readBookingSystem(bookingSystemStorage.getBookingSystemFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath)"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemStorage.readBookingSystem(filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException {"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        saveBookingSystem(bookingSystem, bookingSystemStorage.getBookingSystemFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        bookingSystemStorage.saveBookingSystem(bookingSystem, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":18,"-":62}},{"path":"src/main/java/seedu/address/ui/BookingCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"public class BookingCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"BookingListCard.fxml\";"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    public final Booking booking;"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    private HBox bookingCardPane;"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    private Label title;"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    private Label booker;"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    private Label time;"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    private Label description;"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code BookingCard} with the given {@code Booking} and index to display."},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    public BookingCard(Booking booking, int displayedIndex) {"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"        this.booking \u003d booking;"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        title.setText(booking.getDescription());"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        booker.setText(booking.getBooker().getName().fullName);"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        time.setText(booking.getBookingStart().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        description.setText(booking.getDescription());"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        /* person.getTags().stream()"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName))); */"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        // instanceof handles nulls"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof BookingCard)) {"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        // state check"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        BookingCard card \u003d (BookingCard) other;"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 booking.equals(card.booking);"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":77,"NiniJiaying":1}},{"path":"src/main/java/seedu/address/ui/BookingListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Panel containing the list of persons."},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"public class BookingListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"BookingListPanel.fxml\";"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(BookingListPanel.class);"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private ListView\u003cBooking\u003e bookingListView;"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    public BookingListPanel(ObservableList\u003cBooking\u003e bookingList) {"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        bookingListView.setItems(bookingList);"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        bookingListView.setCellFactory(listView -\u003e new BookingListViewCell());"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    class BookingListViewCell extends ListCell\u003cBooking\u003e {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        @Override"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        protected void updateItem(Booking booking, boolean empty) {"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            super.updateItem(booking, empty);"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"            if (empty || booking \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(null);"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"                setText(null);"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            } else {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":50}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    private BookingListPanel upcomingBookingListPanel;"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    private VenueListPanel venueListPanel;"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    private BookingListPanel bookingListPanel;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    private StackPane upcomingBookingListPanelPlaceholder;"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    private StackPane resultListPanelPlaceholder;"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":105,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":109,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"        upcomingBookingListPanel \u003d new BookingListPanel(logic.getUpcomingBookingList());"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"        upcomingBookingListPanelPlaceholder.getChildren().add(upcomingBookingListPanel.getRoot());"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        venueListPanel \u003d new VenueListPanel(logic.getFilteredVenueList());"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        resultListPanelPlaceholder.getChildren().removeAll();"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"        resultListPanelPlaceholder.getChildren().add(venueListPanel.getRoot());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBookingSystemFilePath());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"hojiefeng"},"content":"    private String getCommandType(String commandText) {"},{"lineNumber":188,"author":{"gitId":"hojiefeng"},"content":"        String command \u003d commandText.split(\" \")[0];"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"        if (command.contains(\"_\")) {"},{"lineNumber":190,"author":{"gitId":"hojiefeng"},"content":"            return command.split(\"_\")[1];"},{"lineNumber":191,"author":{"gitId":"hojiefeng"},"content":"        } else {"},{"lineNumber":192,"author":{"gitId":"hojiefeng"},"content":"            return \"\";"},{"lineNumber":193,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":196,"author":{"gitId":"hojiefeng"},"content":"    private void displayList(String commandType) {"},{"lineNumber":197,"author":{"gitId":"hojiefeng"},"content":"        if (commandType.equals(\"booking\")) {"},{"lineNumber":198,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(bookingListPanel.getRoot());"},{"lineNumber":199,"author":{"gitId":"hojiefeng"},"content":"        } else if (commandType.equals(\"venue\")) {"},{"lineNumber":200,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(venueListPanel.getRoot());"},{"lineNumber":201,"author":{"gitId":"hojiefeng"},"content":"        } else if (commandType.equals(\"person\")) {"},{"lineNumber":202,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":203,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":212,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":217,"author":{"gitId":"hojiefeng"},"content":"            displayList(getCommandType(commandText));"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":40,"-":194}},{"path":"src/main/java/seedu/address/ui/VenueCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class VenueCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"VenueListCard.fxml\";"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    public final Venue venue;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private HBox bookingCardPane;"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    private Label description;"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    private Label capacity;"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    private FlowPane tags;"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code BookingCard} with the given {@code Booking} and index to display."},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    public VenueCard(Venue venue, int displayedIndex) {"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        this.venue \u003d venue;"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        name.setText(venue.getName());"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        capacity.setText(String.valueOf(venue.getCapacity()));"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        /* person.getTags().stream()"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName))); */"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        // short circuit if same object"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        // instanceof handles nulls"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof VenueCard)) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        // state check"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        VenueCard card \u003d (VenueCard) other;"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 venue.equals(card.venue);"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":70,"NiniJiaying":1}},{"path":"src/main/java/seedu/address/ui/VenueListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Panel containing the list of persons."},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"public class VenueListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"VenueListPanel.fxml\";"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(VenueListPanel.class);"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private ListView\u003cVenue\u003e venueListView;"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    public VenueListPanel(ObservableList\u003cVenue\u003e bookingList) {"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        venueListView.setItems(bookingList);"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        venueListView.setCellFactory(listView -\u003e new VenueListViewCell());"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    class VenueListViewCell extends ListCell\u003cVenue\u003e {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        @Override"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        protected void updateItem(Venue venue, boolean empty) {"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            super.updateItem(venue, empty);"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"            if (empty || venue \u003d\u003d null) {"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(null);"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"                setText(null);"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            } else {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(new VenueCard(venue, getIndex() + 1).getRoot());"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":49,"NiniJiaying":1}},{"path":"src/main/resources/view/BookingListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"\u003cHBox id\u003d\"bookingCardPane\" fx:id\u003d\"bookingCardPane\" styleClass\u003d\"card-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"booker\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$booker\" /\u003e"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"hojiefeng":36}},{"path":"src/main/resources/view/BookingListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"  \u003cListView fx:id\u003d\"bookingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"hojiefeng":2,"-":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"    background-color: #868686; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    -fx-base: #868686;"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    -fx-control-inner-background: #868686;"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":".cell_title_label {"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"    -fx-font-size: 24px;"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"}"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #868686;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #868686;"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-color: #868686;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-radius: 5px;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":".pane-with-border-light {"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #c4c4c4;"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-color: #c4c4c4;"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-radius: 20px;"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"}"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":".cell-pane {"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-radius: 5px;"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"    -fx-margin-bottom: 10px;"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"}"},{"lineNumber":165,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":188,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-color: #868686;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":198,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":199,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-color: #868686;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":208,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":216,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":233,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":234,"author":{"gitId":"-"},"content":" */"},{"lineNumber":235,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":240,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":305,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"hojiefeng"},"content":"#commandBox {"},{"lineNumber":336,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;"},{"lineNumber":337,"author":{"gitId":"hojiefeng"},"content":"}"},{"lineNumber":338,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":345,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"hojiefeng"},"content":"#commandTitle {"},{"lineNumber":355,"author":{"gitId":"hojiefeng"},"content":"    -fx-display: block;"},{"lineNumber":356,"author":{"gitId":"hojiefeng"},"content":"    -fx-padding: 0 0 30 0;"},{"lineNumber":357,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":358,"author":{"gitId":"hojiefeng"},"content":"}"},{"lineNumber":359,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":360,"author":{"gitId":"hojiefeng"},"content":"TextField {"},{"lineNumber":361,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":362,"author":{"gitId":"hojiefeng"},"content":"    -fx-text-box-border: transparent;"},{"lineNumber":363,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":385,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":56,"-":329}},{"path":"src/main/resources/view/FavoriteVenueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"\u003cPane fx:id\u003d\"favoriteVenueListView\" id\u003d\"favoriteVenueListView\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"   \u003ccolumnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"   \u003c/columnConstraints\u003e"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"   \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"         \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"         \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003cminWidth\u003e"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"               \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"               \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"            \u003c/minWidth\u003e"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"         \u003c/Label\u003e"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"         \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"booker\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$booker\" /\u003e"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"   \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"\u003c/Pane\u003e"}],"authorContributionMap":{"hojiefeng":36}},{"path":"src/main/resources/view/FavoriteVenueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.TilePane?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003cTilePane fx:id\u003d\"favoriteVenueListPanel\" id\u003d\"favoriteVenueListPanel\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/TilePane\u003e"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"         title\u003d\"Booking App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"      \u003cVBox styleClass\u003d\"background\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        \u003cVBox\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"            \u003cInsets top\u003d\"30\" right\u003d\"20\" bottom\u003d\"15\" left\u003d\"20\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"          \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_title_label\" text\u003d\"Good Day! Here are the upcoming bookings:\" /\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"upcomingBookingList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"upcomingBookingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"favorite\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"            \u003cLabel fx:id\u003d\"favoritePlaceholder\" styleClass\u003d\"cell_title_label\" text\u003d\"Status of favorite venues:\" /\u003e"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"favoriteVenueListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox style\u003d\"-fx-background-color: #c4c4c4;\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"            \u003cLabel fx:id\u003d\"commandTitle\" id\u003d\"commandTitle\" styleClass\u003d\"cell_title_label\" text\u003d\"How can I help you?\" /\u003e"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\"\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"                     minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"resultList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"resultListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"          \u003c!--\u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e--\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"hojiefeng":33,"-":60}},{"path":"src/main/resources/view/VenueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"\u003cHBox id\u003d\"venueCardPane\" fx:id\u003d\"bookingCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    \u003c/VBox\u003e"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"hojiefeng":35}},{"path":"src/main/resources/view/VenueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"  \u003cListView fx:id\u003d\"venueListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/test/data/JsonBookingSystemStorageTest/invalidAndValidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":9,"NiniJiaying":2}},{"path":"src/test/data/JsonBookingSystemStorageTest/invalidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":6,"NiniJiaying":1}},{"path":"src/test/data/JsonSerializableBookingSystemTest/duplicatePersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"alice@example.com\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"pauline@example.com\""},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"  } ],"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"  \"venues\": []"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ming-00":2,"-":8,"NiniJiaying":2}},{"path":"src/test/data/JsonSerializableBookingSystemTest/invalidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"invalid@email!3e\""},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"  } ],"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"  \"venues\": []"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ming-00":2,"-":5,"NiniJiaying":1}},{"path":"src/test/data/JsonSerializableBookingSystemTest/typicalPersonsBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"  \"_comment\": \"BookingSystem save file which contains the same Person values as in TypicalPersons#getTypicalBookingSystem()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"alice@example.com\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"johnd@example.com\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"heinz@example.com\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"cornelia@example.com\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"werner@example.com\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"lydia@example.com\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"anna@example.com\""},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"  } ],"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"  \"venues\" : []"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"ming-00":2,"-":23,"NiniJiaying":7}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"  \"bookingSystemFilePath\" : \"bookingsystem.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"  \"bookingSystemFilePath\" : \"bookingsystem.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":10}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.storage.JsonBookingSystemStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"                new JsonBookingSystemStorage(temporaryFolder.resolve(\"bookingSystem.json\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        StorageManager storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"                new JsonBookingSystemIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBookingSystem.json\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        StorageManager storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"    private static class JsonBookingSystemIoExceptionThrowingStub extends JsonBookingSystemStorage {"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"        private JsonBookingSystemIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"        public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":12,"-":146,"NiniJiaying":2}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        Person personInList \u003d model.getBookingSystem().getPersonList().get(0);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":4,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"        public Path getBookingSystemFilePath() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystemFilePath(Path bookingSystemFilePath) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"        public void addBooking(Booking booking) {"},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystem(ReadOnlyBookingSystem newData) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasBooking(Booking booking) {"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"        public void deleteVenue(Venue target) {"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {"},{"lineNumber":166,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"hojiefeng"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getUpcomingBookingList() {"},{"lineNumber":176,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":179,"author":{"gitId":"hojiefeng"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getFilteredBookingList() {"},{"lineNumber":181,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":184,"author":{"gitId":"vvan-essa"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cVenue\u003e getFilteredVenueList() {"},{"lineNumber":186,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":194,"author":{"gitId":"xuanqi966"},"content":"        @Override"},{"lineNumber":195,"author":{"gitId":"xuanqi966"},"content":"        public void deleteBooking(int bookingId) {"},{"lineNumber":196,"author":{"gitId":"xuanqi966"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitId":"xuanqi966"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":199,"author":{"gitId":"xuanqi966"},"content":""},{"lineNumber":200,"author":{"gitId":"NiniJiaying"},"content":"        @Override"},{"lineNumber":201,"author":{"gitId":"NiniJiaying"},"content":"        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"},{"lineNumber":202,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":203,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":205,"author":{"gitId":"vvan-essa"},"content":"        @Override"},{"lineNumber":206,"author":{"gitId":"vvan-essa"},"content":"        public void updateFilteredVenueList(VenueNameContainsKeywordsPredicate predicate) {"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":248,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":249,"author":{"gitId":"hojiefeng"},"content":"            return new BookingSystem();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":18,"ming-00":11,"-":187,"vvan-essa":15,"NiniJiaying":14,"xuanqi966":8}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    public void execute_emptyBookingSystem_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        expectedModel.setBookingSystem(new BookingSystem());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":6,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_NAME_HALL \u003d \"Victoria Hall\";"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_NAME_FIELD \u003d \"Town Green\";"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"    public static final int VALID_VENUE_CAPACITY_HALL \u003d 50;"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"    public static final int VALID_VENUE_CAPACITY_FIELD \u003d 60;"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_NAME_DESC_HALL \u003d \" \" + PREFIX_NAME + VALID_VENUE_NAME_HALL;"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_NAME_DESC_FIELD \u003d \" \" + PREFIX_NAME + VALID_VENUE_NAME_FIELD;"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_CAPACITY_DESC_HALL \u003d \" \" + PREFIX_CAPACITY + VALID_VENUE_CAPACITY_HALL;"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_CAPACITY_DESC_FIELD \u003d \" \" + PREFIX_CAPACITY + VALID_VENUE_CAPACITY_FIELD;"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"    // non-numerics not allowed"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"    public static final String INVALID_VENUE_CAPACITY_DESC \u003d \" \" + PREFIX_CAPACITY + \"911a\";"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"    // capacity cannot be negative"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"    public static final String INVALID_VENUE_CAPACITY_DESC2 \u003d \" \" + PREFIX_CAPACITY + \"-2\";"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem expectedBookingSystem \u003d new BookingSystem(actualModel.getBookingSystem());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(expectedBookingSystem, actualModel.getBookingSystem());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":3,"ming-00":16,"-":121,"NiniJiaying":2}},{"path":"src/test/java/seedu/address/logic/commands/CreateVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"import seedu.address.testutil.VenueBuilder;"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandTest {"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"    public void constructor_nullVenue_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CreateVenueCommand(null));"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    public void execute_venueAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"        ModelStubAcceptingVenueAdded modelStub \u003d new ModelStubAcceptingVenueAdded();"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"        Venue validVenue \u003d new VenueBuilder().build();"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        CommandResult commandResult \u003d new CreateVenueCommand(validVenue).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        assertEquals(String.format(CreateVenueCommand.MESSAGE_SUCCESS, validVenue), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        assertEquals(Arrays.asList(validVenue), modelStub.venuesAdded);"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"    public void execute_duplicateVenue_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"        Venue validVenue \u003d new VenueBuilder().build();"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        CreateVenueCommand createVenueCommand \u003d new CreateVenueCommand(validVenue);"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"        ModelStub modelStub \u003d new ModelStubWithVenue(validVenue);"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(CommandException.class, createVenueCommand.MESSAGE_DUPLICATE_VENUE, ()"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"            -\u003e createVenueCommand.execute(modelStub));"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"        Venue hall \u003d new VenueBuilder().withName(\"Victoria Hall\").build();"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"        Venue field \u003d new VenueBuilder().withName(\"Town Green\").build();"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addHallCommand \u003d new CreateVenueCommand(hall);"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addFieldCommand \u003d new CreateVenueCommand(field);"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"        // same object -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"        assertTrue(addHallCommand.equals(addHallCommand));"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"        // same values -\u003e returns true"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addHallCommandCopy \u003d new CreateVenueCommand(hall);"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"        assertTrue(addHallCommand.equals(addHallCommandCopy));"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"        // different types -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(1));"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(null));"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"        // different person -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(addFieldCommand));"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"    private class ModelStub implements Model {"},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":90,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":97,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":98,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":100,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":101,"author":{"gitId":"ming-00"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":102,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":105,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"        public Path getBookingSystemFilePath() {"},{"lineNumber":107,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":110,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystemFilePath(Path bookingSystemFilePath) {"},{"lineNumber":112,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":115,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":116,"author":{"gitId":"ming-00"},"content":"        public void addPerson(Person person) {"},{"lineNumber":117,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":120,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":121,"author":{"gitId":"ming-00"},"content":"        public void addBooking(Booking booking) {"},{"lineNumber":122,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":123,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":125,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystem(ReadOnlyBookingSystem newData) {"},{"lineNumber":127,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":130,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":132,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":135,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"        public boolean hasBooking(Booking booking) {"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"            return false;"},{"lineNumber":143,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":145,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":146,"author":{"gitId":"ming-00"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":147,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":150,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":151,"author":{"gitId":"ming-00"},"content":"        public void deleteVenue(Venue target) {"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":155,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":156,"author":{"gitId":"ming-00"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":157,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":166,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {"},{"lineNumber":167,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":170,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":171,"author":{"gitId":"ming-00"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":172,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":175,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":176,"author":{"gitId":"ming-00"},"content":"        public ObservableList\u003cVenue\u003e getFilteredVenueList() {"},{"lineNumber":177,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":180,"author":{"gitId":"hojiefeng"},"content":"        @Override"},{"lineNumber":181,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getUpcomingBookingList() {"},{"lineNumber":182,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"        @Override"},{"lineNumber":186,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cBooking\u003e getFilteredBookingList() {"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":190,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":191,"author":{"gitId":"ming-00"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":192,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":195,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":196,"author":{"gitId":"ming-00"},"content":"        public void deleteBooking(int bookingId) {"},{"lineNumber":197,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":200,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":201,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":202,"author":{"gitId":"ming-00"},"content":"        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {"},{"lineNumber":203,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":204,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":206,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"        public void updateFilteredVenueList(VenueNameContainsKeywordsPredicate predicate) {"},{"lineNumber":208,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":209,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":212,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"ming-00"},"content":"     * A Model stub that contains a single venue."},{"lineNumber":214,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"ming-00"},"content":"    private class ModelStubWithVenue extends ModelStub {"},{"lineNumber":216,"author":{"gitId":"ming-00"},"content":"        private final Venue venue;"},{"lineNumber":217,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":218,"author":{"gitId":"ming-00"},"content":"        ModelStubWithVenue(Venue venue) {"},{"lineNumber":219,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);"},{"lineNumber":220,"author":{"gitId":"ming-00"},"content":"            this.venue \u003d venue;"},{"lineNumber":221,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":223,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":224,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {"},{"lineNumber":225,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);"},{"lineNumber":226,"author":{"gitId":"ming-00"},"content":"            return this.venue.isSameVenue(venue);"},{"lineNumber":227,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":230,"author":{"gitId":"ming-00"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"ming-00"},"content":"     * A Model stub that always accept the venue being added."},{"lineNumber":232,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"ming-00"},"content":"    private class ModelStubAcceptingVenueAdded extends ModelStub {"},{"lineNumber":234,"author":{"gitId":"ming-00"},"content":"        final ArrayList\u003cVenue\u003e venuesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":235,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":236,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":237,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {"},{"lineNumber":238,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);"},{"lineNumber":239,"author":{"gitId":"ming-00"},"content":"            return venuesAdded.stream().anyMatch(venue::isSameVenue);"},{"lineNumber":240,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":242,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":243,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {"},{"lineNumber":244,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);"},{"lineNumber":245,"author":{"gitId":"ming-00"},"content":"            venuesAdded.add(venue);"},{"lineNumber":246,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":248,"author":{"gitId":"ming-00"},"content":"        @Override"},{"lineNumber":249,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {"},{"lineNumber":250,"author":{"gitId":"hojiefeng"},"content":"            return new BookingSystem();"},{"lineNumber":251,"author":{"gitId":"ming-00"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":254,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"hojiefeng":13,"ming-00":224,"vvan-essa":10,"NiniJiaying":7}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookingSystem().getPersonList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":5,"-":104}},{"path":"src/test/java/seedu/address/logic/commands/DeleteVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE5;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":" * {@code DeleteVenueCommand}."},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandTest {"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"    /*"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        //remove this after we create a stub"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        Venue venueToDelete \u003d model.getFilteredVenueList().get(INDEX_FIRST_VENUE.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteVenueCommand \u003d new DeleteVenueCommand(VENUE1);"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(DeleteVenueCommand.MESSAGE_DELETE_VENUE_SUCCESS,"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"                venueToDelete.getName());"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        //remove this after we create a stub"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.addVenue(VENUE1);"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.deleteVenue(venueToDelete);"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(deleteVenueCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    public void execute_invalidVenueUnfilteredList_throwsCommandException() {"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        Venue venueNotInSystem \u003d VENUE2;"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteVenueCommand \u003d new DeleteVenueCommand(venueNotInSystem);"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(deleteVenueCommand, model, Messages.MESSAGE_INVALID_VENUE_NAME);"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteFirstCommand \u003d new DeleteVenueCommand(VENUE1);"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteSecondCommand \u003d new DeleteVenueCommand(VENUE2);"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteFirstCommandCopy \u003d new DeleteVenueCommand(VENUE5);"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"}"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":""}],"authorContributionMap":{"hojiefeng":2,"ming-00":2,"vvan-essa":74}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"        Person personInList \u003d model.getBookingSystem().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookingSystem().getPersonList().size());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":8,"-":143}},{"path":"src/test/java/seedu/address/logic/commands/FindBookingCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_BOOKING_DISPLAYED;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.BookingIdContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) for {@code FindBookingCommand}."},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandTest {"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(\"1\");"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(\"2\");"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findFirstCommand \u003d new FindBookingCommand(firstPredicate);"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findSecondCommand \u003d new FindBookingCommand(secondPredicate);"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findFirstCommandCopy \u003d new FindBookingCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        // different bookings -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(MESSAGE_BOOKING_DISPLAYED, 0);"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand command \u003d new FindBookingCommand(predicate);"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.updateFilteredBookingList(predicate);"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredBookingList());"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"     * Parses {@code userInput} into a {@code BookingIdContainsKeywordsPredicate}."},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    private BookingIdContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        return new BookingIdContainsKeywordsPredicate(userInput);"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"hojiefeng":3,"vvan-essa":66}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":3,"-":80}},{"path":"src/test/java/seedu/address/logic/commands/FindVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_VENUE_DISPLAYED;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) for {@code FindVenueCommand}."},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandTest {"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findFirstCommand \u003d new FindVenueCommand(firstPredicate);"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findSecondCommand \u003d new FindVenueCommand(secondPredicate);"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findFirstCommandCopy \u003d new FindVenueCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    public void execute_zeroKeywords_noVenueFound() {"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(MESSAGE_VENUE_DISPLAYED, 0);"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand command \u003d new FindVenueCommand(predicate);"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.updateFilteredVenueList(predicate);"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredVenueList());"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"     * Parses {@code userInput} into a {@code VenueNameContainsKeywordsPredicate}."},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"    private VenueNameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        return new VenueNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"hojiefeng":3,"vvan-essa":67}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":3,"-":36}},{"path":"src/test/java/seedu/address/logic/parser/BookingSystemParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystemParser parser \u003d new BookingSystemParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":2,"-":99}},{"path":"src/test/java/seedu/address/logic/parser/CreateVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VENUE_CAPACITY_DESC_HALL;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VENUE_NAME_DESC_FIELD;"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VENUE_NAME_DESC_HALL;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.TypicalVenues.HALL;"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.logic.commands.CreateVenueCommand;"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"import seedu.address.testutil.VenueBuilder;"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    private CreateVenueCommandParser parser \u003d new CreateVenueCommandParser();"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"        Venue expectedVenue \u003d new VenueBuilder(HALL).build();"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"        // whitespace only preamble"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VENUE_NAME_DESC_HALL + VENUE_CAPACITY_DESC_HALL,"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"                new CreateVenueCommand(expectedVenue));"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"        // multiple names - last name accepted"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_FIELD + VENUE_NAME_DESC_HALL"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"                + VENUE_CAPACITY_DESC_HALL,"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"                new CreateVenueCommand(expectedVenue));"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    /*"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        // zero tags"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"    */"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateVenueCommand.MESSAGE_USAGE);"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"        // missing name prefix"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VALID_VENUE_NAME_HALL + VENUE_CAPACITY_DESC_HALL,"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"                expectedMessage);"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"        // missing capacity prefix"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VENUE_CAPACITY_DESC_HALL + VALID_VENUE_CAPACITY_HALL,"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"                expectedMessage);"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"        // all prefixes missing"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VALID_VENUE_NAME_HALL + VALID_VENUE_CAPACITY_HALL,"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"                expectedMessage);"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"    /*"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"    // need to add MESSAGE_CONSTRAINTS"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"        // invalid capacity"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VENUE_CAPACITY_DESC_HALL + INVALID_VENUE_CAPACITY_DESC, expectedMessage);"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VENUE_CAPACITY_DESC_HALL + INVALID_VENUE_CAPACITY_DESC2, expectedMessage);"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"        // non-empty preamble"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VENUE_NAME_DESC_HALL + VENUE_CAPACITY_DESC_HALL,"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"                expectedMessage);"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"ming-00":73,"NiniJiaying":6}},{"path":"src/test/java/seedu/address/logic/parser/DeleteVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE6;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.DeleteVenueCommand;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * outside of the DeleteVenueCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" * same path through the DeleteVenueCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    private DeleteVenueCommandParser parser \u003d new DeleteVenueCommandParser();"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsDeleteVenueCommand() {"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, \"delete_venue v/Venue1\", new DeleteVenueCommand(VENUE6));"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVenueCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":33}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"                .withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":170,"NiniJiaying":4}},{"path":"src/test/java/seedu/address/logic/parser/FindBookingCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindBookingCommand;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.BookingIdContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    private FindBookingCommandParser parser \u003d new FindBookingCommandParser();"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"b/   \","},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand expectedFindBookingCommand \u003d"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"                new FindBookingCommand(new BookingIdContainsKeywordsPredicate(\"1\"));"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"        assertParseSuccess(parser, \"find_booking bid/1\", expectedFindBookingCommand);"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        assertParseSuccess(parser, \"find_booking bid/ \\n 1 \\n \", expectedFindBookingCommand);"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":31,"xuanqi966":2}},{"path":"src/test/java/seedu/address/logic/parser/FindVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.logic.commands.FindVenueCommand;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.VenueNameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    private FindVenueCommandParser parser \u003d new FindVenueCommandParser();"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindVenueCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand expectedFindCommand \u003d"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"                new FindVenueCommand(new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Hall\")));"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, \"find_venue v/Hall\", expectedFindCommand);"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, \" \\n find_venue v/ \\n Hall  \\t\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":35}},{"path":"src/test/java/seedu/address/model/BookingSystemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystem bookingSystem \u003d new BookingSystem();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(Collections.emptyList(), bookingSystem.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e bookingSystem.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    public void resetData_withValidReadOnlyBookingSystem_replacesData() {"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem newData \u003d getTypicalBookingSystem();"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(newData, bookingSystem);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStub newData \u003d new BookingSystemStub(newPersons);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e bookingSystem.resetData(newData));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e bookingSystem.hasPerson(null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personNotInBookingSystem_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(bookingSystem.hasPerson(ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personInBookingSystem_returnsTrue() {"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(ALICE);"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(bookingSystem.hasPerson(ALICE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personWithSameIdentityFieldsInBookingSystem_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(ALICE);"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(bookingSystem.hasPerson(editedAlice));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e bookingSystem.getPersonList().remove(0));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"     * A stub ReadOnlyBookingSystem whose persons list can violate interface constraints."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    private static class BookingSystemStub implements ReadOnlyBookingSystem {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"        private final ObservableList\u003cVenue\u003e venues \u003d FXCollections.observableArrayList();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"        @Override"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        public ObservableList\u003cBooking\u003e getBookingList() {"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"            return null;"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        @Override"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cVenue\u003e getVenueList() {"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"            return venues;"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":24,"-":72,"NiniJiaying":9,"vvan-essa":6}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.testutil.BookingSystemBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(new BookingSystem(), new BookingSystem(modelManager.getBookingSystem()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setBookingSystemFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        modelManager.setBookingSystemFilePath(path);"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(path, modelManager.getBookingSystemFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem addressBook \u003d new BookingSystemBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem differentAddressBook \u003d new BookingSystem();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"        differentUserPrefs.setBookingSystemFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":10,"-":122}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBookingSystemFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":20}},{"path":"src/test/java/seedu/address/model/booking/BookingIdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.testutil.BookingBuilder;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"public class BookingIdContainsKeywordsPredicateTest {"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"        String firstPredicateKeywordList \u003d \"1\";"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"        String secondPredicateKeywordList \u003d \"2\";"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        // different bookings -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        // One keyword"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d new BookingIdContainsKeywordsPredicate(\"1\");"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new BookingBuilder().withId(1).build()));"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        // Zero keywords"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d new BookingIdContainsKeywordsPredicate(\"\");"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(predicate.test(new BookingBuilder().withId(2).build()));"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        // Non-matching keyword"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new BookingIdContainsKeywordsPredicate(\"1\");"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(predicate.test(new BookingBuilder().withId(2).build()));"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"}"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":""}],"authorContributionMap":{"vvan-essa":58}},{"path":"src/test/java/seedu/address/model/booking/BookingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING1;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING2;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING3;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING4;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"class BookingTest {"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    void isOverlapping() {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.isOverlapping(BOOKING1));"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(null));"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        // overlapping timings -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING2));"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING3));"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        // different timings -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING3.isOverlapping(BOOKING4));"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        // different timings and venue -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING4));"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    void isId() {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        //same id -\u003e returns true;"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.isId(0));"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        //different id -\u003e returns false;"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isId(1));"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    void equals() {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.equals(BOOKING1));"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(null));"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(5));"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(BOOKING2));"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":57}},{"path":"src/test/java/seedu/address/model/booking/VenueNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.testutil.VenueBuilder;"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"public class VenueNameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(\"Hall\"));"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Hall\").build()));"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Sports\", \"Hall\"));"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Sports Hall\").build()));"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"sPorTs\", \"hAll\"));"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Sports Hall\").build()));"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d new VenueNameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(predicate.test(new VenueBuilder().withName(\"Sports Hall\").build()));"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Court\"));"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(predicate.test(new VenueBuilder().withName(\"Hall\").build()));"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":70}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"                .withEmail(\"alice@email.com\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":74,"NiniJiaying":1}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":74,"NiniJiaying":1}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":164,"NiniJiaying":2}},{"path":"src/test/java/seedu/address/model/venue/UniqueVenueListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue;"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_FIELD;"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE3;"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.exceptions.DuplicateVenueException;"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.exceptions.VenueNotFoundException;"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"import seedu.address.testutil.VenueBuilder;"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"public class UniqueVenueListTest {"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    private final UniqueVenueList uniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    public void contains_nullVenue_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.contains(null));"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"    public void contains_venueNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"        assertFalse(uniqueVenueList.contains(VENUE1));"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    public void contains_venueInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"        assertTrue(uniqueVenueList.contains(VENUE1));"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"    public void contains_venueWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"        Venue editedVenue1 \u003d new VenueBuilder(VENUE1).withCapacity(VALID_VENUE_CAPACITY_FIELD)"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"        assertTrue(uniqueVenueList.contains(editedVenue1));"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"    public void add_nullVenue_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.add(null));"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"    public void add_duplicateVenue_throwsDuplicateVenueException() {"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.add(VENUE1));"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullTargetVenue_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenue(null, VENUE1));"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullEditedVenue_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, null));"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"    public void setVenue_targetVenueNotInList_throwsVenueNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":"        assertThrows(VenueNotFoundException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, VENUE1));"},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueIsSameVenue_success() {"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, VENUE1);"},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE1);"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);"},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasSameIdentity_success() {"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":"        Venue editedVenue1 \u003d new VenueBuilder(VENUE1).withCapacity(30).build();"},{"lineNumber":90,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, editedVenue1);"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(editedVenue1);"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":99,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, VENUE3);"},{"lineNumber":100,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":101,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE3);"},{"lineNumber":102,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":105,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":106,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasNonUniqueIdentity_throwsDuplicateVenueException() {"},{"lineNumber":108,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":109,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE3);"},{"lineNumber":110,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, VENUE3));"},{"lineNumber":111,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":113,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"ming-00"},"content":"    public void remove_nullVenue_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.remove(null));"},{"lineNumber":116,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":118,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"ming-00"},"content":"    public void setVenues_nullUniqueVenueList_throwsNullPointerException() {"},{"lineNumber":120,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenues((UniqueVenueList) null));"},{"lineNumber":121,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":123,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"ming-00"},"content":"    public void setVenues_uniqueVenueList_replacesOwnListWithProvidedUniqueVenueList() {"},{"lineNumber":125,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":126,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":127,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE2);"},{"lineNumber":128,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenues(expectedUniqueVenueList);"},{"lineNumber":129,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);"},{"lineNumber":130,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":132,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullList_throwsNullPointerException() {"},{"lineNumber":134,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenues((List\u003cVenue\u003e) null));"},{"lineNumber":135,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"ming-00"},"content":"    public void setVenues_list_replacesOwnListWithProvidedList() {"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);"},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":"        List\u003cVenue\u003e venueList \u003d Collections.singletonList(VENUE3);"},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenues(venueList);"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();"},{"lineNumber":143,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE3);"},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);"},{"lineNumber":145,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":147,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"ming-00"},"content":"    public void setVenues_listWithDuplicateVenues_throwsDuplicateVenueException() {"},{"lineNumber":149,"author":{"gitId":"ming-00"},"content":"        List\u003cVenue\u003e listWithDuplicateVenues \u003d Arrays.asList(VENUE1, VENUE1);"},{"lineNumber":150,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenues(listWithDuplicateVenues));"},{"lineNumber":151,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"ming-00"},"content":"    public void setVenues_listWithDuplicateVenueNames_throwsDuplicateVenueException() {"},{"lineNumber":155,"author":{"gitId":"ming-00"},"content":"        List\u003cVenue\u003e listWithDuplicateVenues \u003d Arrays.asList(VENUE1, VENUE2);"},{"lineNumber":156,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenues(listWithDuplicateVenues));"},{"lineNumber":157,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"            -\u003e uniqueVenueList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"}"}],"authorContributionMap":{"ming-00":164}},{"path":"src/test/java/seedu/address/model/venue/VenueTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"package seedu.address.model.venue;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE3;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE4;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"class VenueTest {"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    void isSameVenue() {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE1));"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(null));"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        // same name -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE2));"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        // different name -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE3));"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        // different name and remarks -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE4));"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    void equals() {"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.equals(VENUE1));"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(null));"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(5));"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"        assertFalse(VENUE2.equals(VENUE1));"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":42,"ming-00":4}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":71,"NiniJiaying":7}},{"path":"src/test/java/seedu/address/storage/JsonBookingSystemStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"public class JsonBookingSystemStorageTest {"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBookingSystemStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e readBookingSystem(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private java.util.Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        return new JsonBookingSystemStorage(Paths.get(filePath))"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"                .readBookingSystem(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(readBookingSystem(\"NonExistentFile.json\").isPresent());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"notJsonFormatBookingSystem.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_invalidPersonBookingSystem_throwDataConversionException() {"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"invalidPersonBookingSystem.json\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_invalidAndValidPersonBookingSystem_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"invalidAndValidPersonBookingSystem.json\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"    public void readAndSaveBookingSystem_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        Path filePath \u003d testFolder.resolve(\"TempBookingSystem.json\");"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem original \u003d getTypicalBookingSystem();"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage jsonBookingSystemStorage \u003d new JsonBookingSystemStorage(filePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original, filePath);"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem readBack \u003d jsonBookingSystemStorage.readBookingSystem(filePath).get();"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original, filePath);"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"        readBack \u003d jsonBookingSystemStorage.readBookingSystem(filePath).get();"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original); // file path not specified"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        readBack \u003d jsonBookingSystemStorage.readBookingSystem().get(); // file path not specified"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem_nullBookingSystem_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveBookingSystem(null, \"SomeFile.json\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"    private void saveBookingSystem(ReadOnlyBookingSystem addressBook, String filePath) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"            new JsonBookingSystemStorage(Paths.get(filePath))"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"                    .saveBookingSystem(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem_nullFilePath_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveBookingSystem(new BookingSystem(), null));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":36,"-":75}},{"path":"src/test/java/seedu/address/storage/JsonSerializableBookingSystemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class JsonSerializableBookingSystemTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBookingSystemTest\");"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsBookingSystem.json\");"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonBookingSystem.json\");"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonBookingSystem.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        JsonSerializableBookingSystem dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"                JsonSerializableBookingSystem.class).get();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        JsonSerializableBookingSystem dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"                JsonSerializableBookingSystem.class).get();"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableBookingSystem.MESSAGE_DUPLICATE_PERSON,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":10,"-":26}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"bookingsystem.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalBookingSystem;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.ReadOnlyBookingSystem;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d new JsonBookingSystemStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        storageManager \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public void bookingSystemReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem original \u003d getTypicalBookingSystem();"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        storageManager.saveBookingSystem(original);"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem retrieved \u003d storageManager.readBookingSystem().get();"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"    public void getBookingSystemFilePath() {"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        assertNotNull(storageManager.getBookingSystemFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":12,"-":56}},{"path":"src/test/java/seedu/address/testutil/BookingBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":" * A utility class to help with building Booking objects."},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"public class BookingBuilder {"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    public static final Person DEFAULT_BOOKER \u003d new Person(new Name(\"John\"));"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    public static final Venue DEFAULT_VENUE \u003d VENUE1;"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    private static final String DEFAULT_DESCRIPTION \u003d \"Good\";"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    private static final LocalDateTime DEFAULT_BOOKING_START \u003d LocalDateTime.of(2021, 03, 01, 12, 30, 00);"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    private static final LocalDateTime DEFAULT_BOOKING_END \u003d LocalDateTime.of(2021, 03, 01, 12, 30, 00);"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    private static final int DEFAULT_ID \u003d 1;"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    private Person booker;"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    private String description;"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    private Venue venue;"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    private LocalDateTime bookingStart;"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    private LocalDateTime bookingEnd;"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    private int id;"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"     * Creates a {@code BookingBuilder} with the default details."},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder() {"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        booker \u003d DEFAULT_BOOKER;"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        venue \u003d DEFAULT_VENUE;"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        description \u003d DEFAULT_DESCRIPTION;"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        bookingStart \u003d DEFAULT_BOOKING_START;"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        bookingEnd \u003d DEFAULT_BOOKING_END;"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        id \u003d DEFAULT_ID;"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"     * Initializes the BookingBuilder with the data of {@code bookingToCopy}."},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder(Booking bookingToCopy) {"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        booker \u003d bookingToCopy.getBooker();"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        venue \u003d bookingToCopy.getVenue();"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        description \u003d bookingToCopy.getDescription();"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        bookingStart \u003d bookingToCopy.getBookingStart();"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        bookingEnd \u003d bookingToCopy.getBookingEnd();"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        id \u003d bookingToCopy.getId();"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code booker} of the {@code Booking} that we are building."},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withBooker(Person booker) {"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        this.booker \u003d booker;"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code venue} of the {@code Booking} that we are building."},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder withVenue(Venue venue) {"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        this.venue \u003d venue;"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code description} of the {@code Booking} that we are building."},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder withDescription(String description) {"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        this.description \u003d description;"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code bookingStart} of the {@code Booking} that we are building."},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder withBookingStart(LocalDateTime bookingStart) {"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"        this.bookingStart \u003d bookingStart;"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code bookingEnd} of the {@code Booking} that we are building."},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder withBookingEnd(LocalDateTime bookingEnd) {"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"        this.bookingEnd \u003d bookingEnd;"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code id} of the {@code Booking} that we are building."},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder withId(int id) {"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"        this.id \u003d id;"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"    public Booking build() {"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        return new Booking(booker, venue, description, bookingStart, bookingEnd, id);"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"vvan-essa":103,"NiniJiaying":5}},{"path":"src/test/java/seedu/address/testutil/BookingSystemBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    private BookingSystem bookingSystem;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder() {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem \u003d new BookingSystem();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder(BookingSystem bookingSystem) {"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem \u003d bookingSystem;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder withPerson(Person person) {"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(person);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem build() {"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":11,"-":23}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(name, phone, email);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":68,"NiniJiaying":3}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"NiniJiaying":1}},{"path":"src/test/java/seedu/address/testutil/TypicalBookings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Booking} objects to be used in tests."},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"public class TypicalBookings {"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING1 \u003d new Booking(new Person(new Name(\"Booker1\")), VENUE1, \"description\","},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 12, 30, 00),"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 30, 00),"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"            0"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING2 \u003d new Booking(new Person(new Name(\"Booker2\")), VENUE1, \"description\","},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 00, 00),"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 14, 00, 00),"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"            1"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING3 \u003d new Booking(new Person(new Name(\"Booker2\")), VENUE2, \"description\","},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 12, 30, 00),"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 30, 00),"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"            2"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING4 \u003d new Booking(new Person(new Name(\"Booker2\")), VENUE2, \"description\","},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 14, 30, 00),"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 15, 30, 00),"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"            3"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    private TypicalBookings() {} // prevents instantiation"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":38,"NiniJiaying":6}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public static final Index INDEX_FIRST_VENUE \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":12,"vvan-essa":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.BookingSystem;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"            .build();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"            .build();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"heinz@example.com\").build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"cornelia@example.com\").build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"werner@example.com\").build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"lydia@example.com\").build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"anna@example.com\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"stefan@example.com\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"hans@example.com\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * Returns an {@code BookingSystem} with all the typical persons."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    public static BookingSystem getTypicalBookingSystem() {"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem ab \u003d new BookingSystem();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hojiefeng":4,"-":54,"NiniJiaying":11}},{"path":"src/test/java/seedu/address/testutil/TypicalVenues.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_FIELD;"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_NAME_FIELD;"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Venue} objects to be used in tests."},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class TypicalVenues {"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE1 \u003d new Venue(\"Venue1\", 10);"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE2 \u003d new Venue(\"Venue1\", 20);"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE3 \u003d new Venue(\"Venue3\", 10);"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE4 \u003d new Venue(\"Venue4\", 10);"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public static final Venue VENUE5 \u003d new Venue(\"Venue1\", 10);"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    public static final Venue VENUE6 \u003d new Venue(\"Venue1\", 0);"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"    // Manually added - Venue\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    public static final Venue HALL \u003d new VenueBuilder()"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"            .withName(VALID_VENUE_NAME_HALL).withCapacity(VALID_VENUE_CAPACITY_HALL)"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"            .build();"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    public static final Venue FIELD \u003d new VenueBuilder()"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"            .withName(VALID_VENUE_NAME_FIELD).withCapacity(VALID_VENUE_CAPACITY_FIELD)"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"            .build();"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":""},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    private TypicalVenues() {} // prevents instantiation"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":13,"ming-00":17,"vvan-essa":2}},{"path":"src/test/java/seedu/address/testutil/VenueBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import seedu.address.model.venue.Venue;"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":" * A utility class to help with building Venue objects."},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":" */"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"public class VenueBuilder {"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"    public static final String DEFAULT_NAME \u003d \"Victoria Hall\";"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"    public static final int DEFAULT_CAPACITY \u003d 50;"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    private String name;"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    private int capacity;"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"     * Creates a {@code VenueBuilder} with the default details."},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder() {"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        name \u003d DEFAULT_NAME;"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        capacity \u003d DEFAULT_CAPACITY;"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"     * Initializes the VenueBuilder with the data of {@code venueToCopy}."},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder(Venue venueToCopy) {"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        name \u003d venueToCopy.getName();"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        capacity \u003d venueToCopy.getCapacity();"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Name} of the {@code Venue} that we are building."},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder withName(String name) {"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Capacity} of the {@code Venue} that we are building."},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder withCapacity(int capacity) {"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        return this;"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public Venue build() {"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        return new Venue(name, capacity);"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"}"}],"authorContributionMap":{"ming-00":4,"vvan-essa":48}}]
