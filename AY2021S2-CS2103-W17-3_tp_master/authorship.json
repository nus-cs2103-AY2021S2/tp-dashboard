[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W17-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"* **BookCoin To The Moon** is a CLI facility management system which allows users to type in commands to manage bookings and presents users a structured and detailed information on facility availability."},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"* Our targeted users are administrative personnels of schools or organisations who need to manage bookings and usage of a large number of facilities. They have to ensure that bookings and usages of facilities abide by restrictions in addition to checking that the bookings are valid.*"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e  "},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"  "},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"* For the detailed documentation of this project, see the **[BookCoin To The Moon Product Website](https://ay2021s2-cs2103-w17-3.github.io/tp/)**."},{"lineNumber":11,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."}],"authorContributionMap":{"vvan-essa":1,"-":4,"xuanqi966":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"#About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"Bookcoin to the Moon was developed by the team CS2103-W17-3."},{"lineNumber":4,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"### Wang Xuanqi"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/xuanqi966.png\" width\u003d\"200px\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"[[github](https://github.com/xuanqi966)]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"* Role: Developer, team lead"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"* Responsibilities: "},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"### Ni Jiaying"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ninijiaying.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ninijiaying)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"* Role: Developer, integration"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"* Responsibilities: "},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"### Vanessa Tay"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/vvan-essa.png\" width\u003d\"200px\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/vvan-essa)] [[portfolio](team/johndoe.md)]"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"* Role: Developer, deliverables and deadlines"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"* Responsibilities: "},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"### Ho Jie Feng"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/hojiefeng.png\" width\u003d\"200px\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/hojiefeng)]"},{"lineNumber":42,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"* Role: Developer, code quality"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"* Responsibilities: "},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"### Wu Weiming"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ming-00.png\" width\u003d\"200px\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ming-00)]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"* Role: Developer, documentation"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"* Responsibilities: "}],"authorContributionMap":{"ming-00":27,"-":28}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"hojiefeng"},"content":"* has a need to manage a large number of venue bookings"},{"lineNumber":240,"author":{"gitId":"hojiefeng"},"content":"* has to ensure bookings abide by restrictions"},{"lineNumber":241,"author":{"gitId":"hojiefeng"},"content":"* need to check that the bookings are valid"},{"lineNumber":242,"author":{"gitId":"hojiefeng"},"content":"* are administrative personnels of schools or organisations"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"hojiefeng"},"content":"**Value proposition**:"},{"lineNumber":249,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":250,"author":{"gitId":"hojiefeng"},"content":"* manage bookings faster than a typical mouse/GUI driven app"},{"lineNumber":251,"author":{"gitId":"hojiefeng"},"content":"* ease of managing bookings since it is a centralised system"},{"lineNumber":252,"author":{"gitId":"hojiefeng"},"content":"* automatically keeps track of room usage, conflicts and rule violations"},{"lineNumber":253,"author":{"gitId":"hojiefeng"},"content":"* clear and structured way to avoid ambiguity"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":262,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add venues                     |                                                                        |"},{"lineNumber":263,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit venues                    | reflect the most up to date details of the venue                       |"},{"lineNumber":264,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete venues                  |                                                                        |"},{"lineNumber":265,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add bookings                   |                                                                        |"},{"lineNumber":266,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit bookings                  | change booking details when the booker decides to amend the booking    |"},{"lineNumber":267,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete bookings                |                                                                        |"},{"lineNumber":268,"author":{"gitId":"hojiefeng"},"content":"| `* *`    | admin in charge of facilities              | query booking information of a particular venue | quickly find out the relevant information instead of search one by one |"},{"lineNumber":269,"author":{"gitId":"hojiefeng"},"content":"| `*`      | admin in charge of facilities              | be able to access past data           | easily check the history of certain venues                      |"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"vvan-essa"},"content":"(For all use cases below, the **System** is `BookCoin To The Moon` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC01 - Delete a venue**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific venue."},{"lineNumber":280,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the venue."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given venue is invalid."},{"lineNumber":287,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":288,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":289,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":290,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1."},{"lineNumber":291,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":292,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":293,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC02 - Delete a booking**"},{"lineNumber":294,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":295,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":296,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":297,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific booking."},{"lineNumber":298,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the booking."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given booking is invalid."},{"lineNumber":305,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":306,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":307,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":308,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1."},{"lineNumber":309,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":310,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":311,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC03 - Add a venue**"},{"lineNumber":312,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":313,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":314,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":315,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new venue into the system."},{"lineNumber":316,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the venue into the system."},{"lineNumber":317,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":318,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":319,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":320,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":321,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":322,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue to be added is already in the system."},{"lineNumber":323,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":324,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":325,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":326,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":327,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":328,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC04 - Add a booking**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":331,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":332,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new booking into the system."},{"lineNumber":333,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the booking into the system."},{"lineNumber":334,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":335,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":336,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":337,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":339,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking to be added is already in the system."},{"lineNumber":340,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":341,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":342,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":343,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":344,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC05 - List all bookings**"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":347,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":348,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all bookings."},{"lineNumber":349,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of bookings."},{"lineNumber":350,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":351,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":352,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":353,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC06 - List all venues**"},{"lineNumber":354,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":355,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":356,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":357,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all venues."},{"lineNumber":358,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of venues."},{"lineNumber":359,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":360,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":361,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":362,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC07 - Find a booking**"},{"lineNumber":363,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":364,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":365,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":366,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific booking."},{"lineNumber":367,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that booking."},{"lineNumber":368,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":369,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":370,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":371,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":372,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":373,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found."},{"lineNumber":374,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":375,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":376,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":377,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":378,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC08 - Find a venue**"},{"lineNumber":379,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":380,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":381,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":382,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific venue."},{"lineNumber":383,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that venue."},{"lineNumber":384,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":385,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":386,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":387,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":388,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":389,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found."},{"lineNumber":390,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":391,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":392,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":393,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":394,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC09 - Edit a venue**"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific venue."},{"lineNumber":399,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the venue information."},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found."},{"lineNumber":406,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC10 - Edit a booking**"},{"lineNumber":411,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":412,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":413,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":414,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific booking."},{"lineNumber":415,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the booking information."},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":418,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":419,"author":{"gitId":"vvan-essa"},"content":"**Extensions**"},{"lineNumber":420,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":421,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found."},{"lineNumber":422,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message."},{"lineNumber":423,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":424,"author":{"gitId":"vvan-essa"},"content":"  Use case ends."},{"lineNumber":425,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":426,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":427,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC11 - Exit the program**"},{"lineNumber":428,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":429,"author":{"gitId":"vvan-essa"},"content":"**MSS**"},{"lineNumber":430,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":431,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to exit the program."},{"lineNumber":432,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon closes the window and terminates."},{"lineNumber":433,"author":{"gitId":"vvan-essa"},"content":""},{"lineNumber":434,"author":{"gitId":"vvan-essa"},"content":"    Use case ends."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":441,"author":{"gitId":"hojiefeng"},"content":"2.  Should be able to hold up to 1000 venues and bookings without a noticeable sluggishness in performance for typical usage."},{"lineNumber":442,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":443,"author":{"gitId":"hojiefeng"},"content":"4.  Should be able to perform queries quickly even with significant amounts of data present."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":448,"author":{"gitId":"hojiefeng"},"content":"* **Booking**: A person\u0027s request to occupy the room for a specific amount of time at a specific date"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":457,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":474,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":485,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":488,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":491,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":500,"author":{"gitId":"-"},"content":""},{"lineNumber":501,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"hojiefeng":21,"-":345,"vvan-essa":135}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon is a **desktop app for managing bookings and presents users a structured and detailed information on facility availability via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookCoinToTheMoon can get your facility management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"1. Download the latest `bookcointothemoon.jar` `[coming in v2.0]`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your BookCoinToTheMoon."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"   ![Ui](images/Ui_Booking.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"   * **`list_venues`** : Lists all venues."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"   * **`create_venue`**`n/Chua Thian Poh Hall max/40` : Adds a venue named `Chua Thian Poh Hall` to the BookCoinToTheMoon."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"   * **`bye`** : Exits the app."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"  e.g. in `find_venue v/VENUE_ID`, `VENUE_ID` is a parameter which can be used as `find_venue v/1`."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"  e.g. `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` can be used as `n/Chua Thian Poh Hall max/40` or as `n/Chua Thian Poh Hall`."},{"lineNumber":48,"author":{"gitId":"-"},"content":" "},{"lineNumber":49,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `bye`) will be ignored.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"  e.g. if the command specifies `bye 123`, it will be interpreted as `bye`."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"### Adding a venue : `create_venue`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"Adds a new venue for the booking app."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]`"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"* `create_venue n/Chua Thian Poh Hall max/40`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"### Adding a booking : `create_booking`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"Adds a new booking into the booking app. The default booking is set to one hour for the first iteration."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_booking d/DATE t/TIMING n/VENUE_NAME`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"* `create_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"### Listing all venues : `list_venues`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all venues and their corresponding IDs in the booking app."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_venues`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"### Listing all bookings : `list_bookings`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all bookings and their corresponding IDs in the booking app."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_bookings`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"### Finding a venue : `find_venue`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given venue ID."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_venue v/VENUE_ID`"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"* `find_venue v/1`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":"### Finding a booking : `find_booking`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given booking ID."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_booking b/BOOKING_ID`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"* `find_booking b/2`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a venue : `delete_venue`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"Deletes a venue corresponding to the venue ID specified."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_venue v/VENUE_ID`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"* `delete_venue v/1`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a booking : `delete_booking`"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"NiniJiaying"},"content":"Deletes booking corresponding to the booking ID specified."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_booking b/BOOKING_ID`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"Examples:"},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":"* `delete_booking b/2`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"### Exiting the program : `bye`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"Format: `bye`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"### Saving the data "},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"### Editing the data file `[coming in v2.0]`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"_Details coming soon ..._"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous BookCoinToTheMoon home folder."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":153,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"**Add** | `add_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` \u003cbr\u003e e.g., `add_venue n/Chua Thian Poh Hall max/40`\u003cbr\u003e\u003cbr\u003e `add_booking`e.g., `add_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"**Delete** | `delete_venue v/VENUE_ID`\u003cbr\u003e e.g., `delete_venue v/1` \u003cbr\u003e\u003cbr\u003e `delete_booking b/BOOKING_ID`\u003cbr\u003e e.g., `delete_booking b/2`"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"**Find** | `find_venue v/VENUE_ID`\u003cbr\u003e e.g., `find_venue v/1`\u003cbr\u003e\u003cbr\u003e `find_booking b/BOOKING_ID`\u003cbr\u003e e.g., `find_booking b/2`"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"**List** | `list_venues` \u003cbr\u003e `list_bookings`"},{"lineNumber":158,"author":{"gitId":"NiniJiaying"},"content":"**Exit** | `bye`"}],"authorContributionMap":{"-":103,"NiniJiaying":55}},{"path":"src/main/java/seedu/address/model/booking/Booking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.Random;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":" * Represents a booking in the booking list."},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class Booking {"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    // Random object used to generate booking id."},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private static final Random BOOKING_RANDOM \u003d new Random();"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    // Data fields"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private final String booker;"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    private final Venue venue;"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"    private final String description;"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    private final LocalDateTime bookingStart;"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private final LocalDateTime bookingEnd;"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    private final int id;"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    public Booking(String booker, Venue venue, String description,"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"                   LocalDateTime bookingStart, LocalDateTime bookingEnd, int id) {"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(booker, venue, description, bookingStart, bookingEnd);"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        this.booker \u003d booker;"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        this.venue \u003d venue;"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        this.bookingStart \u003d bookingStart;"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"        this.bookingEnd \u003d bookingEnd;"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        this.id \u003d id;"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    public String getBooker() {"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        return booker;"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    public Venue getVenue() {"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        return venue;"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"    public String getDescription() {"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        return description;"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public LocalDateTime getBookingStart() {"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        return bookingStart;"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    public LocalDateTime getBookingEnd() {"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        return bookingEnd;"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"    public int getId() {"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        return id;"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    static int getNewBookingId() {"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        return Math.abs(BOOKING_RANDOM.nextInt());"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings overlap."},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"     * This can be used to test for booking conflicts."},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public boolean isOverlapping(seedu.address.model.booking.Booking otherBooking) {"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        if (!otherBooking.venue.equals(venue)) {"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        return !this.bookingStart.isBefore(otherBooking.bookingEnd)"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 !this.bookingEnd.isAfter(otherBooking.bookingStart);"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if it is the same id."},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    public boolean isId(int id) {"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"        return this.id \u003d\u003d id;"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields."},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings."},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof seedu.address.model.booking.Booking)) {"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"        seedu.address.model.booking.Booking otherBooking \u003d (seedu.address.model.booking.Booking) other;"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"        return otherBooking.getBooker().equals(getBooker())"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getVenue().equals(getVenue())"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getDescription().equals(getDescription())"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingStart().equals(getBookingStart())"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingEnd().equals(getBookingEnd());"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        return Objects.hash(booker, booker, bookingStart, bookingEnd);"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"        builder.append(\"; Booker: \")"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"                .append(getBooker())"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Venue: \")"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"                .append(getVenue())"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Description: \")"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"                .append(getDescription())"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Start of booking: \")"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"                .append(getBookingStart())"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; End of booking: \")"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"                .append(getBookingEnd());"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":136}},{"path":"src/main/java/seedu/address/model/booking/NonOverlappingBookingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.BookingNotFoundException;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.DuplicateBookingException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.OverlappingBookingException;"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * A list of bookings that enforces that is it non overlapping between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A booking is considered non overlapping by comparing using {@code Booking#isOverlapping(Booking)}."},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * As such, adding and updating of booking uses Booking#isOverlapping(Booking) for checking"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * so as to ensure that the booking being added or updated is non overlapping in terms of booking timing"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * in the NonOverlappingBookingList. However, the removal of a venue uses Venue#equals(Object) so"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" * @see Booking#isOverlapping(Booking)"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"public class NonOverlappingBookingList implements Iterable\u003cBooking\u003e {"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent booking as the given argument."},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Booking toCheck) {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::equals);"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains a booking with the id."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public boolean containsId(int toCheck) {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(x -\u003e x.isId(toCheck));"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an overlapping booking as the given argument."},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public boolean overlaps(Booking toCheck) {"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isOverlapping);"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"     * Adds a booking to the list."},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"     * The booking must not already exist in the list."},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public void add(Booking toAdd) {"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (overlaps(toAdd)) {"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the booking {@code target} in the list with {@code editedBooking}."},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list."},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * The booking data of {@code editedPerson} must not be the same and not be overlapping"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     * as another existing booking in the list."},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    public void setBooking(Booking target, Booking editedBooking) {"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedBooking);"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        if (!target.equals(editedBooking) \u0026\u0026 contains(editedBooking)) {"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isOverlapping(editedBooking) \u0026\u0026 overlaps(editedBooking)) {"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedBooking);"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent booking from the list."},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"     * The booking must exist in the list."},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Booking toRemove) {"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"    public void setBookings(NonOverlappingBookingList replacement) {"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code bookings}."},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"     * {@code bookings} must not contain duplicate persons."},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"    public void setPersons(List\u003cBooking\u003e bookings) {"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(bookings);"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"        if (!bookingsAreNonOverlapping(bookings)) {"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(bookings);"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cBooking\u003e iterator() {"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof NonOverlappingBookingList // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((NonOverlappingBookingList) other).internalList));"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":148,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code bookings} contains only unique bookings."},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"    private boolean bookingsAreNonOverlapping(List\u003cBooking\u003e bookings) {"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"                if (bookings.get(i).isOverlapping(bookings.get(j))) {"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"                    return false;"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"                }"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"        return true;"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":161}},{"path":"src/main/java/seedu/address/model/booking/UniqueVenueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.DuplicateVenueException;"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.exceptions.VenueNotFoundException;"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A list of venues that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * A venue is considered unique by comparing using {@code Venue#isSameVenue(Venue)}. As such, adding and updating of"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * venues uses Venue#isSameVenue(Venue) for equality so as to ensure that the venue being added or updated is"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * unique in terms of identity in the UniqueVenueList. However, the removal of a venue uses Venue#equals(Object) so"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" *"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" * @see Venue#isSameVenue(Venue)"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"public class UniqueVenueList implements Iterable\u003cVenue\u003e {"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent venue as the given argument."},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Venue toCheck) {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isSameVenue);"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * Adds a venue to the list."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     * The venue must not already exist in the list."},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    public void add(Venue toAdd) {"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the venue {@code target} in the list with {@code editedVenue}."},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list."},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the list."},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    public void setVenue(Venue target, Venue editedVenue) {"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedVenue);"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isSameVenue(editedVenue) \u0026\u0026 contains(editedVenue)) {"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedVenue);"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent venue from the list."},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     * The venue must exist in the list."},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Venue toRemove) {"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(UniqueVenueList replacement) {"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code venues}."},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"     * {@code Venue} must not contain duplicate venues."},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(List\u003cVenue\u003e venues) {"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(venues);"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"        if (!venuesAreUnique(venues)) {"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(venues);"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cVenue\u003e asUnmodifiableObservableList() {"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cVenue\u003e iterator() {"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof UniqueVenueList // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((UniqueVenueList) other).internalList));"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code venues} contains only unique venues."},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"    private boolean venuesAreUnique(List\u003cVenue\u003e venues) {"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c venues.size() - 1; i++) {"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c venues.size(); j++) {"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"                if (venues.get(i).isSameVenue(venues.get(j))) {"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"                    return false;"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"                }"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"        return true;"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":139}},{"path":"src/main/java/seedu/address/model/booking/Venue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":" * Represents a venue in the booking list."},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public class Venue {"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    // Data fields"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    private final String name;"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private final String remarks;"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    private final int capacity;"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null."},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    public Venue(String name, String remarks, int capacity) {"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(name, remarks);"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        this.name \u003d name;"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        this.capacity \u003d capacity;"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    public String getName() {"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        return name;"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    public String getRemarks() {"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"        return remarks;"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public int getCapacity() {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        return capacity;"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both venues have the same name"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * This defines a weaker notion of equality between two venues."},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public boolean isSameVenue(Venue otherVenue) {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        if (otherVenue \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        return otherVenue !\u003d null \u0026\u0026 this.name.equals(otherVenue.name);"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields."},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings."},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof Venue)) {"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            return false;"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        Venue otherBooking \u003d (Venue) other;"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        return otherBooking.getName().equals(getName())"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getRemarks().equals(getRemarks())"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getCapacity() \u003d\u003d getCapacity();"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"        return Objects.hash(name, remarks, capacity);"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        builder.append(\"; Name: \")"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"                .append(getName())"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Remarks: \")"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"                .append(getRemarks())"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Capacity: \")"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"                .append(getCapacity());"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":91}},{"path":"src/main/java/seedu/address/model/booking/exceptions/BookingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified booking."},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class BookingNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"hojiefeng":6}},{"path":"src/main/java/seedu/address/model/booking/exceptions/DuplicateBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Bookings"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * (Bookings are considered duplicates if they have the same data)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateBookingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateBookingException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate bookings\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/address/model/booking/exceptions/DuplicateVenueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Venues (Venues are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * data)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateVenueException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateVenueException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate venues\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/address/model/booking/exceptions/OverlappingBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in overlapping Bookings (Bookings are considered overlaps if their booking"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * timing overlaps)."},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class OverlappingBookingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public OverlappingBookingException() {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in overlapping bookings\");"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/address/model/booking/exceptions/VenueNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking.exceptions;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified venue."},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class VenueNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"hojiefeng":6}},{"path":"src/test/java/seedu/address/model/booking/BookingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING1;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING2;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING3;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalBookings.BOOKING4;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"class BookingTest {"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    void isOverlapping() {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.isOverlapping(BOOKING1));"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(null));"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        // overlapping timings -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING2));"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING3));"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        // different timings -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING3.isOverlapping(BOOKING4));"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        // different timings and venue -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING4));"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    void isId() {"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        //same id -\u003e returns true;"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.isId(0));"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        //different id -\u003e returns false;"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isId(1));"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    void equals() {"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.equals(BOOKING1));"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(null));"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(5));"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(BOOKING2));"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":57}},{"path":"src/test/java/seedu/address/model/booking/VenueTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.model.booking;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE3;"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE4;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"class VenueTest {"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    void isSameVenue() {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE1));"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(null));"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        // same name -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE2));"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        // different name -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE3));"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        // different name and remarks -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE4));"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    void equals() {"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.equals(VENUE1));"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(null));"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(5));"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(VENUE2));"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":46}},{"path":"src/test/java/seedu/address/testutil/TypicalBookings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE1;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.address.testutil.TypicalVenues.VENUE2;"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Booking;"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Booking} objects to be used in tests."},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"public class TypicalBookings {"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    public static final Booking BOOKING1 \u003d new Booking(\"Booker1\", VENUE1, \"description\","},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 12, 30, 00),"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 30, 00),"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"            0"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    public static final Booking BOOKING2 \u003d new Booking(\"Booker2\", VENUE1, \"description\","},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 00, 00),"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 14, 00, 00),"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"            1"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    public static final Booking BOOKING3 \u003d new Booking(\"Booker2\", VENUE2, \"description\","},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 12, 30, 00),"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 13, 30, 00),"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"            2"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public static final Booking BOOKING4 \u003d new Booking(\"Booker2\", VENUE2, \"description\","},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 14, 30, 00),"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"            LocalDateTime.of(2021, 03, 01, 15, 30, 00),"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            3"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    );"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    private TypicalBookings() {} // prevents instantiation"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":43}},{"path":"src/test/java/seedu/address/testutil/TypicalVenues.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.address.model.booking.Venue;"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Venue} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":" */"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"public class TypicalVenues {"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    public static final Venue VENUE1 \u003d new Venue(\"Venue1\", \"Remarks1\", 10);"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    public static final Venue VENUE2 \u003d new Venue(\"Venue1\", \"Remarks2\", 10);"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"    public static final Venue VENUE3 \u003d new Venue(\"Venue3\", \"Remarks1\", 10);"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    public static final Venue VENUE4 \u003d new Venue(\"Venue4\", \"Remarks4\", 10);"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":""},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private TypicalVenues() {} // prevents instantiation"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"}"}],"authorContributionMap":{"hojiefeng":16}}]
