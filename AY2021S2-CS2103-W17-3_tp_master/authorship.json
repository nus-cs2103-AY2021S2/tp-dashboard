[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W17-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W17-3/tp/actions)","lastModifiedDate":"2021-03-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"* **BookCoin To The Moon** is a CLI facility management system which allows users to type in commands to manage bookings and presents users a structured and detailed information on facility availability.","lastModifiedDate":"2021-02-26"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"* Our targeted users are administrative personnels of schools or organisations who need to manage bookings and usage of a large number of facilities. They have to ensure that bookings and usages of facilities abide by restrictions in addition to checking that the bookings are valid.*","lastModifiedDate":"2021-02-26"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"  \u003cbr\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"* For the detailed documentation of this project, see the **[BookCoin To The Moon Product Website](https://ay2021s2-cs2103-w17-3.github.io/tp/)**.","lastModifiedDate":"2021-02-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"vvan-essa":1,"-":4,"xuanqi966":5}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"mainClassName \u003d \u0027seedu.booking.Main\u0027","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    archiveName \u003d \u0027bookingapp.jar\u0027","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"run {","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hojiefeng":2,"-":72,"vvan-essa":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ming-00"},"content":"#About Us","lastModifiedDate":"2021-02-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"Bookcoin to the Moon was developed by the team CS2103-W17-3.","lastModifiedDate":"2021-02-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"### Wang Xuanqi","lastModifiedDate":"2021-02-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/xuanqi966.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"[[github](https://github.com/xuanqi966)]","lastModifiedDate":"2021-02-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"* Role: Developer, team lead","lastModifiedDate":"2021-02-26"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"### Ni Jiaying","lastModifiedDate":"2021-02-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ninijiaying.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ninijiaying)]","lastModifiedDate":"2021-02-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"* Role: Developer, integration","lastModifiedDate":"2021-02-26"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"### Vanessa Tay","lastModifiedDate":"2021-02-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/vvan-essa.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/vvan-essa)] [[portfolio](team/johndoe.md)]","lastModifiedDate":"2021-02-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"* Role: Developer, deliverables and deadlines","lastModifiedDate":"2021-02-26"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"### Ho Jie Feng","lastModifiedDate":"2021-02-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/hojiefeng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/hojiefeng)]","lastModifiedDate":"2021-02-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"* Role: Developer, code quality","lastModifiedDate":"2021-02-26"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"### Wu Weiming","lastModifiedDate":"2021-02-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"\u003cimg src\u003d\"images/ming-00.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"[[github](http://github.com/ming-00)]","lastModifiedDate":"2021-02-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"* Role: Developer, documentation","lastModifiedDate":"2021-02-26"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-26"}],"authorContributionMap":{"ming-00":27,"-":28}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**.","lastModifiedDate":"2020-06-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks.","lastModifiedDate":"2020-05-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`","lastModifiedDate":"2020-05-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`.","lastModifiedDate":"2020-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it.","lastModifiedDate":"2020-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e","lastModifiedDate":"2020-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base.","lastModifiedDate":"2020-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c","lastModifiedDate":"2020-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests","lastModifiedDate":"2020-05-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests","lastModifiedDate":"2020-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository.","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup).","lastModifiedDate":"2020-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov.","lastModifiedDate":"2020-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project.","lastModifiedDate":"2020-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks","lastModifiedDate":"2020-07-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements.","lastModifiedDate":"2020-07-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:","lastModifiedDate":"2020-07-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`","lastModifiedDate":"2020-07-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console.","lastModifiedDate":"2020-07-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**","lastModifiedDate":"2020-07-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest.","lastModifiedDate":"2020-07-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`","lastModifiedDate":"2020-07-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN.","lastModifiedDate":"2020-07-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory.","lastModifiedDate":"2020-07-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error.","lastModifiedDate":"2020-07-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur.","lastModifiedDate":"2020-07-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/MainApp.java).","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`).","lastModifiedDate":"2020-05-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created.","lastModifiedDate":"2020-05-26"}],"authorContributionMap":{"hojiefeng":1,"-":78}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/Main.java) and [`MainApp`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/MainApp.java). It is responsible for,","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/ui/Ui.java)","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/logic/Logic.java)","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"1. `Logic` uses the `BookingSystemParser` class to parse the user command.","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"**API** : [`Model.java`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/model/Model.java)","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"* stores the booking system data.","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `BookingSystem`, which `Person` references. This allows `BookingSystem` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"**API** : [`Storage.java`](https://github.com/AY2021S2-CS2103-W17-3/tp/tree/master/src/main/java/seedu/booking/storage/Storage.java)","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"Classes used by multiple components are in the `seedu.booking.commons` package.","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedBookingSystem`. It extends `BookingSystem` with an undo/redo history, stored internally as an `bookingSystemStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"* `VersionedBookingSystem#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"* `VersionedBookingSystem#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"* `VersionedBookingSystem#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"These operations are exposed in the `Model` interface as `Model#commitBookingSystem()`, `Model#undoBookingSystem()` and `Model#redoBookingSystem()` respectively.","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"Step 1. The user launches the application for the first time. The `VersionedBookingSystem` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitBookingSystem()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `bookingSystemStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitBookingSystem()`, causing another modified address book state to be saved into the `bookingSystemStateList`.","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitBookingSystem()`, so the address book state will not be saved into the `bookingSystemStateList`.","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoBookingSystem()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"hojiefeng"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial BookingSystem state, then there are no previous BookingSystem states to restore. The `undo` command uses `Model#canUndoBookingSystem()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"hojiefeng"},"content":"The `redo` command does the opposite — it calls `Model#redoBookingSystem()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2021-03-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"hojiefeng"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `bookingSystemStateList.size() - 1`, pointing to the latest address book state, then there are no undone BookingSystem states to restore. The `redo` command uses `Model#canRedoBookingSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2021-03-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitBookingSystem()`, `Model#undoBookingSystem()` or `Model#redoBookingSystem()`. Thus, the `bookingSystemStateList` remains unchanged.","lastModifiedDate":"2021-03-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"hojiefeng"},"content":"Step 6. The user executes `clear`, which calls `Model#commitBookingSystem()`. Since the `currentStatePointer` is not pointing at the end of the `bookingSystemStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2021-03-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"hojiefeng"},"content":"* has a need to manage a large number of venue bookings","lastModifiedDate":"2021-02-26"},{"lineNumber":240,"author":{"gitId":"hojiefeng"},"content":"* has to ensure bookings abide by restrictions","lastModifiedDate":"2021-02-26"},{"lineNumber":241,"author":{"gitId":"NiniJiaying"},"content":"* needs to check that the bookings are valid","lastModifiedDate":"2021-03-24"},{"lineNumber":242,"author":{"gitId":"NiniJiaying"},"content":"* is administrative personnel of schools or organisations","lastModifiedDate":"2021-03-24"},{"lineNumber":243,"author":{"gitId":"NiniJiaying"},"content":"* prefers desktop apps over other types","lastModifiedDate":"2021-03-24"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"hojiefeng"},"content":"**Value proposition**:","lastModifiedDate":"2021-02-26"},{"lineNumber":249,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-02-26"},{"lineNumber":250,"author":{"gitId":"hojiefeng"},"content":"* manage bookings faster than a typical mouse/GUI driven app","lastModifiedDate":"2021-02-26"},{"lineNumber":251,"author":{"gitId":"hojiefeng"},"content":"* ease of managing bookings since it is a centralised system","lastModifiedDate":"2021-02-26"},{"lineNumber":252,"author":{"gitId":"hojiefeng"},"content":"* automatically keeps track of room usage, conflicts and rule violations","lastModifiedDate":"2021-02-26"},{"lineNumber":253,"author":{"gitId":"hojiefeng"},"content":"* clear and structured way to avoid ambiguity","lastModifiedDate":"2021-02-26"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add venues                     |                                                                        |","lastModifiedDate":"2021-02-26"},{"lineNumber":263,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit venues                    | reflect the most up to date details of the venue                       |","lastModifiedDate":"2021-02-26"},{"lineNumber":264,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete venues                  |                                                                        |","lastModifiedDate":"2021-02-26"},{"lineNumber":265,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | view venues                    |                                                                        |","lastModifiedDate":"2021-03-24"},{"lineNumber":266,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | add bookings                   |                                                                        |","lastModifiedDate":"2021-02-26"},{"lineNumber":267,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | edit bookings                  | change booking details when the booker decides to amend the booking    |","lastModifiedDate":"2021-02-26"},{"lineNumber":268,"author":{"gitId":"hojiefeng"},"content":"| `* * *`  | admin in charge of facilities              | delete bookings                |                                                                        |","lastModifiedDate":"2021-02-26"},{"lineNumber":269,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | view bookings                  |                                                                        |","lastModifiedDate":"2021-03-24"},{"lineNumber":270,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | add bookers                    |                                                                        |","lastModifiedDate":"2021-03-24"},{"lineNumber":271,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | edit bookers                   | reflect the most up to date details of the booker                       |","lastModifiedDate":"2021-03-24"},{"lineNumber":272,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | delete bookers                 |                                                                        |","lastModifiedDate":"2021-03-24"},{"lineNumber":273,"author":{"gitId":"NiniJiaying"},"content":"| `* * *`  | admin in charge of facilities              | view bookers                   |                                                                        |","lastModifiedDate":"2021-03-24"},{"lineNumber":274,"author":{"gitId":"hojiefeng"},"content":"| `* *`    | admin in charge of facilities              | query booking information of a particular venue | quickly find out the relevant information instead of search one by one |","lastModifiedDate":"2021-02-26"},{"lineNumber":275,"author":{"gitId":"xuanqi966"},"content":"| `* *`    | admin in charge of facilities              | query booking information of a particular booker | quickly find out the relevant information instead of search one by one |","lastModifiedDate":"2021-03-25"},{"lineNumber":276,"author":{"gitId":"xuanqi966"},"content":"| `* *`    | admin in charge of facilities              | query booking information of a particular date | quickly find out the relevant information instead of search one by one |","lastModifiedDate":"2021-03-25"},{"lineNumber":277,"author":{"gitId":"hojiefeng"},"content":"| `*`      | admin in charge of facilities              | be able to access past data           | easily check the history of certain venues                      |","lastModifiedDate":"2021-02-26"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"vvan-essa"},"content":"(For all use cases below, the **System** is `BookCoin To The Moon` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-02-27"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC01 - Delete a venue**","lastModifiedDate":"2021-02-27"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific venue.","lastModifiedDate":"2021-02-27"},{"lineNumber":288,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the venue.","lastModifiedDate":"2021-02-27"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given venue is invalid.","lastModifiedDate":"2021-02-27"},{"lineNumber":295,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":296,"author":{"gitId":"NiniJiaying"},"content":"    * 1a1. BookingSystem shows an error message.","lastModifiedDate":"2021-03-24"},{"lineNumber":297,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":298,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-02-27"},{"lineNumber":299,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":300,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":301,"author":{"gitId":"vvan-essa"},"content":"**Use case: UC02 - Delete a booking**","lastModifiedDate":"2021-02-27"},{"lineNumber":302,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":303,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":304,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":305,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to delete a specific booking.","lastModifiedDate":"2021-02-27"},{"lineNumber":306,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon deletes the booking.","lastModifiedDate":"2021-02-27"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"vvan-essa"},"content":"* 1a. The given booking is invalid.","lastModifiedDate":"2021-02-27"},{"lineNumber":313,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":314,"author":{"gitId":"NiniJiaying"},"content":"    * 1a1. BookingSystem shows an error message.","lastModifiedDate":"2021-03-24"},{"lineNumber":315,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":316,"author":{"gitId":"vvan-essa"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-02-27"},{"lineNumber":317,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":318,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":319,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC03 - Delete a booker**","lastModifiedDate":"2021-03-24"},{"lineNumber":320,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":321,"author":{"gitId":"NiniJiaying"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":322,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":323,"author":{"gitId":"NiniJiaying"},"content":"1.  User requests to delete a specific booker.","lastModifiedDate":"2021-03-24"},{"lineNumber":324,"author":{"gitId":"NiniJiaying"},"content":"2.  BookCoin To The Moon deletes the booker.","lastModifiedDate":"2021-03-24"},{"lineNumber":325,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":326,"author":{"gitId":"NiniJiaying"},"content":"    Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":327,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":328,"author":{"gitId":"NiniJiaying"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":329,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":330,"author":{"gitId":"NiniJiaying"},"content":"* 1a. The given booker is invalid.","lastModifiedDate":"2021-03-24"},{"lineNumber":331,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":332,"author":{"gitId":"NiniJiaying"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-24"},{"lineNumber":333,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":334,"author":{"gitId":"NiniJiaying"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2021-03-24"},{"lineNumber":335,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":336,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":337,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC04 - Add a venue**","lastModifiedDate":"2021-03-24"},{"lineNumber":338,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":339,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":340,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":341,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new venue into the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":342,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the venue into the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":343,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":344,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":345,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":346,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":347,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":348,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue to be added is already in the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":349,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":350,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":351,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":352,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":353,"author":{"gitId":"ming-00"},"content":"* 1b. The request misses compulsory fields, such as a venue name.","lastModifiedDate":"2021-03-23"},{"lineNumber":354,"author":{"gitId":"ming-00"},"content":"    * 1b1. BookCoin To The Moon shows an error message and prompts the user to reenter their command.","lastModifiedDate":"2021-03-23"},{"lineNumber":355,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":356,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":357,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC05 - Add a booking**","lastModifiedDate":"2021-03-24"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":360,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":361,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to add a new booking into the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":362,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon adds the booking into the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":363,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":364,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":365,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":366,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":367,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":368,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking to be added is already in the system.","lastModifiedDate":"2021-02-27"},{"lineNumber":369,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":371,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":372,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":373,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC06 - Add a booker**","lastModifiedDate":"2021-03-24"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":375,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":377,"author":{"gitId":"NiniJiaying"},"content":"1.  User requests to add a new booker into the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":378,"author":{"gitId":"NiniJiaying"},"content":"2.  BookCoin To The Moon adds the booker into the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":382,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":384,"author":{"gitId":"NiniJiaying"},"content":"* 1a. The booker to be added is already in the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":385,"author":{"gitId":"NiniJiaying"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-24"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":387,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":390,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC07 - List all bookings**","lastModifiedDate":"2021-03-24"},{"lineNumber":391,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":392,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":393,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":394,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all bookings.","lastModifiedDate":"2021-02-27"},{"lineNumber":395,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of bookings.","lastModifiedDate":"2021-02-27"},{"lineNumber":396,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":397,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":398,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":399,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC08 - List all venues**","lastModifiedDate":"2021-03-24"},{"lineNumber":400,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":401,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":402,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":403,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to list all venues.","lastModifiedDate":"2021-02-27"},{"lineNumber":404,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows a list of venues.","lastModifiedDate":"2021-02-27"},{"lineNumber":405,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":406,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":407,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":408,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC09 - List all bookers**","lastModifiedDate":"2021-03-24"},{"lineNumber":409,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":410,"author":{"gitId":"NiniJiaying"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":411,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":412,"author":{"gitId":"NiniJiaying"},"content":"1.  User requests to list all bookers.","lastModifiedDate":"2021-03-24"},{"lineNumber":413,"author":{"gitId":"NiniJiaying"},"content":"2.  BookCoin To The Moon shows a list of bookers.","lastModifiedDate":"2021-03-24"},{"lineNumber":414,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":415,"author":{"gitId":"NiniJiaying"},"content":"    Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":416,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":417,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":418,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC10 - Find a booking**","lastModifiedDate":"2021-03-24"},{"lineNumber":419,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":420,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":421,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":422,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific booking.","lastModifiedDate":"2021-02-27"},{"lineNumber":423,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that booking.","lastModifiedDate":"2021-02-27"},{"lineNumber":424,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":425,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":426,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":427,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":428,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":429,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found.","lastModifiedDate":"2021-02-27"},{"lineNumber":430,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":431,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":432,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":433,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":434,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC11 - Find a venue**","lastModifiedDate":"2021-03-24"},{"lineNumber":435,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":436,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":437,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":438,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to find information about a specific venue.","lastModifiedDate":"2021-02-27"},{"lineNumber":439,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon shows the information for that venue.","lastModifiedDate":"2021-02-27"},{"lineNumber":440,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":441,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":442,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":443,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":444,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":445,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found.","lastModifiedDate":"2021-02-27"},{"lineNumber":446,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":447,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":448,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":449,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":450,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC12 - Edit a venue**","lastModifiedDate":"2021-03-24"},{"lineNumber":451,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":452,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":453,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":454,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific venue.","lastModifiedDate":"2021-02-27"},{"lineNumber":455,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the venue information.","lastModifiedDate":"2021-02-27"},{"lineNumber":456,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":457,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":458,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":459,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":460,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":461,"author":{"gitId":"vvan-essa"},"content":"* 1a. The venue requested cannot be found.","lastModifiedDate":"2021-02-27"},{"lineNumber":462,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":463,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":464,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":465,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":466,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC13 - Edit a booking**","lastModifiedDate":"2021-03-24"},{"lineNumber":467,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":468,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":469,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":470,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to edit information about a specific booking.","lastModifiedDate":"2021-02-27"},{"lineNumber":471,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon edits the booking information.","lastModifiedDate":"2021-02-27"},{"lineNumber":472,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":473,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":474,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":475,"author":{"gitId":"vvan-essa"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":476,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":477,"author":{"gitId":"vvan-essa"},"content":"* 1a. The booking requested cannot be found.","lastModifiedDate":"2021-02-27"},{"lineNumber":478,"author":{"gitId":"vvan-essa"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-02-27"},{"lineNumber":479,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":480,"author":{"gitId":"vvan-essa"},"content":"  Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":481,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":482,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":483,"author":{"gitId":"NiniJiaying"},"content":"**Use case: UC14 - Edit a booker**","lastModifiedDate":"2021-03-24"},{"lineNumber":484,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":485,"author":{"gitId":"NiniJiaying"},"content":"**MSS**","lastModifiedDate":"2021-03-24"},{"lineNumber":486,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":487,"author":{"gitId":"NiniJiaying"},"content":"1.  User requests to edit information about a specific booker.","lastModifiedDate":"2021-03-24"},{"lineNumber":488,"author":{"gitId":"NiniJiaying"},"content":"2.  BookCoin To The Moon edits the booker information.","lastModifiedDate":"2021-03-24"},{"lineNumber":489,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":490,"author":{"gitId":"NiniJiaying"},"content":"    Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":491,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":492,"author":{"gitId":"NiniJiaying"},"content":"**Extensions**","lastModifiedDate":"2021-03-24"},{"lineNumber":493,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":494,"author":{"gitId":"NiniJiaying"},"content":"* 1a. The booker requested cannot be found.","lastModifiedDate":"2021-03-24"},{"lineNumber":495,"author":{"gitId":"NiniJiaying"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-24"},{"lineNumber":496,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":497,"author":{"gitId":"NiniJiaying"},"content":"  Use case ends.","lastModifiedDate":"2021-03-24"},{"lineNumber":498,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":499,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":500,"author":{"gitId":"xuanqi966"},"content":"**Use case: UC15 - Filter bookings by booker**","lastModifiedDate":"2021-03-25"},{"lineNumber":501,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":502,"author":{"gitId":"xuanqi966"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":503,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":504,"author":{"gitId":"xuanqi966"},"content":"1.  User requests to view bookings under a specific booker.","lastModifiedDate":"2021-03-25"},{"lineNumber":505,"author":{"gitId":"xuanqi966"},"content":"2.  BookCoin To The Moon displays all bookings made by the specified booker.","lastModifiedDate":"2021-03-25"},{"lineNumber":506,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":507,"author":{"gitId":"xuanqi966"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":508,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":509,"author":{"gitId":"xuanqi966"},"content":"**Extensions**","lastModifiedDate":"2021-03-25"},{"lineNumber":510,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":511,"author":{"gitId":"xuanqi966"},"content":"* 1a. No booking is found under the specified booker.","lastModifiedDate":"2021-03-25"},{"lineNumber":512,"author":{"gitId":"xuanqi966"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-25"},{"lineNumber":513,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":514,"author":{"gitId":"xuanqi966"},"content":"  Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":515,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":516,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":517,"author":{"gitId":"xuanqi966"},"content":"**Use case: UC16 - Filter bookings by date**","lastModifiedDate":"2021-03-25"},{"lineNumber":518,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":519,"author":{"gitId":"xuanqi966"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":520,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":521,"author":{"gitId":"xuanqi966"},"content":"1.  User requests to view bookings of a specific date.","lastModifiedDate":"2021-03-25"},{"lineNumber":522,"author":{"gitId":"xuanqi966"},"content":"2.  BookCoin To The Moon displays all bookings made on the specified date.","lastModifiedDate":"2021-03-25"},{"lineNumber":523,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":524,"author":{"gitId":"xuanqi966"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":525,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":526,"author":{"gitId":"xuanqi966"},"content":"**Extensions**","lastModifiedDate":"2021-03-25"},{"lineNumber":527,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":528,"author":{"gitId":"xuanqi966"},"content":"* 1a. No booking is found one the specified date.","lastModifiedDate":"2021-03-25"},{"lineNumber":529,"author":{"gitId":"xuanqi966"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-25"},{"lineNumber":530,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":531,"author":{"gitId":"xuanqi966"},"content":"  Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":532,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":533,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":534,"author":{"gitId":"xuanqi966"},"content":"**Use case: UC17 - Filter bookings by venue**","lastModifiedDate":"2021-03-25"},{"lineNumber":535,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":536,"author":{"gitId":"xuanqi966"},"content":"**MSS**","lastModifiedDate":"2021-03-25"},{"lineNumber":537,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":538,"author":{"gitId":"xuanqi966"},"content":"1.  User requests to view bookings under a specific venue.","lastModifiedDate":"2021-03-25"},{"lineNumber":539,"author":{"gitId":"xuanqi966"},"content":"2.  BookCoin To The Moon displays all bookings made by the specified venue.","lastModifiedDate":"2021-03-25"},{"lineNumber":540,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":541,"author":{"gitId":"xuanqi966"},"content":"    Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":542,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":543,"author":{"gitId":"xuanqi966"},"content":"**Extensions**","lastModifiedDate":"2021-03-25"},{"lineNumber":544,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":545,"author":{"gitId":"xuanqi966"},"content":"* 1a. No booking is found under the specified venue.","lastModifiedDate":"2021-03-25"},{"lineNumber":546,"author":{"gitId":"xuanqi966"},"content":"    * 1a1. BookCoin To The Moon shows an error message.","lastModifiedDate":"2021-03-25"},{"lineNumber":547,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":548,"author":{"gitId":"xuanqi966"},"content":"  Use case ends.","lastModifiedDate":"2021-03-25"},{"lineNumber":549,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":550,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":551,"author":{"gitId":"xuanqi966"},"content":"**Use case: UC18 - Exit the program**","lastModifiedDate":"2021-03-25"},{"lineNumber":552,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":553,"author":{"gitId":"vvan-essa"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":554,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":555,"author":{"gitId":"vvan-essa"},"content":"1.  User requests to exit the program.","lastModifiedDate":"2021-02-27"},{"lineNumber":556,"author":{"gitId":"vvan-essa"},"content":"2.  BookCoin To The Moon closes the window and terminates.","lastModifiedDate":"2021-02-27"},{"lineNumber":557,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":558,"author":{"gitId":"vvan-essa"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"hojiefeng"},"content":"2.  Should be able to hold up to 1000 venues and bookings without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-02-26"},{"lineNumber":566,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"hojiefeng"},"content":"4.  Should be able to perform queries quickly even with significant amounts of data present.","lastModifiedDate":"2021-02-26"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"hojiefeng"},"content":"* **Booking**: A person\u0027s request to occupy the room for a specific amount of time at a specific date","lastModifiedDate":"2021-02-26"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"ming-00"},"content":"### Creating a venue","lastModifiedDate":"2021-03-23"},{"lineNumber":601,"author":{"gitId":"ming-00"},"content":"1. Adding Victoria Hall","lastModifiedDate":"2021-03-23"},{"lineNumber":602,"author":{"gitId":"ming-00"},"content":"    1. Prerequisites: a venue by the same name cannot already exist. If it is present as a record in the system, delete it.","lastModifiedDate":"2021-03-23"},{"lineNumber":603,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":604,"author":{"gitId":"ming-00"},"content":"    2. Test case: `create_venue v/Victoria Hall`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":605,"author":{"gitId":"ming-00"},"content":"    Expected: Victoria Hall should appear in the list of venues. The default capacity should be set to 10 as it was unspecified in the command, and there should be no description.","lastModifiedDate":"2021-03-23"},{"lineNumber":606,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":607,"author":{"gitId":"ming-00"},"content":"    3. Test case: `create_venue v/Victoria Hall max/50`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":608,"author":{"gitId":"ming-00"},"content":"    Expected: Victoria Hall should appear in the list of venues with a capacity indicated to be 50. No description should be present.","lastModifiedDate":"2021-03-23"},{"lineNumber":609,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":610,"author":{"gitId":"ming-00"},"content":"    4. Test case: `create_venue v/Victoria Hall d/Popular concert hall`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":611,"author":{"gitId":"ming-00"},"content":"    Expected: Victoria Hall should appear in the list of venues with a description \"Popular concert hall\". Capacity should be set to a default of 10.","lastModifiedDate":"2021-03-23"},{"lineNumber":612,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":613,"author":{"gitId":"hojiefeng"},"content":"### Creating a person","lastModifiedDate":"2021-03-24"},{"lineNumber":614,"author":{"gitId":"hojiefeng"},"content":"1. Adding a person record for John Doe","lastModifiedDate":"2021-03-24"},{"lineNumber":615,"author":{"gitId":"hojiefeng"},"content":"    1. Prerequisites: a person by the same name cannot already exist. If it is present as a record in the system, delete it.","lastModifiedDate":"2021-03-24"},{"lineNumber":616,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":617,"author":{"gitId":"hojiefeng"},"content":"    2. Test case: `add n/John Doe e/johnd@example.com `\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":618,"author":{"gitId":"hojiefeng"},"content":"    Expected: There should be an error stating that the the booking command is invalid. This is due to a missing phone number.","lastModifiedDate":"2021-03-24"},{"lineNumber":619,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":620,"author":{"gitId":"hojiefeng"},"content":"    3. Test case: `add n/John Doe p/98765432`\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":621,"author":{"gitId":"hojiefeng"},"content":"    Expected: There should be an error stating that the the booking command is invalid. This is due to a missing email.","lastModifiedDate":"2021-03-24"},{"lineNumber":622,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":623,"author":{"gitId":"hojiefeng"},"content":"    4. Test case: `add n/John Doe p/98765432 e/johnd@example.com `\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":624,"author":{"gitId":"hojiefeng"},"content":"    Expected: John Doe should appear in the list of persons with the number 98765432 and email johnd@example.com.","lastModifiedDate":"2021-03-24"},{"lineNumber":625,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":626,"author":{"gitId":"hojiefeng"},"content":"### Creating a booking","lastModifiedDate":"2021-03-24"},{"lineNumber":627,"author":{"gitId":"hojiefeng"},"content":"1. Adding a booking for Victoria Hall","lastModifiedDate":"2021-03-24"},{"lineNumber":628,"author":{"gitId":"hojiefeng"},"content":"    1. Prerequisites: a venue by the same name already exist and a venue by the name of Hall does not exist. If it is not present as a record in the system, create one. Similarly for the email of a person booking, create one if not present","lastModifiedDate":"2021-03-24"},{"lineNumber":629,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":630,"author":{"gitId":"hojiefeng"},"content":"    2. Test case: `create_booking b/example@gmail.com v/Hall d/For FYP Meeting. bs/2012-01-31 22:59:59 be/2012-01-31 23:59:59`\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":631,"author":{"gitId":"hojiefeng"},"content":"    Expected: There should be an error stating that the venue does not exist in the system","lastModifiedDate":"2021-03-24"},{"lineNumber":632,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":633,"author":{"gitId":"hojiefeng"},"content":"    3. Test case: `create_booking v/Victoria Hall d/For FYP Meeting. bs/2012-01-31 22:59:59 be/2012-01-31 23:59:59`\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":634,"author":{"gitId":"hojiefeng"},"content":"    Expected: There should be an error stating that the the booking command is invalid. This is due to a missing email.","lastModifiedDate":"2021-03-24"},{"lineNumber":635,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":636,"author":{"gitId":"hojiefeng"},"content":"    4. Test case: `create_booking b/example@gmail.com v/Hall d/For FYP Meeting. bs/2012-01-31 22:59:59 be/2012-01-31 23:59:59`\u003cbr\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":637,"author":{"gitId":"hojiefeng"},"content":"    Expected: A booking for Victoria Hall should appear in the list of bookings with a description \"For FYP Meeting.\" with a date range from 31st Jan 2012, 22:59:59 to 23:59:59.","lastModifiedDate":"2021-03-24"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":639,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":645,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":646,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":647,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":648,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":649,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":650,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":651,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":652,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":653,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":654,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":655,"author":{"gitId":"vvan-essa"},"content":"### Deleting a venue","lastModifiedDate":"2021-03-23"},{"lineNumber":656,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":657,"author":{"gitId":"vvan-essa"},"content":"1. Deleting a venue while all venues are being shown","lastModifiedDate":"2021-03-23"},{"lineNumber":658,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":659,"author":{"gitId":"vvan-essa"},"content":"    1. Prerequisites: List all venues using the `list_venue` command.","lastModifiedDate":"2021-03-23"},{"lineNumber":660,"author":{"gitId":"vvan-essa"},"content":"       Multiple venues in the list. Venue with venue name Victoria Hall is in the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":661,"author":{"gitId":"vvan-essa"},"content":"       Venue with venue name Nonexistent Venue is not in the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":662,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":663,"author":{"gitId":"vvan-essa"},"content":"    1. Test case: `delete_venue v/Victoria Hall`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":664,"author":{"gitId":"vvan-essa"},"content":"       Expected: Venue with venue name Victoria Hall is deleted from the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":665,"author":{"gitId":"vvan-essa"},"content":"       Details of the deleted venue shown in the status message.","lastModifiedDate":"2021-03-23"},{"lineNumber":666,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":667,"author":{"gitId":"vvan-essa"},"content":"    1. Test case: `delete_venue v/Nonexistent Venue`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":668,"author":{"gitId":"vvan-essa"},"content":"       Expected: No venue is deleted. Error details shown in the status message.","lastModifiedDate":"2021-03-23"},{"lineNumber":669,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":670,"author":{"gitId":"vvan-essa"},"content":"    1. Other incorrect delete venue commands to try: `delete_venue`, `delete_venue x` \u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":671,"author":{"gitId":"vvan-essa"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-03-23"},{"lineNumber":672,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":673,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-03-23"},{"lineNumber":674,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":675,"author":{"gitId":"vvan-essa"},"content":"### Deleting a booking","lastModifiedDate":"2021-03-23"},{"lineNumber":676,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":677,"author":{"gitId":"vvan-essa"},"content":"1. Deleting a booking while all bookings are being shown","lastModifiedDate":"2021-03-23"},{"lineNumber":678,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":679,"author":{"gitId":"vvan-essa"},"content":"    1. Prerequisites: List all bookings using the `list_booking` command.","lastModifiedDate":"2021-03-23"},{"lineNumber":680,"author":{"gitId":"vvan-essa"},"content":"       Multiple bookings in the list. Booking with booking id 8653792312 is in the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":681,"author":{"gitId":"vvan-essa"},"content":"       Booking with booking id 9348125689 is not in the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":682,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":683,"author":{"gitId":"vvan-essa"},"content":"    1. Test case: `delete_booking bid/8653792312`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":684,"author":{"gitId":"vvan-essa"},"content":"       Expected: Booking with booking id 8653792312 is deleted from the list.","lastModifiedDate":"2021-03-23"},{"lineNumber":685,"author":{"gitId":"vvan-essa"},"content":"       Details of the deleted booking shown in the status message.","lastModifiedDate":"2021-03-23"},{"lineNumber":686,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":687,"author":{"gitId":"vvan-essa"},"content":"    1. Test case: `delete_booking bid/9348125689`\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":688,"author":{"gitId":"vvan-essa"},"content":"       Expected: No booking is deleted. Error details shown in the status message.","lastModifiedDate":"2021-03-23"},{"lineNumber":689,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":690,"author":{"gitId":"vvan-essa"},"content":"    1. Other incorrect delete booking commands to try: `delete_booking`, `delete_booking x` \u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":691,"author":{"gitId":"vvan-essa"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2021-03-23"},{"lineNumber":692,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":693,"author":{"gitId":"vvan-essa"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2021-03-23"},{"lineNumber":694,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":695,"author":{"gitId":"ming-00"},"content":"### Accessing help","lastModifiedDate":"2021-03-23"},{"lineNumber":696,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":697,"author":{"gitId":"ming-00"},"content":"1. Accessing help feature","lastModifiedDate":"2021-03-23"},{"lineNumber":698,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":699,"author":{"gitId":"ming-00"},"content":"    1. Test case: `help`","lastModifiedDate":"2021-03-23"},{"lineNumber":700,"author":{"gitId":"ming-00"},"content":"    Expected: An additional pop up help window should appear with a url to the user guide for Bookcoin.","lastModifiedDate":"2021-03-23"},{"lineNumber":701,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":702,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hojiefeng":68,"ming-00":22,"-":317,"NiniJiaying":71,"vvan-essa":177,"xuanqi966":54}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"   1. Run the `seedu.booking.Main` and try a few commands.","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [BookingSystem’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"hojiefeng":2,"-":53}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"   e.g. `seedu.booking.commons.StringUtilTest`","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"   e.g. `seedu.booking.storage.StorageManagerTest`","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"   e.g. `seedu.booking.logic.LogicManagerTest`","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"hojiefeng":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon is a **desktop app for managing bookings and presents users a structured and detailed information on facility availability via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookCoinToTheMoon can get your facility management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"1. Download the latest `bookcointothemoon.jar` `[coming in v2.0]`","lastModifiedDate":"2021-02-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your BookCoinToTheMoon.","lastModifiedDate":"2021-02-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"   ![Ui](images/Ui_Booking.png)","lastModifiedDate":"2021-02-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"   * **`list_venues`** : Lists all venues.","lastModifiedDate":"2021-02-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"   * **`create_venue`**`n/Chua Thian Poh Hall max/40` : Adds a venue named `Chua Thian Poh Hall` to the BookCoinToTheMoon.","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"   * **`bye`** : Exits the app.","lastModifiedDate":"2021-02-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"  e.g. in `find_venue v/VENUE_ID`, `VENUE_ID` is a parameter which can be used as `find_venue v/1`.","lastModifiedDate":"2021-02-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"  e.g. `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` can be used as `n/Chua Thian Poh Hall max/40` or as `n/Chua Thian Poh Hall`.","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `bye`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"  e.g. if the command specifies `bye 123`, it will be interpreted as `bye`.","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"### Adding a venue : `create_venue`","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"Adds a new venue for the booking app.","lastModifiedDate":"2021-02-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]`","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"Examples:","lastModifiedDate":"2021-02-27"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"* `create_venue n/Chua Thian Poh Hall max/40`","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"### Adding a booking : `create_booking`","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"Adds a new booking into the booking app. The default booking is set to one hour for the first iteration.","lastModifiedDate":"2021-02-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"Format: `create_booking d/DATE t/TIMING n/VENUE_NAME`","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"Examples:","lastModifiedDate":"2021-02-27"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"* `create_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"### Listing all venues : `list_venues`","lastModifiedDate":"2021-02-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all venues and their corresponding IDs in the booking app.","lastModifiedDate":"2021-02-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_venues`","lastModifiedDate":"2021-02-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"### Listing all bookings : `list_bookings`","lastModifiedDate":"2021-02-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"Shows a list of all bookings and their corresponding IDs in the booking app.","lastModifiedDate":"2021-02-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"Format: `list_bookings`","lastModifiedDate":"2021-02-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"### Finding a venue : `find_venue`","lastModifiedDate":"2021-02-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given venue ID.","lastModifiedDate":"2021-02-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_venue v/VENUE_ID`","lastModifiedDate":"2021-02-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"* `find_venue v/1`","lastModifiedDate":"2021-02-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"### Finding a booking : `find_booking`","lastModifiedDate":"2021-02-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"Shows information about the booking corresponding to the given booking ID.","lastModifiedDate":"2021-02-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"Format: `find_booking b/BOOKING_ID`","lastModifiedDate":"2021-02-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"* `find_booking b/2`","lastModifiedDate":"2021-02-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a venue : `delete_venue`","lastModifiedDate":"2021-02-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"Deletes a venue corresponding to the venue ID specified.","lastModifiedDate":"2021-02-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_venue v/VENUE_ID`","lastModifiedDate":"2021-02-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"* `delete_venue v/1`","lastModifiedDate":"2021-02-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"### Deleting a booking : `delete_booking`","lastModifiedDate":"2021-02-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"Deletes booking corresponding to the booking ID specified.","lastModifiedDate":"2021-02-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"Format: `delete_booking b/BOOKING_ID`","lastModifiedDate":"2021-02-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"Examples:","lastModifiedDate":"2021-02-27"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"* `delete_booking b/2`","lastModifiedDate":"2021-02-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"### Exiting the program : `bye`","lastModifiedDate":"2021-02-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"Format: `bye`","lastModifiedDate":"2021-02-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"BookCoinToTheMoon data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-02-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"### Editing the data file `[coming in v2.0]`","lastModifiedDate":"2021-02-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous BookCoinToTheMoon home folder.","lastModifiedDate":"2021-02-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"**Add** | `add_venue n/VENUE_NAME [max/MAXIMUM_OCCUPANCY]` \u003cbr\u003e e.g., `add_venue n/Chua Thian Poh Hall max/40`\u003cbr\u003e\u003cbr\u003e `add_booking`e.g., `add_booking d/2020-12-12 t/2359 n/Chua Thian Poh Hall`","lastModifiedDate":"2021-02-27"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"**Delete** | `delete_venue v/VENUE_ID`\u003cbr\u003e e.g., `delete_venue v/1` \u003cbr\u003e\u003cbr\u003e `delete_booking b/BOOKING_ID`\u003cbr\u003e e.g., `delete_booking b/2`","lastModifiedDate":"2021-02-27"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"**Find** | `find_venue v/VENUE_ID`\u003cbr\u003e e.g., `find_venue v/1`\u003cbr\u003e\u003cbr\u003e `find_booking b/BOOKING_ID`\u003cbr\u003e e.g., `find_booking b/2`","lastModifiedDate":"2021-02-27"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"**List** | `list_venues` \u003cbr\u003e `list_bookings`","lastModifiedDate":"2021-02-27"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"**Exit** | `bye`","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"-":102,"NiniJiaying":55}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"user -[USER_COLOR]\u003e ui : \"delete_booking 1\"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete_booking 1\")","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"logic -[LOGIC_COLOR]\u003e model : deleteBooking(p)","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveBookingSystem(bookingSystem)","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":4,"-":34}},{"path":"docs/diagrams/BetterModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *-right-\u003e \"1\" UniquePersonList","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *-right-\u003e \"1\" NonOverlappingBookingList","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *-right-\u003e \"1\" UniqueVenueList","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *-right-\u003e \"1\" UniqueTagList","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"UniqueTagList -[hidden]down- UniquePersonList","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"UniquePersonList -[hidden]down- NonOverlappingBookingList","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"NonOverlappingBookingList -[hidden]down- UniqueVenueList","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"UniqueTagList *-right-\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"UniquePersonList o-right-\u003e Person","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"NonOverlappingBookingList o-right-\u003e Booking","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"UniqueVenueList o-right-\u003e Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Person -up-\u003e \"*\" Tag","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e Person","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e DateTimeRange","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"Venue *--\u003e VenueName","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"Venue *--\u003e Capacity","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":15,"-":18}},{"path":"docs/diagrams/CommitActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"start","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":":User executes command;","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"if () then ([command commits BookingSystem])","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    :Purge redundant states;","lastModifiedDate":"2020-12-12"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    :Save BookingSystem to","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    bookingSystemStateList;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"else ([else])","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"endif","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"stop","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":12}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"participant \":BookingSystemParser\" as BookingSystemParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"participant \":DeleteBookingCommandParser\" as DeleteBookingCommandParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"participant \"d:DeleteBookingCommand\" as DeleteBookingCommand LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"[-\u003e LogicManager : execute(\"delete_booking 1\")","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"LogicManager -\u003e BookingSystemParser : parseCommand(\"delete_booking 1\")","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"activate BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"create DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser -\u003e DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"activate DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommandParser --\u003e BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"deactivate DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser -\u003e DeleteBookingCommandParser : parse(\"1\")","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"activate DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"create DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommandParser -\u003e DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"activate DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommand --\u003e DeleteBookingCommandParser : d","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"deactivate DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommandParser --\u003e BookingSystemParser : d","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"deactivate DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommandParser -[hidden]-\u003e BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"destroy DeleteBookingCommandParser","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser --\u003e LogicManager : d","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"deactivate BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"LogicManager -\u003e DeleteBookingCommand : execute()","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"activate DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommand -\u003e Model : deletePerson(1)","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"Model --\u003e DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommand -\u003e CommandResult","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"CommandResult --\u003e DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"DeleteBookingCommand --\u003e LogicManager : result","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"deactivate DeleteBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":32,"-":37}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package Parser {","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"Class BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"package Command {","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager .up.|\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"LogicManager --\u003e\"1\" BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser .left.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"XYZCommandParser ..|\u003e Parser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult","lastModifiedDate":"2019-07-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult -[hidden]-\u003e Parser","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":59}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"Interface ReadOnlyBookingSystem \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Interface Model \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface ObservableList \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"Class BookingSystem","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"Class ReadOnlyBookingSystem","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class Model","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Package Person {","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Package Tag {","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"Package Booking {","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"Class Booking","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"Class Id","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"Class DateTimeRange","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"Class NonOverlappingBookingList","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"Class Description","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"Package Venue {","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"Class Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"Class VenueName","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"Class Capacity","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"Class UniqueVenueList","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"BookingSystem .up.|\u003e ReadOnlyBookingSystem","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Model .right.\u003e ObservableList","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"ModelManager o--\u003e \"1\" BookingSystem","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"ModelManager o-left-\u003e \"1\" UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"UniquePersonList o--\u003e \"*\" Person","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"Name -[hidden]right-\u003e Email","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *--\u003e \"1\" NonOverlappingBookingList","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"NonOverlappingBookingList o--\u003e \"*\" Booking","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e Person","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e DateTimeRange","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"Booking *--\u003e Id","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"Person -[hidden]right-\u003e Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"Venue -[hidden]right-\u003e Id","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"BookingSystem *--\u003e \"1\" UniqueVenueList","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"UniqueVenueList o--\u003e \"*\" Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"Venue *--\u003e VenueName","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"Venue *--\u003e Capacity","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"VenueName -[hidden]right-\u003e Capacity","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"ModelManager -----\u003e\" ~* filtered list\" Person","lastModifiedDate":"2021-01-14"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"ModelManager -----\u003e\" ~* filtered list\" Booking","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"ModelManager -----\u003e\" ~* filtered list\" Venue","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":40,"ming-00":1,"-":43}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Interface Storage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"Interface BookingSystemStorage \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"Class JsonBookingSystemStorage","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"StorageManager .left.|\u003e Storage","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"StorageManager o-right-\u003e UserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"StorageManager o--\u003e BookingSystemStorage","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .left.|\u003e UserPrefsStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"JsonBookingSystemStorage .left.|\u003e BookingSystemStorage","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"JsonBookingSystemStorage .down.\u003e JsonSerializableBookingSystemStorage","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"JsonSerializableBookingSystemStorage .right.\u003e JsonSerializablePerson","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"JsonSerializablePerson .right.\u003e JsonAdaptedTag","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":6,"-":18}},{"path":"docs/diagrams/UndoRedoState0.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title Initial state","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"hide State2","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State1","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState1.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"delete 5\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"hide State3","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":19}},{"path":"docs/diagrams/UndoRedoState2.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"add n/David\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState3.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"undo\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\"","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState4.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"list\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab2:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"docs/diagrams/UndoRedoState5.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ClassFontColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam ClassBorderColor #000000","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"title After command \"clear\"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"package States \u003c\u003crectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"    class State1 as \"__ab0:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    class State2 as \"__ab1:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"    class State3 as \"__ab3:BookingSystem__\"","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"State1 -[hidden]right-\u003e State2","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"State2 -[hidden]right-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"class Pointer as \"Current State\" #FFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Pointer -up-\u003e State3","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"note right on link: State ab2 deleted.","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@end","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":3,"-":18}},{"path":"docs/diagrams/UndoSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"participant \":BookingSystemParser\" as BookingSystemParser LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"participant \":VersionedBookingSystem\" as VersionedBookingSystem MODEL_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(undo)","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"LogicManager -\u003e BookingSystemParser : parseCommand(undo)","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"activate BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"create UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser -\u003e UndoCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"UndoCommand --\u003e BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"BookingSystemParser --\u003e LogicManager : u","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"deactivate BookingSystemParser","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"LogicManager -\u003e UndoCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"activate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"UndoCommand -\u003e Model : undoBookingSystem()","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"Model -\u003e VersionedBookingSystem : undo()","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"activate VersionedBookingSystem","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"VersionedBookingSystem -\u003e VersionedBookingSystem :resetData(ReadOnlyBookingSystem)","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"VersionedBookingSystem --\u003e Model :","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"deactivate VersionedBookingSystem","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Model --\u003e UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"UndoCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"deactivate UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"UndoCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"destroy UndoCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"hojiefeng":14,"-":39}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"Participant \":BookingSystemParser\" as abp LOGIC_COLOR","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"ecp -\u003e ec ++: index, editPersonDescriptor","lastModifiedDate":"2019-06-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"hojiefeng":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"title: BookingSystem Level-3","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)","lastModifiedDate":"2020-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"**BookCoin To The Moon is a CLI facility management system which allows users to type in commands to manage bookings and presents users a structured and detailed information on facility availability.","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"* If you are interested in using BookCoin, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"* If you are interested about developing BookCoin, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hojiefeng":1,"ming-00":4,"-":15}},{"path":"docs/team/johndoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: John Doe\u0027s Project Portfolio Page","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"## Project: BookCoin Level 3","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"BookCoin To The Moon is a CLI facility management system which allows users to type in commands to manage bookings and presents users a structured and detailed information on facility availability.","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"ming-00":2,"-":44}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"This command allows users of the BookCoin application to add optional remarks to people in their booking system and edit it if required. The command should have the following format:","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `BookingSystemParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \"","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"Create a `RemarkCommandParser` class in the `seedu.booking.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"hojiefeng"},"content":":information_source: Don’t forget to update `BookingSystemParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2021-03-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"hojiefeng"},"content":"Create a new `Remark` in `seedu.booking.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2021-03-17"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"hojiefeng"},"content":"Simply add the following to [`seedu.booking.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2021-03-17"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"hojiefeng"},"content":"BookingSystem stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2021-03-24"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"hojiefeng"},"content":":exclamation: You must delete BookingSystem’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause BookingSystem to default to an empty address book!","lastModifiedDate":"2021-03-24"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"hojiefeng"},"content":"This concludes the tutorial for adding a new `Command` to BookingSystem.","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"hojiefeng":11,"ming-00":1,"-":382}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"When working on BookCoin, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case.","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"The `address` field in `Person` is actually an instance of the `seedu.booking.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"**`invalidPersonBookingSystem.json`:**","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hojiefeng":2,"ming-00":1,"-":99}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base.","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.booking.ui.CommandBox.CommandExecutor`.","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        Command command \u003d bookingSystemParser.parseCommand(commandText);","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"            storage.saveBookingSystem(model.getBookingSystem());","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"    **`BookingSystemParser\\#parseCommand()`**","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"1. Stepping into the `switch`, we obviously stop at **`BookingSystemParser\\#parseCommand()`.**","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it.","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"hojiefeng"},"content":"    `JsonBookingSystem#saveBookingSystem()`.","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"hojiefeng"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableBookingSystem`\u0027s constructor.","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"hojiefeng"},"content":"    **`JsonSerializableBookingSystem\\#JsonSerializableBookingSystem()`:**","lastModifiedDate":"2021-03-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"hojiefeng"},"content":"    * Converts a given {@code ReadOnlyBookingSystem} into this class for Jackson use.","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"hojiefeng"},"content":"    * {@code JsonSerializableBookingSystem}.","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"hojiefeng"},"content":"   public JsonSerializableBookingSystem(ReadOnlyBookingSystem source) {","lastModifiedDate":"2021-03-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"hojiefeng"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableBookingSystem`.","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"hojiefeng"},"content":"more about the inner workings of BookingSystem and how the various","lastModifiedDate":"2021-03-24"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hojiefeng":13,"-":237}},{"path":"gradle/wrapper/gradle-wrapper.properties","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"distributionBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"distributionPath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-6.3-all.zip","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"zipStoreBase\u003dGRADLE_USER_HOME","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"zipStorePath\u003dwrapper/dists","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":4,"NiniJiaying":1}},{"path":"src/main/java/seedu/booking/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.FileUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"hojiefeng":3,"-":61}},{"path":"src/main/java/seedu/booking/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"hojiefeng":1,"-":24}},{"path":"src/main/java/seedu/booking/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Config;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Version;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.ConfigUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.Logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.LogicManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.BookingSystemStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.JsonBookingSystemStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.Storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.StorageManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.ui.Ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.ui.UiManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);","lastModifiedDate":"2017-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BookingSystem ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStorage bookingSystemStorage \u003d new JsonBookingSystemStorage(userPrefs.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        Optional\u003cReadOnlyBookingSystem\u003e bookingSystemOptional;","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem initialData;","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"            bookingSystemOptional \u003d storage.readBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"            if (!bookingSystemOptional.isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"                logger.info(\"Data file not found. Will be starting with a sample BookingSystem\");","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d bookingSystemOptional.orElseGet(SampleDataUtil::getSampleBookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookingSystem\");","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingSystem\");","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"            initialData \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookingSystem\");","lastModifiedDate":"2021-03-17"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"hojiefeng"},"content":"        logger.info(\"Starting BookingSystem \" + MainApp.VERSION);","lastModifiedDate":"2021-03-17"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":39,"-":144}},{"path":"src/main/java/seedu/booking/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":62}},{"path":"src/main/java/seedu/booking/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":78}},{"path":"src/main/java/seedu/booking/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    private static final String LOG_FILE \u003d \"bookingsystem.log\";","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":2,"-":110}},{"path":"src/main/java/seedu/booking/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_BOOKING_DISPLAYED \u003d \"%1$d Booking listed!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_VENUE_FILTERED \u003d \"Here are the bookings at \";","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_PERSON_FILTERED \u003d \"Here are the bookings made by \";","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_DATE_FILTERED \u003d \"Here are the bookings on \";","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_FILTER_FAILED \u003d \"No bookings found\";","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"The venue already exists in the system.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_EMAIL \u003d \"The person email provided is invalid\";","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_INVALID_VENUE_NAME \u003d \"The venue name provided is invalid\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_VENUE_DISPLAYED \u003d \"%1$d Venue(s) displayed!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_INVALID_BOOKING_ID \u003d \"The booking id provided does not exist\";","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_EMPTY \u003d \"There are no venues in the system.\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_EMPTY \u003d \"There are no bookings in the system.\\n\";","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":1,"-":12,"vvan-essa":5,"xuanqi966":7}},{"path":"src/main/java/seedu/booking/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":115}},{"path":"src/main/java/seedu/booking/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core.index;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"hojiefeng":1,"-":53}},{"path":"src/main/java/seedu/booking/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":10}},{"path":"src/main/java/seedu/booking/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":1,"-":20}},{"path":"src/main/java/seedu/booking/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":2,"-":40}},{"path":"src/main/java/seedu/booking/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":1,"-":34}},{"path":"src/main/java/seedu/booking/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Config;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":3,"-":20}},{"path":"src/main/java/seedu/booking/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":82}},{"path":"src/main/java/seedu/booking/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":3,"-":140}},{"path":"src/main/java/seedu/booking/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":2,"-":66}},{"path":"src/main/java/seedu/booking/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"     * Returns the c.","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"     * @see seedu.booking.model.Model#getBookingSystem()","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    ReadOnlyBookingSystem getBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the upcoming list of bookings */","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getUpcomingBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the filtered list of bookings */","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getFilteredBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    /** Returns an unmodifiable view of the filtered list of venue */","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cVenue\u003e getFilteredVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hojiefeng":22,"-":39}},{"path":"src/main/java/seedu/booking/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.BookingSystemParser;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.Storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystemParser bookingSystemParser;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"        bookingSystemParser \u003d new BookingSystemParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        Command command \u003d bookingSystemParser.parseCommand(commandText);","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            storage.saveBookingSystem(model.getBookingSystem());","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        return model.getBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getUpcomingBookingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        return model.getUpcomingBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getFilteredBookingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        return model.getFilteredBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cVenue\u003e getFilteredVenueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        return model.getFilteredVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        return model.getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hojiefeng":36,"-":62}},{"path":"src/main/java/seedu/booking/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \";","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":9,"-":55,"NiniJiaying":2}},{"path":"src/main/java/seedu/booking/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        model.setBookingSystem(new BookingSystem());","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":4,"-":19}},{"path":"src/main/java/seedu/booking/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":3,"-":17}},{"path":"src/main/java/seedu/booking/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":1,"-":70}},{"path":"src/main/java/seedu/booking/logic/commands/CreateBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKER;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_END;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_START;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":" * Adds a person to the address book.","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"public class CreateBookingCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    public static final String COMMAND_WORD \u003d \"create_booking\";","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking to the address book. \"","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKER + \"BOOKER EMAIL \"","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_VENUE + \"VENUE NAME \"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_START + \"DATETIME \"","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_END + \"DATETIME\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKER + \"example@gmail.com \"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_VENUE + \"Hall \"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_DESCRIPTION + \"For FYP Meeting. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_START + \"2012-01-31 22:59:59 \"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_END + \"2012-01-31 23:59:59\";","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New booking added: %1$s\";","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"This booking already exists in the address book.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_TIME \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"            \"This booking\u0027s starting time is not earlier than the ending time.\";","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_VENUE \u003d \"This venue does not exist in the system.\";","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_INVALID_PERSON \u003d \"This booker does not exist in the system.\";","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"    private final Booking toAdd;","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"     * Creates an CreateBookingCommand to add the specified {@code Booking}","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"    public CreateBookingCommand(Booking booking) {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"        toAdd \u003d booking;","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"        if (model.hasBooking(toAdd)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"        if (!toAdd.isValidTime()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_TIME);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"        if (!model.hasPersonWithEmail(toAdd.getBookerEmail())) {","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        if (!model.hasVenueWithVenueName(toAdd.getVenueName())) {","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_INVALID_VENUE);","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"        model.addBooking(toAdd);","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof CreateBookingCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 toAdd.equals(((CreateBookingCommand) other).toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":7,"ming-00":1,"NiniJiaying":77}},{"path":"src/main/java/seedu/booking/logic/commands/CreateVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":" * Adds a booking venue to the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"    public static final String COMMAND_WORD \u003d \"create_venue\";","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a booking venue to the system. \"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"            + PREFIX_VENUE + \"NAME \"","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"            + \"[\" + PREFIX_CAPACITY + \"MAXIMUM CAPACITY] \"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"            + PREFIX_VENUE + \"Victoria Hall \"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"            + PREFIX_CAPACITY + \"50 \"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"            + PREFIX_DESCRIPTION + \"Classic concert hall\";","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New venue added: %1$s\";","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"This venue already exists in the system.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"    private final Venue toAdd;","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"     * Creates an AddVenue to add the specified {@code Venue}","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"    public CreateVenueCommand(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"        toAdd \u003d venue;","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"        if (model.hasVenue(toAdd)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"        model.addVenue(toAdd);","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof CreateVenueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 toAdd.equals(((CreateVenueCommand) other).toAdd));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":4,"ming-00":51,"NiniJiaying":4}},{"path":"src/main/java/seedu/booking/logic/commands/DeleteBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"public class DeleteBookingCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"delete_booking\";","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \": Deletes the booking identified by its booking id.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: Booking ID (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"            + \"Example: \" + COMMAND_WORD + \" bid/1234567890 \";","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_DELETE_BOOKING_SUCCESS \u003d \"Deleted booking: %1$d\";","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    private final Id bookingId;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    public DeleteBookingCommand(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        this.bookingId \u003d bookingId;","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"        if (!lastShownList.stream().anyMatch(booking -\u003e booking.isId(bookingId))) {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_ID);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"        model.deleteBooking(bookingId);","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_BOOKING_SUCCESS, bookingId));","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"hojiefeng":5,"NiniJiaying":4,"xuanqi966":37}},{"path":"src/main/java/seedu/booking/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":6,"-":47}},{"path":"src/main/java/seedu/booking/logic/commands/DeleteVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":" * Deletes an existing venue from the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"delete_venue\";","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"            + \": Deletes the venue identified by the venue name used in the displayed list.\\n\"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: v/VENUE NAME\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" v/Sports Hall\";","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_DELETE_VENUE_SUCCESS \u003d \"Deleted Venue: %1$s\";","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    private final Venue targetVenue;","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public DeleteVenueCommand(Venue targetVenue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        this.targetVenue \u003d targetVenue;","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        List\u003cVenue\u003e lastShownList \u003d model.getFilteredVenueList();","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        if (!lastShownList.stream().anyMatch(targetVenue::isSameVenue)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_VENUE_NAME);","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        model.deleteVenue(targetVenue);","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_VENUE_SUCCESS, targetVenue.getVenueName()));","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof DeleteVenueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 targetVenue.equals(((DeleteVenueCommand) other).targetVenue)); // state check","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":5,"vvan-essa":46}},{"path":"src/main/java/seedu/booking/logic/commands/EditBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKER;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_END;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_START;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_BOOKINGS;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import java.util.List;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"public class EditBookingCommand extends Command {","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    public static final String COMMAND_WORD \u003d \"edit_booking\";","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the booking identified \"","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"            + \"by the id used in the displayed booking list. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"            + \"Parameters: bido/BOOKING_ID \"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            + \"[\" + PREFIX_BOOKER + \"BOOKER EMAIL] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"            + \"[\" + PREFIX_VENUE + \"VENUE NAME] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"            + \"[\" + PREFIX_BOOKING_START + \"DATETIME] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            + \"[\" + PREFIX_BOOKING_END + \"DATETIME] \"","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"            + \"Example: \" + COMMAND_WORD + \" bido/1234567890 \"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKER + \"example@gmail.com \"","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_VENUE + \"Hall \"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_DESCRIPTION + \"For FYP meeting. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_START + \"2012-01-31 22:59:59 \"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"            + PREFIX_BOOKING_END + \"2012-01-31 23:59:59\";","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_EDIT_BOOKING_SUCCESS \u003d \"Edited Booking: %1$s\";","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"This booking already exists in the booking system.\";","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"    private final Id id;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"    private final EditBookingDescriptor editBookingDescriptor;","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"     * @param id of the booking in the filtered booking list to edit.","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"     * @param editBookingDescriptor details to edit the booking with.","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"    public EditBookingCommand(Id id, EditBookingDescriptor editBookingDescriptor) {","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(id);","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(editBookingDescriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"        this.editBookingDescriptor \u003d new EditBookingDescriptor(editBookingDescriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"        if (lastShownList.stream().noneMatch(booking -\u003e booking.getId().equals(id))) {","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_BOOKING_ID);","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"        Booking bookingToEdit \u003d getBookingById(id, lastShownList);","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"        Booking editedBooking \u003d createEditedBooking(bookingToEdit, editBookingDescriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"        if (!bookingToEdit.isSameBooking(editedBooking) \u0026\u0026 model.hasBooking(editedBooking)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_BOOKING);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"        model.setBooking(bookingToEdit, editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"        model.updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_BOOKING_SUCCESS, editedBooking));","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"    private static Booking getBookingById(Id id, List\u003cBooking\u003e bookingList) {","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"        return bookingList.stream()","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"                .filter(booking -\u003e booking.getId().equals(id)).findFirst().orElse(null);","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"     * Creates and returns a {@code Booking} with the details of {@code bookingToEdit}","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"NiniJiaying"},"content":"     * edited with {@code editBookingDescriptor}.","lastModifiedDate":"2021-03-24"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"    private static Booking createEditedBooking(Booking bookingToEdit, EditBookingDescriptor editBookingDescriptor) {","lastModifiedDate":"2021-03-24"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"        assert bookingToEdit !\u003d null;","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"        Email updatedBooker \u003d editBookingDescriptor.getBookerEmail().orElse(bookingToEdit.getBookerEmail());","lastModifiedDate":"2021-03-24"},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"        VenueName updatedVenue \u003d editBookingDescriptor.getVenueName().orElse(bookingToEdit.getVenueName());","lastModifiedDate":"2021-03-24"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"        Description updatedDescription \u003d editBookingDescriptor.getDescription().orElse(bookingToEdit.getDescription());","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"        StartTime updatedBookingStart \u003d editBookingDescriptor.getBookingStart().orElse(bookingToEdit.getBookingStart());","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        EndTime updatedBookingEnd \u003d editBookingDescriptor.getBookingEnd().orElse(bookingToEdit.getBookingEnd());","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"        //Id updatedId \u003d editBookingDescriptor.getId().orElse(bookingToEdit.getId());","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"        return new Booking(updatedBooker, updatedVenue, updatedDescription, updatedBookingStart, updatedBookingEnd);","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"            return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-24"},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"        if (!(other instanceof EditBookingCommand)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"            return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"        // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"        EditBookingCommand e \u003d (EditBookingCommand) other;","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"        return id.equals(e.id)","lastModifiedDate":"2021-03-24"},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 editBookingDescriptor.equals(e.editBookingDescriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"     * Stores the details to edit the booking with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"     * corresponding field value of the booking.","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"    public static class EditBookingDescriptor {","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"        private Email bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"        private VenueName venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"        private Description description;","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"        private StartTime bookingStart;","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"        private EndTime bookingEnd;","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"        private Id id;","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"        public EditBookingDescriptor() {}","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"        /**","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"         */","lastModifiedDate":"2021-03-24"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"        public EditBookingDescriptor(EditBookingDescriptor toCopy) {","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":"            setBookerEmail(toCopy.bookerEmail);","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"NiniJiaying"},"content":"            setVenueName(toCopy.venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"            setBookingStart(toCopy.bookingStart);","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"            setBookingEnd(toCopy.bookingEnd);","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"            setId(toCopy.id);","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"        public void setId(Id id) {","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"NiniJiaying"},"content":"            this.id \u003d id;","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cId\u003e getId() {","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(id);","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"NiniJiaying"},"content":"        public void setBookingEnd(EndTime bookingEnd) {","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"NiniJiaying"},"content":"            this.bookingEnd \u003d bookingEnd;","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cEndTime\u003e getBookingEnd() {","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(bookingEnd);","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"        public void setBookingStart(StartTime bookingStart) {","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"NiniJiaying"},"content":"            this.bookingStart \u003d bookingStart;","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cStartTime\u003e getBookingStart() {","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(bookingStart);","lastModifiedDate":"2021-03-24"},{"lineNumber":173,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":174,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":175,"author":{"gitId":"NiniJiaying"},"content":"        public void setDescription(Description description) {","lastModifiedDate":"2021-03-24"},{"lineNumber":176,"author":{"gitId":"NiniJiaying"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-03-24"},{"lineNumber":177,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":179,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cDescription\u003e getDescription() {","lastModifiedDate":"2021-03-24"},{"lineNumber":180,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-03-24"},{"lineNumber":181,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":182,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":183,"author":{"gitId":"NiniJiaying"},"content":"        public void setVenueName(VenueName venueName) {","lastModifiedDate":"2021-03-24"},{"lineNumber":184,"author":{"gitId":"NiniJiaying"},"content":"            this.venueName \u003d venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":185,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":186,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":187,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cVenueName\u003e getVenueName() {","lastModifiedDate":"2021-03-24"},{"lineNumber":188,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":189,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":190,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":191,"author":{"gitId":"NiniJiaying"},"content":"        public void setBookerEmail(Email booker) {","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"NiniJiaying"},"content":"            this.bookerEmail \u003d booker;","lastModifiedDate":"2021-03-24"},{"lineNumber":193,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":194,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":195,"author":{"gitId":"NiniJiaying"},"content":"        public Optional\u003cEmail\u003e getBookerEmail() {","lastModifiedDate":"2021-03-24"},{"lineNumber":196,"author":{"gitId":"NiniJiaying"},"content":"            return Optional.ofNullable(bookerEmail);","lastModifiedDate":"2021-03-24"},{"lineNumber":197,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":198,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":199,"author":{"gitId":"NiniJiaying"},"content":"        /**","lastModifiedDate":"2021-03-24"},{"lineNumber":200,"author":{"gitId":"NiniJiaying"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-24"},{"lineNumber":201,"author":{"gitId":"NiniJiaying"},"content":"         */","lastModifiedDate":"2021-03-24"},{"lineNumber":202,"author":{"gitId":"NiniJiaying"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-24"},{"lineNumber":203,"author":{"gitId":"NiniJiaying"},"content":"            return CollectionUtil.isAnyNonNull(bookerEmail, venueName, description, bookingStart, bookingEnd, id);","lastModifiedDate":"2021-03-24"},{"lineNumber":204,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":205,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":206,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":207,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":208,"author":{"gitId":"NiniJiaying"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-24"},{"lineNumber":209,"author":{"gitId":"NiniJiaying"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-24"},{"lineNumber":210,"author":{"gitId":"NiniJiaying"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-24"},{"lineNumber":211,"author":{"gitId":"NiniJiaying"},"content":"                return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":212,"author":{"gitId":"NiniJiaying"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":213,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":214,"author":{"gitId":"NiniJiaying"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-24"},{"lineNumber":215,"author":{"gitId":"NiniJiaying"},"content":"            if (!(other instanceof EditBookingDescriptor)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":216,"author":{"gitId":"NiniJiaying"},"content":"                return false;","lastModifiedDate":"2021-03-24"},{"lineNumber":217,"author":{"gitId":"NiniJiaying"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":218,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":219,"author":{"gitId":"NiniJiaying"},"content":"            // state check","lastModifiedDate":"2021-03-24"},{"lineNumber":220,"author":{"gitId":"NiniJiaying"},"content":"            EditBookingDescriptor e \u003d (EditBookingDescriptor) other;","lastModifiedDate":"2021-03-24"},{"lineNumber":221,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":222,"author":{"gitId":"NiniJiaying"},"content":"            return getBookerEmail().equals(e.getBookerEmail())","lastModifiedDate":"2021-03-24"},{"lineNumber":223,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getVenueName().equals(e.getVenueName())","lastModifiedDate":"2021-03-24"},{"lineNumber":224,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())","lastModifiedDate":"2021-03-24"},{"lineNumber":225,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getBookingStart().equals(e.getBookingStart())","lastModifiedDate":"2021-03-24"},{"lineNumber":226,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getBookingEnd().equals(e.getBookingEnd())","lastModifiedDate":"2021-03-24"},{"lineNumber":227,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getId().equals(e.getId());","lastModifiedDate":"2021-03-24"},{"lineNumber":228,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":229,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":230,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"NiniJiaying":230}},{"path":"src/main/java/seedu/booking/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail);","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email);","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail());","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"hojiefeng":16,"-":173,"NiniJiaying":3}},{"path":"src/main/java/seedu/booking/logic/commands/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" * Edits the details of an existing person in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommand extends Command {","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"edit_person\";","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: eo/EMAIL \"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" eo/johndoe@example.com \"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"            + PREFIX_EMAIL + \"doe@example.com\";","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the booking system.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    private final Email email;","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"     * @param email of the person in the filtered person list to edit.","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"     * @param editPersonDescriptor details to edit the person with.","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommand(Email email, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(email);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        if (lastShownList.stream().noneMatch(person -\u003e person.getEmail().equals(email))) {","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_EMAIL);","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        Person personToEdit \u003d getPersonByEmail(email, lastShownList);","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"    private static Person getPersonByEmail(Email email, List\u003cPerson\u003e personList) {","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"        return personList.stream()","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"                .filter(person -\u003e person.getEmail().equals(email)).findFirst().orElse(null);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail);","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        if (!(other instanceof EditPersonCommand)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"            return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"        // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"        return email.equals(e.email)","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"        private Name name;","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"        private Phone phone;","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"        private Email email;","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"        /**","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"         */","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"        /**","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"         */","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email);","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":142,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":143,"author":{"gitId":"vvan-essa"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-03-21"},{"lineNumber":144,"author":{"gitId":"vvan-essa"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-03-21"},{"lineNumber":145,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":146,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"vvan-essa"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-03-21"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-21"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2021-03-21"},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2021-03-21"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":154,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":155,"author":{"gitId":"vvan-essa"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2021-03-21"},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2021-03-21"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":159,"author":{"gitId":"vvan-essa"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2021-03-21"},{"lineNumber":160,"author":{"gitId":"vvan-essa"},"content":"            this.email \u003d email;","lastModifiedDate":"2021-03-21"},{"lineNumber":161,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":162,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":163,"author":{"gitId":"vvan-essa"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2021-03-21"},{"lineNumber":164,"author":{"gitId":"vvan-essa"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2021-03-21"},{"lineNumber":165,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":166,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"                return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"vvan-essa"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":174,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":175,"author":{"gitId":"vvan-essa"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":176,"author":{"gitId":"vvan-essa"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"vvan-essa"},"content":"                return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":178,"author":{"gitId":"vvan-essa"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"vvan-essa"},"content":"            // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"vvan-essa"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":182,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"vvan-essa"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-03-21"},{"lineNumber":184,"author":{"gitId":"vvan-essa"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2021-03-21"},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail());","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":188}},{"path":"src/main/java/seedu/booking/logic/commands/EditVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_VENUES;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":" * Edits the details of an existing venue in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueCommand extends Command {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"edit_venue\";","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the venue identified \"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"            + \"by the venue name used in the displayed venue list. \"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: vo/VENUE \"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"            + \"[\" + PREFIX_VENUE + \"VENUE NAME] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"            + \"[\" + PREFIX_CAPACITY + \"CAPACITY] \"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \"","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" vo/Victoria Hall \"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"            + PREFIX_VENUE + \"Victorias Hall \"","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"            + PREFIX_DESCRIPTION + \"Cool concert place\";","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_EDIT_VENUE_SUCCESS \u003d \"Edited Venue: %1$s\";","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"This venue already exists in the booking system.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    private final VenueName venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    private final EditVenueDescriptor editVenueDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"     * @param venueName of the venue in the filtered venue list to edit.","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"     * @param editVenueDescriptor details to edit the venue with.","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueCommand(VenueName venueName, EditVenueDescriptor editVenueDescriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(venueName);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(editVenueDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        this.venueName \u003d venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        this.editVenueDescriptor \u003d new EditVenueDescriptor(editVenueDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        List\u003cVenue\u003e lastShownList \u003d model.getFilteredVenueList();","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        if (lastShownList.stream().noneMatch(venue -\u003e venue.getVenueName().equals(venueName))) {","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_VENUE_NAME);","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        Venue venueToEdit \u003d getVenueByVenueName(venueName, lastShownList);","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        Venue editedVenue \u003d createEditedVenue(venueToEdit, editVenueDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        if (!venueToEdit.isSameVenue(editedVenue) \u0026\u0026 model.hasVenue(editedVenue)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"        model.setVenue(venueToEdit, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredVenueList(PREDICATE_SHOW_ALL_VENUES);","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_VENUE_SUCCESS, editedVenue));","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"    private static Venue getVenueByVenueName(VenueName venueName, List\u003cVenue\u003e venueList) {","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"        return venueList.stream()","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"                .filter(venue -\u003e venue.getVenueName().equals(venueName)).findFirst().orElse(null);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"     * Creates and returns a {@code Venue} with the details of {@code venueToEdit}","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"     * edited with {@code editVenueDescriptor}.","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    private static Venue createEditedVenue(Venue venueToEdit, EditVenueDescriptor editVenueDescriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"        assert venueToEdit !\u003d null;","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"        VenueName updatedVenueName \u003d editVenueDescriptor.getVenueName().orElse(venueToEdit.getVenueName());","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"        Capacity updatedCapacity \u003d editVenueDescriptor.getCapacity().orElse(venueToEdit.getCapacity());","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        String updatedDescription \u003d editVenueDescriptor.getDescription().orElse(venueToEdit.getDescription());","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"        return new Venue(updatedVenueName, updatedCapacity, updatedDescription);","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"            return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        if (!(other instanceof EditVenueCommand)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"            return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"        // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand e \u003d (EditVenueCommand) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"        return venueName.equals(e.venueName)","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 editVenueDescriptor.equals(e.editVenueDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"     * Stores the details to edit the venue with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"     * corresponding field value of the venue.","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"    public static class EditVenueDescriptor {","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"        private VenueName name;","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"        private Capacity capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"ming-00"},"content":"        private String description;","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"        public EditVenueDescriptor() {}","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"        /**","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"         */","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"        public EditVenueDescriptor(EditVenueDescriptor toCopy) {","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"            setVenueName(toCopy.name);","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"            setCapacity(toCopy.capacity);","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"ming-00"},"content":"            setDescription(toCopy.description);","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"        /**","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"         */","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"            return CollectionUtil.isAnyNonNull(name, capacity);","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":142,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":143,"author":{"gitId":"vvan-essa"},"content":"        public void setVenueName(VenueName name) {","lastModifiedDate":"2021-03-21"},{"lineNumber":144,"author":{"gitId":"vvan-essa"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-03-21"},{"lineNumber":145,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":146,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"vvan-essa"},"content":"        public Optional\u003cVenueName\u003e getVenueName() {","lastModifiedDate":"2021-03-21"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-21"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"        public void setCapacity(Capacity capacity) {","lastModifiedDate":"2021-03-21"},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"            this.capacity \u003d capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":154,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":155,"author":{"gitId":"vvan-essa"},"content":"        public Optional\u003cCapacity\u003e getCapacity() {","lastModifiedDate":"2021-03-21"},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"            return Optional.ofNullable(capacity);","lastModifiedDate":"2021-03-21"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":"        public void setDescription(String description) {","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"            this.description \u003d description;","lastModifiedDate":"2021-03-23"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"        public Optional\u003cString\u003e getDescription() {","lastModifiedDate":"2021-03-23"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"            return Optional.ofNullable(description);","lastModifiedDate":"2021-03-23"},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"                return true;","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":174,"author":{"gitId":"vvan-essa"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":175,"author":{"gitId":"vvan-essa"},"content":"            if (!(other instanceof EditVenueDescriptor)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":176,"author":{"gitId":"vvan-essa"},"content":"                return false;","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"vvan-essa"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":178,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"vvan-essa"},"content":"            // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"vvan-essa"},"content":"            EditVenueDescriptor e \u003d (EditVenueDescriptor) other;","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":182,"author":{"gitId":"vvan-essa"},"content":"            return getVenueName().equals(e.getVenueName())","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"ming-00"},"content":"                    \u0026\u0026 getCapacity().equals(e.getCapacity())","lastModifiedDate":"2021-03-23"},{"lineNumber":184,"author":{"gitId":"ming-00"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription());","lastModifiedDate":"2021-03-23"},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"ming-00":18,"vvan-essa":169}},{"path":"src/main/java/seedu/booking/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Booking App as requested ...\";","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"hojiefeng":3,"-":16}},{"path":"src/main/java/seedu/booking/logic/commands/FilterBookingByBookerCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingContainsBookerPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":" * Finds and lists bookings in the system whose booker name corresponds to the booker name given as argument","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":" * Booker name is case sensitive","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByBookerCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"filter_booking_by_booker\";","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all bookings booked by the booker \"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"            + \"the specified booker name (case-sensitive) and displays them as a list.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: n/bookerName\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/John Rose\";","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    private final BookingContainsBookerPredicate predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByBookerCommand(BookingContainsBookerPredicate predicate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        model.updateFilteredBookingList(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        if (model.getFilteredBookingList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            return new CommandResult(Messages.MESSAGE_BOOKING_FILTER_FAILED + \" by \" + predicate.getBookerEmail());","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            return new CommandResult(","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"                    Messages.MESSAGE_BOOKING_PERSON_FILTERED + predicate.getBookerEmail());","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"                || (other instanceof FilterBookingByBookerCommand // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"                \u0026\u0026 predicate.equals(((FilterBookingByBookerCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":2,"xuanqi966":44}},{"path":"src/main/java/seedu/booking/logic/commands/FilterBookingByDateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingWithinDatePredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByDateCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"filter_booking_by_date\";","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all bookings on the date given by \"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"            + \"the specified date and displays them as a list.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: date/date\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD + \" date/2020-02-12\";","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"    private final BookingWithinDatePredicate predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByDateCommand(BookingWithinDatePredicate predicate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"        model.updateFilteredBookingList(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"        if (model.getFilteredBookingList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"            return new CommandResult(Messages.MESSAGE_BOOKING_FILTER_FAILED + \" on \" + predicate.getDateString());","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"            return new CommandResult(","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"                    Messages.MESSAGE_BOOKING_DATE_FILTERED + predicate.getDateString());","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"                || (other instanceof FilterBookingByDateCommand // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"                \u0026\u0026 predicate.equals(((FilterBookingByDateCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":42}},{"path":"src/main/java/seedu/booking/logic/commands/FilterBookingByVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingContainsVenuePredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":" * Finds and lists bookings in the system whose venue corresponds to the venue name given as argument","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":" * Venue name matching is case insensitive.","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByVenueCommand extends Command {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"filter_booking_by_venue\";","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all bookings under the venue \"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"            + \"the specified venue name (case-insensitive) and displays them as a list.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: v/venueName\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD + \" v/Victoria Hall\";","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    private final BookingContainsVenuePredicate predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByVenueCommand(BookingContainsVenuePredicate predicate) {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        model.updateFilteredBookingList(predicate);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        if (model.getFilteredBookingList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"            return new CommandResult(Messages.MESSAGE_BOOKING_FILTER_FAILED);","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            return new CommandResult(","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"                    Messages.MESSAGE_BOOKING_VENUE_FILTERED + predicate.getVenueName());","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"                || (other instanceof FilterBookingByVenueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"                \u0026\u0026 predicate.equals(((FilterBookingByVenueCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":46}},{"path":"src/main/java/seedu/booking/logic/commands/FindBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.BookingIdContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Finds and lists the booking in the system whose id corresponds to that of the argument keyword.","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"find_booking\";","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the booking whose id contains \"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"            + \"the specified keyword and displays it as a list with its index number.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: bid/ID\\n\"","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" bid/1\";","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    private final BookingIdContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public FindBookingCommand(BookingIdContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredBookingList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"                String.format(Messages.MESSAGE_BOOKING_DISPLAYED, model.getFilteredBookingList().size()));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof FindBookingCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 predicate.equals(((FindBookingCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":4,"vvan-essa":38}},{"path":"src/main/java/seedu/booking/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"hojiefeng":4,"-":38}},{"path":"src/main/java/seedu/booking/logic/commands/FindVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.VenueNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Finds and lists the venue in the system whose name corresponds to that of the argument keyword.","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    public static final String COMMAND_WORD \u003d \"find_venue\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all venues whose names contain any of \"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"            + \"Parameters: v/NAME\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"            + \"Example: \" + COMMAND_WORD + \" v/Victoria Hall\";","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    private final VenueNameContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public FindVenueCommand(VenueNameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredVenueList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"                String.format(Messages.MESSAGE_VENUE_DISPLAYED, model.getFilteredVenueList().size()));","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof FindVenueCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 predicate.equals(((FindVenueCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":4,"vvan-essa":38}},{"path":"src/main/java/seedu/booking/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":2,"-":19}},{"path":"src/main/java/seedu/booking/logic/commands/ListBookingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Displays all existing bookings to the terminal","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class ListBookingCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"list_booking\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \": Displays all existing bookings.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: NILL\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_SUCCESS \u003d \"Here are all current bookings:\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_BOOKING_LISTED_LINEBREAK \u003d \"-------------------------------\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        List\u003cBooking\u003e lastShownList \u003d model.getFilteredBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        String outputString \u003d \"\";","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        if (model.getFilteredBookingList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_BOOKING_LISTED_EMPTY);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"        outputString +\u003d MESSAGE_BOOKING_LISTED_SUCCESS;","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"        for (Booking booking : lastShownList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d MESSAGE_BOOKING_LISTED_LINEBREAK;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Booking ID: \" + String.valueOf(booking.getId()) + \"\\n\");","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"            outputString +\u003d (\"Venue Name: \" + booking.getVenueName() + \"\\n\");","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"            outputString +\u003d (\"Booker Email: \" + booking.getBookerEmail() + \"\\n\");","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Description: \" + booking.getDescription() + \"\\n\");","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"From: \" + booking.getBookingStart() + \"\\n\");","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Till: \" + booking.getBookingEnd() + \"\\n\");","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (MESSAGE_BOOKING_LISTED_LINEBREAK);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(outputString);","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":5,"NiniJiaying":2,"xuanqi966":46}},{"path":"src/main/java/seedu/booking/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":3,"-":21}},{"path":"src/main/java/seedu/booking/logic/commands/ListVenueCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Displays all existing venues to the terminal","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class ListVenueCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public static final String COMMAND_WORD \u003d \"list_venue\";","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"            + \": Displays all existing venues.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"            + \"Parameters: NILL\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_SUCCESS \u003d \"Here are all current venues:\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    public static final String MESSAGE_VENUE_LISTED_LINEBREAK \u003d \"-------------------------------\\n\";","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        List\u003cVenue\u003e lastShownList \u003d model.getFilteredVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        String outputString \u003d \"\";","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        if (lastShownList.isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            throw new CommandException(Messages.MESSAGE_VENUE_LISTED_EMPTY);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        System.out.println(outputString);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"        outputString +\u003d MESSAGE_VENUE_LISTED_SUCCESS;","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        for (Venue venue : lastShownList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d MESSAGE_VENUE_LISTED_LINEBREAK;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"            outputString +\u003d (\"Venue Name: \" + venue.getVenueName() + \"\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (\"Capacity: \" + String.valueOf(venue.getCapacity()) + \"\\n\");","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"            outputString +\u003d (MESSAGE_VENUE_LISTED_LINEBREAK);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"        System.out.println(outputString);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"        return new CommandResult(outputString);","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":5,"vvan-essa":1,"xuanqi966":47}},{"path":"src/main/java/seedu/booking/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hojiefeng":2,"-":17}},{"path":"src/main/java/seedu/booking/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"        Person person \u003d new Person(name, phone, email);","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hojiefeng":11,"-":39,"NiniJiaying":4}},{"path":"src/main/java/seedu/booking/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"hojiefeng":1,"-":59,"xuanqi966":2}},{"path":"src/main/java/seedu/booking/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"hojiefeng":1,"-":147,"xuanqi966":2}},{"path":"src/main/java/seedu/booking/logic/parser/BookingSystemParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CreateBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CreateVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.logic.commands.EditBookingCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByBookerCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByDateCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByVenueCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ListBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ListCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ListVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemParser {","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"        case EditBookingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"            return new EditBookingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"        case EditPersonCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"            return new EditPersonCommandParser().parse(arguments);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        case EditVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"            return new EditVenueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"        case DeleteVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-09"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"            return new DeleteVenueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"        case FindVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"            return new FindVenueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"        case FindBookingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"            return new FindBookingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"        case CreateBookingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"            return new CreateBookingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"        case CreateVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"            return new CreateVenueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":111,"author":{"gitId":"xuanqi966"},"content":"        case DeleteBookingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"xuanqi966"},"content":"            return new DeleteBookingCommandParser().parse(arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":113,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":114,"author":{"gitId":"xuanqi966"},"content":"        case ListVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"xuanqi966"},"content":"            return new ListVenueCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"xuanqi966"},"content":"        case ListBookingCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"xuanqi966"},"content":"            return new ListBookingCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"xuanqi966"},"content":"        case FilterBookingByVenueCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":121,"author":{"gitId":"xuanqi966"},"content":"            return new FilterBookingByVenueCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":122,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":123,"author":{"gitId":"xuanqi966"},"content":"        case FilterBookingByBookerCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":124,"author":{"gitId":"xuanqi966"},"content":"            return new FilterBookingByBookerCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"xuanqi966"},"content":"        case FilterBookingByDateCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"xuanqi966"},"content":"            return new FilterBookingByDateCommandParser().parse(arguments);","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":22,"-":62,"NiniJiaying":11,"vvan-essa":17,"xuanqi966":21}},{"path":"src/main/java/seedu/booking/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public static final Prefix PREFIX_ORIGINAL_EMAIL \u003d new Prefix(\"eo/\");","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"max/\");","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKER \u003d new Prefix(\"b/\");","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKING_START \u003d new Prefix(\"bs/\");","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKING_END \u003d new Prefix(\"be/\");","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKING_ID \u003d new Prefix(\"bid/\");","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    public static final Prefix PREFIX_BOOKING_ORIGINAL \u003d new Prefix(\"bido/\");","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    public static final Prefix PREFIX_VENUE_ORIGINAL \u003d new Prefix(\"vo/\");","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hojiefeng":1,"ming-00":4,"-":15,"vvan-essa":2,"NiniJiaying":5,"xuanqi966":1}},{"path":"src/main/java/seedu/booking/logic/parser/CreateBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKER;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_END;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_START;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CreateBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"public class CreateBookingCommandParser implements Parser\u003cCreateBookingCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"     * Parses the given {@code String} of arguments in the context of the AddBookingCommand","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    public CreateBookingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_BOOKER, PREFIX_VENUE,","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"                        PREFIX_DESCRIPTION, PREFIX_BOOKING_START, PREFIX_BOOKING_END);","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKER, PREFIX_VENUE,","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"                PREFIX_DESCRIPTION, PREFIX_BOOKING_START, PREFIX_BOOKING_END)","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"                    CreateBookingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        Email bookerEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_BOOKER).get());","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"        VenueName venueName \u003d ParserUtil.parseVenueName(argMultimap.getValue(PREFIX_VENUE).get());","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"        Description description \u003d ParserUtil.parseBookingDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"        StartTime bookingStart \u003d ParserUtil.parseBookingStart(argMultimap.getValue(PREFIX_BOOKING_START).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"        EndTime bookingEnd \u003d ParserUtil.parseBookingEnd(argMultimap.getValue(PREFIX_BOOKING_END).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        Booking booking \u003d new Booking(bookerEmail, venueName, description,","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"                bookingStart, bookingEnd);","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        return new CreateBookingCommand(booking);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":8,"NiniJiaying":55}},{"path":"src/main/java/seedu/booking/logic/parser/CreateVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CreateVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":" * Parses input arguments and creates a new AddVenue object","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandParser implements Parser\u003cCreateVenueCommand\u003e {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    private static final String DEFAULT_CAPACITY \u003d \"10\";","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    private static final String DEFAULT_DESCRIPTION \u003d \"No description provided.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"     * Parses the given {@code String} of arguments in the context of the AddVenue","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"     * and returns an AddVenue object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    public CreateVenueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VENUE, PREFIX_CAPACITY, PREFIX_DESCRIPTION);","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CAPACITY)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"            argMultimap.put(PREFIX_CAPACITY, DEFAULT_CAPACITY);","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"        String description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"        argMultimap.put(PREFIX_DESCRIPTION, DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE, PREFIX_CAPACITY, PREFIX_DESCRIPTION)","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"        VenueName name \u003d ParserUtil.parseVenueName(argMultimap.getValue(PREFIX_VENUE).get());","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        Capacity capacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"        Venue venue \u003d new Venue(name, capacity, description);","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        return new CreateVenueCommand(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":6,"ming-00":48,"vvan-essa":5,"NiniJiaying":4}},{"path":"src/main/java/seedu/booking/logic/parser/DeleteBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ID;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"public class DeleteBookingCommandParser implements Parser\u003cDeleteBookingCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteBookingCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"     * and returns a DeleteBookingCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    public DeleteBookingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"                PREFIX_BOOKING_ID);","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"        Id bookingId;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKING_ID)","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"                    DeleteBookingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        try {","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"            bookingId \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ID).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"                    DeleteBookingCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        return new DeleteBookingCommand(bookingId);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":4,"NiniJiaying":6,"xuanqi966":33}},{"path":"src/main/java/seedu/booking/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":5,"-":24,"vvan-essa":2}},{"path":"src/main/java/seedu/booking/logic/parser/DeleteVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new DeleteVenueCommand object.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandParser implements Parser\u003cDeleteVenueCommand\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteVenueCommand","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a DeleteVenueCommand object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform to the expected format.","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public DeleteVenueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_VENUE);","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        Venue venue;","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE)","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_VENUE).isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        return new DeleteVenueCommand(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"hojiefeng":6,"vvan-essa":38}},{"path":"src/main/java/seedu/booking/logic/parser/EditBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-24"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-24"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-24"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKER;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_END;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ID;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ORIGINAL;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_START;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.logic.commands.EditBookingCommand;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.logic.commands.EditBookingCommand.EditBookingDescriptor;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"public class EditBookingCommandParser implements Parser\u003cEditBookingCommand\u003e {","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"     * Parses the given {@code String} of arguments in the context of the EditBookingCommand","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"     * and returns an EditBookingCommand object for execution.","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    public EditBookingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ORIGINAL, PREFIX_BOOKER, PREFIX_VENUE,","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"                        PREFIX_DESCRIPTION, PREFIX_BOOKING_START, PREFIX_BOOKING_END);","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        Id id;","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKING_ORIGINAL)","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"                || argMultimap.getValue(PREFIX_BOOKING_ORIGINAL).isEmpty()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        id \u003d ParserUtil.parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ORIGINAL).get());","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        EditBookingDescriptor editBookingDescriptor \u003d new EditBookingDescriptor();","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_BOOKING_ID).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setId(ParserUtil.parseBookingId(","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_BOOKING_ID).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_BOOKER).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setBookerEmail(ParserUtil.parseEmail(","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_BOOKER).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setVenueName(ParserUtil.parseVenueName(","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_VENUE).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setDescription(ParserUtil.parseBookingDescription(","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_BOOKING_START).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setBookingStart(ParserUtil.parseBookingStart(","lastModifiedDate":"2021-03-24"},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_BOOKING_START).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"        if (argMultimap.getValue(PREFIX_BOOKING_END).isPresent()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"            editBookingDescriptor.setBookingEnd(ParserUtil.parseBookingEnd(","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"                    argMultimap.getValue(PREFIX_BOOKING_END).get()));","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"        if (!editBookingDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-24"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"            throw new ParseException(EditBookingCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-24"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"        return new EditBookingCommand(id, editBookingDescriptor);","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-24"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-24"},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-24"}],"authorContributionMap":{"NiniJiaying":90}},{"path":"src/main/java/seedu/booking/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hojiefeng":11,"-":48}},{"path":"src/main/java/seedu/booking/logic/parser/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_ORIGINAL_EMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new EditPersonCommand object.","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"     * and returns an EditPersonCommand object for execution.","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        System.out.println(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ORIGINAL_EMAIL, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        Email email;","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ORIGINAL_EMAIL)","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_ORIGINAL_EMAIL).isEmpty()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        try {","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_ORIGINAL_EMAIL).get());","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"                    EditPersonCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        return new EditPersonCommand(email, editPersonDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":73}},{"path":"src/main/java/seedu/booking/logic/parser/EditVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE_ORIGINAL;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand.EditVenueDescriptor;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new EditVenueCommand object.","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueCommandParser implements Parser\u003cEditVenueCommand\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the EditVenueCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"     * and returns an EditVenueCommand object for execution.","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VENUE_ORIGINAL, PREFIX_VENUE,","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"                        PREFIX_CAPACITY, PREFIX_DESCRIPTION);","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        VenueName venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE_ORIGINAL)","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_VENUE_ORIGINAL).isEmpty()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        venueName \u003d ParserUtil.parseVenueName(argMultimap.getValue(PREFIX_VENUE_ORIGINAL).get());","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor editVenueDescriptor \u003d new EditVenueDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"            editVenueDescriptor.setVenueName(ParserUtil","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"                    .parseVenueName(argMultimap.getValue(PREFIX_VENUE).get()));","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"            editVenueDescriptor.setCapacity(ParserUtil","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"                    .parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get()));","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"            editVenueDescriptor.setDescription(ParserUtil","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        if (!editVenueDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(EditVenueCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        return new EditVenueCommand(venueName, editVenueDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"ming-00":12,"vvan-essa":64}},{"path":"src/main/java/seedu/booking/logic/parser/FilterBookingByBookerCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByBookerCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingContainsBookerPredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Parses input arguments and creates a new FilterBookingByBookerCommand object.","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByBookerCommandParser {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterBookingByBookerCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"     * and returns a FilterBookingByBookerCommand object for execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the user input does not conform to the expected format.","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByBookerCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"                || argMultimap.getValue(PREFIX_NAME).isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"                    FilterBookingByBookerCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        String bookerName \u003d argMultimap.getValue(PREFIX_NAME).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"        return new FilterBookingByBookerCommand(new BookingContainsBookerPredicate(bookerName));","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":43}},{"path":"src/main/java/seedu/booking/logic/parser/FilterBookingByDateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByDateCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingWithinDatePredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByDateCommandParser {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterBookingByDateCommand","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"     * and returns a FilterBookingByDateCommand object for execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the user input does not conform to the expected format.","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByDateCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE);","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"                || argMultimap.getValue(PREFIX_DATE).isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"                    FilterBookingByDateCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"        String dateString \u003d argMultimap.getValue(PREFIX_DATE).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        LocalDate date;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"            date \u003d LocalDate.parse(dateString);","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"                    FilterBookingByDateCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"        assert date \u003d\u003d null : \"date should not be null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"        return new FilterBookingByDateCommand(new BookingWithinDatePredicate(date));","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":50}},{"path":"src/main/java/seedu/booking/logic/parser/FilterBookingByVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.commands.FilterBookingByVenueCommand;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"import seedu.booking.model.booking.BookingContainsVenuePredicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":" * Parses input arguments and creates a new FilterBookingByVenueCommand object.","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"public class FilterBookingByVenueCommandParser {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterBookingByVenueCommandParser","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"     * and returns a FilterBookingByVenueCommandParser object for execution.","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the user input does not conform to the expected format.","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    public FilterBookingByVenueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VENUE);","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE)","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"                || argMultimap.getValue(PREFIX_VENUE).isEmpty()) {","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"                    FilterBookingByVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        String venueName \u003d argMultimap.getValue(PREFIX_VENUE).get();","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"        assert venueName \u003d\u003d \"\" : \"venueName should not be empty\";","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"        return new FilterBookingByVenueCommand(new BookingContainsVenuePredicate(venueName));","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"xuanqi966"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"xuanqi966"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"xuanqi966"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":44}},{"path":"src/main/java/seedu/booking/logic/parser/FindBookingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ID;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.BookingIdContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new FindBookingCommand object.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandParser implements Parser\u003cFindBookingCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the FindBookingCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a FindBookingCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    public FindBookingCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_BOOKING_ID);","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        String bookingId;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_BOOKING_ID)","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"                || argMultimap.getValue(PREFIX_BOOKING_ID).isEmpty()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        bookingId \u003d String.valueOf(ParserUtil","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"                .parseBookingId(argMultimap.getValue(PREFIX_BOOKING_ID).get()));","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        return new FindBookingCommand(new BookingIdContainsKeywordsPredicate(bookingId));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":5,"vvan-essa":39,"NiniJiaying":5}},{"path":"src/main/java/seedu/booking/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hojiefeng":5,"-":28}},{"path":"src/main/java/seedu/booking/logic/parser/FindVenueCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.VenueNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * Parses input arguments and creates a new FindVenueCommand object.","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandParser implements Parser\u003cFindVenueCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * Parses the given {@code String} of arguments in the context of the FindVenueCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     * and returns a FindVenueCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public FindVenueCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VENUE);","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VENUE)","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"                || argMultimap.getValue(PREFIX_VENUE).isEmpty()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        String[] nameKeywords \u003d argMultimap.getValue(PREFIX_VENUE).get().split(\" \");","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        return new FindVenueCommand(new VenueNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":6,"vvan-essa":38}},{"path":"src/main/java/seedu/booking/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"hojiefeng":3,"-":13,"xuanqi966":1}},{"path":"src/main/java/seedu/booking/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"No description provided.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    private static final Capacity DEFAULT_CAPACITY \u003d new Capacity(10);","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":45,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"xuanqi966"},"content":"     * Parses a {@code String bookingId} into a {@code int}.","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"xuanqi966"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"xuanqi966"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"xuanqi966"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"    public static Id parseBookingId(String bookingId) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"xuanqi966"},"content":"        String trimmedIndex \u003d bookingId.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"xuanqi966"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"xuanqi966"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"        return new Id(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String booker} into a {@code String trimmedBooker}.","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"    public static Person parseBooker(String booker) {","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booker);","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBooker \u003d booker.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(new Name(trimmedBooker));","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String description} into a {@code String description}.","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"    public static Description parseBookingDescription(String description) {","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-09"},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"        return new Description(trimmedDescription);","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String description} into a {@code String description}.","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"    public static String parseDescription(String description) {","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"        return trimmedDescription;","lastModifiedDate":"2021-03-09"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String bookingStart} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-09"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":144,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"    public static StartTime parseBookingStart(String bookingStart) {","lastModifiedDate":"2021-03-22"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(bookingStart);","lastModifiedDate":"2021-03-09"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBookingStart \u003d bookingStart.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");","lastModifiedDate":"2021-03-09"},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedBookingStart, formatter);","lastModifiedDate":"2021-03-09"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"        return new StartTime(dateTime);","lastModifiedDate":"2021-03-22"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":152,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"     * Parses a {@code String bookingStart} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-09"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":158,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":159,"author":{"gitId":"NiniJiaying"},"content":"    public static EndTime parseBookingEnd(String bookingEnd) {","lastModifiedDate":"2021-03-22"},{"lineNumber":160,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(bookingEnd);","lastModifiedDate":"2021-03-09"},{"lineNumber":161,"author":{"gitId":"NiniJiaying"},"content":"        String trimmedBookingEnd \u003d bookingEnd.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":162,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");","lastModifiedDate":"2021-03-09"},{"lineNumber":163,"author":{"gitId":"NiniJiaying"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedBookingEnd, formatter);","lastModifiedDate":"2021-03-09"},{"lineNumber":164,"author":{"gitId":"NiniJiaying"},"content":"        return new EndTime(dateTime);","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"     * Parses a {@code String venue} into a {@code Venue}.","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"    public static Venue parseVenue(String venue) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"vvan-essa"},"content":"        String trimmedVenue \u003d venue.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":175,"author":{"gitId":"ming-00"},"content":"        return new Venue(new VenueName(trimmedVenue), DEFAULT_CAPACITY, DEFAULT_DESCRIPTION);","lastModifiedDate":"2021-03-23"},{"lineNumber":176,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":177,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":178,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":179,"author":{"gitId":"ming-00"},"content":"     * Parses a {@code String capacity} into an integer.","lastModifiedDate":"2021-03-09"},{"lineNumber":180,"author":{"gitId":"ming-00"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":181,"author":{"gitId":"ming-00"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the given {@code capacity} is invalid.","lastModifiedDate":"2021-03-22"},{"lineNumber":183,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":184,"author":{"gitId":"vvan-essa"},"content":"    public static Capacity parseCapacity(String capacity) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":185,"author":{"gitId":"ming-00"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2021-03-09"},{"lineNumber":186,"author":{"gitId":"ming-00"},"content":"        String trimmedCapacity \u003d capacity.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"        Integer formattedCapacity \u003d Integer.parseInt(trimmedCapacity);","lastModifiedDate":"2021-03-22"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":"        if (!Capacity.isValidCapacity(formattedCapacity)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":189,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":190,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":191,"author":{"gitId":"vvan-essa"},"content":"        try {","lastModifiedDate":"2021-03-22"},{"lineNumber":192,"author":{"gitId":"ming-00"},"content":"            assert Capacity.isValidCapacity(Integer.parseInt(trimmedCapacity));","lastModifiedDate":"2021-03-23"},{"lineNumber":193,"author":{"gitId":"vvan-essa"},"content":"            return new Capacity(formattedCapacity);","lastModifiedDate":"2021-03-22"},{"lineNumber":194,"author":{"gitId":"vvan-essa"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-03-22"},{"lineNumber":195,"author":{"gitId":"vvan-essa"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2021-03-22"},{"lineNumber":196,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":197,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":198,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":199,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":200,"author":{"gitId":"ming-00"},"content":"     * Parses a {@code String name}.","lastModifiedDate":"2021-03-09"},{"lineNumber":201,"author":{"gitId":"ming-00"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-09"},{"lineNumber":202,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":203,"author":{"gitId":"vvan-essa"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-22"},{"lineNumber":204,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":205,"author":{"gitId":"vvan-essa"},"content":"    public static VenueName parseVenueName(String name) throws ParseException {","lastModifiedDate":"2021-03-22"},{"lineNumber":206,"author":{"gitId":"ming-00"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-09"},{"lineNumber":207,"author":{"gitId":"ming-00"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2021-03-09"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"        if (!VenueName.isValidName(trimmedName)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":209,"author":{"gitId":"vvan-essa"},"content":"            throw new ParseException(VenueName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":211,"author":{"gitId":"vvan-essa"},"content":"        return new VenueName(trimmedName);","lastModifiedDate":"2021-03-21"},{"lineNumber":212,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hojiefeng":9,"ming-00":20,"-":71,"NiniJiaying":72,"vvan-essa":29,"xuanqi966":12}},{"path":"src/main/java/seedu/booking/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"hojiefeng":1,"-":38}},{"path":"src/main/java/seedu/booking/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"hojiefeng":2,"-":15}},{"path":"src/main/java/seedu/booking/model/BookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.NonOverlappingBookingList;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.UniquePersonList;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.UniqueVenueList;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * Wraps all data at the booking-system level","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * Duplicates and overlaps are not allowed (by .isSame/isOverlapping comparison)","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystem implements ReadOnlyBookingSystem {","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"    private final NonOverlappingBookingList bookings;","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    private final UniqueVenueList venues;","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"xuanqi966"},"content":"        bookings \u003d new NonOverlappingBookingList();","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        venues \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem() {}","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"     * Creates an BookingSystem using the Persons in the {@code toBeCopied}","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem(ReadOnlyBookingSystem toBeCopied) {","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"     * Resets the existing data of this {@code BookingSystem} with {@code newData}.","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    public void resetData(ReadOnlyBookingSystem newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"        setVenues(newData.getVenueList());","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"        setBookings(newData.getBookingList());","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"     * Removes {@code key} from this {@code BookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"    public ObservableList\u003cBooking\u003e getBookingList() {","lastModifiedDate":"2021-03-24"},{"lineNumber":116,"author":{"gitId":"NiniJiaying"},"content":"        return bookings.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-24"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":119,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a booking with the same identity as {@code booking} exists in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasBooking(Booking booking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"        return bookings.contains(booking) || bookings.containsId(booking.getId());","lastModifiedDate":"2021-03-24"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"     * Adds a booking to the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"     * The booking must not already exist in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"NiniJiaying"},"content":"    public void addBooking(Booking b) {","lastModifiedDate":"2021-03-24"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"        bookings.add(b);","lastModifiedDate":"2021-03-24"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"xuanqi966"},"content":"    //// booking-level operations","lastModifiedDate":"2021-03-09"},{"lineNumber":137,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"     * Removes {@code bookingId} from this {@code BookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":139,"author":{"gitId":"xuanqi966"},"content":"     * {@code bookingId} must exist in the address book.","lastModifiedDate":"2021-03-09"},{"lineNumber":140,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"    public void removeBooking(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":142,"author":{"gitId":"xuanqi966"},"content":"        bookings.removeById(bookingId);","lastModifiedDate":"2021-03-09"},{"lineNumber":143,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":144,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"     * Replaces the contents of the venue list with {@code venues}.","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"     * {@code venues} must not contain duplicate venues.","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":"    public void setBookings(List\u003cBooking\u003e bookings) {","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"        this.bookings.setBookings(bookings);","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":166,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"    public ObservableList\u003cVenue\u003e getVenueList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"        return venues.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-09"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":174,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof BookingSystem // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":175,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 persons.equals(((BookingSystem) other).persons));","lastModifiedDate":"2021-03-17"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":182,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":183,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":184,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":185,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":186,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":187,"author":{"gitId":"ming-00"},"content":"     * Returns true if a venue with the same identity as {@code venue} exists in the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":188,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":189,"author":{"gitId":"ming-00"},"content":"    public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":190,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":191,"author":{"gitId":"ming-00"},"content":"        return venues.contains(venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":192,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":193,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":194,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":195,"author":{"gitId":"ming-00"},"content":"     * Adds a venue to the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":196,"author":{"gitId":"ming-00"},"content":"     * The venue must not already exist in the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":197,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":198,"author":{"gitId":"ming-00"},"content":"    public void addVenue(Venue v) {","lastModifiedDate":"2021-03-09"},{"lineNumber":199,"author":{"gitId":"ming-00"},"content":"        venues.add(v);","lastModifiedDate":"2021-03-09"},{"lineNumber":200,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":201,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":202,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":203,"author":{"gitId":"NiniJiaying"},"content":"     * Replaces the contents of the venue list with {@code venues}.","lastModifiedDate":"2021-03-24"},{"lineNumber":204,"author":{"gitId":"NiniJiaying"},"content":"     * {@code venues} must not contain duplicate venues.","lastModifiedDate":"2021-03-24"},{"lineNumber":205,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":206,"author":{"gitId":"NiniJiaying"},"content":"    public void setVenues(List\u003cVenue\u003e venues) {","lastModifiedDate":"2021-03-24"},{"lineNumber":207,"author":{"gitId":"NiniJiaying"},"content":"        this.venues.setVenues(venues);","lastModifiedDate":"2021-03-24"},{"lineNumber":208,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":209,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":211,"author":{"gitId":"vvan-essa"},"content":"     * Replaces the given venue {@code target} in the list with {@code editedVenue}.","lastModifiedDate":"2021-03-21"},{"lineNumber":212,"author":{"gitId":"vvan-essa"},"content":"     * {@code target} must exist in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":213,"author":{"gitId":"vvan-essa"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":214,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":215,"author":{"gitId":"vvan-essa"},"content":"    public void setVenue(Venue target, Venue editedVenue) {","lastModifiedDate":"2021-03-21"},{"lineNumber":216,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":217,"author":{"gitId":"vvan-essa"},"content":"        venues.setVenue(target, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":218,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":219,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":220,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":221,"author":{"gitId":"NiniJiaying"},"content":"     * Removes {@code key} from this {@code BookingSystem}.","lastModifiedDate":"2021-03-24"},{"lineNumber":222,"author":{"gitId":"NiniJiaying"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":223,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":224,"author":{"gitId":"NiniJiaying"},"content":"    public void removeVenue(Venue key) {","lastModifiedDate":"2021-03-24"},{"lineNumber":225,"author":{"gitId":"NiniJiaying"},"content":"        venues.remove(key);","lastModifiedDate":"2021-03-24"},{"lineNumber":226,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":227,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":228,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":229,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":230,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":231,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a person with the same email as {@code email} exists in the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":232,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":233,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasPersonWithEmail(Email email) {","lastModifiedDate":"2021-03-24"},{"lineNumber":234,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(email);","lastModifiedDate":"2021-03-24"},{"lineNumber":235,"author":{"gitId":"NiniJiaying"},"content":"        return persons.containsEmail(getPersonList(), email);","lastModifiedDate":"2021-03-24"},{"lineNumber":236,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":237,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":238,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":239,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":240,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a venue with the same name as {@code venueName} exists in the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":241,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":242,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasVenueWithVenueName(VenueName venueName) {","lastModifiedDate":"2021-03-24"},{"lineNumber":243,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":244,"author":{"gitId":"NiniJiaying"},"content":"        return venues.containsVenueName(getVenueList(), venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":245,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":246,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":247,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":248,"author":{"gitId":"NiniJiaying"},"content":"     * Replaces the given venue {@code target} in the list with {@code editedVenue}.","lastModifiedDate":"2021-03-24"},{"lineNumber":249,"author":{"gitId":"NiniJiaying"},"content":"     * {@code target} must exist in the booking system.","lastModifiedDate":"2021-03-24"},{"lineNumber":250,"author":{"gitId":"NiniJiaying"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the booking system.","lastModifiedDate":"2021-03-24"},{"lineNumber":251,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":252,"author":{"gitId":"NiniJiaying"},"content":"    public void setBooking(Booking target, Booking editedBooking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":253,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":254,"author":{"gitId":"NiniJiaying"},"content":"        bookings.setBooking(target, editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":255,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":256,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":19,"ming-00":17,"-":105,"NiniJiaying":85,"vvan-essa":22,"xuanqi966":9}},{"path":"src/main/java/seedu/booking/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    Predicate\u003cBooking\u003e PREDICATE_SHOW_ALL_BOOKINGS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    Predicate\u003cVenue\u003e PREDICATE_SHOW_ALL_VENUES \u003d unused -\u003e true;","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    void setBookingSystemFilePath(Path bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"     * Replaces address book data with the data in {@code bookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    void setBookingSystem(ReadOnlyBookingSystem bookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"     * Returns the BookingSystem","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    ReadOnlyBookingSystem getBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a person with the same email as {@code person} exists in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"    boolean hasPersonWithEmail(Email email);","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the filtered person list","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the upcoming booking list","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getUpcomingBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the filtered booking list","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"    ObservableList\u003cBooking\u003e getFilteredBookingList();","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the filtered venue list","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"    ObservableList\u003cVenue\u003e getFilteredVenueList();","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":134,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"     * Updates the filter of the filtered venue list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"     * @param predicate","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-09"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"    void updateFilteredVenueList(Predicate\u003cVenue\u003e predicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"     * Updates the filter of the filtered booking list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-09"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"    void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate);","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"     * Returns true if a venue with the same name as {@code venue} exists in the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":154,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":155,"author":{"gitId":"ming-00"},"content":"    boolean hasVenue(Venue venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":156,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"NiniJiaying"},"content":"     * Deletes the given venue.","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"NiniJiaying"},"content":"     * The venue must exist in the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":161,"author":{"gitId":"NiniJiaying"},"content":"    void deleteVenue(Venue target);","lastModifiedDate":"2021-03-24"},{"lineNumber":162,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":163,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":164,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a venue with the same name as {@code venue} exists in the system.","lastModifiedDate":"2021-03-24"},{"lineNumber":165,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"    boolean hasVenueWithVenueName(VenueName venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":169,"author":{"gitId":"ming-00"},"content":"     * Adds the given venue.","lastModifiedDate":"2021-03-09"},{"lineNumber":170,"author":{"gitId":"ming-00"},"content":"     * {@code venue} must not already exist in the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":171,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":172,"author":{"gitId":"ming-00"},"content":"    void addVenue(Venue venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":173,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":174,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":175,"author":{"gitId":"vvan-essa"},"content":"     * Replaces the given venue {@code target} with {@code editedVenue}.","lastModifiedDate":"2021-03-21"},{"lineNumber":176,"author":{"gitId":"vvan-essa"},"content":"     * {@code target} must exist in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"vvan-essa"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":178,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"vvan-essa"},"content":"    void setVenue(Venue target, Venue editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"xuanqi966"},"content":"    /// logic related to bookings","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"vvan-essa"},"content":"     * Deletes the given booking.","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"     * The booking must exist in the system.","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"NiniJiaying"},"content":"     * @param bookingId","lastModifiedDate":"2021-03-22"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"NiniJiaying"},"content":"    void deleteBooking(Id bookingId);","lastModifiedDate":"2021-03-22"},{"lineNumber":189,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":191,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":192,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if a booking with the same identity as {@code booking} exists in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":193,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":194,"author":{"gitId":"NiniJiaying"},"content":"    boolean hasBooking(Booking booking);","lastModifiedDate":"2021-03-24"},{"lineNumber":195,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":196,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":197,"author":{"gitId":"NiniJiaying"},"content":"     * Adds the given booking.","lastModifiedDate":"2021-03-24"},{"lineNumber":198,"author":{"gitId":"NiniJiaying"},"content":"     * {@code booking} must not already exist in the address book.","lastModifiedDate":"2021-03-24"},{"lineNumber":199,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":200,"author":{"gitId":"NiniJiaying"},"content":"    void addBooking(Booking booking);","lastModifiedDate":"2021-03-24"},{"lineNumber":201,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":202,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":203,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":204,"author":{"gitId":"NiniJiaying"},"content":"     * Replaces the given booking {@code target} with {@code editedBooking}.","lastModifiedDate":"2021-03-24"},{"lineNumber":205,"author":{"gitId":"NiniJiaying"},"content":"     * {@code target} must exist in the booking system.","lastModifiedDate":"2021-03-24"},{"lineNumber":206,"author":{"gitId":"NiniJiaying"},"content":"     * The booking identity of {@code editedBooking} must not be the same","lastModifiedDate":"2021-03-24"},{"lineNumber":207,"author":{"gitId":"NiniJiaying"},"content":"     * as another existing booking in the booking system.","lastModifiedDate":"2021-03-24"},{"lineNumber":208,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":209,"author":{"gitId":"NiniJiaying"},"content":"    void setBooking(Booking target, Booking editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hojiefeng":14,"ming-00":10,"-":76,"NiniJiaying":58,"vvan-essa":45,"xuanqi966":7}},{"path":"src/main/java/seedu/booking/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystem bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    private final FilteredList\u003cBooking\u003e filteredBookings;","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    private final FilteredList\u003cVenue\u003e filteredVenues;","lastModifiedDate":"2021-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Initializes a ModelManager with the given bookingSystem and userPrefs.","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public ModelManager(ReadOnlyBookingSystem bookingSystem, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(bookingSystem, userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        logger.fine(\"Initializing with address book: \" + bookingSystem + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem \u003d new BookingSystem(bookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.bookingSystem.getPersonList());","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        filteredBookings \u003d new FilteredList\u003c\u003e(this.bookingSystem.getBookingList());","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        filteredVenues \u003d new FilteredList\u003c\u003e(this.bookingSystem.getVenueList());","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        this(new BookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        return userPrefs.getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystemFilePath(Path bookingSystemFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingSystem \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystem(ReadOnlyBookingSystem bookingSystem) {","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem.resetData(bookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"    public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasPerson(person);","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasPersonWithEmail(Email email) {","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(email);","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"        return bookingSystem.hasPersonWithEmail(email);","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":114,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasBooking(Booking booking) {","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(booking);","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasBooking(booking);","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removePerson(target);","lastModifiedDate":"2021-03-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(person);","lastModifiedDate":"2021-03-17"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"    public void addBooking(Booking booking) {","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addBooking(booking);","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"NiniJiaying"},"content":"        updateFilteredBookingList(PREDICATE_SHOW_ALL_BOOKINGS);","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"    public void setBooking(Booking target, Booking editedBooking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(target, editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"        bookingSystem.setBooking(target, editedBooking);","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.setPerson(target, editedPerson);","lastModifiedDate":"2021-03-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"ming-00"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":149,"author":{"gitId":"ming-00"},"content":"    public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":150,"author":{"gitId":"ming-00"},"content":"        requireNonNull(venue);","lastModifiedDate":"2021-03-09"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.hasVenue(venue);","lastModifiedDate":"2021-03-17"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"    public boolean hasVenueWithVenueName(VenueName venueName) {","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"NiniJiaying"},"content":"        return bookingSystem.hasVenueWithVenueName(venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":158,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":159,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"    public void addVenue(Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addVenue(venue);","lastModifiedDate":"2021-03-17"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-09"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":166,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"    public void setVenue(Venue target, Venue editedVenue) {","lastModifiedDate":"2021-03-21"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"        requireAllNonNull(target, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"        bookingSystem.setVenue(target, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":177,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}","lastModifiedDate":"2021-03-17"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":184,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"hojiefeng"},"content":"     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}","lastModifiedDate":"2021-03-17"},{"lineNumber":187,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":188,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getUpcomingBookingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"hojiefeng"},"content":"        return filteredBookings;","lastModifiedDate":"2021-03-15"},{"lineNumber":191,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem.equals(other.bookingSystem)","lastModifiedDate":"2021-03-17"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":215,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 filteredBookings.equals(other.filteredBookings)","lastModifiedDate":"2021-03-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"vvan-essa"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Venue List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":219,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":220,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":221,"author":{"gitId":"vvan-essa"},"content":"    public void deleteVenue(Venue target) {","lastModifiedDate":"2021-03-09"},{"lineNumber":222,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removeVenue(target);","lastModifiedDate":"2021-03-17"},{"lineNumber":223,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"vvan-essa"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Venue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":228,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the list of {@code Venues} backed by the internal list of","lastModifiedDate":"2021-03-09"},{"lineNumber":229,"author":{"gitId":"vvan-essa"},"content":"     * {@code versionedBookCoinToTheMoon}","lastModifiedDate":"2021-03-15"},{"lineNumber":230,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":231,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":232,"author":{"gitId":"vvan-essa"},"content":"    public ObservableList\u003cVenue\u003e getFilteredVenueList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":233,"author":{"gitId":"vvan-essa"},"content":"        return filteredVenues;","lastModifiedDate":"2021-03-09"},{"lineNumber":234,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":235,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":236,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":237,"author":{"gitId":"vvan-essa"},"content":"    public void updateFilteredVenueList(Predicate\u003cVenue\u003e predicate) {","lastModifiedDate":"2021-03-21"},{"lineNumber":238,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-09"},{"lineNumber":239,"author":{"gitId":"vvan-essa"},"content":"        filteredVenues.setPredicate(predicate);","lastModifiedDate":"2021-03-09"},{"lineNumber":240,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":241,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":242,"author":{"gitId":"xuanqi966"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Bookings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":243,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":244,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":245,"author":{"gitId":"NiniJiaying"},"content":"    public void deleteBooking(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":246,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.removeBooking(bookingId);","lastModifiedDate":"2021-03-17"},{"lineNumber":247,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":248,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"xuanqi966"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Booking List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":252,"author":{"gitId":"hojiefeng"},"content":"     * Returns an unmodifiable view of the list of {@code Booking} backed by the internal list of","lastModifiedDate":"2021-03-17"},{"lineNumber":253,"author":{"gitId":"hojiefeng"},"content":"     * {@code versionedBookingSystem}","lastModifiedDate":"2021-03-17"},{"lineNumber":254,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":255,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":256,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e getFilteredBookingList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":257,"author":{"gitId":"hojiefeng"},"content":"        return filteredBookings;","lastModifiedDate":"2021-03-17"},{"lineNumber":258,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":259,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":260,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"xuanqi966"},"content":"    public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"xuanqi966"},"content":"        filteredBookings.setPredicate(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":56,"ming-00":10,"-":122,"NiniJiaying":35,"vvan-essa":28,"xuanqi966":14}},{"path":"src/main/java/seedu/booking/model/ReadOnlyBookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":" * Unmodifiable view of an booking system state","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public interface ReadOnlyBookingSystem {","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"     * Returns an unmodifiable view of the bookings list.","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"     * This list will not contain any duplicate bookings.","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    ObservableList\u003cBooking\u003e getBookingList();","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * Returns an unmodifiable view of the venues list.","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     * This list will not contain any duplicate venues.","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    ObservableList\u003cVenue\u003e getVenueList();","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":6,"-":13,"NiniJiaying":7,"vvan-essa":4}},{"path":"src/main/java/seedu/booking/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"hojiefeng":3,"-":13}},{"path":"src/main/java/seedu/booking/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    private Path bookingSystemFilePath \u003d Paths.get(\"data\" , \"bookingsystem.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        setBookingSystemFilePath(newUserPrefs.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    public void setBookingSystemFilePath(Path bookingSystemFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystemFilePath \u003d bookingSystemFilePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 bookingSystemFilePath.equals(o.bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        return Objects.hash(guiSettings, bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        sb.append(\"\\nLocal data file location : \" + bookingSystemFilePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":12,"-":75}},{"path":"src/main/java/seedu/booking/model/booking/Booking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Random;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" * Represents a booking in the booking list.","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"public class Booking {","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    // Random object used to generate booking id.","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    private static final Random BOOKING_RANDOM \u003d new Random();","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    // Data fields","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    private final Email bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    private final VenueName venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    private final Description description;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    private final StartTime bookingStart;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    private final EndTime bookingEnd;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"    private final Id id;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"     * Booking id is provided.","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    public Booking(Email bookerEmail, VenueName venueName, Description description,","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"                   StartTime bookingStart, EndTime bookingEnd, Id id) {","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(bookerEmail, venueName, description, bookingStart, bookingEnd);","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        this.bookerEmail \u003d bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        this.venueName \u003d venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        this.bookingStart \u003d bookingStart;","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        this.bookingEnd \u003d bookingEnd;","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"     * Booking id is not provided.","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"    public Booking(Email bookerEmail, VenueName venueName, Description description,","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"                   StartTime bookingStart, EndTime bookingEnd) {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(bookerEmail, venueName, description, bookingStart, bookingEnd);","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        this.bookerEmail \u003d bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        this.venueName \u003d venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingStart \u003d bookingStart;","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingEnd \u003d bookingEnd;","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        this.id \u003d getNewBookingId();","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"    public Email getBookerEmail() {","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"        return bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"    public VenueName getVenueName() {","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        return venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"    public Description getDescription() {","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        return description;","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"    public StartTime getBookingStart() {","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"        return bookingStart;","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"    public EndTime getBookingEnd() {","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        return bookingEnd;","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"    public Id getId() {","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"        return id;","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"    public static Id getNewBookingId() {","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"        return new Id(Math.abs(BOOKING_RANDOM.nextInt()));","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings overlap.","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"     * This can be used to test for booking conflicts.","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"    public boolean isOverlapping(seedu.booking.model.booking.Booking otherBooking) {","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"        if (otherBooking \u003d\u003d null) {","lastModifiedDate":"2021-03-08"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"            return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":"        if (otherBooking.getVenueName().equals(this.venueName)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"            return this.bookingStart.value.compareTo(otherBooking.bookingEnd.value) \u003c 0","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"                    \u0026\u0026 this.bookingEnd.value.compareTo(otherBooking.bookingStart.value) \u003e 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"        } else {","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"            return false;","lastModifiedDate":"2021-03-23"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if it is the same id.","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isId(Id id) {","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"        return this.id.value.equals(id.value);","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields.","lastModifiedDate":"2021-03-08"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings.","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof seedu.booking.model.booking.Booking)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"            return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"        seedu.booking.model.booking.Booking otherBooking \u003d (seedu.booking.model.booking.Booking) other;","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"        return otherBooking.getBookerEmail().equals(getBookerEmail())","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 otherBooking.getVenueName().equals(getVenueName())","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getDescription().equals(getDescription())","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingStart().equals(getBookingStart())","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 otherBooking.getBookingEnd().equals(getBookingEnd());","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":135,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if the start time is earlier than the end time.","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isValidTime() {","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"        return this.bookingStart.value.compareTo(this.bookingEnd.value) \u003c 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"        return Objects.hash(bookerEmail, venueName, description, bookingStart, bookingEnd, id);","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"NiniJiaying"},"content":"        builder.append(\" Booker: \")","lastModifiedDate":"2021-03-09"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"                .append(getBookerEmail())","lastModifiedDate":"2021-03-24"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Venue: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"                .append(getVenueName())","lastModifiedDate":"2021-03-24"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Description: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"                .append(getDescription())","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; Start of booking: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"                .append(getBookingStart())","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"                .append(\"; End of booking: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"xuanqi966"},"content":"                .append(getBookingEnd())","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"xuanqi966"},"content":"                .append(\"; ID: \")","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"xuanqi966"},"content":"                .append(getId());","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":167,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":168,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if both bookings have the same id.","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"NiniJiaying"},"content":"     * This defines a weaker notion of equality between two bookings.","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":172,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isSameBooking(Booking otherBooking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":173,"author":{"gitId":"NiniJiaying"},"content":"        if (otherBooking \u003d\u003d this) {","lastModifiedDate":"2021-03-24"},{"lineNumber":174,"author":{"gitId":"NiniJiaying"},"content":"            return true;","lastModifiedDate":"2021-03-24"},{"lineNumber":175,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":176,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":177,"author":{"gitId":"NiniJiaying"},"content":"        return otherBooking !\u003d null","lastModifiedDate":"2021-03-24"},{"lineNumber":178,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 otherBooking.getId().equals(getId());","lastModifiedDate":"2021-03-24"},{"lineNumber":179,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":180,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":99,"NiniJiaying":78,"xuanqi966":3}},{"path":"src/main/java/seedu/booking/model/booking/BookingContainsBookerPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":" * Tests that a {@code Bookings}\u0027s {@code booker email} matches the booker email given","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"public class BookingContainsBookerPredicate implements Predicate\u003cBooking\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"    public BookingContainsBookerPredicate(String bookerEmail) {","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"        this.bookerEmail \u003d bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    public String getBookerEmail() {","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"        return this.bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    public boolean test(Booking booking) {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"        return booking.getBookerEmail().equals(new Email(this.bookerEmail));","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"                || ((other instanceof BookingContainsBookerPredicate)","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 bookerEmail.equals(((BookingContainsBookerPredicate) other).bookerEmail));","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":10,"xuanqi966":24}},{"path":"src/main/java/seedu/booking/model/booking/BookingContainsVenuePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":" * Tests that a {@code Bookings}\u0027s {@code Venuename} matches the venuename given","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":"public class BookingContainsVenuePredicate implements Predicate\u003cBooking\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"    private final String venueName;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"    public BookingContainsVenuePredicate(String venueName) {","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"        this.venueName \u003d venueName;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"    public String getVenueName() {","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"        return this.venueName;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"    public boolean test(Booking booking) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"        return booking.getVenueName().toString().equalsIgnoreCase(this.venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"                || ((other instanceof BookingContainsVenuePredicate)","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"                \u0026\u0026 venueName.equals(((BookingContainsVenuePredicate) other).venueName));","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":1,"xuanqi966":29}},{"path":"src/main/java/seedu/booking/model/booking/BookingIdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":" * Tests that a {@code Booking}\u0027s {@code Id} matches the keyword given.","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"public class BookingIdContainsKeywordsPredicate implements Predicate\u003cBooking\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"    private final String keyword;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"    public BookingIdContainsKeywordsPredicate(String keyword) {","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    public boolean test(Booking booking) {","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"        return keyword.equals(String.valueOf(booking.getId()));","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof BookingIdContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 keyword.equals(((BookingIdContainsKeywordsPredicate) other).keyword)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":1,"vvan-essa":27}},{"path":"src/main/java/seedu/booking/model/booking/BookingWithinDatePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xuanqi966"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"xuanqi966"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"xuanqi966"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"xuanqi966"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"xuanqi966"},"content":" * Tests that a {@code Bookings} is on the date given","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"xuanqi966"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"xuanqi966"},"content":"public class BookingWithinDatePredicate implements Predicate\u003cBooking\u003e {","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"xuanqi966"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"xuanqi966"},"content":"    public BookingWithinDatePredicate(LocalDate date) {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"xuanqi966"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"xuanqi966"},"content":"    public String getDateString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"xuanqi966"},"content":"        return date.toString();","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"xuanqi966"},"content":"    public boolean test(Booking booking) {","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"xuanqi966"},"content":"        LocalDate startDate \u003d booking.getBookingStart().getStartTime().toLocalDate();","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"        LocalDate endDate \u003d booking.getBookingEnd().getEndTime().toLocalDate();","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"        return startDate.isEqual(date) || endDate.isEqual(date) || (startDate.isBefore(date) \u0026\u0026 endDate.isAfter(date));","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"        return other \u003d\u003d this","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"                || ((other instanceof BookingWithinDatePredicate)","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"xuanqi966"},"content":"                \u0026\u0026 date.equals(((BookingWithinDatePredicate) other).date));","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"xuanqi966"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"xuanqi966":36}},{"path":"src/main/java/seedu/booking/model/booking/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":" * Represents a description in the booking system.","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"public class Description {","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"    public final String value;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs an {@code Description}.","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"     * @param description A valid description.","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    public Description(String description) {","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(description);","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"        value \u003d description;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    public String toString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"        return value;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 value.equals(((Description) other).value)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":39}},{"path":"src/main/java/seedu/booking/model/booking/EndTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":" * Represents the end time in the booking system.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"public class EndTime {","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"    public final LocalDateTime value;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs an {@code EndTime}.","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"     * @param endTime A valid end time.","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    public EndTime(LocalDateTime endTime) {","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(endTime);","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"        value \u003d endTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"     * Returns endtime","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    public LocalDateTime getEndTime() {","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"        return this.value;","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    public String toString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"        return value.toString();","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof EndTime // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 value.equals(((EndTime) other).value)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":43,"xuanqi966":7}},{"path":"src/main/java/seedu/booking/model/booking/Id.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":" * Represents the id in the booking system.","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"public class Id {","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"            \"Id should only contain numbers, and it should be 10 digits long\";","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"    public final Integer value;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs a {@code Id}.","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"     * @param id A valid id.","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    public Id(Integer id) {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(id);","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"        value \u003d id;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    public String toString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"        return String.valueOf(value);","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof Id // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 value.equals(((Id) other).value)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":41}},{"path":"src/main/java/seedu/booking/model/booking/NonOverlappingBookingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.exceptions.BookingNotFoundException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.exceptions.DuplicateBookingException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.exceptions.OverlappingBookingException;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * A list of bookings that enforces that is it non overlapping between its elements and does not allow nulls.","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A booking is considered non overlapping by comparing using {@code Booking#isOverlapping(Booking)}.","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * As such, adding and updating of booking uses Booking#isOverlapping(Booking) for checking","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * so as to ensure that the booking being added or updated is non overlapping in terms of booking timing","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * in the NonOverlappingBookingList. However, the removal of a venue uses Venue#equals(Object) so","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed.","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" * @see Booking#isOverlapping(Booking)","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"public class NonOverlappingBookingList implements Iterable\u003cBooking\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cBooking\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent booking as the given argument.","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Booking toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains a booking with the id.","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    public boolean containsId(Id toCheck) {","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(x -\u003e x.isId(toCheck));","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an overlapping booking as the given argument.","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public boolean overlaps(Booking toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isOverlapping);","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"     * Adds a booking to the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"     * The booking must not already exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public void add(Booking toAdd) {","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (overlaps(toAdd)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the booking {@code target} in the list with {@code editedBooking}.","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * The booking data of {@code editedPerson} must not be the same and not be overlapping","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     * as another existing booking in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"    public void setBooking(Booking target, Booking editedBooking) {","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedBooking);","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        if (!target.equals(editedBooking) \u0026\u0026 contains(editedBooking)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateBookingException();","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isOverlapping(editedBooking) \u0026\u0026 overlaps(editedBooking)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedBooking);","lastModifiedDate":"2021-03-08"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent booking from the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"     * The booking must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Booking toRemove) {","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"hojiefeng"},"content":"            throw new BookingNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"xuanqi966"},"content":"     * Removes the equivalent booking from the list by bookingId.","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"xuanqi966"},"content":"     * The booking must exist in the list.","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"    public void removeById(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"xuanqi966"},"content":"        requireNonNull(bookingId);","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"xuanqi966"},"content":"        internalList.removeIf(x -\u003e x.isId(bookingId));","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":114,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"    public void setBookings(NonOverlappingBookingList replacement) {","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code bookings}.","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"     * {@code bookings} must not contain duplicate persons.","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"    public void setBookings(List\u003cBooking\u003e bookings) {","lastModifiedDate":"2021-03-24"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(bookings);","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        if (!bookingsAreNonOverlapping(bookings)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"            throw new OverlappingBookingException();","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(bookings);","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-08"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cBooking\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cBooking\u003e iterator() {","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof NonOverlappingBookingList // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((NonOverlappingBookingList) other).internalList));","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code bookings} contains only unique bookings.","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"    private boolean bookingsAreNonOverlapping(List\u003cBooking\u003e bookings) {","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c bookings.size() - 1; i++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c bookings.size(); j++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"                if (bookings.get(i).isOverlapping(bookings.get(j))) {","lastModifiedDate":"2021-03-08"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"                    return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"                }","lastModifiedDate":"2021-03-08"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":167,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":168,"author":{"gitId":"hojiefeng"},"content":"        return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":169,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":170,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":159,"NiniJiaying":3,"xuanqi966":8}},{"path":"src/main/java/seedu/booking/model/booking/StartTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NiniJiaying"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":" * Represents the start time in the booking system.","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"public class StartTime {","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"    public final LocalDateTime value;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs an {@code StartTime}.","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"     * @param startTime A valid start time.","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    public StartTime(LocalDateTime startTime) {","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(startTime);","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"        value \u003d startTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"xuanqi966"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"xuanqi966"},"content":"     * Returns start time","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"xuanqi966"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"xuanqi966"},"content":"    public LocalDateTime getStartTime() {","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"xuanqi966"},"content":"        return this.value;","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"xuanqi966"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"    public String toString() {","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        return value.toString();","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"                || (other instanceof StartTime // instanceof handles nulls","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 value.equals(((StartTime) other).value)); // state check","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"        return value.hashCode();","lastModifiedDate":"2021-03-22"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"NiniJiaying":41,"xuanqi966":7}},{"path":"src/main/java/seedu/booking/model/booking/VenueNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * Tests that a {@code Venue}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class VenueNameContainsKeywordsPredicate implements Predicate\u003cVenue\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    public VenueNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    public boolean test(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        return keywords.stream()","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(String.valueOf(venue.getVenueName()), keyword));","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof VenueNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 keywords.equals(((VenueNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":3,"vvan-essa":29}},{"path":"src/main/java/seedu/booking/model/booking/exceptions/BookingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified booking.","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class BookingNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":6}},{"path":"src/main/java/seedu/booking/model/booking/exceptions/DuplicateBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Bookings","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * (Bookings are considered duplicates if they have the same data).","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateBookingException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateBookingException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate bookings\");","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/booking/model/booking/exceptions/OverlappingBookingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in overlapping Bookings (Bookings are considered overlaps if their booking","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * timing overlaps).","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class OverlappingBookingException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public OverlappingBookingException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in overlapping bookings\");","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/booking/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";","lastModifiedDate":"2018-02-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \"","lastModifiedDate":"2018-02-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";","lastModifiedDate":"2018-02-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";","lastModifiedDate":"2018-02-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\"","lastModifiedDate":"2018-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isSameEmail(Person person) {","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        return this.equals(person.getEmail());","lastModifiedDate":"2021-03-24"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":2,"-":65,"NiniJiaying":3}},{"path":"src/main/java/seedu/booking/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":" * Represents a Person\u0027s name in the booking system.","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":3,"-":56}},{"path":"src/main/java/seedu/booking/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hojiefeng":2,"-":29}},{"path":"src/main/java/seedu/booking/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public Person(Name name, Phone phone, Email email) {","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(name, phone, email);","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"     * Only name is available.","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    public Person(Name name) {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"        requireAllNonNull(name);","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"        this.phone \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        this.email \u003d null;","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail());","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"        return Objects.hash(name, phone, email);","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"                .append(getEmail());","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":2,"-":86,"NiniJiaying":14}},{"path":"src/main/java/seedu/booking/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":" * Represents a Person\u0027s phone number in the booking system.","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":3,"-":50}},{"path":"src/main/java/seedu/booking/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":138,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":139,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if the list contains an equivalent person as the given email.","lastModifiedDate":"2021-03-24"},{"lineNumber":140,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":141,"author":{"gitId":"NiniJiaying"},"content":"    public boolean containsEmail(ObservableList\u003cPerson\u003e list, Email emailToCheck) {","lastModifiedDate":"2021-03-24"},{"lineNumber":142,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(emailToCheck);","lastModifiedDate":"2021-03-24"},{"lineNumber":143,"author":{"gitId":"NiniJiaying"},"content":"        return list.stream().anyMatch(x -\u003e x.getEmail().equals(emailToCheck));","lastModifiedDate":"2021-03-24"},{"lineNumber":144,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":145,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hojiefeng":4,"-":133,"NiniJiaying":9}},{"path":"src/main/java/seedu/booking/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"hojiefeng":1,"-":10}},{"path":"src/main/java/seedu/booking/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"hojiefeng":1,"-":5}},{"path":"src/main/java/seedu/booking/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * Contains utility methods for populating {@code BookingSystem} with sample data.","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\")),","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"))","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    public static ReadOnlyBookingSystem getSampleBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem sampleAb \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"hojiefeng":10,"-":18,"NiniJiaying":6}},{"path":"src/main/java/seedu/booking/model/venue/Capacity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":" * Represents a Venue\u0027s capacity in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCapacity(Integer)}","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"public class Capacity {","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Capacity cannot be 0 or less.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    public final Integer venueCapacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"     * Constructs an {@code Capacity}.","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"     * @param capacity A valid venue capacity.","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    public Capacity(Integer capacity) {","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        checkArgument(isValidCapacity(capacity), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        venueCapacity \u003d capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if a given Integer is a valid venue capacity.","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    public static boolean isValidCapacity(Integer test) {","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"        return test \u003e 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    public String toString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        return venueCapacity.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof Capacity // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 venueCapacity.equals(((Capacity) other).venueCapacity)); // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        return venueCapacity.hashCode();","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"ming-00":1,"vvan-essa":50}},{"path":"src/main/java/seedu/booking/model/venue/UniqueVenueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.exceptions.DuplicateVenueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.exceptions.VenueNotFoundException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" * A list of venues that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A venue is considered unique by comparing using {@code Venue#isSameVenue(Venue)}. As such, adding and updating of","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * venues uses Venue#isSameVenue(Venue) for equality so as to ensure that the venue being added or updated is","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * unique in terms of identity in the UniqueVenueList. However, the removal of a venue uses Venue#equals(Object) so","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":" * as to ensure that the venue with exactly the same fields will be removed.","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":" * @see Venue#isSameVenue(Venue)","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"public class UniqueVenueList implements Iterable\u003cVenue\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private final ObservableList\u003cVenue\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if the list contains an equivalent venue as the given argument.","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    public boolean contains(Venue toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        return internalList.stream().anyMatch(toCheck::isSameVenue);","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     * Adds a venue to the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * The venue must not already exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    public void add(Venue toAdd) {","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the venue {@code target} in the list with {@code editedVenue}.","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"     * The venue identity of {@code editedVenue} must not be the same as another existing venue in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"    public void setVenue(Venue target, Venue editedVenue) {","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(target, editedVenue);","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (!target.isSameVenue(editedVenue) \u0026\u0026 contains(editedVenue)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        internalList.set(index, editedVenue);","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"     * Removes the equivalent venue from the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"     * The venue must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    public void remove(Venue toRemove) {","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"        if (!containsName(internalList, toRemove)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"            throw new VenueNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2021-03-09"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"            if (!(internalList.get(i).getVenueName().equals(toRemove.getVenueName()))) {","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"                continue;","lastModifiedDate":"2021-03-09"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"            }","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"            internalList.remove(i);","lastModifiedDate":"2021-03-09"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if the list contains a venue with an equivalent name as the given venue.","lastModifiedDate":"2021-03-09"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"     * @param list of venues in the system.","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"     * @param venue to be checked against the list.","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"     * @return true if the name of the given venue is found in the list.","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"    public boolean containsName(ObservableList\u003cVenue\u003e list, Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"        return list.stream().anyMatch(x -\u003e x.getVenueName().equals(venue.getVenueName()));","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-24"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"     * Returns true if the internalList contains a venue with an equivalent name given.","lastModifiedDate":"2021-03-24"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-24"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"     * @param venueNameToCheck to be checked against the list.","lastModifiedDate":"2021-03-24"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"     * @return true if the name of the given venue is found in the list.","lastModifiedDate":"2021-03-24"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-24"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"    public boolean containsVenueName(ObservableList\u003cVenue\u003e list, VenueName venueNameToCheck) {","lastModifiedDate":"2021-03-24"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"        requireNonNull(venueNameToCheck);","lastModifiedDate":"2021-03-24"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"        return list.stream().anyMatch(x -\u003e x.getVenueName().equals(venueNameToCheck));","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":111,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(UniqueVenueList replacement) {","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":115,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"hojiefeng"},"content":"     * Replaces the contents of this list with {@code venues}.","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"     * {@code Venue} must not contain duplicate venues.","lastModifiedDate":"2021-03-08"},{"lineNumber":119,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"hojiefeng"},"content":"    public void setVenues(List\u003cVenue\u003e venues) {","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"hojiefeng"},"content":"        requireAllNonNull(venues);","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"        if (!venuesAreUnique(venues)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"            throw new DuplicateVenueException();","lastModifiedDate":"2021-03-08"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        internalList.setAll(venues);","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"    public ObservableList\u003cVenue\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":135,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"    public Iterator\u003cVenue\u003e iterator() {","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"hojiefeng"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"hojiefeng"},"content":"                || (other instanceof UniqueVenueList // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"hojiefeng"},"content":"                        \u0026\u0026 internalList.equals(((UniqueVenueList) other).internalList));","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if {@code venues} contains only unique venues.","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"    private boolean venuesAreUnique(List\u003cVenue\u003e venues) {","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"        for (int i \u003d 0; i \u003c venues.size() - 1; i++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"            for (int j \u003d i + 1; j \u003c venues.size(); j++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":"                if (venues.get(i).isSameVenue(venues.get(j))) {","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"                    return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"                }","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"        return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":165,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":137,"vvan-essa":18,"NiniJiaying":13}},{"path":"src/main/java/seedu/booking/model/venue/Venue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":" * Represents a venue in the booking list.","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public class Venue {","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    // Data fields","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    private final VenueName name;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    private final Capacity capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"    private final String description;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"    public Venue(VenueName name, Capacity capacity, String description) {","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"        requireAllNonNull(name, capacity);","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        if (capacity.venueCapacity \u003c\u003d -1) {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"            throw new IllegalArgumentException(\"Capacity cannot be 0 or less.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    public VenueName getVenueName() {","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        return name;","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    public Capacity getCapacity() {","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        return capacity;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    public String getDescription() {","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        return description;","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both venues have the same name","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"     * This defines a weaker notion of equality between two venues.","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"    public boolean isSameVenue(Venue otherVenue) {","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        if (otherVenue \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        return otherVenue !\u003d null \u0026\u0026 this.name.equals(otherVenue.name);","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * Returns true if both bookings have the same data fields.","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"     * This notion of equality between two bookings.","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof Venue)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"            return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        Venue otherBooking \u003d (Venue) other;","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        return otherBooking.getVenueName().equals(getVenueName())","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"                \u0026\u0026 otherBooking.getCapacity().equals(getCapacity())","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"                \u0026\u0026 otherBooking.getDescription().equals(getDescription());","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"        return Objects.hash(name, capacity, description);","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"hojiefeng"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"hojiefeng"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"        builder.append(\"Name: \")","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"                .append(getVenueName());","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"        Capacity capacity \u003d getCapacity();","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"        if (capacity.venueCapacity \u003e 0) {","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":"            builder.append(\"; Capacity: \")","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"hojiefeng"},"content":"                    .append(getCapacity());","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        String description \u003d getDescription();","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"        builder.append(\"; Description: \").append(getDescription());","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":95,"author":{"gitId":"hojiefeng"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":69,"ming-00":20,"vvan-essa":8}},{"path":"src/main/java/seedu/booking/model/venue/VenueName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":" * Represents a Venue\u0027s name in the booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"public class VenueName {","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    /*","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    public final String venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"     * Constructs a {@code VenueName}.","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     * @param name A valid venue name.","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    public VenueName(String name) {","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        venueName \u003d name;","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    public String toString() {","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        return venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"                || (other instanceof VenueName // instanceof handles nulls","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"                \u0026\u0026 venueName.equals(((VenueName) other).venueName)); // state check","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        return venueName.hashCode();","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"    public boolean isSameVenueName(Venue venue) {","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"        return this.venueName.equals(venue.getVenueName());","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":59,"NiniJiaying":3}},{"path":"src/main/java/seedu/booking/model/venue/exceptions/DuplicateVenueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation will result in duplicate Venues (Venues are considered duplicates if they have the same","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" * data).","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"public class DuplicateVenueException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"    public DuplicateVenueException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"        super(\"Operation would result in duplicate venues\");","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":11}},{"path":"src/main/java/seedu/booking/model/venue/exceptions/VenueNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue.exceptions;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":" * Signals that the operation is unable to find the specified venue.","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"public class VenueNotFoundException extends RuntimeException {}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":6}},{"path":"src/main/java/seedu/booking/storage/BookingSystemStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" * Represents a storage for {@link BookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"public interface BookingSystemStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     * Returns BookingSystem data as a {@link ReadOnlyBookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"     * @see #getBookingSystemFilePath()","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     * Saves the given {@link ReadOnlyBookingSystem} to the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"     * @param bookingSystem cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * @see #saveBookingSystem(ReadOnlyBookingSystem)","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"hojiefeng":46}},{"path":"src/main/java/seedu/booking/storage/JsonAdaptedBooking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"NiniJiaying"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"NiniJiaying"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"public class JsonAdaptedBooking {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Booking\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    private final String venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"    private final String description;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookingStart;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    private final String bookingEnd;","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    private final String id;","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"     * Constructs a {@code JsonAdaptedBooking} with the given booking details.","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    public JsonAdaptedBooking(@JsonProperty(\"bookerEmail\") String bookerEmail,","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"          @JsonProperty(\"venueName\") String venueName, @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"          @JsonProperty(\"bookingStart\") String bookingStart, @JsonProperty(\"bookingEnd\") String bookingEnd,","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"          @JsonProperty(\"id\") String id) {","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        this.bookerEmail \u003d bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"        this.venueName \u003d venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingStart \u003d bookingStart;","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        this.bookingEnd \u003d bookingEnd;","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"     * Converts a given {@code Booking} into this class for Jackson use.","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"    public JsonAdaptedBooking(Booking source) {","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        bookerEmail \u003d source.getBookerEmail().value;","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        venueName \u003d source.getVenueName().venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        description \u003d source.getDescription().value;","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        bookingStart \u003d source.getBookingStart().value.toString();","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"        bookingEnd \u003d source.getBookingEnd().value.toString();","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"        id \u003d String.valueOf(source.getId().value);","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":60,"author":{"gitId":"NiniJiaying"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"     * Converts this Jackson-friendly adapted booking object into the model\u0027s {@code Booking} object.","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted booking.","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"NiniJiaying"},"content":"    public Booking toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-16"},{"lineNumber":66,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"NiniJiaying"},"content":"        if (bookerEmail \u003d\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"        final Email modelBooker \u003d new Email(bookerEmail);","lastModifiedDate":"2021-03-24"},{"lineNumber":72,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"        if (venueName \u003d\u003d null) {","lastModifiedDate":"2021-03-24"},{"lineNumber":74,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"        final VenueName modelVenue \u003d new VenueName(venueName);","lastModifiedDate":"2021-03-24"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, String.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"        final Description modelDescription \u003d new Description(description);","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"        if (bookingStart \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":86,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"NiniJiaying"},"content":"                    LocalDateTime.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":88,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":89,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"NiniJiaying"},"content":"        //Build formatter","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"NiniJiaying"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ss\");","lastModifiedDate":"2021-03-24"},{"lineNumber":92,"author":{"gitId":"NiniJiaying"},"content":"        //Parse String to LocalDateTime","lastModifiedDate":"2021-03-16"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"        final StartTime modelBookingStart \u003d new StartTime(LocalDateTime.parse(bookingStart, formatter));","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":95,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":96,"author":{"gitId":"NiniJiaying"},"content":"        if (bookingEnd \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"NiniJiaying"},"content":"                    LocalDateTime.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        // Parse String to LocalDateTime","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"        final EndTime modelBookingEnd \u003d new EndTime(LocalDateTime.parse(bookingEnd, formatter));","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"NiniJiaying"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":107,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"        final Id modelId \u003d new Id(Integer.parseInt(id));","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"        return new Booking(modelBooker, modelVenue, modelDescription, modelBookingStart, modelBookingEnd, modelId);","lastModifiedDate":"2021-03-16"},{"lineNumber":111,"author":{"gitId":"NiniJiaying"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":112,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":113,"author":{"gitId":"NiniJiaying"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"hojiefeng":5,"NiniJiaying":107,"vvan-essa":1}},{"path":"src/main/java/seedu/booking/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            @JsonProperty(\"email\") String email) {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(modelName, modelPhone, modelEmail);","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":6,"-":69,"NiniJiaying":4}},{"path":"src/main/java/seedu/booking/storage/JsonAdaptedVenue.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"public class JsonAdaptedVenue {","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Venue\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"    private final String name;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"    private final String capacity;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"    private final String description;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"     * Constructs a {@code JsonAdaptedVenue} with the given venue details.","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"ming-00"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"    public JsonAdaptedVenue(@JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"                            @JsonProperty(\"capacity\") String capacity,","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"                            @JsonProperty(\"description\") String description) {","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"     * Converts a given {@code Venue} into this class for Jackson use.","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    public JsonAdaptedVenue(Venue source) {","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        name \u003d source.getVenueName().venueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"        capacity \u003d String.valueOf(source.getCapacity());","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"        description \u003d source.getDescription();","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"     * Converts this Jackson-friendly adapted venue object into the model\u0027s {@code Venue} object.","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"     *","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted venue.","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"    public Venue toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        // needs to be changed after implementation of classes for each of the attributes","lastModifiedDate":"2021-03-16"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        final VenueName modelName \u003d new VenueName(name);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"        if (capacity \u003d\u003d null) {","lastModifiedDate":"2021-03-16"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        final Capacity modelCapacity \u003d new Capacity(Integer.parseInt(capacity));","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        if (modelCapacity.venueCapacity \u003c 1) {","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"            throw new IllegalValueException(MISSING_FIELD_MESSAGE_FORMAT);","lastModifiedDate":"2021-03-16"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"        final String modelDescription \u003d description;","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"        return new Venue(modelName, modelCapacity, description);","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"hojiefeng":3,"ming-00":59,"vvan-essa":6}},{"path":"src/main/java/seedu/booking/storage/JsonBookingSystemStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.FileUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.JsonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" * A class to access BookingSystem data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"public class JsonBookingSystemStorage implements BookingSystemStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookingSystemStorage.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public JsonBookingSystemStorage(Path filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        return filePath;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        return readBookingSystem(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"     * Similar to {@link #readBookingSystem()}.","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        Optional\u003cJsonSerializableBookingSystem\u003e jsonBookingSystem \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"                filePath, JsonSerializableBookingSystem.class);","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"        if (!jsonBookingSystem.isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        try {","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"            return Optional.of(jsonBookingSystem.get().toModelType());","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        saveBookingSystem(bookingSystem, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"     * Similar to {@link #saveBookingSystem(ReadOnlyBookingSystem)}.","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(bookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableBookingSystem(bookingSystem), filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"hojiefeng":80}},{"path":"src/main/java/seedu/booking/storage/JsonSerializableBookingSystem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":" * An Immutable BookingSystem that is serializable to JSON format.","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"@JsonRootName(value \u003d \"bookingsystem\")","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"class JsonSerializableBookingSystem {","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"    public static final String MESSAGE_DUPLICATE_VENUE \u003d \"Venues list contains duplicate venue(s).\";","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    public static final String MESSAGE_DUPLICATE_BOOKING \u003d \"Bookings list contains duplicate booking(s).\";","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    private final List\u003cJsonAdaptedVenue\u003e venues \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    private final List\u003cJsonAdaptedBooking\u003e bookings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"     * Constructs a {@code JsonSerializableBookingSystem} with the given persons.","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    public JsonSerializableBookingSystem(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"                                         @JsonProperty(\"venues\") List\u003cJsonAdaptedVenue\u003e venues,","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"                                         @JsonProperty(\"bookings\") List\u003cJsonAdaptedBooking\u003e bookings) {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        this.venues.addAll(venues);","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        this.bookings.addAll(bookings);","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"     * Converts a given {@code ReadOnlyBookingSystem} into this class for Jackson use.","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableBookingSystem}.","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"    public JsonSerializableBookingSystem(ReadOnlyBookingSystem source) {","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"        venues.addAll(source.getVenueList().stream().map(JsonAdaptedVenue::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-16"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        bookings.addAll(source.getBookingList().stream().map(JsonAdaptedBooking::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * Converts this booking system into the model\u0027s {@code BookingSystem} object.","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem bookingSystem \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"            if (bookingSystem.hasPerson(person)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"            bookingSystem.addPerson(person);","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"        for (JsonAdaptedVenue jsonAdaptedVenue : venues) {","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"            Venue venue \u003d jsonAdaptedVenue.toModelType();","lastModifiedDate":"2021-03-16"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"            if (bookingSystem.hasVenue(venue)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-16"},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"            bookingSystem.addVenue(venue);","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"NiniJiaying"},"content":"        for (JsonAdaptedBooking jsonAdaptedBooking : bookings) {","lastModifiedDate":"2021-03-24"},{"lineNumber":79,"author":{"gitId":"NiniJiaying"},"content":"            Booking booking \u003d jsonAdaptedBooking.toModelType();","lastModifiedDate":"2021-03-24"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"            if (bookingSystem.hasBooking(booking)) {","lastModifiedDate":"2021-03-24"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-24"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"            }","lastModifiedDate":"2021-03-24"},{"lineNumber":83,"author":{"gitId":"NiniJiaying"},"content":"            bookingSystem.addBooking(booking);","lastModifiedDate":"2021-03-24"},{"lineNumber":84,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":22,"ming-00":10,"-":41,"NiniJiaying":16}},{"path":"src/main/java/seedu/booking/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.JsonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":5,"-":42}},{"path":"src/main/java/seedu/booking/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"public interface Storage extends BookingSystemStorage, UserPrefsStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    Path getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hojiefeng":9,"-":23}},{"path":"src/main/java/seedu/booking/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Manages storage of BookingSystem data in local storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"    private BookingSystemStorage bookingSystemStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code StorageManager} with the given {@code BookingSystemStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public StorageManager(BookingSystemStorage bookingSystemStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystemStorage \u003d bookingSystemStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookingSystem methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemStorage.getBookingSystemFilePath();","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        return readBookingSystem(bookingSystemStorage.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"    public Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(Path filePath)","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystemStorage.readBookingSystem(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        saveBookingSystem(bookingSystem, bookingSystemStorage.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        bookingSystemStorage.saveBookingSystem(bookingSystem, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":23,"-":57}},{"path":"src/main/java/seedu/booking/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" * Represents a storage for {@link seedu.booking.model.UserPrefs}.","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"     * Saves the given {@link seedu.booking.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":6,"-":30}},{"path":"src/main/java/seedu/booking/ui/BookingCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"public class BookingCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"BookingListCard.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public final Booking booking;","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    private HBox bookingCardPane;","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    private Label id;","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private Label title;","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    private Label booker;","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    private Label time;","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"    private Label description;","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code BookingCard} with the given {@code Booking} and index to display.","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"    public BookingCard(Booking booking, int displayedIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        this.booking \u003d booking;","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        title.setText(booking.getDescription().value);","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        booker.setText(booking.getBookerEmail().value);","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"NiniJiaying"},"content":"        //time.setText(booking.getBookingStart().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"NiniJiaying"},"content":"        time.setText(booking.getBookingStart().toString());","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"NiniJiaying"},"content":"        description.setText(booking.getDescription().value);","lastModifiedDate":"2021-03-22"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        /* person.getTags().stream()","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName))); */","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof BookingCard)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        BookingCard card \u003d (BookingCard) other;","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 booking.equals(card.booking);","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":72,"NiniJiaying":5}},{"path":"src/main/java/seedu/booking/ui/BookingListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"public class BookingListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"BookingListPanel.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(BookingListPanel.class);","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private ListView\u003cBooking\u003e bookingListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    public BookingListPanel(ObservableList\u003cBooking\u003e bookingList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        bookingListView.setItems(bookingList);","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        bookingListView.setCellFactory(listView -\u003e new BookingListViewCell());","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    class BookingListViewCell extends ListCell\u003cBooking\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        protected void updateItem(Booking booking, boolean empty) {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            super.updateItem(booking, empty);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"            if (empty || booking \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"                setText(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(new BookingCard(booking, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":50}},{"path":"src/main/java/seedu/booking/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"         * @see seedu.booking.logic.Logic#execute(String)","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"hojiefeng":5,"-":79}},{"path":"src/main/java/seedu/booking/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-w17-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":2,"ming-00":1,"-":99}},{"path":"src/main/java/seedu/booking/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.Logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    private BookingListPanel upcomingBookingListPanel;","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    private VenueListPanel venueListPanel;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    private BookingListPanel bookingListPanel;","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    private StackPane upcomingBookingListPanelPlaceholder;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    private StackPane resultListPanelPlaceholder;","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":"        upcomingBookingListPanel \u003d new BookingListPanel(logic.getUpcomingBookingList());","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"        upcomingBookingListPanelPlaceholder.getChildren().add(upcomingBookingListPanel.getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"        venueListPanel \u003d new VenueListPanel(logic.getFilteredVenueList());","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"        bookingListPanel \u003d new BookingListPanel(logic.getFilteredBookingList());","lastModifiedDate":"2021-03-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2021-03-17"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        resultListPanelPlaceholder.getChildren().removeAll();","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"hojiefeng"},"content":"        resultListPanelPlaceholder.getChildren().add(venueListPanel.getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"hojiefeng"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"hojiefeng"},"content":"    private String getCommandType(String commandText) {","lastModifiedDate":"2021-03-17"},{"lineNumber":188,"author":{"gitId":"hojiefeng"},"content":"        String command \u003d commandText.split(\" \")[0];","lastModifiedDate":"2021-03-17"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"        if (command.contains(\"_\")) {","lastModifiedDate":"2021-03-17"},{"lineNumber":190,"author":{"gitId":"hojiefeng"},"content":"            return command.split(\"_\")[1];","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"hojiefeng"},"content":"        } else {","lastModifiedDate":"2021-03-17"},{"lineNumber":192,"author":{"gitId":"hojiefeng"},"content":"            return \"\";","lastModifiedDate":"2021-03-17"},{"lineNumber":193,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":194,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":195,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":196,"author":{"gitId":"hojiefeng"},"content":"    private void displayList(String commandType) {","lastModifiedDate":"2021-03-17"},{"lineNumber":197,"author":{"gitId":"hojiefeng"},"content":"        resultListPanelPlaceholder.getChildren().clear();","lastModifiedDate":"2021-03-22"},{"lineNumber":198,"author":{"gitId":"hojiefeng"},"content":"        if (commandType.equals(\"booking\")) {","lastModifiedDate":"2021-03-17"},{"lineNumber":199,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(bookingListPanel.getRoot());","lastModifiedDate":"2021-03-17"},{"lineNumber":200,"author":{"gitId":"hojiefeng"},"content":"        } else if (commandType.equals(\"venue\")) {","lastModifiedDate":"2021-03-17"},{"lineNumber":201,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(venueListPanel.getRoot());","lastModifiedDate":"2021-03-17"},{"lineNumber":202,"author":{"gitId":"hojiefeng"},"content":"        } else if (commandType.equals(\"person\")) {","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"hojiefeng"},"content":"            resultListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":206,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"hojiefeng"},"content":"     * @see seedu.booking.logic.Logic#execute(String)","lastModifiedDate":"2021-03-17"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"hojiefeng"},"content":"            displayList(getCommandType(commandText));","lastModifiedDate":"2021-03-17"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":49,"-":186}},{"path":"src/main/java/seedu/booking/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hojiefeng":2,"-":64}},{"path":"src/main/java/seedu/booking/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":3,"-":46}},{"path":"src/main/java/seedu/booking/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":1,"-":27}},{"path":"src/main/java/seedu/booking/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":27}},{"path":"src/main/java/seedu/booking/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hojiefeng":1,"-":12}},{"path":"src/main/java/seedu/booking/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.Logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":5,"-":84}},{"path":"src/main/java/seedu/booking/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"hojiefeng":2,"-":86}},{"path":"src/main/java/seedu/booking/ui/VenueCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class VenueCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"VenueListCard.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"     *","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    public final Venue venue;","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private HBox bookingCardPane;","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"    private Label id;","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"    private Label name;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    private Label description;","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    private Label capacity;","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code BookingCard} with the given {@code Booking} and index to display.","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    public VenueCard(Venue venue, int displayedIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        this.venue \u003d venue;","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        name.setText(String.valueOf(venue.getVenueName()));","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        capacity.setText(String.valueOf(venue.getCapacity()));","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        /* person.getTags().stream()","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName))); */","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"            return true;","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"        if (!(other instanceof VenueCard)) {","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        VenueCard card \u003d (VenueCard) other;","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"                \u0026\u0026 venue.equals(card.venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":70,"vvan-essa":1}},{"path":"src/main/java/seedu/booking/ui/VenueListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.LogsCenter;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"public class VenueListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final String FXML \u003d \"VenueListPanel.fxml\";","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(VenueListPanel.class);","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"    @FXML","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"    private ListView\u003cVenue\u003e venueListView;","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    public VenueListPanel(ObservableList\u003cVenue\u003e bookingList) {","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        super(FXML);","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        venueListView.setItems(bookingList);","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        venueListView.setCellFactory(listView -\u003e new VenueListViewCell());","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    class VenueListViewCell extends ListCell\u003cVenue\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        protected void updateItem(Venue venue, boolean empty) {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"            super.updateItem(venue, empty);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"            if (empty || venue \u003d\u003d null) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"                setText(null);","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            } else {","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"                setGraphic(new VenueCard(venue, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            }","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":50}},{"path":"src/main/resources/view/BookingListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"\u003cHBox id\u003d\"bookingCardPane\" fx:id\u003d\"bookingCardPane\" styleClass\u003d\"card-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"booker\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$booker\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":36}},{"path":"src/main/resources/view/BookingListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"  \u003cListView fx:id\u003d\"bookingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2018-04-01"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"hojiefeng":2,"-":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"    background-color: #868686; /* Used in the default.html file */","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    -fx-base: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    -fx-control-inner-background: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"hojiefeng"},"content":".cell_title_label {","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"hojiefeng"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"hojiefeng"},"content":"    -fx-font-size: 24px;","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"hojiefeng"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":142,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":146,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":149,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-radius: 5px;","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":152,"author":{"gitId":"hojiefeng"},"content":".pane-with-border-light {","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"hojiefeng"},"content":"     -fx-background-color: #c4c4c4;","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-color: #c4c4c4;","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"     -fx-border-radius: 20px;","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"hojiefeng"},"content":".cell-pane {","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-top-width: 1px;","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-radius: 5px;","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"hojiefeng"},"content":"    -fx-margin-bottom: 10px;","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":189,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"hojiefeng"},"content":"    -fx-border-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":305,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #868686;","lastModifiedDate":"2021-03-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":326,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":330,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"hojiefeng"},"content":"#commandBox {","lastModifiedDate":"2021-03-15"},{"lineNumber":336,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;","lastModifiedDate":"2021-03-15"},{"lineNumber":337,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":338,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":339,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"hojiefeng"},"content":"    -fx-background-color: #c4c4c4;","lastModifiedDate":"2021-03-15"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"hojiefeng"},"content":"#commandTitle {","lastModifiedDate":"2021-03-15"},{"lineNumber":355,"author":{"gitId":"hojiefeng"},"content":"    -fx-display: block;","lastModifiedDate":"2021-03-15"},{"lineNumber":356,"author":{"gitId":"hojiefeng"},"content":"    -fx-padding: 0 0 30 0;","lastModifiedDate":"2021-03-15"},{"lineNumber":357,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":358,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":359,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":360,"author":{"gitId":"hojiefeng"},"content":"TextField {","lastModifiedDate":"2021-03-15"},{"lineNumber":361,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":362,"author":{"gitId":"hojiefeng"},"content":"    -fx-text-box-border: transparent;","lastModifiedDate":"2021-03-15"},{"lineNumber":363,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":371,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":373,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":378,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":385,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"hojiefeng":56,"-":329}},{"path":"src/main/resources/view/FavoriteVenueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"\u003cPane fx:id\u003d\"favoriteVenueListView\" id\u003d\"favoriteVenueListView\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"   \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"   \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"   \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"         \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"         \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003cminWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"               \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"               \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"            \u003c/minWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"         \u003c/Label\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"         \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"booker\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$booker\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"   \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"\u003c/Pane\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":36}},{"path":"src/main/resources/view/FavoriteVenueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.TilePane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003cTilePane fx:id\u003d\"favoriteVenueListPanel\" id\u003d\"favoriteVenueListPanel\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/TilePane\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"         title\u003d\"Booking App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"      \u003cVBox styleClass\u003d\"background\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        \u003cVBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"            \u003cInsets top\u003d\"30\" right\u003d\"20\" bottom\u003d\"15\" left\u003d\"20\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"          \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_title_label\" text\u003d\"Good Day! Here are the upcoming bookings:\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"upcomingBookingList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"upcomingBookingListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"favorite\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"            \u003cLabel fx:id\u003d\"favoritePlaceholder\" styleClass\u003d\"cell_title_label\" text\u003d\"Status of favorite venues:\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"favoriteVenueListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox style\u003d\"-fx-background-color: #c4c4c4;\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"            \u003cLabel fx:id\u003d\"commandTitle\" id\u003d\"commandTitle\" styleClass\u003d\"cell_title_label\" text\u003d\"How can I help you?\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                     minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"          \u003cVBox fx:id\u003d\"resultList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"hojiefeng"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"            \u003cStackPane fx:id\u003d\"resultListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"          \u003c!--\u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"          \u003c/VBox\u003e--\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"hojiefeng":33,"-":60}},{"path":"src/main/resources/view/VenueListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"\u003cHBox id\u003d\"venueCardPane\" fx:id\u003d\"bookingCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"      \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":35}},{"path":"src/main/resources/view/VenueListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"  \u003cListView fx:id\u003d\"venueListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":8}},{"path":"src/test/data/JsonBookingSystemStorageTest/invalidAndValidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":9,"NiniJiaying":2}},{"path":"src/test/data/JsonBookingSystemStorageTest/invalidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"hans@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":6,"NiniJiaying":1}},{"path":"src/test/data/JsonSerializableBookingSystemTest/duplicatePersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"alice@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"pauline@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"  } ],","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"  \"venues\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Victoria Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"  }, {","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"  } ],","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"  \"bookings\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"  \"bookerEmail\" : \"example@gmail.com\",","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"  \"venueName\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"  \"description\" : \"For FYP meeting.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"  \"bookingStart\" : \"2012-01-31T22:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"  \"bookingEnd\" : \"2012-01-31T23:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"  \"id\" : \"182273586\"","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"  } ]","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ming-00":1,"-":8,"NiniJiaying":19}},{"path":"src/test/data/JsonSerializableBookingSystemTest/invalidPersonBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"    \"email\": \"invalid@email!3e\"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"  } ],","lastModifiedDate":"2021-03-16"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"  \"venues\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Victoria Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"  }, {","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":15,"author":{"gitId":"NiniJiaying"},"content":"  } ],","lastModifiedDate":"2021-03-24"},{"lineNumber":16,"author":{"gitId":"NiniJiaying"},"content":"  \"bookings\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":17,"author":{"gitId":"NiniJiaying"},"content":"    \"bookerEmail\" : \"example@gmail.com\",","lastModifiedDate":"2021-03-24"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    \"venueName\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":19,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : \"For FYP meeting.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    \"bookingStart\" : \"2012-01-31T22:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    \"bookingEnd\" : \"2012-01-31T23:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    \"id\" : \"182273586\"","lastModifiedDate":"2021-03-24"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"  } ]","lastModifiedDate":"2021-03-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"ming-00":1,"-":5,"NiniJiaying":18}},{"path":"src/test/data/JsonSerializableBookingSystemTest/typicalPersonsBookingSystem.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"  \"_comment\": \"BookingSystem save file which contains the same Person values as in TypicalPersons#getTypicalBookingSystem()\",","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"alice@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"johnd@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"heinz@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"cornelia@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"werner@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"lydia@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    \"email\" : \"anna@example.com\"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"  } ],","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"  \"venues\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Victoria Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"  }, {","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"    \"name\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"    \"capacity\" : \"50\",","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : null","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"NiniJiaying"},"content":"  } ],","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"  \"bookings\" : [ {","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"    \"bookerEmail\" : \"example@gmail.com\",","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"    \"venueName\" : \"Hall\",","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"    \"description\" : \"For FYP meeting.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"    \"bookingStart\" : \"2012-01-31T22:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"    \"bookingEnd\" : \"2012-01-31T23:59:59\",","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"    \"id\" : \"182273586\"","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"NiniJiaying"},"content":"  } ]","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":1,"ming-00":1,"-":23,"NiniJiaying":24}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"  \"bookingSystemFilePath\" : \"bookingsystem.json\"","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"  \"bookingSystemFilePath\" : \"bookingsystem.json\"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":1,"-":10}},{"path":"src/test/java/seedu/booking/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"hojiefeng":1,"-":57}},{"path":"src/test/java/seedu/booking/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"hojiefeng":1,"-":26}},{"path":"src/test/java/seedu/booking/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":2,"-":133}},{"path":"src/test/java/seedu/booking/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.core.index;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"hojiefeng":2,"-":58}},{"path":"src/test/java/seedu/booking/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"hojiefeng":2,"-":34}},{"path":"src/test/java/seedu/booking/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"hojiefeng":3,"-":105}},{"path":"src/test/java/seedu/booking/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Config;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":4,"-":112}},{"path":"src/test/java/seedu/booking/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":2,"-":21}},{"path":"src/test/java/seedu/booking/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.SerializableTestClass;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.TestUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":3,"-":42}},{"path":"src/test/java/seedu/booking/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.commons.util;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"hojiefeng":2,"-":141}},{"path":"src/test/java/seedu/booking/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CommandResult;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ListCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.JsonBookingSystemStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.storage.StorageManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"                new JsonBookingSystemStorage(temporaryFolder.resolve(\"bookingSystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        StorageManager storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"                new JsonBookingSystemIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionBookingSystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"hojiefeng"},"content":"        StorageManager storage \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"NiniJiaying"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"NiniJiaying"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"hojiefeng"},"content":"    private static class JsonBookingSystemIoExceptionThrowingStub extends JsonBookingSystemStorage {","lastModifiedDate":"2021-03-17"},{"lineNumber":151,"author":{"gitId":"hojiefeng"},"content":"        private JsonBookingSystemIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"hojiefeng"},"content":"        public void saveBookingSystem(ReadOnlyBookingSystem bookingSystem, Path filePath) throws IOException {","lastModifiedDate":"2021-03-17"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hojiefeng":32,"-":126,"NiniJiaying":2}},{"path":"src/test/java/seedu/booking/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        Person personInList \u003d model.getBookingSystem().getPersonList().get(0);","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"hojiefeng":12,"-":33}},{"path":"src/test/java/seedu/booking/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"hojiefeng"},"content":"        public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystemFilePath(Path bookingSystemFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"NiniJiaying"},"content":"        public void addBooking(Booking booking) {","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"        public void setBooking(Booking target, Booking editedBooking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystem(ReadOnlyBookingSystem newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasPersonWithEmail(Email email) {","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":152,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasBooking(Booking booking) {","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"NiniJiaying"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":155,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":162,"author":{"gitId":"vvan-essa"},"content":"        public void deleteVenue(Venue target) {","lastModifiedDate":"2021-03-09"},{"lineNumber":163,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":164,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":165,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasVenueWithVenueName(VenueName venueName) {","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":177,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":178,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":179,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":180,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":181,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {","lastModifiedDate":"2021-03-09"},{"lineNumber":183,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":184,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":185,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":186,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"        public void setVenue(Venue target, Venue editedVenue) {","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-21"},{"lineNumber":189,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":190,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"hojiefeng"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":197,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getUpcomingBookingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":198,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":201,"author":{"gitId":"hojiefeng"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":202,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getFilteredBookingList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":206,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cVenue\u003e getFilteredVenueList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":209,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":216,"author":{"gitId":"xuanqi966"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":217,"author":{"gitId":"NiniJiaying"},"content":"        public void deleteBooking(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":218,"author":{"gitId":"xuanqi966"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":219,"author":{"gitId":"xuanqi966"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":220,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":221,"author":{"gitId":"xuanqi966"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":222,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":223,"author":{"gitId":"NiniJiaying"},"content":"        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {","lastModifiedDate":"2021-03-10"},{"lineNumber":224,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":225,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":226,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":227,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":228,"author":{"gitId":"vvan-essa"},"content":"        public void updateFilteredVenueList(Predicate\u003cVenue\u003e predicate) {","lastModifiedDate":"2021-03-21"},{"lineNumber":229,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-09"},{"lineNumber":230,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":271,"author":{"gitId":"hojiefeng"},"content":"            return new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"hojiefeng":28,"ming-00":10,"-":179,"NiniJiaying":33,"vvan-essa":19,"xuanqi966":6}},{"path":"src/test/java/seedu/booking/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    public void execute_emptyBookingSystem_success() {","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        expectedModel.setBookingSystem(new BookingSystem());","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"hojiefeng":11,"-":21}},{"path":"src/test/java/seedu/booking/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"hojiefeng":1,"-":53}},{"path":"src/test/java/seedu/booking/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ID;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_ORIGINAL_EMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE_ORIGINAL;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.booking.VenueNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditPersonCommandDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditVenueDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_EMAIL_AMY_GMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_EMAIL_BOB_GMAIL \u003d \"bob@gmail.com\";","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_BOOKING_ID_1 \u003d \"1\";","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_BOOKING_ID_2 \u003d \"2\";","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_VENUE_NAME_COURT \u003d \"Court\";","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_NAME_HALL \u003d \"Victoria Hall\";","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_NAME_FIELD \u003d \"Town Green\";","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_VENUE_NAME_VENUE1 \u003d \"Venue1\";","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_VENUE_NAME_VENUE2 \u003d \"Venue2\";","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_VENUE_NAME_VENUE3 \u003d \"Venue3\";","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"    public static final int VALID_VENUE_CAPACITY_HALL \u003d 50;","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"    public static final int VALID_VENUE_CAPACITY_FIELD \u003d 60;","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_DESCRIPTION_HALL \u003d \"Good for large indoor events.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"    public static final String VALID_VENUE_DESCRIPTION_FIELD \u003d \"Popular sports location.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_NAME_DESC_HALL \u003d \" \" + PREFIX_VENUE + VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_NAME_DESC_FIELD \u003d \" \" + PREFIX_VENUE + VALID_VENUE_NAME_FIELD;","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"    public static final String VENUE_NAME_DESC_VENUE1 \u003d \" \" + PREFIX_VENUE + VALID_VENUE_NAME_VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"    public static final String VENUE_NAME_DESC_VENUE2 \u003d \" \" + PREFIX_VENUE + VALID_VENUE_NAME_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_CAPACITY_DESC_HALL \u003d \" \" + PREFIX_CAPACITY + VALID_VENUE_CAPACITY_HALL;","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_CAPACITY_DESC_FIELD \u003d \" \" + PREFIX_CAPACITY + VALID_VENUE_CAPACITY_FIELD;","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_DESCRIPTION_DESC_HALL \u003d \" \" + PREFIX_DESCRIPTION + VALID_VENUE_DESCRIPTION_HALL;","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":"    public static final String VENUE_DESCRIPTION_DESC_FIELD \u003d \" \" + PREFIX_DESCRIPTION + VALID_VENUE_DESCRIPTION_FIELD;","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"    public static final String ORIGINAL_EMAIL_DESC_AMY \u003d \" \" + PREFIX_ORIGINAL_EMAIL + VALID_EMAIL_AMY_GMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"    public static final String ORIGINAL_VENUE_DESC_HALL \u003d \" \" + PREFIX_VENUE_ORIGINAL + VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"    public static final String INVALID_VENUE_NAME_DESC \u003d \" \" + PREFIX_VENUE + \"!\";","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"    // non-numerics not allowed","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"    public static final String INVALID_VENUE_CAPACITY_DESC \u003d \" \" + PREFIX_CAPACITY + \"-3\";","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"ming-00"},"content":"    // capacity cannot be negative","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"ming-00"},"content":"    public static final String INVALID_VENUE_CAPACITY_DESC2 \u003d \" \" + PREFIX_CAPACITY + \"-2\";","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"    public static final String VALID_VENUE_CAPACITY_DESC \u003d \" \" + PREFIX_CAPACITY + \"30\";","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":110,"author":{"gitId":"NiniJiaying"},"content":"    public static final String VALID_BOOKING_ID_DESC \u003d \" \" + PREFIX_BOOKING_ID + \"1\";","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"    public static final EditPersonCommand.EditPersonDescriptor VALID_PERSON_COMMAND_DESCRIPTOR_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"    public static final EditPersonCommand.EditPersonDescriptor VALID_PERSON_COMMAND_DESCRIPTOR_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"    public static final EditVenueCommand.EditVenueDescriptor DESC_COURT;","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"    public static final EditVenueCommand.EditVenueDescriptor DESC_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"        VALID_PERSON_COMMAND_DESCRIPTOR_AMY \u003d new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"        VALID_PERSON_COMMAND_DESCRIPTOR_BOB \u003d new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"        DESC_HALL \u003d new EditVenueDescriptorBuilder().withVenueName(\"Victoria Hall\")","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"                .withCapacity(50).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"        DESC_COURT \u003d new EditVenueDescriptorBuilder().withVenueName(\"Court\")","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"                .withCapacity(20).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":178,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem expectedBookingSystem \u003d new BookingSystem(actualModel.getBookingSystem());","lastModifiedDate":"2021-03-17"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":182,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(expectedBookingSystem, actualModel.getBookingSystem());","lastModifiedDate":"2021-03-17"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":185,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":201,"author":{"gitId":"vvan-essa"},"content":"     * Updates {@code model}\u0027s filtered list to show only the venue at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-21"},{"lineNumber":202,"author":{"gitId":"vvan-essa"},"content":"     * {@code model}\u0027s booking system.","lastModifiedDate":"2021-03-21"},{"lineNumber":203,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":204,"author":{"gitId":"vvan-essa"},"content":"    public static void showVenueAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-21"},{"lineNumber":205,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredVenueList().size());","lastModifiedDate":"2021-03-21"},{"lineNumber":206,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"        Venue venue \u003d model.getFilteredVenueList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"        final String[] splitName \u003d venue.getVenueName().venueName.split(\"\\\\s+\");","lastModifiedDate":"2021-03-21"},{"lineNumber":209,"author":{"gitId":"vvan-essa"},"content":"        model.updateFilteredVenueList(new VenueNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2021-03-21"},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":211,"author":{"gitId":"vvan-essa"},"content":"        assertEquals(1, model.getFilteredVenueList().size());","lastModifiedDate":"2021-03-21"},{"lineNumber":212,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":213,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"hojiefeng":17,"ming-00":20,"-":108,"NiniJiaying":4,"vvan-essa":65}},{"path":"src/test/java/seedu/booking/logic/commands/CreateVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"ming-00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"ming-00"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.VenueBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"    public void constructor_nullVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CreateVenueCommand(null));","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"    public void execute_venueAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        ModelStubAcceptingVenueAdded modelStub \u003d new ModelStubAcceptingVenueAdded();","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"        Venue validVenue \u003d new VenueBuilder().build();","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        CommandResult commandResult \u003d new CreateVenueCommand(validVenue).execute(modelStub);","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"        assertEquals(String.format(CreateVenueCommand.MESSAGE_SUCCESS, validVenue), commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-16"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        assertEquals(Arrays.asList(validVenue), modelStub.venuesAdded);","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"    public void execute_duplicateVenue_throwsCommandException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"        Venue validVenue \u003d new VenueBuilder().build();","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        CreateVenueCommand createVenueCommand \u003d new CreateVenueCommand(validVenue);","lastModifiedDate":"2021-03-16"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"        ModelStub modelStub \u003d new ModelStubWithVenue(validVenue);","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(CommandException.class, createVenueCommand.MESSAGE_DUPLICATE_VENUE, ()","lastModifiedDate":"2021-03-16"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"            -\u003e createVenueCommand.execute(modelStub));","lastModifiedDate":"2021-03-16"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"        Venue hall \u003d new VenueBuilder().withName(\"Victoria Hall\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"        Venue field \u003d new VenueBuilder().withName(\"Town Green\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addHallCommand \u003d new CreateVenueCommand(hall);","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addFieldCommand \u003d new CreateVenueCommand(field);","lastModifiedDate":"2021-03-16"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"        assertTrue(addHallCommand.equals(addHallCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"        CreateVenueCommand addHallCommandCopy \u003d new CreateVenueCommand(hall);","lastModifiedDate":"2021-03-16"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"        assertTrue(addHallCommand.equals(addHallCommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":"        assertFalse(addHallCommand.equals(addFieldCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"ming-00"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"        public Path getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystemFilePath(Path bookingSystemFilePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"ming-00"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"ming-00"},"content":"        public void addBooking(Booking booking) {","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":128,"author":{"gitId":"NiniJiaying"},"content":"        public void setBooking(Booking target, Booking editedBooking) {","lastModifiedDate":"2021-03-24"},{"lineNumber":129,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":130,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":131,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":132,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"hojiefeng"},"content":"        public void setBookingSystem(ReadOnlyBookingSystem newData) {","lastModifiedDate":"2021-03-17"},{"lineNumber":134,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"ming-00"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":148,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasPersonWithEmail(Email email) {","lastModifiedDate":"2021-03-24"},{"lineNumber":149,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":150,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"        public boolean hasBooking(Booking booking) {","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"ming-00"},"content":"            return false;","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":157,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"ming-00"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"        public void deleteVenue(Venue target) {","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-24"},{"lineNumber":166,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":167,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-24"},{"lineNumber":168,"author":{"gitId":"NiniJiaying"},"content":"        public boolean hasVenueWithVenueName(VenueName venueName) {","lastModifiedDate":"2021-03-24"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-24"},{"lineNumber":170,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":171,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":172,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":173,"author":{"gitId":"ming-00"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-15"},{"lineNumber":174,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":175,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":176,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":177,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":178,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":179,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":180,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":181,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":182,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":183,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":184,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":185,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":186,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":187,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"vvan-essa"},"content":"        public void setVenue(Venue target, Venue editedVenue) {","lastModifiedDate":"2021-03-21"},{"lineNumber":189,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":190,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":191,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":192,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":193,"author":{"gitId":"ming-00"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":194,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":195,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":196,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":197,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":198,"author":{"gitId":"ming-00"},"content":"        public ObservableList\u003cVenue\u003e getFilteredVenueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":199,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":200,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":201,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":202,"author":{"gitId":"hojiefeng"},"content":"        @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":203,"author":{"gitId":"hojiefeng"},"content":"        public ObservableList\u003cBooking\u003e getUpcomingBookingList() {","lastModifiedDate":"2021-03-17"},{"lineNumber":204,"author":{"gitId":"hojiefeng"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-17"},{"lineNumber":205,"author":{"gitId":"hojiefeng"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":206,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":207,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":208,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cBooking\u003e getFilteredBookingList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":209,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":210,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":211,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":212,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":213,"author":{"gitId":"ming-00"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":214,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":215,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":216,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":217,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":218,"author":{"gitId":"NiniJiaying"},"content":"        public void deleteBooking(Id bookingId) {","lastModifiedDate":"2021-03-22"},{"lineNumber":219,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":220,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":221,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":222,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":223,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":224,"author":{"gitId":"ming-00"},"content":"        public void updateFilteredBookingList(Predicate\u003cBooking\u003e predicate) {","lastModifiedDate":"2021-03-15"},{"lineNumber":225,"author":{"gitId":"vvan-essa"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-21"},{"lineNumber":226,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":227,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":228,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":229,"author":{"gitId":"vvan-essa"},"content":"        public void updateFilteredVenueList(Predicate\u003cVenue\u003e predicate) {","lastModifiedDate":"2021-03-21"},{"lineNumber":230,"author":{"gitId":"ming-00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-15"},{"lineNumber":231,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":232,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":233,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":234,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":235,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":236,"author":{"gitId":"ming-00"},"content":"     * A Model stub that contains a single venue.","lastModifiedDate":"2021-03-15"},{"lineNumber":237,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":238,"author":{"gitId":"ming-00"},"content":"    private class ModelStubWithVenue extends ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":239,"author":{"gitId":"ming-00"},"content":"        private final Venue venue;","lastModifiedDate":"2021-03-15"},{"lineNumber":240,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":241,"author":{"gitId":"ming-00"},"content":"        ModelStubWithVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":242,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":243,"author":{"gitId":"ming-00"},"content":"            this.venue \u003d venue;","lastModifiedDate":"2021-03-15"},{"lineNumber":244,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":245,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":246,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":247,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":248,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":249,"author":{"gitId":"ming-00"},"content":"            return this.venue.isSameVenue(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":250,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":251,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":252,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":253,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":254,"author":{"gitId":"ming-00"},"content":"     * A Model stub that always accept the venue being added.","lastModifiedDate":"2021-03-15"},{"lineNumber":255,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":256,"author":{"gitId":"ming-00"},"content":"    private class ModelStubAcceptingVenueAdded extends ModelStub {","lastModifiedDate":"2021-03-15"},{"lineNumber":257,"author":{"gitId":"ming-00"},"content":"        final ArrayList\u003cVenue\u003e venuesAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-15"},{"lineNumber":258,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":259,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":260,"author":{"gitId":"ming-00"},"content":"        public boolean hasVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":261,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":262,"author":{"gitId":"ming-00"},"content":"            return venuesAdded.stream().anyMatch(venue::isSameVenue);","lastModifiedDate":"2021-03-15"},{"lineNumber":263,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":264,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":265,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":266,"author":{"gitId":"ming-00"},"content":"        public void addVenue(Venue venue) {","lastModifiedDate":"2021-03-15"},{"lineNumber":267,"author":{"gitId":"ming-00"},"content":"            requireNonNull(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":268,"author":{"gitId":"ming-00"},"content":"            venuesAdded.add(venue);","lastModifiedDate":"2021-03-15"},{"lineNumber":269,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":270,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":271,"author":{"gitId":"ming-00"},"content":"        @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":272,"author":{"gitId":"hojiefeng"},"content":"        public ReadOnlyBookingSystem getBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":273,"author":{"gitId":"hojiefeng"},"content":"            return new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":274,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":275,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":276,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":277,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":23,"ming-00":212,"NiniJiaying":26,"vvan-essa":16}},{"path":"src/test/java/seedu/booking/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookingSystem().getPersonList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"hojiefeng":17,"-":92}},{"path":"src/test/java/seedu/booking/logic/commands/DeleteVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE2;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" * {@code DeleteVenueCommand}.","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandTest {","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        Venue venueToDelete \u003d model.getFilteredVenueList().get(INDEX_FIRST_VENUE.getZeroBased());","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteVenueCommand \u003d new DeleteVenueCommand(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(DeleteVenueCommand.MESSAGE_DELETE_VENUE_SUCCESS,","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"                venueToDelete.getVenueName());","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.deleteVenue(venueToDelete);","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(deleteVenueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    public void execute_invalidVenueUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        Venue venueNotInSystem \u003d VENUE2;","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteVenueCommand \u003d new DeleteVenueCommand(venueNotInSystem);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(deleteVenueCommand, model, Messages.MESSAGE_INVALID_VENUE_NAME);","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteFirstCommand \u003d new DeleteVenueCommand(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteSecondCommand \u003d new DeleteVenueCommand(VENUE2);","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        DeleteVenueCommand deleteFirstCommandCopy \u003d new DeleteVenueCommand(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-09"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":11,"vvan-essa":64}},{"path":"src/test/java/seedu/booking/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"hojiefeng"},"content":"        Person personInList \u003d model.getBookingSystem().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookingSystem().getPersonList().size());","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"hojiefeng":26,"-":125}},{"path":"src/test/java/seedu/booking/logic/commands/EditPersonCommandDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PERSON_COMMAND_DESCRIPTOR_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PERSON_COMMAND_DESCRIPTOR_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditPersonCommandDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommandDescriptorTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(VALID_PERSON_COMMAND_DESCRIPTOR_AMY);","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(VALID_PERSON_COMMAND_DESCRIPTOR_AMY));","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(5));","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(VALID_PERSON_COMMAND_DESCRIPTOR_BOB));","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor editedAmy \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder(VALID_PERSON_COMMAND_DESCRIPTOR_AMY)","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"                        .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(editedAmy));","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        editedAmy \u003d new EditPersonCommandDescriptorBuilder(VALID_PERSON_COMMAND_DESCRIPTOR_AMY)","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(editedAmy));","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        editedAmy \u003d new EditPersonCommandDescriptorBuilder(VALID_PERSON_COMMAND_DESCRIPTOR_AMY)","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"                .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VALID_PERSON_COMMAND_DESCRIPTOR_AMY.equals(editedAmy));","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":53}},{"path":"src/test/java/seedu/booking/logic/commands/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_AMY_GMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB_GMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.commons.core.Messages;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditPersonCommandDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPersonCommand.","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommandTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), new EditPersonDescriptor());","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL),","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"    /*@Test","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(new Email(\"amy@gmail.com\"), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"    }*/","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"        Person personInList \u003d model.getBookingSystem().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL),","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder(personInList).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"    public void execute_invalidPersonEmailUnfilteredList_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        Email unknownEmail \u003d new Email(\"unknown@email.com\");","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(unknownEmail, descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_EMAIL);","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL),","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_AMY).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor copyDescriptor \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonDescriptor(new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_AMY).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand commandWithSameValues \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), copyDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(new Email(VALID_EMAIL_BOB_GMAIL),","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_AMY).build())));","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(new Email(VALID_EMAIL_BOB_GMAIL),","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"                new EditPersonCommandDescriptorBuilder().withName(VALID_NAME_BOB).build())));","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":142,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":142}},{"path":"src/test/java/seedu/booking/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"hojiefeng":8,"-":41}},{"path":"src/test/java/seedu/booking/logic/commands/EditVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_COURT;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE3;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.showVenueAtIndex;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_SECOND_VENUE;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE3;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand.EditVenueDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditVenueDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.VenueBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditVenueCommand.","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueCommandTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        Venue editedVenue \u003d new VenueBuilder().build();","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor descriptor \u003d new EditVenueDescriptorBuilder(editedVenue).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand editVenueCommand \u003d new EditVenueCommand(new VenueName(VALID_VENUE_NAME_VENUE1), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditVenueCommand.MESSAGE_EDIT_VENUE_SUCCESS, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.setVenue(model.getFilteredVenueList().get(0), editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editVenueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand editVenueCommand \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueCommand(new VenueName(VALID_VENUE_NAME_VENUE1), new EditVenueDescriptor());","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        Venue editedVenue \u003d model.getFilteredVenueList().get(INDEX_FIRST_VENUE.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditVenueCommand.MESSAGE_EDIT_VENUE_SUCCESS, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editVenueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        showVenueAtIndex(model, INDEX_FIRST_VENUE);","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"        Venue venueInFilteredList \u003d model.getFilteredVenueList().get(INDEX_FIRST_VENUE.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"        Venue editedVenue \u003d new VenueBuilder(venueInFilteredList).withName(VALID_VENUE_NAME_HALL).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand editVenueCommand \u003d new EditVenueCommand(new VenueName(VALID_VENUE_NAME_VENUE1),","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_HALL).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(EditVenueCommand.MESSAGE_EDIT_VENUE_SUCCESS, editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"        Model expectedModel \u003d new ModelManager(new BookingSystem(model.getBookingSystem()), new UserPrefs());","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.setVenue(model.getFilteredVenueList().get(0), editedVenue);","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(editVenueCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE3);","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"        Venue firstVenue \u003d model.getFilteredVenueList().get(INDEX_FIRST_VENUE.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor descriptor \u003d new EditVenueDescriptorBuilder(firstVenue).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand editVenueCommand \u003d new EditVenueCommand(new VenueName(VALID_VENUE_NAME_VENUE3), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(editVenueCommand, model, EditVenueCommand.MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE1);","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"        model.addVenue(VENUE3);","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"        showVenueAtIndex(model, INDEX_FIRST_VENUE);","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"        // edit venue in filtered list into a duplicate in the booking system","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"        Venue venueInList \u003d model.getBookingSystem().getVenueList().get(INDEX_SECOND_VENUE.getZeroBased());","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand editVenueCommand \u003d new EditVenueCommand(new VenueName(VALID_VENUE_NAME_VENUE1),","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder(venueInList).build());","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"        assertCommandFailure(editVenueCommand, model, EditVenueCommand.MESSAGE_DUPLICATE_VENUE);","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor descriptor \u003d new EditVenueDescriptorBuilder(VENUE1).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"        final EditVenueCommand standardCommand \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueCommand(new VenueName(VALID_VENUE_NAME_COURT), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor copyDescriptor \u003d new EditVenueDescriptor(descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand commandWithSameValues \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueCommand(new VenueName(VALID_VENUE_NAME_COURT), copyDescriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new EditVenueCommand(new VenueName(VALID_VENUE_NAME_HALL),","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"                descriptor)));","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor descriptorNew \u003d new EditVenueDescriptorBuilder(VENUE3).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(standardCommand.equals(new EditVenueCommand(new VenueName(VALID_VENUE_NAME_HALL),","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"                descriptorNew)));","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":141}},{"path":"src/test/java/seedu/booking/logic/commands/EditVenueDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_COURT;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.DESC_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand.EditVenueDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditVenueDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueDescriptorTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        EditVenueDescriptor descriptor \u003d new EditVenueDescriptorBuilder(DESC_HALL).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(DESC_HALL.equals(descriptor));","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(DESC_HALL.equals(DESC_HALL));","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(DESC_HALL.equals(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(DESC_HALL.equals(5));","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(DESC_HALL.equals(DESC_COURT));","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor editedCourt \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder(DESC_COURT).withVenueName(VALID_VENUE_NAME_HALL).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(DESC_COURT.equals(editedCourt));","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        // different capacity -\u003e returns false","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        editedCourt \u003d new EditVenueDescriptorBuilder(DESC_COURT).withCapacity(VALID_VENUE_CAPACITY_HALL).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(DESC_COURT.equals(editedCourt));","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":45}},{"path":"src/test/java/seedu/booking/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"hojiefeng":5,"-":15}},{"path":"src/test/java/seedu/booking/logic/commands/FindBookingCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_BOOKING_DISPLAYED;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_BOOKING_ID_1;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_BOOKING_ID_2;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.BookingIdContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) for {@code FindBookingCommand}.","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(VALID_BOOKING_ID_1);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(VALID_BOOKING_ID_2);","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findFirstCommand \u003d new FindBookingCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findSecondCommand \u003d new FindBookingCommand(secondPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand findFirstCommandCopy \u003d new FindBookingCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        // different bookings -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(MESSAGE_BOOKING_DISPLAYED, 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d preparePredicate(\"\");","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand command \u003d new FindBookingCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.updateFilteredBookingList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredBookingList());","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"     * Parses {@code userInput} into a {@code BookingIdContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"    private BookingIdContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"        return new BookingIdContainsKeywordsPredicate(userInput);","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":10,"vvan-essa":61}},{"path":"src/test/java/seedu/booking/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.CARL;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hojiefeng":13,"-":70}},{"path":"src/test/java/seedu/booking/logic/commands/FindVenueCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_VENUE_DISPLAYED;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE3;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.VenueNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":" * Contains integration tests (interaction with the Model) for {@code FindVenueCommand}.","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    private Model model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(VALID_VENUE_NAME_VENUE1));","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(VALID_VENUE_NAME_VENUE3));","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findFirstCommand \u003d new FindVenueCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findSecondCommand \u003d new FindVenueCommand(secondPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand findFirstCommandCopy \u003d new FindVenueCommand(firstPredicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"    public void execute_zeroKeywords_noVenueFound() {","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"        String expectedMessage \u003d String.format(MESSAGE_VENUE_DISPLAYED, 0);","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand command \u003d new FindVenueCommand(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"        expectedModel.updateFilteredVenueList(predicate);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredVenueList());","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"     * Parses {@code userInput} into a {@code VenueNameContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"    private VenueNameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        return new VenueNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":10,"vvan-essa":62}},{"path":"src/test/java/seedu/booking/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"hojiefeng":5,"-":15}},{"path":"src/test/java/seedu/booking/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.commands;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ModelManager;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        model \u003d new ModelManager(getTypicalBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        expectedModel \u003d new ModelManager(model.getBookingSystem(), new UserPrefs());","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hojiefeng":10,"-":29}},{"path":"src/test/java/seedu/booking/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"hojiefeng":1,"-":149}},{"path":"src/test/java/seedu/booking/logic/parser/BookingSystemParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ClearCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.ListCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystemParser parser \u003d new BookingSystemParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"hojiefeng":22,"-":79}},{"path":"src/test/java/seedu/booking/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.Command;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"hojiefeng":3,"-":35}},{"path":"src/test/java/seedu/booking/logic/parser/CreateVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_VENUE_CAPACITY_DESC;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_VENUE_CAPACITY_DESC2;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_DESCRIPTION_HALL;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_CAPACITY_DESC_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_DESCRIPTION_DESC_HALL;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_FIELD;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.CreateVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.VenueBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"public class CreateVenueCommandParserTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"NiniJiaying"},"content":"    private CreateVenueCommandParser parser \u003d new CreateVenueCommandParser();","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"        Venue expectedVenue \u003d new VenueBuilder(HALL).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"        // whitespace only preamble","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"            PREAMBLE_WHITESPACE + VENUE_NAME_DESC_HALL","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"                        + VENUE_CAPACITY_DESC_HALL + VENUE_DESCRIPTION_DESC_HALL,","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"                      new CreateVenueCommand(expectedVenue));","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_FIELD + VENUE_NAME_DESC_HALL","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"                       + VENUE_CAPACITY_DESC_HALL + VENUE_DESCRIPTION_DESC_HALL,","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"                       new CreateVenueCommand(expectedVenue));","lastModifiedDate":"2021-03-16"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"    /*","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"        @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"            // zero tags","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"            Venue expectedVenue \u003d new VenueBuilder(HALL).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"            assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"                    new AddCommand(expectedPerson));","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"NiniJiaying"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateVenueCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-16"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"        // missing name prefix","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VALID_VENUE_NAME_HALL + VENUE_CAPACITY_DESC_HALL,","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"        // all prefixes missing","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VALID_VENUE_NAME_HALL + VALID_VENUE_CAPACITY_HALL","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"                + VALID_VENUE_DESCRIPTION_HALL,","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"    public void parse_optionalFieldMissing_success() {","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"        Venue expectedVenueWithoutCapacity \u003d new VenueBuilder(HALL)","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"                .withCapacity(VenueBuilder.DEFAULT_CAPACITY).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":"        Venue expectedVenueWithoutDescription \u003d new VenueBuilder(HALL)","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"                .withDescription(VenueBuilder.DEFAULT_DESCRIPTION).build();","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"        // missing capacity prefix","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_HALL","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"                + VENUE_DESCRIPTION_DESC_HALL,","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"                new CreateVenueCommand(expectedVenueWithoutCapacity));","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"        // missing description prefix","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_HALL","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"                + VENUE_CAPACITY_DESC_HALL,","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"                new CreateVenueCommand(expectedVenueWithoutDescription));","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":"    // need to add MESSAGE_CONSTRAINTS","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateVenueCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-23"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"        // invalid capacity","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VENUE_CAPACITY_DESC_HALL + INVALID_VENUE_CAPACITY_DESC, expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, VENUE_CAPACITY_DESC_HALL + INVALID_VENUE_CAPACITY_DESC2, expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"ming-00"},"content":"        // non-empty preamble","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"ming-00"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VENUE_NAME_DESC_HALL + VENUE_CAPACITY_DESC_HALL,","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"ming-00"},"content":"                expectedMessage);","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":14,"ming-00":84,"NiniJiaying":5}},{"path":"src/test/java/seedu/booking/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"hojiefeng":6,"-":26}},{"path":"src/test/java/seedu/booking/logic/parser/DeleteVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.DeleteVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":" * outside of the DeleteVenueCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":" * same path through the DeleteVenueCommand, and therefore we test only one of them.","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"public class DeleteVenueCommandParserTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    private DeleteVenueCommandParser parser \u003d new DeleteVenueCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsDeleteVenueCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_VENUE1, new DeleteVenueCommand(VENUE1));","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":5,"vvan-essa":29}},{"path":"src/test/java/seedu/booking/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":80,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"NiniJiaying"},"content":"                .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":169,"author":{"gitId":"NiniJiaying"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"hojiefeng":33,"-":137,"NiniJiaying":4}},{"path":"src/test/java/seedu/booking/logic/parser/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_AMY_GMAIL;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditPersonCommandDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommandParserTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        // no index specified","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        // no field specified","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY, EditPersonCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        // negative index","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        // zero index","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + INVALID_NAME_DESC,","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"                Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + INVALID_PHONE_DESC,","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"                Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + INVALID_EMAIL_DESC,","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"                Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY,","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + PHONE_DESC_BOB + INVALID_PHONE_DESC,","lastModifiedDate":"2021-03-21"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"                Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_NAME_AMY + ORIGINAL_EMAIL_DESC_AMY + INVALID_NAME_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"                        + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"        String targetEmail \u003d ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d VALID_NAME_AMY + targetEmail + PHONE_DESC_BOB + NAME_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"                 .withPhone(VALID_PHONE_BOB).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"        String targetEmail \u003d ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d VALID_NAME_AMY + targetEmail + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"        // name","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"        String targetEmail \u003d ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d VALID_NAME_AMY + targetEmail + NAME_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"                .withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"        // phone","lastModifiedDate":"2021-03-21"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"        userInput \u003d VALID_NAME_AMY + targetEmail + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"        expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"        // email","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"        userInput \u003d VALID_NAME_AMY + targetEmail + EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"                .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"        expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":142,"author":{"gitId":"vvan-essa"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-03-21"},{"lineNumber":143,"author":{"gitId":"vvan-essa"},"content":"        String targetEmail \u003d ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":144,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d VALID_NAME_AMY + targetEmail + PHONE_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2021-03-21"},{"lineNumber":145,"author":{"gitId":"vvan-essa"},"content":"                + EMAIL_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":146,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":154,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":155,"author":{"gitId":"vvan-essa"},"content":"        // no other valid values specified","lastModifiedDate":"2021-03-21"},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"        String targetEmail \u003d ORIGINAL_EMAIL_DESC_AMY;","lastModifiedDate":"2021-03-21"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d VALID_NAME_AMY + targetEmail + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonCommandDescriptorBuilder()","lastModifiedDate":"2021-03-21"},{"lineNumber":159,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":160,"author":{"gitId":"vvan-essa"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":161,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":162,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":163,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":164,"author":{"gitId":"vvan-essa"},"content":"        // other valid values specified","lastModifiedDate":"2021-03-21"},{"lineNumber":165,"author":{"gitId":"vvan-essa"},"content":"        userInput \u003d VALID_NAME_AMY + targetEmail + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2021-03-21"},{"lineNumber":166,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditPersonCommandDescriptorBuilder().withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-21"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"        expectedCommand \u003d new EditPersonCommand(new Email(VALID_EMAIL_AMY_GMAIL), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":173}},{"path":"src/test/java/seedu/booking/logic/parser/EditVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_VENUE_CAPACITY_DESC;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.INVALID_VENUE_NAME_DESC;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.ORIGINAL_VENUE_DESC_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_DESC;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_FIELD;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE1;","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_CAPACITY_DESC_FIELD;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_CAPACITY_DESC_HALL;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_FIELD;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_VENUE1;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand;","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.testutil.EditVenueDescriptorBuilder;","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueCommandParserTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditVenueCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    private EditVenueCommandParser parser \u003d new EditVenueCommandParser();","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        // no index specified","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, VALID_VENUE_NAME_HALL, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        // no field specified","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL, EditVenueCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        // no index and no field specified","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        // negative index","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"-5\" + VENUE_NAME_DESC_FIELD, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        // zero index","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"0\" + VENUE_NAME_DESC_FIELD, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidValue_failure() throws ParseException {","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_NAME_DESC,","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"                VenueName.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_CAPACITY_DESC,","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"                Capacity.MESSAGE_CONSTRAINTS); // invalid capacity","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"vvan-essa"},"content":"        // invalid capacity followed by valid venue name","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_CAPACITY_DESC","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"                + VENUE_NAME_DESC_VENUE1, Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"        // valid capacity followed by invalid capacity. The test case for invalid phone followed by valid phone","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL + VALID_VENUE_CAPACITY_DESC","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"vvan-essa"},"content":"                + INVALID_VENUE_CAPACITY_DESC, Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_CAPACITY_DESC","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"                         + INVALID_VENUE_NAME_DESC + VENUE_NAME_DESC_VENUE1,","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"                Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"        String targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d ORIGINAL_VENUE_DESC_HALL + VENUE_NAME_DESC_VENUE1 + VENUE_CAPACITY_DESC_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor descriptor \u003d","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_VENUE1)","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"vvan-essa"},"content":"                .withCapacity(VALID_VENUE_CAPACITY_HALL).build();","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"vvan-essa"},"content":"        String targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d ORIGINAL_VENUE_DESC_HALL + VENUE_NAME_DESC_VENUE1;","lastModifiedDate":"2021-03-22"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor descriptor \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_VENUE1).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":112,"author":{"gitId":"vvan-essa"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"vvan-essa"},"content":"        // name","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"vvan-essa"},"content":"        String targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d ORIGINAL_VENUE_DESC_HALL + VENUE_NAME_DESC_VENUE1;","lastModifiedDate":"2021-03-22"},{"lineNumber":116,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":117,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor descriptor \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":118,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_VENUE1).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":119,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":121,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":122,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":123,"author":{"gitId":"vvan-essa"},"content":"        // capacity","lastModifiedDate":"2021-03-22"},{"lineNumber":124,"author":{"gitId":"vvan-essa"},"content":"        targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":125,"author":{"gitId":"vvan-essa"},"content":"        userInput \u003d ORIGINAL_VENUE_DESC_HALL + VENUE_CAPACITY_DESC_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":126,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":127,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditVenueDescriptorBuilder().withCapacity(VALID_VENUE_CAPACITY_HALL).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":128,"author":{"gitId":"vvan-essa"},"content":"        expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":129,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":130,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":131,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":132,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":133,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":134,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"vvan-essa"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2021-03-21"},{"lineNumber":136,"author":{"gitId":"vvan-essa"},"content":"        String targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":137,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d ORIGINAL_VENUE_DESC_HALL + VENUE_NAME_DESC_VENUE1 + VENUE_CAPACITY_DESC_HALL","lastModifiedDate":"2021-03-22"},{"lineNumber":138,"author":{"gitId":"vvan-essa"},"content":"                + VENUE_CAPACITY_DESC_FIELD + VENUE_NAME_DESC_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":139,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":140,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor descriptor \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":141,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_VENUE2)","lastModifiedDate":"2021-03-22"},{"lineNumber":142,"author":{"gitId":"vvan-essa"},"content":"                        .withCapacity(VALID_VENUE_CAPACITY_FIELD).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":143,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":144,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":145,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":146,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":148,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":149,"author":{"gitId":"vvan-essa"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":150,"author":{"gitId":"vvan-essa"},"content":"        // no other valid values specified","lastModifiedDate":"2021-03-21"},{"lineNumber":151,"author":{"gitId":"vvan-essa"},"content":"        String targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":152,"author":{"gitId":"vvan-essa"},"content":"        String userInput \u003d ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_CAPACITY_DESC + VENUE_CAPACITY_DESC_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":153,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":154,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand.EditVenueDescriptor descriptor \u003d","lastModifiedDate":"2021-03-22"},{"lineNumber":155,"author":{"gitId":"vvan-essa"},"content":"                new EditVenueDescriptorBuilder().withCapacity(VALID_VENUE_CAPACITY_HALL).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":156,"author":{"gitId":"vvan-essa"},"content":"        EditVenueCommand expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":158,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":159,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":160,"author":{"gitId":"vvan-essa"},"content":"        // other valid values specified","lastModifiedDate":"2021-03-21"},{"lineNumber":161,"author":{"gitId":"vvan-essa"},"content":"        targetVenueName \u003d VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"vvan-essa"},"content":"        userInput \u003d ORIGINAL_VENUE_DESC_HALL + INVALID_VENUE_CAPACITY_DESC","lastModifiedDate":"2021-03-22"},{"lineNumber":163,"author":{"gitId":"vvan-essa"},"content":"                + VENUE_CAPACITY_DESC_FIELD + VENUE_NAME_DESC_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":164,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditVenueDescriptorBuilder().withVenueName(VALID_VENUE_NAME_VENUE2)","lastModifiedDate":"2021-03-22"},{"lineNumber":166,"author":{"gitId":"vvan-essa"},"content":"                        .withCapacity(VALID_VENUE_CAPACITY_FIELD).build();","lastModifiedDate":"2021-03-22"},{"lineNumber":167,"author":{"gitId":"vvan-essa"},"content":"        expectedCommand \u003d new EditVenueCommand(new VenueName(targetVenueName), descriptor);","lastModifiedDate":"2021-03-22"},{"lineNumber":168,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":169,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2021-03-21"},{"lineNumber":170,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":171,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":172,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":173,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":173}},{"path":"src/test/java/seedu/booking/logic/parser/FindBookingCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_BOOKING_ID_DESC;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_BOOKING_ID;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindBookingCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.BookingIdContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"public class FindBookingCommandParserTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    private FindBookingCommandParser parser \u003d new FindBookingCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindBookingCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        FindBookingCommand expectedFindBookingCommand \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"                new FindBookingCommand(new BookingIdContainsKeywordsPredicate(\"1\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, VALID_BOOKING_ID_DESC, expectedFindBookingCommand);","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_BOOKING_ID + \"\\n 1 \\n \", expectedFindBookingCommand);","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":6,"vvan-essa":27,"NiniJiaying":2}},{"path":"src/test/java/seedu/booking/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"hojiefeng":6,"-":28}},{"path":"src/test/java/seedu/booking/logic/parser/FindVenueCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VENUE_NAME_DESC_VENUE2;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_VENUE;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.FindVenueCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.VenueNameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"public class FindVenueCommandParserTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    private FindVenueCommandParser parser \u003d new FindVenueCommandParser();","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"        assertParseFailure(parser, \" \",","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindVenueCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-16"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        FindVenueCommand expectedFindCommand \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"                new FindVenueCommand(new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Venue2\")));","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, VENUE_NAME_DESC_VENUE2, expectedFindCommand);","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_VENUE + \"\\n v/ \\n Venue2 \\t\", expectedFindCommand);","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":6,"vvan-essa":31}},{"path":"src/test/java/seedu/booking/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"hojiefeng":8,"-":108}},{"path":"src/test/java/seedu/booking/model/BookingSystemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"    private final BookingSystem bookingSystem \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(Collections.emptyList(), bookingSystem.getPersonList());","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e bookingSystem.resetData(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    public void resetData_withValidReadOnlyBookingSystem_replacesData() {","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem newData \u003d getTypicalBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.resetData(newData);","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(newData, bookingSystem);","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStub newData \u003d new BookingSystemStub(newPersons);","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e bookingSystem.resetData(newData));","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e bookingSystem.hasPerson(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personNotInBookingSystem_returnsFalse() {","lastModifiedDate":"2021-03-17"},{"lineNumber":63,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(bookingSystem.hasPerson(ALICE));","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personInBookingSystem_returnsTrue() {","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(ALICE);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(bookingSystem.hasPerson(ALICE));","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"    public void hasPerson_personWithSameIdentityFieldsInBookingSystem_returnsTrue() {","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(ALICE);","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(bookingSystem.hasPerson(editedAlice));","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e bookingSystem.getPersonList().remove(0));","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"     * A stub ReadOnlyBookingSystem whose persons list can violate interface constraints.","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"hojiefeng"},"content":"    private static class BookingSystemStub implements ReadOnlyBookingSystem {","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"        private final ObservableList\u003cVenue\u003e venues \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"        BookingSystemStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"NiniJiaying"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"        public ObservableList\u003cBooking\u003e getBookingList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"NiniJiaying"},"content":"            return null;","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"NiniJiaying"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"        @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"        public ObservableList\u003cVenue\u003e getVenueList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"            return venues;","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"vvan-essa"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"hojiefeng":32,"-":66,"NiniJiaying":7,"vvan-essa":6}},{"path":"src/test/java/seedu/booking/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.BookingSystemBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(new BookingSystem(), new BookingSystem(modelManager.getBookingSystem()));","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setBookingSystemFilePath(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        modelManager.setBookingSystemFilePath(path);","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(path, modelManager.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem addressBook \u003d new BookingSystemBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem differentAddressBook \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"hojiefeng"},"content":"        differentUserPrefs.setBookingSystemFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"hojiefeng":17,"-":115}},{"path":"src/test/java/seedu/booking/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBookingSystemFilePath(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"hojiefeng":3,"-":18}},{"path":"src/test/java/seedu/booking/model/booking/BookingIdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.BookingBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"public class BookingIdContainsKeywordsPredicateTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"        String firstPredicateKeywordList \u003d \"1\";","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"        String secondPredicateKeywordList \u003d \"2\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"                new BookingIdContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        // different bookings -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d new BookingIdContainsKeywordsPredicate(\"1\");","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"        assertTrue(predicate.test(new BookingBuilder().withId(new Id(1)).build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        // Zero keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        BookingIdContainsKeywordsPredicate predicate \u003d new BookingIdContainsKeywordsPredicate(\"\");","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        assertFalse(predicate.test(new BookingBuilder().withId(new Id(2)).build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new BookingIdContainsKeywordsPredicate(\"1\");","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"NiniJiaying"},"content":"        assertFalse(predicate.test(new BookingBuilder().withId(new Id(2)).build()));","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":2,"vvan-essa":53,"NiniJiaying":3}},{"path":"src/test/java/seedu/booking/model/booking/BookingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalBookings.BOOKING1;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalBookings.BOOKING2;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalBookings.BOOKING3;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalBookings.BOOKING4;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"class BookingTest {","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"    @Test","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    void isOverlapping() {","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.isOverlapping(BOOKING1));","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(null));","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"        // overlapping timings -\u003e returns true","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"        assertTrue(BOOKING1.isOverlapping(BOOKING2));","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING3));","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"        // different timings -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING3.isOverlapping(BOOKING4));","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"        // different timings and venue -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.isOverlapping(BOOKING4));","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"    @Test","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"    void isId() {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"        //same id -\u003e returns true;","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"        assertTrue(BOOKING1.isId(new Id(0)));","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"        //different id -\u003e returns false;","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        assertFalse(BOOKING1.isId(new Id(1)));","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"    @Test","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"    void equals() {","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(BOOKING1.equals(BOOKING1));","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(null));","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(5));","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(BOOKING1.equals(BOOKING2));","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":53,"NiniJiaying":4}},{"path":"src/test/java/seedu/booking/model/booking/VenueNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.VenueBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"public class VenueNameContainsKeywordsPredicateTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public void equals() {","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        // different venues -\u003e returns false","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        // One keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"                new VenueNameContainsKeywordsPredicate(Collections.singletonList(\"Hall\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Hall\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        // Multiple keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Sports\", \"Hall\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Sports Hall\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        // Mixed-case keywords","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"        predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"sPorTs\", \"hAll\"));","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(predicate.test(new VenueBuilder().withName(\"Sports Hall\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"        // Non-matching keyword","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        VenueNameContainsKeywordsPredicate predicate \u003d new VenueNameContainsKeywordsPredicate(Arrays.asList(\"Court\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(predicate.test(new VenueBuilder().withName(\"Hall\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":2,"vvan-essa":64}},{"path":"src/test/java/seedu/booking/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));","lastModifiedDate":"2017-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part","lastModifiedDate":"2018-02-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"hojiefeng":2,"-":59}},{"path":"src/test/java/seedu/booking/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"NiniJiaying"},"content":"                .withEmail(\"alice@email.com\").build()));","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"hojiefeng":2,"-":72,"NiniJiaying":1}},{"path":"src/test/java/seedu/booking/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"hojiefeng":2,"-":38}},{"path":"src/test/java/seedu/booking/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"hojiefeng":7,"-":67,"NiniJiaying":1}},{"path":"src/test/java/seedu/booking/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"hojiefeng":2,"-":38}},{"path":"src/test/java/seedu/booking/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.person;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.PersonBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"hojiefeng":7,"-":157,"NiniJiaying":2}},{"path":"src/test/java/seedu/booking/model/venue/CapacityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"public class CapacityTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Capacity(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"        Integer invalidCapacity \u003d -1;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Capacity(invalidCapacity));","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        // null capacity","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(NullPointerException.class, () -\u003e Capacity.isValidCapacity(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        // invalid name","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(Capacity.isValidCapacity(-1)); // numbers below 0 only","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        // valid name","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(Capacity.isValidCapacity(3)); // numbers above 0 only","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":33}},{"path":"src/test/java/seedu/booking/model/venue/UniqueVenueListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_FIELD;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE2;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE3;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE5;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"ming-00"},"content":"import java.util.List;","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"ming-00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.exceptions.DuplicateVenueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.exceptions.VenueNotFoundException;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.testutil.VenueBuilder;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"public class UniqueVenueListTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"    private final UniqueVenueList uniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"    public void contains_nullVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.contains(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    public void contains_venueNotInList_returnsFalse() {","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"        assertFalse(uniqueVenueList.contains(VENUE1));","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"    public void contains_venueInList_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"        assertTrue(uniqueVenueList.contains(VENUE1));","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"ming-00"},"content":"    public void contains_venueWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"ming-00"},"content":"        Venue editedVenue1 \u003d new VenueBuilder(VENUE1).withCapacity(VALID_VENUE_CAPACITY_FIELD)","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"ming-00"},"content":"                .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"ming-00"},"content":"        assertTrue(uniqueVenueList.contains(editedVenue1));","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"ming-00"},"content":"    public void add_nullVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.add(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"    public void add_duplicateVenue_throwsDuplicateVenueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.add(VENUE1));","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":62,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullTargetVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenue(null, VENUE1));","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullEditedVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, null));","lastModifiedDate":"2021-03-15"},{"lineNumber":70,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":71,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"ming-00"},"content":"    public void setVenue_targetVenueNotInList_throwsVenueNotFoundException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"ming-00"},"content":"        assertThrows(VenueNotFoundException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, VENUE1));","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":78,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueIsSameVenue_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":86,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasSameIdentity_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"ming-00"},"content":"        Venue editedVenue1 \u003d new VenueBuilder(VENUE1).withCapacity(30).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, editedVenue1);","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(editedVenue1);","lastModifiedDate":"2021-03-15"},{"lineNumber":94,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasDifferentIdentity_success() {","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenue(VENUE1, VENUE3);","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":102,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE3);","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"ming-00"},"content":"    public void setVenue_editedVenueHasNonUniqueIdentity_throwsDuplicateVenueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":109,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE3);","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenue(VENUE1, VENUE3));","lastModifiedDate":"2021-03-15"},{"lineNumber":112,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":113,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":114,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":115,"author":{"gitId":"ming-00"},"content":"    public void remove_nullVenue_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":116,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.remove(null));","lastModifiedDate":"2021-03-15"},{"lineNumber":117,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":118,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":119,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":120,"author":{"gitId":"ming-00"},"content":"    public void setVenues_nullUniqueVenueList_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":121,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenues((UniqueVenueList) null));","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":123,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":124,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":125,"author":{"gitId":"ming-00"},"content":"    public void setVenues_uniqueVenueList_replacesOwnListWithProvidedUniqueVenueList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":126,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":127,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":128,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE2);","lastModifiedDate":"2021-03-15"},{"lineNumber":129,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenues(expectedUniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":130,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":131,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":132,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":133,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":134,"author":{"gitId":"ming-00"},"content":"    public void setVenue_nullList_throwsNullPointerException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":135,"author":{"gitId":"ming-00"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVenueList.setVenues((List\u003cVenue\u003e) null));","lastModifiedDate":"2021-03-15"},{"lineNumber":136,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":137,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":138,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":139,"author":{"gitId":"ming-00"},"content":"    public void setVenues_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2021-03-15"},{"lineNumber":140,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.add(VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":141,"author":{"gitId":"ming-00"},"content":"        List\u003cVenue\u003e venueList \u003d Collections.singletonList(VENUE3);","lastModifiedDate":"2021-03-15"},{"lineNumber":142,"author":{"gitId":"ming-00"},"content":"        uniqueVenueList.setVenues(venueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":143,"author":{"gitId":"ming-00"},"content":"        UniqueVenueList expectedUniqueVenueList \u003d new UniqueVenueList();","lastModifiedDate":"2021-03-15"},{"lineNumber":144,"author":{"gitId":"ming-00"},"content":"        expectedUniqueVenueList.add(VENUE3);","lastModifiedDate":"2021-03-15"},{"lineNumber":145,"author":{"gitId":"ming-00"},"content":"        assertEquals(expectedUniqueVenueList, uniqueVenueList);","lastModifiedDate":"2021-03-15"},{"lineNumber":146,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":147,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":148,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":149,"author":{"gitId":"ming-00"},"content":"    public void setVenues_listWithDuplicateVenues_throwsDuplicateVenueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":150,"author":{"gitId":"ming-00"},"content":"        List\u003cVenue\u003e listWithDuplicateVenues \u003d Arrays.asList(VENUE1, VENUE1);","lastModifiedDate":"2021-03-15"},{"lineNumber":151,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenues(listWithDuplicateVenues));","lastModifiedDate":"2021-03-15"},{"lineNumber":152,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":153,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":154,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":155,"author":{"gitId":"ming-00"},"content":"    public void setVenues_listWithDuplicateVenueNames_throwsDuplicateVenueException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":156,"author":{"gitId":"NiniJiaying"},"content":"        List\u003cVenue\u003e listWithDuplicateVenues \u003d Arrays.asList(VENUE1, VENUE5);","lastModifiedDate":"2021-03-24"},{"lineNumber":157,"author":{"gitId":"ming-00"},"content":"        assertThrows(DuplicateVenueException.class, () -\u003e uniqueVenueList.setVenues(listWithDuplicateVenues));","lastModifiedDate":"2021-03-15"},{"lineNumber":158,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":159,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":160,"author":{"gitId":"ming-00"},"content":"    @Test","lastModifiedDate":"2021-03-15"},{"lineNumber":161,"author":{"gitId":"ming-00"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-15"},{"lineNumber":162,"author":{"gitId":"ming-00"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2021-03-15"},{"lineNumber":163,"author":{"gitId":"ming-00"},"content":"            -\u003e uniqueVenueList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2021-03-15"},{"lineNumber":164,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":165,"author":{"gitId":"ming-00"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":6,"ming-00":153,"NiniJiaying":6}},{"path":"src/test/java/seedu/booking/model/venue/VenueNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"public class VenueNameTest {","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(NullPointerException.class, () -\u003e new VenueName(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new VenueName(invalidName));","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    @Test","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        // null name","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        assertThrows(NullPointerException.class, () -\u003e VenueName.isValidName(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        // invalid name","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VenueName.isValidName(\"\")); // empty string","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VenueName.isValidName(\" \")); // spaces only","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VenueName.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        assertFalse(VenueName.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        // valid name","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VenueName.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VenueName.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VenueName.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VenueName.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        assertTrue(VenueName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":40}},{"path":"src/test/java/seedu/booking/model/venue/VenueTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.model.venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"ming-00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-24"},{"lineNumber":6,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE2;","lastModifiedDate":"2021-03-24"},{"lineNumber":7,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE3;","lastModifiedDate":"2021-03-24"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE4;","lastModifiedDate":"2021-03-24"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE5;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"class VenueTest {","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    @Test","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    void isSameVenue() {","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE1));","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(null));","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        // same name -\u003e returns true","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"        assertTrue(VENUE1.isSameVenue(VENUE5));","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE3));","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        // different name and remarks -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.isSameVenue(VENUE4));","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    @Test","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"    void equals() {","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"hojiefeng"},"content":"        assertTrue(VENUE1.equals(VENUE1));","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"hojiefeng"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(null));","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(VENUE1.equals(5));","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"hojiefeng"},"content":"        // different venue -\u003e returns false","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"ming-00"},"content":"        assertFalse(VENUE2.equals(VENUE1));","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":38,"ming-00":3,"NiniJiaying":6}},{"path":"src/test/java/seedu/booking/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"NiniJiaying"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL);","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"NiniJiaying"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null);","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":8,"-":63,"NiniJiaying":7}},{"path":"src/test/java/seedu/booking/storage/JsonBookingSystemStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.HOON;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.IDA;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"hojiefeng"},"content":"public class JsonBookingSystemStorageTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBookingSystemStorageTest\");","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e readBookingSystem(null));","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    private java.util.Optional\u003cReadOnlyBookingSystem\u003e readBookingSystem(String filePath) throws Exception {","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"        return new JsonBookingSystemStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"hojiefeng"},"content":"                .readBookingSystem(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"hojiefeng"},"content":"        assertFalse(readBookingSystem(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"notJsonFormatBookingSystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_invalidPersonBookingSystem_throwDataConversionException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"invalidPersonBookingSystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"    public void readBookingSystem_invalidAndValidPersonBookingSystem_throwDataConversionException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(DataConversionException.class, () -\u003e readBookingSystem(\"invalidAndValidPersonBookingSystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"    public void readAndSaveBookingSystem_allInOrder_success() throws Exception {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"hojiefeng"},"content":"        Path filePath \u003d testFolder.resolve(\"TempBookingSystem.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":67,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem original \u003d getTypicalBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":68,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage jsonBookingSystemStorage \u003d new JsonBookingSystemStorage(filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem readBack \u003d jsonBookingSystemStorage.readBookingSystem(filePath).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original, filePath);","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"hojiefeng"},"content":"        readBack \u003d jsonBookingSystemStorage.readBookingSystem(filePath).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":80,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"hojiefeng"},"content":"        jsonBookingSystemStorage.saveBookingSystem(original); // file path not specified","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"hojiefeng"},"content":"        readBack \u003d jsonBookingSystemStorage.readBookingSystem().get(); // file path not specified","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(readBack));","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem_nullBookingSystem_throwsNullPointerException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveBookingSystem(null, \"SomeFile.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"hojiefeng"},"content":"    private void saveBookingSystem(ReadOnlyBookingSystem addressBook, String filePath) {","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"hojiefeng"},"content":"            new JsonBookingSystemStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"hojiefeng"},"content":"                    .saveBookingSystem(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"hojiefeng"},"content":"    public void saveBookingSystem_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveBookingSystem(new BookingSystem(), null));","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":42,"-":69}},{"path":"src/test/java/seedu/booking/storage/JsonSerializableBookingSystemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.util.JsonUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"public class JsonSerializableBookingSystemTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBookingSystemTest\");","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsBookingSystem.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonBookingSystem.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonBookingSystem.json\");","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"hojiefeng"},"content":"        JsonSerializableBookingSystem dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"hojiefeng"},"content":"                JsonSerializableBookingSystem.class).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"hojiefeng"},"content":"        JsonSerializableBookingSystem dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"                JsonSerializableBookingSystem.class).get();","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableBookingSystem.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hojiefeng":14,"-":22}},{"path":"src/test/java/seedu/booking/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"hojiefeng"},"content":"        userPrefs.setBookingSystemFilePath(Paths.get(\"bookingsystem.json\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"hojiefeng":6,"-":117}},{"path":"src/test/java/seedu/booking/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.storage;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalPersons.getTypicalBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.GuiSettings;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.ReadOnlyBookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.UserPrefs;","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        JsonBookingSystemStorage bookingSystemStorage \u003d new JsonBookingSystemStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"hojiefeng"},"content":"        storageManager \u003d new StorageManager(bookingSystemStorage, userPrefsStorage);","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"    public void bookingSystemReadSave() throws Exception {","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem original \u003d getTypicalBookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"        storageManager.saveBookingSystem(original);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        ReadOnlyBookingSystem retrieved \u003d storageManager.readBookingSystem().get();","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"hojiefeng"},"content":"        assertEquals(original, new BookingSystem(retrieved));","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"hojiefeng"},"content":"    public void getBookingSystemFilePath() {","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"hojiefeng"},"content":"        assertNotNull(storageManager.getBookingSystemFilePath());","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":15,"-":53}},{"path":"src/test/java/seedu/booking/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"hojiefeng":1,"-":33}},{"path":"src/test/java/seedu/booking/testutil/BookingBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":" * A utility class to help with building Booking objects.","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"public class BookingBuilder {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"    public static final Email DEFAULT_BOOKER \u003d new Email(\"example@gmail.com\");","lastModifiedDate":"2021-03-24"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final VenueName DEFAULT_VENUE \u003d VENUE1.getVenueName();","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"    private static final Description DEFAULT_DESCRIPTION \u003d new Description(\"Good\");","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"    private static final StartTime DEFAULT_BOOKING_START \u003d new StartTime(LocalDateTime.of(2021, 03, 01, 12, 30, 00));","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"    private static final EndTime DEFAULT_BOOKING_END \u003d new EndTime(LocalDateTime.of(2021, 03, 01, 12, 30, 00));","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"    private static final Id DEFAULT_ID \u003d new Id(1);","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"    private Email bookerEmail;","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    private Description description;","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"    private VenueName venueName;","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"    private StartTime bookingStart;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"    private EndTime bookingEnd;","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"    private Id id;","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"     * Creates a {@code BookingBuilder} with the default details.","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder() {","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"        bookerEmail \u003d DEFAULT_BOOKER;","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"        venueName \u003d DEFAULT_VENUE;","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"        description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"        bookingStart \u003d DEFAULT_BOOKING_START;","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        bookingEnd \u003d DEFAULT_BOOKING_END;","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        id \u003d DEFAULT_ID;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"     * Initializes the BookingBuilder with the data of {@code bookingToCopy}.","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    public BookingBuilder(Booking bookingToCopy) {","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"NiniJiaying"},"content":"        bookerEmail \u003d bookingToCopy.getBookerEmail();","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"NiniJiaying"},"content":"        venueName \u003d bookingToCopy.getVenueName();","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"        description \u003d bookingToCopy.getDescription();","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"        bookingStart \u003d bookingToCopy.getBookingStart();","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        bookingEnd \u003d bookingToCopy.getBookingEnd();","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        id \u003d bookingToCopy.getId();","lastModifiedDate":"2021-03-15"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code booker} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":61,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withBooker(Email booker) {","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"NiniJiaying"},"content":"        this.bookerEmail \u003d booker;","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":67,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code venue} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":68,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withVenue(VenueName venue) {","lastModifiedDate":"2021-03-24"},{"lineNumber":70,"author":{"gitId":"NiniJiaying"},"content":"        this.venueName \u003d venue;","lastModifiedDate":"2021-03-24"},{"lineNumber":71,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code description} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":76,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":77,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withDescription(Description description) {","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"vvan-essa"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-15"},{"lineNumber":79,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":80,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":82,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":83,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code bookingStart} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":84,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withBookingStart(StartTime bookingStart) {","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"vvan-essa"},"content":"        this.bookingStart \u003d bookingStart;","lastModifiedDate":"2021-03-15"},{"lineNumber":87,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":91,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code bookingEnd} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":92,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withBookingEnd(EndTime bookingEnd) {","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"vvan-essa"},"content":"        this.bookingEnd \u003d bookingEnd;","lastModifiedDate":"2021-03-15"},{"lineNumber":95,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":96,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":97,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":98,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":99,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code id} of the {@code Booking} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":100,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":101,"author":{"gitId":"NiniJiaying"},"content":"    public BookingBuilder withId(Id id) {","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"vvan-essa"},"content":"        this.id \u003d id;","lastModifiedDate":"2021-03-15"},{"lineNumber":103,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":104,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":105,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":106,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":107,"author":{"gitId":"vvan-essa"},"content":"    public Booking build() {","lastModifiedDate":"2021-03-15"},{"lineNumber":108,"author":{"gitId":"NiniJiaying"},"content":"        return new Booking(bookerEmail, venueName, description, bookingStart, bookingEnd, id);","lastModifiedDate":"2021-03-24"},{"lineNumber":109,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":110,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":3,"vvan-essa":77,"NiniJiaying":31}},{"path":"src/test/java/seedu/booking/testutil/BookingSystemBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"public class BookingSystemBuilder {","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"    private BookingSystem bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder() {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder(BookingSystem bookingSystem) {","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"        this.bookingSystem \u003d bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystemBuilder withPerson(Person person) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"        bookingSystem.addPerson(person);","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"    public BookingSystem build() {","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"hojiefeng"},"content":"        return bookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":13,"-":21}},{"path":"src/test/java/seedu/booking/testutil/EditPersonCommandDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditPersonCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" * A utility class to help with building EditPersonCommandDescriptorDescriptor objects.","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"public class EditPersonCommandDescriptorBuilder {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder() {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     * Returns an {@code EditPersonCommandDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder(Person person) {","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Name} of the {@code EditPersonCommandDescriptor} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Phone} of the {@code EditPersonCommandDescriptor} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Email} of the {@code EditPersonCommandDescriptor} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonCommandDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"vvan-essa"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"vvan-essa"},"content":"        return descriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":62}},{"path":"src/test/java/seedu/booking/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"hojiefeng":6,"-":56}},{"path":"src/test/java/seedu/booking/testutil/EditVenueDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"vvan-essa"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.logic.commands.EditVenueCommand.EditVenueDescriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"vvan-essa"},"content":" * A utility class to help with building EditVenueDescriptor objects.","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"public class EditVenueDescriptorBuilder {","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    private EditVenueDescriptor descriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptorBuilder() {","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditVenueDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptorBuilder(EditVenueDescriptor descriptor) {","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"        this.descriptor \u003d new EditVenueDescriptor(descriptor);","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"     * Returns an {@code EditVenueDescriptor} with fields containing {@code venue}\u0027s details","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptorBuilder(Venue venue) {","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"        descriptor \u003d new EditVenueDescriptor();","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setVenueName(venue.getVenueName());","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setCapacity(venue.getCapacity());","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code VenueName} of the {@code EditVenueDescriptor} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptorBuilder withVenueName(String name) {","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setVenueName(new VenueName(name));","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Capacity} of the {@code EditVenueDescriptor} that we are building.","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptorBuilder withCapacity(Integer capacity) {","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"        descriptor.setCapacity(new Capacity(capacity));","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"    public EditVenueDescriptor build() {","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"        return descriptor;","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"vvan-essa":51}},{"path":"src/test/java/seedu/booking/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Name;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Phone;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"NiniJiaying"},"content":"        return new Person(name, phone, email);","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"hojiefeng":5,"-":63,"NiniJiaying":3}},{"path":"src/test/java/seedu/booking/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.AddCommand;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"NiniJiaying"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"hojiefeng":7,"-":37,"NiniJiaying":1}},{"path":"src/test/java/seedu/booking/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":1,"-":71}},{"path":"src/test/java/seedu/booking/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hojiefeng":4,"-":51}},{"path":"src/test/java/seedu/booking/testutil/TypicalBookings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE1;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.TypicalVenues.VENUE2;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.booking.Booking;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Description;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.EndTime;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.Id;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.booking.StartTime;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"NiniJiaying"},"content":"import seedu.booking.model.person.Email;","lastModifiedDate":"2021-03-24"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Booking} objects to be used in tests.","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"hojiefeng"},"content":"public class TypicalBookings {","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING1 \u003d new Booking(new Email(\"example1@gamil.com\"), VENUE1.getVenueName(),","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"NiniJiaying"},"content":"            new Description(\"description\"),","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"NiniJiaying"},"content":"            new StartTime(LocalDateTime.of(2021, 03, 01, 12, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"            new EndTime(LocalDateTime.of(2021, 03, 01, 13, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"NiniJiaying"},"content":"            new Id(0)","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"hojiefeng"},"content":"    );","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING2 \u003d new Booking(new Email(\"example2@gamil.com\"), VENUE1.getVenueName(),","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            new Description(\"description\"),","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"NiniJiaying"},"content":"            new StartTime(LocalDateTime.of(2021, 03, 01, 13, 00, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            new EndTime(LocalDateTime.of(2021, 03, 01, 14, 00, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"NiniJiaying"},"content":"            new Id(1)","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"hojiefeng"},"content":"    );","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING3 \u003d new Booking(new Email(\"example2@gamil.com\"), VENUE2.getVenueName(),","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"NiniJiaying"},"content":"            new Description(\"description\"),","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            new StartTime(LocalDateTime.of(2021, 03, 01, 12, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"NiniJiaying"},"content":"            new EndTime(LocalDateTime.of(2021, 03, 01, 13, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"NiniJiaying"},"content":"            new Id(2)","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"hojiefeng"},"content":"    );","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"    public static final Booking BOOKING4 \u003d new Booking(new Email(\"example2@gamil.com\"), VENUE2.getVenueName(),","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"NiniJiaying"},"content":"            new Description(\"description\"),","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"NiniJiaying"},"content":"            new StartTime(LocalDateTime.of(2021, 03, 01, 14, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"NiniJiaying"},"content":"            new EndTime(LocalDateTime.of(2021, 03, 01, 15, 30, 00)),","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"            new Id(3)","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"hojiefeng"},"content":"    );","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"hojiefeng"},"content":"    private TypicalBookings() {} // prevents instantiation","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":26,"NiniJiaying":25}},{"path":"src/test/java/seedu/booking/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.commons.core.index.Index;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"vvan-essa"},"content":"    public static final Index INDEX_FIRST_VENUE \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"vvan-essa"},"content":"    public static final Index INDEX_SECOND_VENUE \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"hojiefeng":2,"-":10,"vvan-essa":5}},{"path":"src/test/java/seedu/booking/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.BookingSystem;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.person.Person;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"NiniJiaying"},"content":"            .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"NiniJiaying"},"content":"            .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"heinz@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"cornelia@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"werner@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"lydia@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"anna@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"stefan@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(\"hans@example.com\").build();","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"NiniJiaying"},"content":"            .withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":56,"author":{"gitId":"hojiefeng"},"content":"     * Returns an {@code BookingSystem} with all the typical persons.","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"hojiefeng"},"content":"    public static BookingSystem getTypicalBookingSystem() {","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"hojiefeng"},"content":"        BookingSystem ab \u003d new BookingSystem();","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"hojiefeng":12,"-":46,"NiniJiaying":11}},{"path":"src/test/java/seedu/booking/testutil/TypicalVenues.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_FIELD;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_CAPACITY_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_DESCRIPTION_FIELD;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"ming-00"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_DESCRIPTION_HALL;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_FIELD;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.logic.commands.CommandTestUtil.VALID_VENUE_NAME_HALL;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"hojiefeng"},"content":" * A utility class containing a list of {@code Venue} objects to be used in tests.","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"hojiefeng"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"hojiefeng"},"content":"public class TypicalVenues {","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE1 \u003d new Venue(new VenueName(\"Venue1\"), new Capacity(10),","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"NiniJiaying"},"content":"    public static final Venue VENUE2 \u003d new Venue(new VenueName(\"Venue2\"), new Capacity(20),","lastModifiedDate":"2021-03-24"},{"lineNumber":22,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE3 \u003d new Venue(new VenueName(\"Venue3\"), new Capacity(10),","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE4 \u003d new Venue(new VenueName(\"Venue4\"), new Capacity(10),","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE5 \u003d new Venue(new VenueName(\"Venue1\"), new Capacity(10),","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"ming-00"},"content":"    public static final Venue VENUE6 \u003d new Venue(new VenueName(\"Venue1\"), new Capacity(5),","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"            \"No description provided.\");","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"hojiefeng"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"ming-00"},"content":"    // Manually added - Venue\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"ming-00"},"content":"    public static final Venue HALL \u003d new VenueBuilder()","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"ming-00"},"content":"            .withName(VALID_VENUE_NAME_HALL).withCapacity(VALID_VENUE_CAPACITY_HALL)","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"            .withDescription(VALID_VENUE_DESCRIPTION_HALL)","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"ming-00"},"content":"            .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"ming-00"},"content":"    public static final Venue FIELD \u003d new VenueBuilder()","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"ming-00"},"content":"            .withName(VALID_VENUE_NAME_FIELD).withCapacity(VALID_VENUE_CAPACITY_FIELD)","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"ming-00"},"content":"            .withDescription(VALID_VENUE_DESCRIPTION_FIELD)","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"ming-00"},"content":"            .build();","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"hojiefeng"},"content":"    private TypicalVenues() {} // prevents instantiation","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"hojiefeng"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"hojiefeng":17,"ming-00":23,"vvan-essa":2,"NiniJiaying":1}},{"path":"src/test/java/seedu/booking/testutil/VenueBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.testutil;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.Capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.model.venue.Venue;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"vvan-essa"},"content":"import seedu.booking.model.venue.VenueName;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"vvan-essa"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"ming-00"},"content":" * A utility class to help with building Venue objects.","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"vvan-essa"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"vvan-essa"},"content":"public class VenueBuilder {","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"vvan-essa"},"content":"    public static final String DEFAULT_NAME \u003d \"Victoria Hall\";","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"ming-00"},"content":"    public static final int DEFAULT_CAPACITY \u003d 10;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"ming-00"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"No description provided.\";","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"vvan-essa"},"content":"    private VenueName name;","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"vvan-essa"},"content":"    private Capacity capacity;","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"ming-00"},"content":"    private String description;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"vvan-essa"},"content":"     * Creates a {@code VenueBuilder} with the default details.","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder() {","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"vvan-essa"},"content":"        name \u003d new VenueName(DEFAULT_NAME);","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"vvan-essa"},"content":"        capacity \u003d new Capacity(DEFAULT_CAPACITY);","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"ming-00"},"content":"        description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"ming-00"},"content":"     * Initializes the VenueBuilder with the data of {@code venueToCopy}.","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder(Venue venueToCopy) {","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"vvan-essa"},"content":"        name \u003d venueToCopy.getVenueName();","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"vvan-essa"},"content":"        capacity \u003d venueToCopy.getCapacity();","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"ming-00"},"content":"        description \u003d venueToCopy.getDescription();","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":39,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Name} of the {@code Venue} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder withName(String name) {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"vvan-essa"},"content":"        this.name \u003d new VenueName(name);","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"vvan-essa"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"vvan-essa"},"content":"     * Sets the {@code Capacity} of the {@code Venue} that we are building.","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"vvan-essa"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"vvan-essa"},"content":"    public VenueBuilder withCapacity(Integer capacity) {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"vvan-essa"},"content":"        this.capacity \u003d new Capacity(capacity);","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"vvan-essa"},"content":"        return this;","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"ming-00"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"ming-00"},"content":"     * Sets the {@code Description} of the {@code Venue} that we are building.","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"ming-00"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"ming-00"},"content":"    public VenueBuilder withDescription(String description) {","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"ming-00"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"ming-00"},"content":"        return this;","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"ming-00"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"ming-00"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"vvan-essa"},"content":"    public Venue build() {","lastModifiedDate":"2021-03-15"},{"lineNumber":63,"author":{"gitId":"ming-00"},"content":"        return new Venue(name, capacity, description);","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"vvan-essa"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"vvan-essa"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":66,"author":{"gitId":"vvan-essa"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"hojiefeng":2,"ming-00":16,"vvan-essa":48}},{"path":"src/test/java/seedu/booking/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"hojiefeng":1,"-":34}},{"path":"src/test/java/seedu/booking/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hojiefeng"},"content":"package seedu.booking.ui;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"hojiefeng"},"content":"import static seedu.booking.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"hojiefeng"},"content":"import seedu.booking.MainApp;","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"hojiefeng":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003c?import seedu.booking.ui.TestFxmlObject?\u003e","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"hojiefeng":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"hojiefeng"},"content":"\u003cfx:root type\u003d\"seedu.booking.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"hojiefeng":1,"-":5}}]
