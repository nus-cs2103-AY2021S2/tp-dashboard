[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-02-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"* This is a software engineering course project to create App-Ointment, an appointment management software for Receptionists of Medical Clinics.","lastModifiedDate":"2021-02-27"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"onnwards":4,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"run {","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"onnwards":4,"-":72}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2019-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2019-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at","lastModifiedDate":"2016-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html","lastModifiedDate":"2016-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2019-02-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2017-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2017-01-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2017-01-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports","lastModifiedDate":"2017-01-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2017-01-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2017-01-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2017-01-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2017-01-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:","lastModifiedDate":"2017-01-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2017-01-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2017-01-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2017-01-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements.","lastModifiedDate":"2017-01-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:","lastModifiedDate":"2017-01-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file.","lastModifiedDate":"2017-01-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2017-01-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"true\"/\u003e","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant).\"/\u003e","lastModifiedDate":"2021-03-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2017-01-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2017-04-01"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2017-04-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ...","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed","lastModifiedDate":"2017-04-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed","lastModifiedDate":"2016-10-12"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2017-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2017-09-17"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-17"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2018-01-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS","lastModifiedDate":"2017-01-16"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2017-04-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2017-04-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2017-04-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2017-04-01"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2017-04-01"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors","lastModifiedDate":"2017-04-01"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods","lastModifiedDate":"2017-04-01"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2017-04-01"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2017-01-16"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2017-04-03"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-03"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"           by regular or curly braces.","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2016-12-10"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2016-12-10"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-12-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":310,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2017-05-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2017-05-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2017-05-22"},{"lineNumber":313,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2017-05-22"},{"lineNumber":315,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase","lastModifiedDate":"2017-05-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2017-05-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2017-05-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2017-05-22"},{"lineNumber":324,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2017-05-22"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-05-22"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":332,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-04-14"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-14"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2016-10-12"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2018-08-15"},{"lineNumber":357,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed","lastModifiedDate":"2018-08-15"},{"lineNumber":358,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2018-08-15"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2018-08-15"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":363,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":366,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2018-08-15"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2018-08-15"},{"lineNumber":368,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2018-08-15"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":370,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2018-08-15"},{"lineNumber":371,"author":{"gitId":"-"},"content":"      --\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2018-08-15"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-15"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    \u003c!--","lastModifiedDate":"2017-08-20"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS","lastModifiedDate":"2017-08-20"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":381,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2019-02-24"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-27"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":397,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2020-05-27"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":399,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2017-08-20"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-20"},{"lineNumber":402,"author":{"gitId":"-"},"content":"  \u003c/module\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":403,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"onnwards":3,"-":400}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"### Onn Wei Sin","lastModifiedDate":"2021-02-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"\u003cimg src\u003d\"images/onnwards.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"[[github](http://github.com/onnwards)]","lastModifiedDate":"2021-02-27"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"[[portfolio](team/onnwards.md)]","lastModifiedDate":"2021-02-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"* Role: Developer","lastModifiedDate":"2021-02-27"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"* Responsibilities: Scheduling and Tracking, VSCode Expert, Git Expert, In charge of UI","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities: Code Quality, Testing, Integration","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"### Pang Jiarong, Jacob","lastModifiedDate":"2021-02-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"\u003cimg src\u003d\"images/jacob-pang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"[[github](http://github.com/Jacob-Pang)]","lastModifiedDate":"2021-02-28"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"[[portfolio](team/jacob-pang.md)]","lastModifiedDate":"2021-02-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"* Role: Developer","lastModifiedDate":"2021-02-27"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"* Responsibilities:","lastModifiedDate":"2021-02-27"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:","lastModifiedDate":"2021-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"### Chia Jia-Xi, Kymie","lastModifiedDate":"2021-02-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"\u003cimg src\u003d\"images/kwmiw.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"[[github](http://github.com/kwmiw)]","lastModifiedDate":"2021-02-28"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"[[portfolio](team/kwmiw.md)]","lastModifiedDate":"2021-02-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"* Responsibilities: Integration, Documentation","lastModifiedDate":"2021-02-28"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:","lastModifiedDate":"2021-02-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"### Png Zheng Jie, Sebastian","lastModifiedDate":"2021-02-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"\u003cimg src\u003d\"images/pngsebastian.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"[[github](https://github.com/pngsebastian)]","lastModifiedDate":"2021-02-28"},{"lineNumber":48,"author":{"gitId":"pngsebastian"},"content":"[[portfolio](team/pngsebastian.md)]","lastModifiedDate":"2021-02-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"* Responsibilities: Documentation","lastModifiedDate":"2021-02-28"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"### Zhang Peng","lastModifiedDate":"2021-02-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"\u003cimg src\u003d\"images/icytornado.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"pngsebastian"},"content":"[[github](https://github.com/icytornado)]","lastModifiedDate":"2021-02-28"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"[[portfolio](team/icytornado.md)]","lastModifiedDate":"2021-03-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"* Responsibilities: Code Quality, Integration","lastModifiedDate":"2021-03-01"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"Jacob-Pang":3,"kwmiw":4,"onnwards":17,"pngsebastian":5,"-":31,"icytornado":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/docs/diagrams/) folder.","lastModifiedDate":"2021-02-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-02-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`,`PatientListPanel`, `DoctorListPanel`, `AppointmentListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-02-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-02-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"**API** : [`Model.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-02-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"**API** : [`Storage.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-02-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"onnwards"},"content":"App-Ointment is intended for Receptionists of Medical Clinics who help schedule appointments, and maintain patient records and accounts.","lastModifiedDate":"2021-02-28"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"onnwards"},"content":"* has a need to manage a significant number of scheduled appointments","lastModifiedDate":"2021-02-28"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":247,"author":{"gitId":"onnwards"},"content":"**Value proposition**","lastModifiedDate":"2021-02-27"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"onnwards"},"content":"- Allows users to track and reschedule appointments for a clinic, reducing no-shows.","lastModifiedDate":"2021-02-28"},{"lineNumber":250,"author":{"gitId":"onnwards"},"content":"- Allow users to verify the patient on arriving at the clinic for the appointment.","lastModifiedDate":"2021-02-28"},{"lineNumber":251,"author":{"gitId":"onnwards"},"content":"- No cross clinic support for clinics within a health group.","lastModifiedDate":"2021-02-28"},{"lineNumber":252,"author":{"gitId":"onnwards"},"content":"- No support for users who want to view their own appointments.","lastModifiedDate":"2021-02-28"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"onnwards"},"content":"### User stories","lastModifiedDate":"2021-02-27"},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2021-02-28"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"Jacob-Pang"},"content":"| Priority | As a …​                                      | I want to …​                              | So that I can…​                                                      |","lastModifiedDate":"2021-02-28"},{"lineNumber":259,"author":{"gitId":"Jacob-Pang"},"content":"| -------- | ------------------------------------------- | ---------------------------------------- | ------------------------------------------------------------------- |","lastModifiedDate":"2021-02-28"},{"lineNumber":260,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | new user                                    | see usage instructions                   | refer to instructions when I forget how to use the App              |","lastModifiedDate":"2021-02-28"},{"lineNumber":261,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | add a new appointment                    |                                                                     |","lastModifiedDate":"2021-02-28"},{"lineNumber":262,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | delete an appointment                    | remove appointments that have expired or on behalf of the patient   |","lastModifiedDate":"2021-02-28"},{"lineNumber":263,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | find an appointment by specific fields   | locate details of relevant appointments without having to go through the entire list |","lastModifiedDate":"2021-02-28"},{"lineNumber":264,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | edit an appointment by specific fields   | update the appointment information without having to delete and add a new appointment |","lastModifiedDate":"2021-04-09"},{"lineNumber":265,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | add a new patient                        |                                                                     |","lastModifiedDate":"2021-04-09"},{"lineNumber":266,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | delete a patient                         | remove patients who on longer have appointments                     |","lastModifiedDate":"2021-04-09"},{"lineNumber":267,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | find a patient  by specific fields       | locate details of relevant patients without having to go through the entire list |","lastModifiedDate":"2021-04-09"},{"lineNumber":268,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | edit a patient  by specific fields       | update the patient information without having to delete and add a new patient |","lastModifiedDate":"2021-03-14"},{"lineNumber":269,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | add a new doctor                         |                                                                     |","lastModifiedDate":"2021-04-09"},{"lineNumber":270,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | delete a doctor                          | remove doctors who on longer work for the clinic                    |","lastModifiedDate":"2021-04-09"},{"lineNumber":271,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | find a doctor by specific fields         |  locate details of relevant doctors without having to go through the entire list |","lastModifiedDate":"2021-04-09"},{"lineNumber":272,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | edit a doctor  by specific fields        | update the doctor information without having to delete and add a new doctor |","lastModifiedDate":"2021-04-09"},{"lineNumber":273,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | list all appointments                    | see all the appointments or reset the appointment filters           |","lastModifiedDate":"2021-04-09"},{"lineNumber":274,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | list all patients                        | see all the patients or reset the patient filters                   |","lastModifiedDate":"2021-04-09"},{"lineNumber":275,"author":{"gitId":"icytornado"},"content":"| `* * *`  | user                                        | list all doctors                         | see all the doctors or reset the doctors filters                    |","lastModifiedDate":"2021-04-09"},{"lineNumber":276,"author":{"gitId":"icytornado"},"content":"| `* *`    | user                                        | clear all appointments                   | clear the appointment list without having to delete appointments one by one |","lastModifiedDate":"2021-04-09"},{"lineNumber":277,"author":{"gitId":"icytornado"},"content":"| `* *`    | user                                        | clear all patients                       | clear the patient list without having to delete appointments one by one     |","lastModifiedDate":"2021-04-09"},{"lineNumber":278,"author":{"gitId":"icytornado"},"content":"| `* *`    | user                                        | clear all doctors                        | clear the doctor list without having to delete appointments one by one     |","lastModifiedDate":"2021-04-09"},{"lineNumber":279,"author":{"gitId":"icytornado"},"content":"| `* *`    | user                                        | lookup previous records of an appointment| fill in missing information where ommitted by the appointment       |","lastModifiedDate":"2021-04-09"},{"lineNumber":280,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user                                        | lookup previous records of a patient     | fill in missing information where ommitted by the patient           |","lastModifiedDate":"2021-02-28"},{"lineNumber":281,"author":{"gitId":"icytornado"},"content":"| `* *`    | user                                        | lookup previous records of a doctor      | fill in missing information where ommitted by the doctor            |","lastModifiedDate":"2021-04-09"},{"lineNumber":282,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user with many appointments in the schedule | be reminded of overdue appointments      | take the appropriate action to resolve the issues                   |","lastModifiedDate":"2021-02-28"},{"lineNumber":283,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user with many appointments in the schedule | tag appointments with urgency categories | more urgent appointments can take priority                          |","lastModifiedDate":"2021-02-28"},{"lineNumber":284,"author":{"gitId":"Jacob-Pang"},"content":"| `*`      | user with many appointments in the schedule | sort appointments by specific fields     | locate a category of appointments easily                            |","lastModifiedDate":"2021-02-28"},{"lineNumber":285,"author":{"gitId":"Jacob-Pang"},"content":"| `*`      | user with many appointments in the schedule | automatically recommended available timings and doctors for new appointments | create appointments without manually checking availability in the schedule |","lastModifiedDate":"2021-02-28"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":287,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2021-02-28"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"onnwards"},"content":"[Coming Soon]","lastModifiedDate":"2021-02-27"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"onnwards"},"content":"(For all use cases below, the **System** is the `App-Ointment` and the **Actor** is the `User`, unless specified otherwise)","lastModifiedDate":"2021-02-27"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"Jacob-Pang"},"content":"### UC01: Enters a command:","lastModifiedDate":"2021-03-01"},{"lineNumber":296,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-02-28"},{"lineNumber":297,"author":{"gitId":"Jacob-Pang"},"content":"1. User enters a command.","lastModifiedDate":"2021-03-01"},{"lineNumber":298,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment performs the corresponding action.","lastModifiedDate":"2021-03-01"},{"lineNumber":299,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":300,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-02-28"},{"lineNumber":301,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid command from the user.","lastModifiedDate":"2021-02-28"},{"lineNumber":302,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that the command is not recognised.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":303,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a2.** App-Ointment executes the `help` command.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":304,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 to 1a2 are repeated until command entered is recognised.","lastModifiedDate":"2021-03-01"},{"lineNumber":305,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.","lastModifiedDate":"2021-03-01"},{"lineNumber":306,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":307,"author":{"gitId":"Jacob-Pang"},"content":"### UC02: Add a patient","lastModifiedDate":"2021-03-23"},{"lineNumber":308,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":309,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `add-patient` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":310,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment adds a new patient to the patient records.","lastModifiedDate":"2021-03-23"},{"lineNumber":311,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":312,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-03-23"},{"lineNumber":313,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-23"},{"lineNumber":314,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":315,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-23"},{"lineNumber":316,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-03-23"},{"lineNumber":317,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":318,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** App-Ointment detects that a patient with the same name exists in the patient records.","lastModifiedDate":"2021-03-23"},{"lineNumber":319,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user about the duplicate patient.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":320,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a2.** App-Ointment suggest user to update patient information through an `edit-patient` command instead.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":321,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":322,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":323,"author":{"gitId":"icytornado"},"content":"### UC03: Add a doctor","lastModifiedDate":"2021-04-09"},{"lineNumber":324,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-09"},{"lineNumber":325,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `add-doctor` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":326,"author":{"gitId":"icytornado"},"content":"2. App-Ointment adds a new doctor to the doctor records.","lastModifiedDate":"2021-04-09"},{"lineNumber":327,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":328,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-09"},{"lineNumber":329,"author":{"gitId":"icytornado"},"content":"* Similar to `add-patient` command.","lastModifiedDate":"2021-04-10"},{"lineNumber":330,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":331,"author":{"gitId":"icytornado"},"content":"### UC04: Add an appointment","lastModifiedDate":"2021-04-09"},{"lineNumber":332,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-03-01"},{"lineNumber":333,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `add-appt` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":334,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment adds a new appointment to the appointment schedule.","lastModifiedDate":"2021-03-01"},{"lineNumber":335,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":336,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-03-01"},{"lineNumber":337,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-01"},{"lineNumber":338,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":339,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-01"},{"lineNumber":340,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-02-28"},{"lineNumber":341,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":342,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** The patient index out of the bounds of the displayed list of patients.","lastModifiedDate":"2021-03-23"},{"lineNumber":343,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of patients.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":344,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 2a1 is repeated until the index entered is correct/free from errors.","lastModifiedDate":"2021-03-23"},{"lineNumber":345,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-03-23"},{"lineNumber":346,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":347,"author":{"gitId":"Jacob-Pang"},"content":"* **2b.** App-Ointment detects an existing appointment with the same patient or doctor at an overlapping appointment time.","lastModifiedDate":"2021-03-23"},{"lineNumber":348,"author":{"gitId":"Jacob-Pang"},"content":"    * **2b1.** App-Ointment warns user about the conflicting appointment.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":349,"author":{"gitId":"Jacob-Pang"},"content":"    * **2b2.** App-Ointment suggest user to either change existing appointment details through an `edit-appt` command, before adding the new appointment again, or change the new appointment details.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":350,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.\u003cbr\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":351,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":352,"author":{"gitId":"icytornado"},"content":"### UC05: List all patients","lastModifiedDate":"2021-04-09"},{"lineNumber":353,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-02-28"},{"lineNumber":354,"author":{"gitId":"onnwards"},"content":"1. User \u003cu\u003eenters the `list-patient` command (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":355,"author":{"gitId":"onnwards"},"content":"2. App-Ointment displays all patients.","lastModifiedDate":"2021-03-23"},{"lineNumber":356,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":357,"author":{"gitId":"onnwards"},"content":"**Extensions**","lastModifiedDate":"2021-03-23"},{"lineNumber":358,"author":{"gitId":"onnwards"},"content":"* **2a.** There are no appointments to display.","lastModifiedDate":"2021-03-23"},{"lineNumber":359,"author":{"gitId":"onnwards"},"content":"    * **2a1.** App-Ointment informs user that there are no patients to display.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":360,"author":{"gitId":"onnwards"},"content":"    Use case ends.","lastModifiedDate":"2021-03-23"},{"lineNumber":361,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":362,"author":{"gitId":"icytornado"},"content":"### UC06: List all doctors","lastModifiedDate":"2021-04-09"},{"lineNumber":363,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-09"},{"lineNumber":364,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `list-doctor` command (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":365,"author":{"gitId":"icytornado"},"content":"2. App-Ointment displays all doctors.","lastModifiedDate":"2021-04-09"},{"lineNumber":366,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":367,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-09"},{"lineNumber":368,"author":{"gitId":"icytornado"},"content":"* Similar to `list-patient` command.","lastModifiedDate":"2021-04-10"},{"lineNumber":369,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":370,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":371,"author":{"gitId":"icytornado"},"content":"### UC07: List all appointments","lastModifiedDate":"2021-04-09"},{"lineNumber":372,"author":{"gitId":"onnwards"},"content":"**MSS**","lastModifiedDate":"2021-03-23"},{"lineNumber":373,"author":{"gitId":"onnwards"},"content":"1. User \u003cu\u003eenters the `list-appt` command (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":374,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment displays all appointments.","lastModifiedDate":"2021-02-28"},{"lineNumber":375,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":376,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-02-28"},{"lineNumber":377,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** There are no appointments to display.","lastModifiedDate":"2021-02-28"},{"lineNumber":378,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment informs user that there are no appointments to display.\u003cbr\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":379,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.","lastModifiedDate":"2021-02-28"},{"lineNumber":380,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":381,"author":{"gitId":"icytornado"},"content":"### UC08: Edit a patient","lastModifiedDate":"2021-04-09"},{"lineNumber":382,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-02-28"},{"lineNumber":383,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `edit-patient` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":384,"author":{"gitId":"icytornado"},"content":"2. App-Ointment changes the details of the patient.","lastModifiedDate":"2021-03-14"},{"lineNumber":385,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":386,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-03-14"},{"lineNumber":387,"author":{"gitId":"icytornado"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-14"},{"lineNumber":388,"author":{"gitId":"icytornado"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":389,"author":{"gitId":"icytornado"},"content":"      Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-14"},{"lineNumber":390,"author":{"gitId":"icytornado"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-03-14"},{"lineNumber":391,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":392,"author":{"gitId":"icytornado"},"content":"* **1b.** The currently displayed list of patients is empty.","lastModifiedDate":"2021-03-14"},{"lineNumber":393,"author":{"gitId":"icytornado"},"content":"    * **1b1.** App-Ointment prompts user that there are no patients in the current display.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":394,"author":{"gitId":"icytornado"},"content":"      Use case ends.","lastModifiedDate":"2021-03-14"},{"lineNumber":395,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":396,"author":{"gitId":"icytornado"},"content":"* **2a.** The index out of the bounds of the displayed list of patients.","lastModifiedDate":"2021-03-14"},{"lineNumber":397,"author":{"gitId":"icytornado"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of patients.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":398,"author":{"gitId":"icytornado"},"content":"      Steps 2a1 is repeated until the index entered is correct/free from errors.","lastModifiedDate":"2021-03-14"},{"lineNumber":399,"author":{"gitId":"icytornado"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-03-14"},{"lineNumber":400,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":401,"author":{"gitId":"icytornado"},"content":"### UC09: Edit a doctor","lastModifiedDate":"2021-04-09"},{"lineNumber":402,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-09"},{"lineNumber":403,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `edit-doctor` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":404,"author":{"gitId":"icytornado"},"content":"2. App-Ointment changes the details of the doctor.","lastModifiedDate":"2021-04-09"},{"lineNumber":405,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":406,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-09"},{"lineNumber":407,"author":{"gitId":"icytornado"},"content":"* Similar to `edit-patient` command.","lastModifiedDate":"2021-04-10"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":410,"author":{"gitId":"icytornado"},"content":"### UC10: Edit an appointment","lastModifiedDate":"2021-04-09"},{"lineNumber":411,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-03-14"},{"lineNumber":412,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `edit-appt` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":413,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment changes the details of the appointment.","lastModifiedDate":"2021-02-28"},{"lineNumber":414,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":415,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-02-28"},{"lineNumber":416,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-01"},{"lineNumber":417,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":418,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-01"},{"lineNumber":419,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-02-28"},{"lineNumber":420,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":421,"author":{"gitId":"Jacob-Pang"},"content":"* **1b.** The currently displayed list of appointments is empty.","lastModifiedDate":"2021-03-01"},{"lineNumber":422,"author":{"gitId":"Jacob-Pang"},"content":"    * **1b1.** App-Ointment prompts user that there are no appointments in the current display.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":423,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.","lastModifiedDate":"2021-02-28"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":425,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** The index out of the bounds of the displayed list of appointments.","lastModifiedDate":"2021-03-01"},{"lineNumber":426,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of appointments.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":427,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 2a1 is repeated until the index entered is correct/free from errors.","lastModifiedDate":"2021-03-01"},{"lineNumber":428,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-02-28"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":430,"author":{"gitId":"icytornado"},"content":"* **2b.** App-Ointment detects an existing appointment having conflict with the new appointment.","lastModifiedDate":"2021-03-14"},{"lineNumber":431,"author":{"gitId":"Jacob-Pang"},"content":"    * **2b1.** App-Ointment warns user about the conflicting appointment.\u003cbr\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":432,"author":{"gitId":"icytornado"},"content":"    * **2b2.** App-Ointment suggest user to either change the other existing appointment details through a separate `edit-appt` command, before editing the current appointment again, or change the edit details of the current appointment.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-02-28"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":435,"author":{"gitId":"icytornado"},"content":"### UC11: Find appointments by search fields","lastModifiedDate":"2021-04-09"},{"lineNumber":436,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-02-28"},{"lineNumber":437,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `find-appt` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":438,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment changes the displayed list of appointments to fit.","lastModifiedDate":"2021-02-28"},{"lineNumber":439,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":440,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2021-02-28"},{"lineNumber":441,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** System detects an invalid subcommand format.","lastModifiedDate":"2021-03-01"},{"lineNumber":442,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":443,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-01"},{"lineNumber":444,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2.","lastModifiedDate":"2021-02-28"},{"lineNumber":445,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":446,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** There are no appointments to display.","lastModifiedDate":"2021-02-28"},{"lineNumber":447,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment informs user that there are no appointments to display.\u003cbr\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":448,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.","lastModifiedDate":"2021-02-28"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":450,"author":{"gitId":"icytornado"},"content":"### UC12: Find patients by search fields","lastModifiedDate":"2021-04-10"},{"lineNumber":451,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-09"},{"lineNumber":452,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `find-patient` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":453,"author":{"gitId":"icytornado"},"content":"2. App-Ointment changes the displayed list of patients to fit.","lastModifiedDate":"2021-04-10"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":455,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-09"},{"lineNumber":456,"author":{"gitId":"icytornado"},"content":"* **1a.** System detects an invalid subcommand format.","lastModifiedDate":"2021-04-09"},{"lineNumber":457,"author":{"gitId":"icytornado"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":458,"author":{"gitId":"icytornado"},"content":"      Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-04-09"},{"lineNumber":459,"author":{"gitId":"icytornado"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-04-09"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":461,"author":{"gitId":"icytornado"},"content":"* **2a.** There are no doctors to display.","lastModifiedDate":"2021-04-09"},{"lineNumber":462,"author":{"gitId":"icytornado"},"content":"    * **2a1.** App-Ointment informs user that there are no patients to display.\u003cbr\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":463,"author":{"gitId":"icytornado"},"content":"      Use case ends.","lastModifiedDate":"2021-04-09"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":465,"author":{"gitId":"icytornado"},"content":"### UC13: Find doctors by search fields","lastModifiedDate":"2021-04-10"},{"lineNumber":466,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-10"},{"lineNumber":467,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `find-doctor` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-10"},{"lineNumber":468,"author":{"gitId":"icytornado"},"content":"2. App-Ointment changes the displayed list of doctors to fit.","lastModifiedDate":"2021-04-10"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":470,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-10"},{"lineNumber":471,"author":{"gitId":"icytornado"},"content":"* Similar to `find-patient` command.","lastModifiedDate":"2021-04-10"},{"lineNumber":472,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-10"},{"lineNumber":473,"author":{"gitId":"icytornado"},"content":"### UC14: Delete a patient","lastModifiedDate":"2021-04-10"},{"lineNumber":474,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**","lastModifiedDate":"2021-02-28"},{"lineNumber":475,"author":{"gitId":"pngsebastian"},"content":"1. User \u003cu\u003eenters the `delete-patient` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":476,"author":{"gitId":"pngsebastian"},"content":"2. App-Ointment removes the patient from the patient records.","lastModifiedDate":"2021-03-26"},{"lineNumber":477,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":478,"author":{"gitId":"pngsebastian"},"content":"**Extensions**","lastModifiedDate":"2021-03-26"},{"lineNumber":479,"author":{"gitId":"pngsebastian"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-26"},{"lineNumber":480,"author":{"gitId":"pngsebastian"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":481,"author":{"gitId":"pngsebastian"},"content":"      Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-26"},{"lineNumber":482,"author":{"gitId":"pngsebastian"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-03-26"},{"lineNumber":483,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":484,"author":{"gitId":"pngsebastian"},"content":"* **1b.** The currently displayed list of patients is empty.","lastModifiedDate":"2021-03-26"},{"lineNumber":485,"author":{"gitId":"pngsebastian"},"content":"    * **1b1.** App-Ointment prompts user that there are no patients in the current display.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":486,"author":{"gitId":"pngsebastian"},"content":"      Use case ends.","lastModifiedDate":"2021-03-26"},{"lineNumber":487,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":488,"author":{"gitId":"pngsebastian"},"content":"* **2a.** The index out of the bounds of the displayed list of patients.","lastModifiedDate":"2021-03-26"},{"lineNumber":489,"author":{"gitId":"pngsebastian"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of patients.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":490,"author":{"gitId":"pngsebastian"},"content":"      Steps 2a1 is repeated until the index entered is correct/free from errors.","lastModifiedDate":"2021-03-26"},{"lineNumber":491,"author":{"gitId":"pngsebastian"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-03-26"},{"lineNumber":492,"author":{"gitId":"pngsebastian"},"content":" ","lastModifiedDate":"2021-03-26"},{"lineNumber":493,"author":{"gitId":"pngsebastian"},"content":"* **2b.** App-Ointment detects at least 1 appointment associated with the patient identified by the index number used in the displayed list of patients.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":494,"author":{"gitId":"pngsebastian"},"content":"    * **2b1.** App-Ointment warns user about the associated appointments, prompts user to use force delete and displays the expected subcommand format.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":495,"author":{"gitId":"pngsebastian"},"content":"    Use case ends.","lastModifiedDate":"2021-03-26"},{"lineNumber":496,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":497,"author":{"gitId":"icytornado"},"content":"### UC15: Delete a doctor","lastModifiedDate":"2021-04-10"},{"lineNumber":498,"author":{"gitId":"icytornado"},"content":"**MSS**","lastModifiedDate":"2021-04-09"},{"lineNumber":499,"author":{"gitId":"icytornado"},"content":"1. User \u003cu\u003eenters the `delete-doctor` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-04-09"},{"lineNumber":500,"author":{"gitId":"icytornado"},"content":"2. App-Ointment removes the patient from the doctor records.","lastModifiedDate":"2021-04-09"},{"lineNumber":501,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":502,"author":{"gitId":"icytornado"},"content":"**Extensions**","lastModifiedDate":"2021-04-09"},{"lineNumber":503,"author":{"gitId":"icytornado"},"content":"* Similar to `delete-patient` command.","lastModifiedDate":"2021-04-10"},{"lineNumber":504,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":505,"author":{"gitId":"icytornado"},"content":"### UC16: Delete an appointment","lastModifiedDate":"2021-04-10"},{"lineNumber":506,"author":{"gitId":"pngsebastian"},"content":"**MSS**","lastModifiedDate":"2021-03-26"},{"lineNumber":507,"author":{"gitId":"pngsebastian"},"content":"1. User \u003cu\u003eenters the `delete-appt` command and corresponding subcommands (UC01)\u003c/u\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":508,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment removes the appointment from the appointment schedule","lastModifiedDate":"2021-02-28"},{"lineNumber":509,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":510,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**","lastModifiedDate":"2021-02-28"},{"lineNumber":511,"author":{"gitId":"pngsebastian"},"content":"* **1a.** App-Ointment detects an invalid subcommand format.","lastModifiedDate":"2021-03-26"},{"lineNumber":512,"author":{"gitId":"pngsebastian"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":513,"author":{"gitId":"pngsebastian"},"content":"      Steps 1a1 is repeated until the subcommand entered is correct/free from errors.","lastModifiedDate":"2021-03-26"},{"lineNumber":514,"author":{"gitId":"pngsebastian"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-03-26"},{"lineNumber":515,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":516,"author":{"gitId":"pngsebastian"},"content":"* **1b.** The currently displayed list of appointments is empty.","lastModifiedDate":"2021-03-26"},{"lineNumber":517,"author":{"gitId":"pngsebastian"},"content":"    * **1b1.** App-Ointment prompts user that there are no appointments in the current display.\u003cbr\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":518,"author":{"gitId":"Jacob-Pang"},"content":"      Use case ends.","lastModifiedDate":"2021-02-28"},{"lineNumber":519,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":520,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** The index out of the bounds of the displayed list of appointments.","lastModifiedDate":"2021-03-01"},{"lineNumber":521,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of appointments.\u003cbr\u003e","lastModifiedDate":"2021-03-01"},{"lineNumber":522,"author":{"gitId":"pngsebastian"},"content":"      Steps 2a1 is repeated until the index entered is correct/free from errors.","lastModifiedDate":"2021-03-26"},{"lineNumber":523,"author":{"gitId":"Jacob-Pang"},"content":"      Use case resumes from step 2.","lastModifiedDate":"2021-02-28"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":525,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"onnwards"},"content":"_Non-functional requirements specify the constraints under which App-Ointment is developed and operated._","lastModifiedDate":"2021-03-01"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"onnwards"},"content":"#### Constraints:","lastModifiedDate":"2021-03-01"},{"lineNumber":531,"author":{"gitId":"onnwards"},"content":"* The system should be backward compatible with data produced by earlier versions of the system.","lastModifiedDate":"2021-03-01"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":533,"author":{"gitId":"onnwards"},"content":"#### Technical requirements:","lastModifiedDate":"2021-03-01"},{"lineNumber":534,"author":{"gitId":"onnwards"},"content":"* Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2021-03-01"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"onnwards"},"content":"#### Performance requirements:","lastModifiedDate":"2021-03-01"},{"lineNumber":537,"author":{"gitId":"onnwards"},"content":"* Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-23"},{"lineNumber":538,"author":{"gitId":"onnwards"},"content":"* Should be able to hold up to 1000 doctors without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-23"},{"lineNumber":539,"author":{"gitId":"onnwards"},"content":"* Should be able to hold up to 1000 appointments without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-03-01"},{"lineNumber":540,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":541,"author":{"gitId":"onnwards"},"content":"#### Quality requirements:","lastModifiedDate":"2021-03-01"},{"lineNumber":542,"author":{"gitId":"onnwards"},"content":"* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2021-03-01"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"onnwards"},"content":"#### Notes about project scope:","lastModifiedDate":"2021-03-01"},{"lineNumber":545,"author":{"gitId":"onnwards"},"content":"* The App-Ointment data file is private and local to the user.","lastModifiedDate":"2021-03-01"},{"lineNumber":546,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"onnwards"},"content":"* **System**: The App-Ointment App","lastModifiedDate":"2021-03-01"},{"lineNumber":551,"author":{"gitId":"onnwards"},"content":"* **User**: The Receptionist, not the patient or doctor","lastModifiedDate":"2021-03-01"},{"lineNumber":552,"author":{"gitId":"onnwards"},"content":"* **Person**: Patient or Doctor","lastModifiedDate":"2021-03-23"},{"lineNumber":553,"author":{"gitId":"onnwards"},"content":"* **Appointment Schedule**: The list of appointments maintained in App-Ointment, arranged by appointment datetime.","lastModifiedDate":"2021-03-23"},{"lineNumber":554,"author":{"gitId":"onnwards"},"content":"* **Patient Records**: The list of patients maintained in App-Ointment.","lastModifiedDate":"2021-03-23"},{"lineNumber":555,"author":{"gitId":"onnwards"},"content":"* **Doctor Records**: The list of doctors maintained in App-Ointment.","lastModifiedDate":"2021-03-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"onnwards"},"content":"*{More to be added}*","lastModifiedDate":"2021-02-27"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":560,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":588,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":589,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":590,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":591,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":592,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":593,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":594,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":595,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":598,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":599,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":600,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":602,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":603,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":604,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":605,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":606,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":607,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":608,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":609,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":610,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jacob-Pang":103,"onnwards":49,"pngsebastian":32,"-":328,"icytornado":99}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"App-Ointment is a **desktop app for managing and scheduling patient appointments, optimized for use via a Command Line Interface (CLI)**, while still having the benefits of a Graphical User Interface (GUI). If you can type fast, App-Ointment can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2021-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"2. Download the latest `App-Ointment.jar` from [here](https://github.com/AY2021S2-CS2103-W17-2/tp/releases).","lastModifiedDate":"2021-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your App-Ointment App.","lastModifiedDate":"2021-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"4. Double-click the file to start the app. The GUI, similar to the image shown below, should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"   * **`list-appt`** : Lists all the appointments in the appointment schedule.","lastModifiedDate":"2021-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"   * \u003ccode\u003e\u003cb\u003eadd-patient\u003c/b\u003e n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01\u003c/code\u003e : Adds a patient to the patient records.","lastModifiedDate":"2021-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"   * \u003ccode\u003e\u003cb\u003edelete-appt\u003c/b\u003e 3\u003c/code\u003e : Deletes the 3rd appointment from the displayed appointment schedule.","lastModifiedDate":"2021-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"   * **`clear-appt`** : Clears all appointments in the appointment schedule","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2021-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"* Parameters in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":52,"author":{"gitId":"pngsebastian"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"pngsebastian"},"content":"* Parameters with `…`​ after them can be used multiple times (including zero times).\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"* Parameters with prefixes (e.g. `/n`, `/p`, `/t`) can be in any order.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"pngsebastian"},"content":"  e.g. if the command format specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2021-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"pngsebastian"},"content":"* If a parameter is expected only once in the command, and you specified it multiple times instead, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"pngsebastian"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `clear-appt`, `clear-doctor`, `clear-patient`, `exit`, `help`, `list-appt`, `list-doctor` and `list-patient`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"### *Patient Commands*:","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"### Adding a patient: `add-patient`","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"Adds a patient to the patient records.\u003cbr\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"Format: `add-patient n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"* The patient can have any number of tags (including 0).\u003cbr\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"* When a tag is too long, an ellipsis will be automatically added to prevent overflow. ","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"It is recommended that tags not be too long to avoid this.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"Examples:","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"* `add-patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"pngsebastian"},"content":"### Clearing all entries in patient records: `clear-patient`","lastModifiedDate":"2021-04-05"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"Clears all entries from the patient records. \u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"Format: `clear-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":99,"author":{"gitId":"pngsebastian"},"content":"* Entries in the patient records can only be cleared if there are no existing appointments in the appointment schedule. \u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"* Otherwise, `clear-appt` will have to be called first. \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":101,"author":{"gitId":"pngsebastian"},"content":"* The above-mentioned requirements are similarly applicable to [`clear-doctor`](#clearing-all-entries-in-doctor-records-clear-doctor)","lastModifiedDate":"2021-04-07"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"### Deleting a patient : `delete-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"pngsebastian"},"content":"Deletes the specified patient from the patient records.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"pngsebastian"},"content":"Format: `delete-patient [--force] INDEX`","lastModifiedDate":"2021-04-05"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":108,"author":{"gitId":"pngsebastian"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2021-04-05"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"* The index refers to the index number shown in the displayed patient records.","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"pngsebastian"},"content":"* The specified patient can only be deleted if there are no existing appointments associated with him/her in the appointment schedule.","lastModifiedDate":"2021-04-05"},{"lineNumber":112,"author":{"gitId":"pngsebastian"},"content":"  Otherwise, `--force` must be included before `INDEX` to force delete the specified patient, along with all associated appointments in the appointment schedule.","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"pngsebastian"},"content":"* The above-mentioned requirements are similarly applicable to [`delete-doctor`](#deleting-a-doctor--delete-doctor)","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"pngsebastian"},"content":"* `list-patient` followed by `delete-patient 3` deletes the 3rd patient in the patient records.","lastModifiedDate":"2021-04-05"},{"lineNumber":117,"author":{"gitId":"pngsebastian"},"content":"* `list-patient` followed by `delete-patient --force 1` force deletes the 1st patient in the patient records and all associated appointments in the appointment schedule.","lastModifiedDate":"2021-04-05"},{"lineNumber":118,"author":{"gitId":"pngsebastian"},"content":"* `find-patient David` followed by `delete-patient 1` deletes the 1st patient in the results of the `find-patient` command.","lastModifiedDate":"2021-04-05"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"### Editing a patient : `edit-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"pngsebastian"},"content":"Edits an existing patient in the patient records.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"Format: `edit-patient INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2021-03-30"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":125,"author":{"gitId":"pngsebastian"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient records. The index **must be a positive integer** 1, 2, 3, …​\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"* At least one of the optional fields must be provided.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"* Existing values will be updated to the input values.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":128,"author":{"gitId":"pngsebastian"},"content":"* When editing tags, the existing tags of the patient will be removed i.e. adding of tags is not cumulative.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"pngsebastian"},"content":"* You can remove all the patient’s tags by typing `t/` without specifying any tags after it.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":130,"author":{"gitId":"pngsebastian"},"content":"* Raises an exception if there are conflicts in the new appointment schedule for the patient and the doctor.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"pngsebastian"},"content":"* `edit 1 p/91234567 e/newEmail@example.com` Edits the phone umber and email address of the 1st patient to `91234567` and `newEmail@example.com` respectively.","lastModifiedDate":"2021-04-05"},{"lineNumber":134,"author":{"gitId":"pngsebastian"},"content":"* `edit-patient 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2021-04-05"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"### Locating patients by name: `find-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"pngsebastian"},"content":"Find patients whose names contain any of the given keywords.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"Format: `find-patient KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-03-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"pngsebastian"},"content":"* The search is case-insensitive. e.g. `edward` will match `Edward`.","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"pngsebastian"},"content":"* The order of the keywords does not matter. e.g. `Edward Charlotte` will match `Charlotte Edward`.","lastModifiedDate":"2021-04-05"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"* Only the name is searched.","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"pngsebastian"},"content":"* Only full words will be matched e.g. `Edwar` will not match `Edward`.","lastModifiedDate":"2021-04-05"},{"lineNumber":145,"author":{"gitId":"pngsebastian"},"content":"* Patients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2021-04-05"},{"lineNumber":146,"author":{"gitId":"pngsebastian"},"content":"  e.g. `Edward Charlotte` will return `Edward Hyde` and `Charlotte Oliveiro`.","lastModifiedDate":"2021-04-05"},{"lineNumber":147,"author":{"gitId":"pngsebastian"},"content":"* The above-mentioned requirements are similarly applicable to [`find-doctor`](#locating-doctors-by-name-find-doctor)","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"onnwards"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"* `find-patient John` returns `john` and `John Doe` ","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"pngsebastian"},"content":"* `find-patient bernice david` returns `Bernice Yu` and `David Li`\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"  ![result for \u0027find bernice david\u0027](images/findPatientBerniceDavidResult.png)","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"### Listing all patients : `list-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"onnwards"},"content":"Changes the displayed patient records to show all patients in the patient records.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"Format: `list-patient`","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"onnwards"},"content":"### *Doctor Commands*:","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"### Adding a doctor: `add-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"onnwards"},"content":"Adds a doctor to the doctor records.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"Format: `add-doctor n/NAME [t/TAG]…​`","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"onnwards"},"content":"* The doctor can have any number of tags (including 0).\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":176,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"* When a tag is too long, an ellipsis will be automatically added to prevent overflow. ","lastModifiedDate":"2021-04-07"},{"lineNumber":179,"author":{"gitId":"onnwards"},"content":"It is recommended that tags not be too long to avoid this.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":180,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"* `add-doctor n/Dr Meredith Grey`","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"* `add-doctor n/Dr Strange t/Dormammu t/IveComeToBargain`","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"pngsebastian"},"content":"### Clearing all entries in doctor records: `clear-doctor`","lastModifiedDate":"2021-04-05"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"Clears all entries from the doctor records. \u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"pngsebastian"},"content":"Format: `clear-doctor` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":193,"author":{"gitId":"pngsebastian"},"content":"Similar requirements as [`clear-patient`](#clearing-all-entries-in-patient-records-clear-patient) \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"onnwards"},"content":"### Deleting a doctor : `delete-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"pngsebastian"},"content":"Deletes the specified doctor from the doctor records.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"pngsebastian"},"content":"Format: `delete-doctor [--force] INDEX` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"pngsebastian"},"content":"Similar requirements as [`delete-patient`](#deleting-a-patient--delete-patient) \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-04-05"},{"lineNumber":203,"author":{"gitId":"pngsebastian"},"content":"* `list-doctor` followed by `delete-doctor 3` deletes the 3rd doctor in the doctor records.","lastModifiedDate":"2021-04-05"},{"lineNumber":204,"author":{"gitId":"pngsebastian"},"content":"* `list-doctor` followed by \u0027delete-doctor --force 1\u0027 force deletes the 1st doctor in the doctor records, along with all associated appointments in the appointment schedule.","lastModifiedDate":"2021-04-05"},{"lineNumber":205,"author":{"gitId":"pngsebastian"},"content":"* `find-doctor Drake` followed by `delete-doctor 1` deletes the 1st doctor in the results of the `find-doctor` command.","lastModifiedDate":"2021-04-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"onnwards"},"content":"### Editing a doctor : `edit-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"onnwards"},"content":"Edits an existing doctor in the doctor records.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"onnwards"},"content":"Format: `edit-doctor INDEX [n/NAME] [t/TAG]…​`","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":213,"author":{"gitId":"pngsebastian"},"content":"* Edits the doctor at the specified `INDEX`. The index refers to the index number shown in the displayed doctor records. The index must be a **positive integer** 1, 2, 3, …​\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":214,"author":{"gitId":"pngsebastian"},"content":"* At least one of the optional fields must be provided.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":215,"author":{"gitId":"pngsebastian"},"content":"* Existing values will be updated to the input values.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":216,"author":{"gitId":"pngsebastian"},"content":"* When editing tags, the existing tags of the doctor will be removed i.e. adding of tags is not cumulative.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":217,"author":{"gitId":"pngsebastian"},"content":"* You can remove all the doctor’s tags by typing `t/` without specifying any tags after it.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":218,"author":{"gitId":"pngsebastian"},"content":"* Raises an exception if there are conflicts in the new appointment schedule for the patient and the doctor.\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":219,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"onnwards"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"onnwards"},"content":"* `edit-doctor 1 n/Dr Amy` Edits the 1st doctor\u0027s name to Dr Amy.","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"onnwards"},"content":"* `edit-doctor 2 n/Dr Betsy Crower t/` Edits the name of doctor under the 2nd displayed doctor record to be Betsy Crower and clears all existing tags.","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"onnwards"},"content":"### Locating doctors by name: `find-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"pngsebastian"},"content":"Find doctors in the doctor records whose names contain any of the given keywords.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":226,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"Format: `find-doctor KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"pngsebastian"},"content":"Similar requirements as [`find-patient`](#locating-patients-by-name-find-patient) \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":230,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":231,"author":{"gitId":"pngsebastian"},"content":"Examples:","lastModifiedDate":"2021-04-05"},{"lineNumber":232,"author":{"gitId":"pngsebastian"},"content":"* `find-doctor murphy who` returns `Dr Murphy` and `Dr Who`\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":233,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-04-05"},{"lineNumber":234,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":235,"author":{"gitId":"onnwards"},"content":"### Listing all doctors : `list-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":236,"author":{"gitId":"onnwards"},"content":"Changes the displayed doctor records to show all doctors in the doctor records.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"onnwards"},"content":"Format: `list-doctor`","lastModifiedDate":"2021-03-30"},{"lineNumber":239,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":242,"author":{"gitId":"onnwards"},"content":"### *Appointment Commands*:","lastModifiedDate":"2021-03-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"onnwards"},"content":"### Adding an appointment: `add-appt`","lastModifiedDate":"2021-03-23"},{"lineNumber":245,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":246,"author":{"gitId":"onnwards"},"content":"Adds an appointment to the schedule.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":247,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":248,"author":{"gitId":"Jacob-Pang"},"content":"Format: `add-appt pt/PATIENT_INDEX dr/DOCTOR_INDEX at/TIMESLOT_START [to/TIMESLOT_END] [dur/TIMESLOT_DURATION] [t/TAG]…​`","lastModifiedDate":"2021-03-30"},{"lineNumber":249,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":250,"author":{"gitId":"onnwards"},"content":"* The `PATIENT_INDEX` corresponds to the patient at the index number in the current displayed patient records.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":251,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":252,"author":{"gitId":"Jacob-Pang"},"content":"* The `DOCTOR_INDEX` corresponds to the doctor at the index number in the current displayed doctor records.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":253,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"Jacob-Pang"},"content":"* The `PATIENT_INDEX` and `DOCTOR_INDEX` must be a \u003cstrong\u003epositive integer\u003c/strong\u003e 1, 2, 3, …​\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":255,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":256,"author":{"gitId":"kwmiw"},"content":"* The `TIMESLOT_START` and `TIMESLOT_END` must be either in an [acceptable datetime format](#Acceptable DateTime Formats) or prefixed with keyword `NEXT` followed by a datetime unit (DAY, MONTH, YEAR) or weekday (MONDAY, TUESDAY …​)\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":257,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":258,"author":{"gitId":"Jacob-Pang"},"content":"* Where both fields `TIMESLOT_END` and `TIMESLOT_DURATION` are provided, priority is granted to `TIMESLOT_END`.\u003cbr\u003e","lastModifiedDate":"2021-04-06"},{"lineNumber":259,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":260,"author":{"gitId":"onnwards"},"content":"* Raises an exception if there are conflicts in schedule for the patient or the doctor.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":261,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":262,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":263,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":264,"author":{"gitId":"onnwards"},"content":"* The appointment can have any number of tags (including 0). It is recommended to use the tags to define the purpose of the appointment.\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":265,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":266,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":267,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":268,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":269,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":270,"author":{"gitId":"onnwards"},"content":"* When a tag is too long, an ellipsis will be automatically added to prevent overflow. ","lastModifiedDate":"2021-04-07"},{"lineNumber":271,"author":{"gitId":"onnwards"},"content":"It is recommended that tags not be too long to avoid this.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":272,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":273,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-03-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"Jacob-Pang"},"content":"* `add-appt pt/1 dr/3 at/2021-01-01 00:00 to/2021-01-01 01:30 t/severe t/brainDamage`","lastModifiedDate":"2021-03-30"},{"lineNumber":278,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":279,"author":{"gitId":"Jacob-Pang"},"content":"* `add-appt pt/2 dr/2 at/2021-01-01 00:00 dur/1H 30M t/exhaustion`","lastModifiedDate":"2021-03-30"},{"lineNumber":280,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":281,"author":{"gitId":"Jacob-Pang"},"content":"* `add-appt pt/3 dr/1 at/NEXT MONDAY dur/1H 30M`","lastModifiedDate":"2021-03-30"},{"lineNumber":282,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":283,"author":{"gitId":"pngsebastian"},"content":"### Clearing all entries in appointment schedule: `clear-appt`","lastModifiedDate":"2021-04-05"},{"lineNumber":284,"author":{"gitId":"onnwards"},"content":"Clears all entries from the appointment schedule.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":285,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":286,"author":{"gitId":"onnwards"},"content":"Format: `clear-appt`","lastModifiedDate":"2021-03-30"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":289,"author":{"gitId":"pngsebastian"},"content":"### Deleting an appointment : `delete-appt`","lastModifiedDate":"2021-04-05"},{"lineNumber":290,"author":{"gitId":"onnwards"},"content":"Deletes the specified appointment from the schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":292,"author":{"gitId":"Jacob-Pang"},"content":"Format: `delete-appt INDEX`","lastModifiedDate":"2021-03-30"},{"lineNumber":293,"author":{"gitId":"pngsebastian"},"content":"* Deletes the appointment at the specified `INDEX`.","lastModifiedDate":"2021-04-05"},{"lineNumber":294,"author":{"gitId":"onnwards"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2021-03-30"},{"lineNumber":295,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2021-04-05"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2021-03-30"},{"lineNumber":298,"author":{"gitId":"Jacob-Pang"},"content":"* `list-appt` followed by `delete-appt 2` deletes the 2nd appointment in the entire appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":299,"author":{"gitId":"pngsebastian"},"content":"* `find-appt n/Alex` followed by `delete-appt 1` deletes the 1st appointment in the results of the `find-appt` command.","lastModifiedDate":"2021-04-05"},{"lineNumber":300,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":301,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":302,"author":{"gitId":"icytornado"},"content":"### Editing an appointment : `edit-appt`","lastModifiedDate":"2021-03-14"},{"lineNumber":303,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":304,"author":{"gitId":"icytornado"},"content":"Edits an existing appointment in the appointment schedule.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":305,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":306,"author":{"gitId":"Jacob-Pang"},"content":"Format: `edit-appt APPOINTMENT_INDEX [pt/PATIENT_INDEX] [dr/DOCTOR_INDEX] [at/TIMESLOT START] [to/TIMESLOT END] [dur/TIMESLOT DURATION] [t/TAG]…​`","lastModifiedDate":"2021-03-30"},{"lineNumber":307,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":308,"author":{"gitId":"pngsebastian"},"content":"* Edits the appointment for the patient specified by the `APPOINTMENT_INDEX`. The `APPOINTMENT_INDEX` refers to the index number shown in the displayed appointment schedule. The index **must be a positive integer** 1, 2, 3, …​\u003cbr\u003e","lastModifiedDate":"2021-04-05"},{"lineNumber":309,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":310,"author":{"gitId":"Jacob-Pang"},"content":"* At least one of the optional fields must be provided \u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":311,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":312,"author":{"gitId":"icytornado"},"content":"* Existing values will be updated to the input values.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":313,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":314,"author":{"gitId":"pngsebastian"},"content":"* When editing tags, the existing tags of the appointment will be removed i.e. adding of tags is not cumulative.\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":315,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":316,"author":{"gitId":"icytornado"},"content":"* You can remove all the person’s tags by typing t/ without specifying any tags after it.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":317,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":318,"author":{"gitId":"icytornado"},"content":"* Raises an exception if there are conflicts in the new appointment with the existing appointments.\u003cbr\u003e","lastModifiedDate":"2021-03-14"},{"lineNumber":319,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":320,"author":{"gitId":"icytornado"},"content":"* The starting time of an appointment can be updated by command `edit-appt INDEX at/` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":321,"author":{"gitId":"icytornado"},"content":"  ","lastModifiedDate":"2021-04-07"},{"lineNumber":322,"author":{"gitId":"icytornado"},"content":"* The duration of an appointment can be updated by command `edit-appt INDEX dur/` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":323,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":324,"author":{"gitId":"icytornado"},"content":"* The end time of an appointment can be updated by command `edit-appt INDEX to/` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":325,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":326,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":327,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"icytornado"},"content":"Examples:","lastModifiedDate":"2021-03-14"},{"lineNumber":329,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":330,"author":{"gitId":"Jacob-Pang"},"content":"* `edit-appt 1 pt/1 dr/2` Edits the appointment at index 1 to assign the patient at index 1 and doctor at index 2.","lastModifiedDate":"2021-03-30"},{"lineNumber":331,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":332,"author":{"gitId":"Jacob-Pang"},"content":"* `edit-appt 2 at/2021-05-08 09:00 dur/1H t/severe t/fever` Edits the appointment at index 2 to assign a timeslot at 8 May 2021 9AM for a duration of 1 hour and tag the appointment with severe and fever tags.","lastModifiedDate":"2021-03-30"},{"lineNumber":333,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":334,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":335,"author":{"gitId":"onnwards"},"content":"### Locating appointments by fields : `find-appt`","lastModifiedDate":"2021-03-30"},{"lineNumber":336,"author":{"gitId":"pngsebastian"},"content":"Find appointments with details that contain any of the given keywords. \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":337,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":338,"author":{"gitId":"kwmiw"},"content":"Format: `find-appt [pt/PATIENT_NAME] [MORE_KEYWORDS] [dr/DOCTOR_NAME] [MORE_KEYWORDS] [at/TIMESLOT_START] [MORE_KEYWORDS] [t/TAG] [MORE_KEYWORDS]`","lastModifiedDate":"2021-04-07"},{"lineNumber":339,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":340,"author":{"gitId":"Jacob-Pang"},"content":"* At least one of the optional fields must be provided.\u003cbr\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":341,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":342,"author":{"gitId":"kwmiw"},"content":"* The search is case-insensitive. e.g `pt/alex` will match `pt/Alex`\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":343,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":344,"author":{"gitId":"kwmiw"},"content":"* Only full words will be matched. e.g. `pt/freddi` will not match `pt/freddie`\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":345,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":346,"author":{"gitId":"kwmiw"},"content":"* Search fields require at least one keyword to be matched in the field description for the search condition of that field to be satisfied. e.g. `find-appt pt/Alex Edward` will match both appointments with patients `Alex Karev` and `Edward Hyde`.","lastModifiedDate":"2021-04-07"},{"lineNumber":347,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":348,"author":{"gitId":"kwmiw"},"content":"* Where `at/TIMESLOT_START` field is specified, the search is conditioned on the satisfaction of either or both the date and time elements. e.g.:","lastModifiedDate":"2021-04-07"},{"lineNumber":349,"author":{"gitId":"kwmiw"},"content":"  * `find-appt at/05-08-2021 12:00pm` will match appointments that satisfy both the date and time elements.","lastModifiedDate":"2021-04-07"},{"lineNumber":350,"author":{"gitId":"kwmiw"},"content":"  * `find-appt at/12:00pm` will match all appointments that occur at time `12:00pm`","lastModifiedDate":"2021-04-07"},{"lineNumber":351,"author":{"gitId":"kwmiw"},"content":"  * `find-appt at/05-08-2021` will match all appointments that occur on date `05-08-2021`","lastModifiedDate":"2021-04-07"},{"lineNumber":352,"author":{"gitId":"kwmiw"},"content":"* Where multiple search fields are specified, the search is conditioned on the satisfaction of \u003cstrong\u003eall\u003c/strong\u003e of the search fields\u0027 subconditions. e.g. `find-appt n/Alex Edward Bo dr/Jekyll` will match appointments that satisfy both:","lastModifiedDate":"2021-04-07"},{"lineNumber":353,"author":{"gitId":"kwmiw"},"content":"  - Jekyll in the assigned doctor\u0027s name; and","lastModifiedDate":"2021-04-07"},{"lineNumber":354,"author":{"gitId":"kwmiw"},"content":"  - Either Alex or Edward in the patient\u0027s name.","lastModifiedDate":"2021-04-07"},{"lineNumber":355,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":356,"author":{"gitId":"Jacob-Pang"},"content":"Examples:","lastModifiedDate":"2021-02-28"},{"lineNumber":357,"author":{"gitId":"kwmiw"},"content":"* `find-appt pt/john alex` returns appointments with patients `john`, `John`, `John Doe`, `alex`, `Alex` and `Alex Anderson`.","lastModifiedDate":"2021-04-07"},{"lineNumber":358,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":359,"author":{"gitId":"Jacob-Pang"},"content":"* `find-appt dr/Grey Who t/BrainSurgery` returns appointments with doctors `grey` or `who` and are tagged as `BrainSurgery`.","lastModifiedDate":"2021-03-30"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":362,"author":{"gitId":"onnwards"},"content":"### Listing all appointments : `list-appt`","lastModifiedDate":"2021-03-30"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":364,"author":{"gitId":"onnwards"},"content":"Changes the displayed appointment list to show all appointments in the appointment schedule.\u003cbr\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":365,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":366,"author":{"gitId":"onnwards"},"content":"Format: `list-appt`","lastModifiedDate":"2021-03-30"},{"lineNumber":367,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":368,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":369,"author":{"gitId":"pngsebastian"},"content":"### *Overall Commands*:","lastModifiedDate":"2021-04-07"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"icytornado"},"content":"### Viewing help: `help`","lastModifiedDate":"2021-03-01"},{"lineNumber":378,"author":{"gitId":"pngsebastian"},"content":"Shows a message with an url to this User Guide webpage.","lastModifiedDate":"2021-04-07"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":380,"author":{"gitId":"pngsebastian"},"content":"Format: `help` \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":382,"author":{"gitId":"pngsebastian"},"content":"![result for \u0027help\u0027](images/helpMessage.png)","lastModifiedDate":"2021-04-07"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":384,"author":{"gitId":"kwmiw"},"content":"### Toggle User Inputs: \u003ckbd\u003e\u0026uarr;\u003c/kbd\u003e/\u003ckbd\u003e\u0026darr;\u003c/kbd\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":385,"author":{"gitId":"kwmiw"},"content":"Format: \u003ckbd\u003e\u0026uarr;\u003c/kbd\u003e/\u003ckbd\u003e\u0026darr;\u003c/kbd\u003e","lastModifiedDate":"2021-03-31"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":387,"author":{"gitId":"kwmiw"},"content":"Toggles between previous inputs keyed into the Command Box previously. Returns user to a *blank* Command Box upon keying \u003ckbd\u003e\u0026darr;\u003c/kbd\u003e on the most recent input.","lastModifiedDate":"2021-03-31"},{"lineNumber":388,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":389,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"onnwards"},"content":"App-Ointment data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2021-02-27"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":395,"author":{"gitId":"onnwards"},"content":"App-Ointment data are saved as 3 JSON files:","lastModifiedDate":"2021-03-30"},{"lineNumber":396,"author":{"gitId":"onnwards"},"content":"`[JAR file location]/data/PatientRecords.json`","lastModifiedDate":"2021-03-30"},{"lineNumber":397,"author":{"gitId":"onnwards"},"content":"`[JAR file location]/data/DoctorRecords.json`","lastModifiedDate":"2021-03-30"},{"lineNumber":398,"author":{"gitId":"onnwards"},"content":"`[JAR file location]/data/AppointmentSchedule.json`","lastModifiedDate":"2021-03-30"},{"lineNumber":399,"author":{"gitId":"onnwards"},"content":"Advanced users are welcome to update data directly by editing the data files.","lastModifiedDate":"2021-03-30"},{"lineNumber":400,"author":{"gitId":"onnwards"},"content":"Do note that adding entries into the patient and doctor records will require a UUID Version 4 generator.","lastModifiedDate":"2021-03-30"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":402,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: \u003cb\u003eCaution:\u003c/b\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":403,"author":{"gitId":"onnwards"},"content":"If your changes to the data files makes its format invalid, App-Ointment will discard the data file that is invalid and start with an empty data file at the next run.","lastModifiedDate":"2021-03-30"},{"lineNumber":404,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"onnwards"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous App-Ointment home folder.","lastModifiedDate":"2021-02-27"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"kwmiw"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-04-07"},{"lineNumber":414,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":415,"author":{"gitId":"kwmiw"},"content":"## Acceptable DateTime Formats","lastModifiedDate":"2021-04-07"},{"lineNumber":416,"author":{"gitId":"kwmiw"},"content":"Must be any of:","lastModifiedDate":"2021-04-07"},{"lineNumber":417,"author":{"gitId":"kwmiw"},"content":"### Date:","lastModifiedDate":"2021-04-07"},{"lineNumber":418,"author":{"gitId":"kwmiw"},"content":"+ DD-MM-YYYY","lastModifiedDate":"2021-04-07"},{"lineNumber":419,"author":{"gitId":"kwmiw"},"content":"+ DD-MM-YY","lastModifiedDate":"2021-04-07"},{"lineNumber":420,"author":{"gitId":"kwmiw"},"content":"+ YYYY-MM-DD","lastModifiedDate":"2021-04-07"},{"lineNumber":421,"author":{"gitId":"kwmiw"},"content":"+ DD/MM/YYYY","lastModifiedDate":"2021-04-07"},{"lineNumber":422,"author":{"gitId":"kwmiw"},"content":"+ DD/MM/YY","lastModifiedDate":"2021-04-07"},{"lineNumber":423,"author":{"gitId":"kwmiw"},"content":"+ next DAY [MONDAY, TUESDAY, ...]","lastModifiedDate":"2021-04-07"},{"lineNumber":424,"author":{"gitId":"kwmiw"},"content":"+ next month","lastModifiedDate":"2021-04-07"},{"lineNumber":425,"author":{"gitId":"kwmiw"},"content":"+ next year","lastModifiedDate":"2021-04-07"},{"lineNumber":426,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":427,"author":{"gitId":"kwmiw"},"content":"### Time:","lastModifiedDate":"2021-04-07"},{"lineNumber":428,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":429,"author":{"gitId":"kwmiw"},"content":"+ hh:mm (In 24-Hour format)","lastModifiedDate":"2021-04-07"},{"lineNumber":430,"author":{"gitId":"kwmiw"},"content":"+ hh:mmam/pm","lastModifiedDate":"2021-04-07"},{"lineNumber":431,"author":{"gitId":"kwmiw"},"content":"  ","lastModifiedDate":"2021-04-07"},{"lineNumber":432,"author":{"gitId":"kwmiw"},"content":"### Valid Examples:","lastModifiedDate":"2021-04-07"},{"lineNumber":433,"author":{"gitId":"kwmiw"},"content":"+ 12/12/21 01:15pm","lastModifiedDate":"2021-04-07"},{"lineNumber":434,"author":{"gitId":"kwmiw"},"content":"+ 12-12-21 13:15","lastModifiedDate":"2021-04-07"},{"lineNumber":435,"author":{"gitId":"kwmiw"},"content":"+ next monday 13:12","lastModifiedDate":"2021-04-07"},{"lineNumber":436,"author":{"gitId":"kwmiw"},"content":"+ next monday","lastModifiedDate":"2021-04-07"},{"lineNumber":437,"author":{"gitId":"kwmiw"},"content":"+ next month 14:00","lastModifiedDate":"2021-04-07"},{"lineNumber":438,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":439,"author":{"gitId":"kwmiw"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":440,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":441,"author":{"gitId":"kwmiw"},"content":"* Inputs with the `next` keywords **without a user-specified time** will reflect the current time when the command is entered. For example, `add-appt pt/1 dr/1 at/next monday` when entered on *07/04/2021 12:00* will result in an appointment added on *12/04/2021 12:00*.","lastModifiedDate":"2021-04-07"},{"lineNumber":442,"author":{"gitId":"kwmiw"},"content":"* `next DAY` inputs must be spelt correctly and fully. Inputs such as`at/next MONDAYXX` or `at/next MON` is restricted. \u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":443,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":444,"author":{"gitId":"kwmiw"},"content":"\u003c/div\u003e\u003cbr\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":446,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-04-03"},{"lineNumber":450,"author":{"gitId":"Jacob-Pang"},"content":"| Action            | Format                                  | Examples                                           |","lastModifiedDate":"2021-03-30"},{"lineNumber":451,"author":{"gitId":"Jacob-Pang"},"content":"|-------------------|-----------------------------------------|----------------------------------------------------|","lastModifiedDate":"2021-03-30"},{"lineNumber":452,"author":{"gitId":"Jacob-Pang"},"content":"| **add-patient** | `add-patient n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]…​` | `add-patient n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` |","lastModifiedDate":"2021-03-30"},{"lineNumber":453,"author":{"gitId":"onnwards"},"content":"| **clear-patient** | `clear-patient` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":454,"author":{"gitId":"Jacob-Pang"},"content":"| **delete-patient** | `delete-patient INDEX` | `delete-patient 2` |","lastModifiedDate":"2021-03-30"},{"lineNumber":455,"author":{"gitId":"Jacob-Pang"},"content":"| **edit-patient** | `edit-patient INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` | `edit-patient 1 e/newEmail@example.com`\u003cbr\u003e `edit-patient 2 n/Betsy Crower t/` |","lastModifiedDate":"2021-03-30"},{"lineNumber":456,"author":{"gitId":"Jacob-Pang"},"content":"| **find-patient** | `find KEYWORD [MORE_KEYWORDS]` | `find John`\u003cbr\u003e`find bernice david` |","lastModifiedDate":"2021-03-30"},{"lineNumber":457,"author":{"gitId":"Jacob-Pang"},"content":"| **list-patient** | `list-patient` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":458,"author":{"gitId":"Jacob-Pang"},"content":"| **add-doctor** | `add-doctor n/NAME [t/TAG]…​` | `add-doctor n/Dr John Doe` |","lastModifiedDate":"2021-03-30"},{"lineNumber":459,"author":{"gitId":"onnwards"},"content":"| **clear-doctor** | `clear-doctor` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":460,"author":{"gitId":"Jacob-Pang"},"content":"| **delete-doctor** | `delete-doctor INDEX` | `delete-doctor 2` |","lastModifiedDate":"2021-03-30"},{"lineNumber":461,"author":{"gitId":"Jacob-Pang"},"content":"| **edit-doctor** | `edit-doctor INDEX [n/NAME] [t/TAG]…​` | `edit-doctor 1 n/Dr Amy`\u003cbr\u003e`edit-doctor 2 n/Dr Betsy Crower t/` |","lastModifiedDate":"2021-03-30"},{"lineNumber":462,"author":{"gitId":"Jacob-Pang"},"content":"| **find-doctor** | `find-doctor KEYWORD [MORE_KEYWORDS]` | `find Amy`\u003cbr\u003e`find Amy Betsy` |","lastModifiedDate":"2021-03-30"},{"lineNumber":463,"author":{"gitId":"Jacob-Pang"},"content":"| **list-doctor** | `list-doctor` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":464,"author":{"gitId":"Jacob-Pang"},"content":"| **add-appt** | `add-appt pt/PATIENT_INDEX dr/DOCTOR_INDEX at/TIMESLOT_START [to/TIMESLOT_END] [dur/TIMESLOT_DURATION] [t/TAG]…​` | `add-appt pt/1 dr/1 at/2021-01-01 00:00 to/2021-01-01 01:30 t/severe t/brainDamage`\u003cbr\u003e`add-appt pt/2 dr/2 at/2021-01-01 00:00 dur/1H 30M t/exhaustion`\u003cbr\u003e`add-appt pt/3 dr/3 at/NEXT MONDAY dur/1H 30M` |","lastModifiedDate":"2021-03-30"},{"lineNumber":465,"author":{"gitId":"Jacob-Pang"},"content":"| **clear-appt** | `clear-appt` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":466,"author":{"gitId":"Jacob-Pang"},"content":"| **delete-appt** | `delete-appt INDEX` | `delete-appt 2` |","lastModifiedDate":"2021-03-30"},{"lineNumber":467,"author":{"gitId":"Jacob-Pang"},"content":"| **edit-appt** | `edit-appt APPOINTMENT_INDEX [pt/PATIENT_INDEX] [dr/DOCTOR_INDEX] [at/TIMESLOT_START] [to/TIMESLOT_END] [dur/TIMESLOT_DURATION] [t/TAG]…​` | `edit-appt 1 pt/1 dr/1`\u003cbr\u003e`edit-appt 2 at/2021-05-08 09:00 dur/1H t/severe t/fever` |","lastModifiedDate":"2021-03-30"},{"lineNumber":468,"author":{"gitId":"Jacob-Pang"},"content":"| **find-appt** | `find [n/PATIENT KEYWORDS] [dr/DOCTOR_KEYWORDS] [d/DATETIME] [p/PHONE] [e/EMAIL] [a/ADDRESS_KEYWORDS] [t/TAG KEYWORDS]` | `find n/john alex`\u003cbr\u003e`find dr/Grey Who t/BrainSurgery` |","lastModifiedDate":"2021-03-30"},{"lineNumber":469,"author":{"gitId":"Jacob-Pang"},"content":"| **list-appt** | `list-appt` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":470,"author":{"gitId":"Jacob-Pang"},"content":"| **exit** | `exit` | |","lastModifiedDate":"2021-03-30"},{"lineNumber":471,"author":{"gitId":"Jacob-Pang"},"content":"| **help** | `help` | |","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"Jacob-Pang":84,"kwmiw":49,"onnwards":118,"pngsebastian":75,"-":117,"icytornado":28}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"onnwards"},"content":"    content: \"App-Ointment\";","lastModifiedDate":"2021-04-07"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"onnwards":1,"-":294}},{"path":"docs/diagrams/LogicClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor LOGIC_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Logic {","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package Parser {","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Interface Parser \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class XYZCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class CliSyntax","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class ParserUtil","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class ArgumentTokenizer","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"package Command {","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class XYZCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Interface Logic \u003c\u003cInterface\u003e\u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"package Model{","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"LogicManager .up.|\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"LogicManager --\u003e\"1\" AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"AddressBookParser .left.\u003e XYZCommandParser: creates \u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e XYZCommand : creates \u003e","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"XYZCommandParser ..|\u003e Parser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ArgumentTokenizer","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"ArgumentTokenizer .left.\u003e ArgumentMultimap","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e CliSyntax","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"CliSyntax ..\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"XYZCommandParser ..\u003e ParserUtil","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"ParserUtil .down.\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"ArgumentTokenizer .down.\u003e Prefix","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"XYZCommand -up-|\u003e Command","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"LogicManager .left.\u003e Command : executes \u003e","lastModifiedDate":"2019-07-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"LogicManager --\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Command .right.\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindPatientCommand, etc","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Logic ..\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"LogicManager .down.\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Command .up.\u003e CommandResult","lastModifiedDate":"2019-07-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult -[hidden]-\u003e Parser","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"kwmiw":1,"-":61}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"title: App-Ointment","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2021-02-28"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"[![codecov](https://codecov.io/gh/ay2021s2-cs2103-w17-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/ay2021s2-cs2103-w17-2/tp)","lastModifiedDate":"2021-02-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"**App-Ointment is an appointment management software for Receptionists of Medical Clinics**. While it has a GUI, most of the user interactions happen through the usage of a CLI (Command Line Interface).","lastModifiedDate":"2021-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"* If you are interested in using App-Ointment, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-02-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"onnwards":5,"pngsebastian":1,"-":14}},{"path":"docs/team/icytornado.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"---","lastModifiedDate":"2021-03-01"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"layout: page","lastModifiedDate":"2021-03-01"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"title: Zhang Peng\u0027s Project Portfolio Page","lastModifiedDate":"2021-03-01"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"---","lastModifiedDate":"2021-03-01"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"## Project: App-Ointment","lastModifiedDate":"2021-03-01"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-03-01"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-03-01"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"* **Code contributed**:","lastModifiedDate":"2021-03-01"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"* **Project management**:","lastModifiedDate":"2021-03-01"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"* **Documentation**:","lastModifiedDate":"2021-03-01"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"* **Community**:","lastModifiedDate":"2021-03-01"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-01"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"* **Tools**:","lastModifiedDate":"2021-03-01"}],"authorContributionMap":{"icytornado":20}},{"path":"docs/team/jacob-pang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"layout: page","lastModifiedDate":"2021-02-28"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"title: Jacob Pang\u0027s Project Portfolio Page","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"## Project: App-Ointment","lastModifiedDate":"2021-02-28"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-02-28"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-28"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"* **Code contributed**:","lastModifiedDate":"2021-02-28"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"* **Project management**:","lastModifiedDate":"2021-02-28"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"* **Documentation**:","lastModifiedDate":"2021-02-28"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"* **Community**:","lastModifiedDate":"2021-02-28"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"* **Tools**:","lastModifiedDate":"2021-02-28"}],"authorContributionMap":{"Jacob-Pang":20}},{"path":"docs/team/onnwards.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"---","lastModifiedDate":"2021-02-27"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"layout: page","lastModifiedDate":"2021-02-27"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"title: Onn Wei Sin\u0027s Project Portfolio Page","lastModifiedDate":"2021-02-27"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"---","lastModifiedDate":"2021-02-27"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"## Project: App-Ointment","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 19 kLoC.","lastModifiedDate":"2021-04-09"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-27"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"**Code contributed**: [RepoSense](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003donnwards)","lastModifiedDate":"2021-04-09"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"- Adaptation of code to rename all mentions of App name","lastModifiedDate":"2021-04-09"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"\u003cu\u003eFeatures Implemented\u003c/u\u003e: ","lastModifiedDate":"2021-04-09"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"1. Implementation of UUID field in `Person` classes","lastModifiedDate":"2021-04-09"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    - *Problem*:","lastModifiedDate":"2021-04-09"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        - Patient and Doctor were immutable Objects (From `Person` in AB-3, good code practice that we didn\u0027t want to change)","lastModifiedDate":"2021-04-09"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        - Edits to Patient and Doctor replaced the object in the model with a completely new object.","lastModifiedDate":"2021-04-09"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        - Since an `Appointment` contains a `Patient` and a `Doctor`, upon an edit to a `Patient` or `Doctor` instance, `Appointment` still held the old `Patient` and `Doctor` objects, and was unable to be updated.","lastModifiedDate":"2021-04-09"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    - *Solution*:","lastModifiedDate":"2021-04-09"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        - **Idea**: Implement a primary key/foreign key system so that appointments are able to refer to patients and doctors with the foreign key.","lastModifiedDate":"2021-04-09"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        - Created a `UUID` field in `Person` classes","lastModifiedDate":"2021-04-09"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        - Instead of holding a reference to a `Patient` or `Doctor` object, `Appointment` holds instead a reference to 2 `UUID` objects, one each for `Patient`\u0027s and `Doctor`\u0027s `UUID`.","lastModifiedDate":"2021-04-09"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        - `AppointmentDisplay` class was created (extending from `Appointment`) to not affect GUI","lastModifiedDate":"2021-04-09"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        - Use of static `java.util.Map` `PATIENT_MAP` and `DOCTOR_MAP` to obtain Person `Name` from `UUID`","lastModifiedDate":"2021-04-09"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"2. Closest Command Feature","lastModifiedDate":"2021-04-09"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    - Use of Levenshtein distance algorithm with dynamic programming (reused)","lastModifiedDate":"2021-04-09"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    - to calculate minimum edit distance from an invalid command entered by user to known commands","lastModifiedDate":"2021-04-09"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    - The known command with the lowest minimum edit distance will be displayed to the user as a prompt.","lastModifiedDate":"2021-04-09"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"3. List features","lastModifiedDate":"2021-04-09"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    - modified the original `list` to `list-appt`, and added `list-patient` and `list-doctor` to list patients and doctors respectively. Also added tests for these commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"4. Clear features","lastModifiedDate":"2021-04-09"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    - modified the original `clear` to `clear-appt` and added `clear-patient` and `clear-doctor` to clear patient and doctor records respectively. Also added tests for these commands.","lastModifiedDate":"2021-04-09"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"**Documentation**:","lastModifiedDate":"2021-04-09"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"Contributed to team sections of UG/DG:","lastModifiedDate":"2021-04-09"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"- Entire Adaptation of UG/DG to remove all mentions of AB-3 (Updated all links, product names in UG/DG, Ui picures, AB-3 features removed in UG)","lastModifiedDate":"2021-04-09"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"- Added to DG on behalf of team: Target User Profile, Value Proposition, Constraints, Non-Functional/Technical/Performance/Quality/ Requirements, Glossary","lastModifiedDate":"2021-04-09"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-09"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"**Project management and Team Tasks**:","lastModifiedDate":"2021-04-09"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"- Set up GitHub Organisation","lastModifiedDate":"2021-04-09"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"- Set up GitHub Team Repo","lastModifiedDate":"2021-04-09"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"- Set up Grade, Issue Tracker, GitHub Actions, GitHub Pages, Branch Protection Rules","lastModifiedDate":"2021-04-09"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"- Created, closed, and managed release for all milestones (v1.1, v1.2, v1.3)","lastModifiedDate":"2021-04-09"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"- Authored 35 issues (Out of 36 issues authored by team)","lastModifiedDate":"2021-04-09"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"- Recorded all feature demos (v1.2, v1.3)","lastModifiedDate":"2021-04-09"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"- Made sure every single item on tP team progress dashboard was done by the the day before tutorial deadline","lastModifiedDate":"2021-04-09"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"**Community**:","lastModifiedDate":"2021-04-09"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"- Reviewed **all** PRs to the team repo that were not:","lastModifiedDate":"2021-04-09"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    1. Authored by me.","lastModifiedDate":"2021-04-09"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    2. Individual tP progress (tutorial)","lastModifiedDate":"2021-04-09"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    3. Closed before merging","lastModifiedDate":"2021-04-09"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"    - A total of 33 PRs reviewed: ([#19](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/19), [#20](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/20), [#23](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/23), [#25](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/25), [#27](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/27), [#28](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/28), [#31](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/31), [#32](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/32), [#41](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/41), [#47](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/47), [#48](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/48), [#49](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/49), [#50](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/50), [#51](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/51), [#54](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/54), [#55](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/55), [#63](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/63), [#67](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/67), [#70](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/70), [#71](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/71), [#72](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/72), [#73](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/73), [#74](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/74), [#78](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/78), [#81](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/81), [#83](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/83), [#88](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/88), [#89](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/89), [#146](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/146), [#147](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/147), [#150](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/150), [#151](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/151), [#152](https://github.com/AY2021S2-CS2103-W17-2/tp/pull/152))","lastModifiedDate":"2021-04-09"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    - A total of 104 comments on peers\u0027 PRs","lastModifiedDate":"2021-04-09"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"    - Reviews were given at most within 2 days, usually within a day, from opening of a PR","lastModifiedDate":"2021-04-09"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"- 5 Comments in forums about checkstyle and bugfixes for students\u0027 code outside of the team","lastModifiedDate":"2021-04-09"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"- 15 Bugs reported in PE Dry Run","lastModifiedDate":"2021-04-09"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"onnwards":63}},{"path":"docs/team/pngsebastian.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"layout: page","lastModifiedDate":"2021-02-28"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"title: Png Zheng Jie, Sebastian\u0027s Project Portfolio Page","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"## Project: App-Ointment","lastModifiedDate":"2021-02-28"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2021-02-28"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2021-02-28"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"* **Code contributed**:","lastModifiedDate":"2021-02-28"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"* **Project management**:","lastModifiedDate":"2021-02-28"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"* **Documentation**:","lastModifiedDate":"2021-02-28"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"* **Community**:","lastModifiedDate":"2021-02-28"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"* **Tools**:","lastModifiedDate":"2021-02-28"}],"authorContributionMap":{"pngsebastian":20}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \"","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe).","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"Jacob-Pang"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/PatientAddressBook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2021-03-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-20"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"Jacob-Pang":3,"-":391}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base.","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"            storage.saveAddressBook(model.getPatientRecords());","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it.","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"       model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2021-03-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"       persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Jacob-Pang":2,"onnwards":1,"-":247}},{"path":"src/main/java/seedu/address/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2018-04-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"onnwards":2,"-":62}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoctorNotInDoctorRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentPatientNotInPatientRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.AppointmentScheduleStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonAppointmentScheduleStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonDoctorRecordsStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonPatientRecordsStorage;","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 1, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing App-Ointment ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBookStorage\u003cPatient\u003e patientRecordsStorage \u003d new JsonPatientRecordsStorage(","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"                userPrefs.getPatientRecordsFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBookStorage\u003cDoctor\u003e doctorRecordsStorage \u003d new JsonDoctorRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                userPrefs.getDoctorRecordsFilePath());","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage(","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"                userPrefs.getAppointmentScheduleFilePath());","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        storage \u003d new StorageManager(patientRecordsStorage, doctorRecordsStorage, appointmentScheduleStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"                userPrefsStorage);","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s appointment schedule, patient records and","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     * The data from the sample patient records will be used instead if {@code storage}\u0027s patient records are not","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * found, or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s patient","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     * records.","lastModifiedDate":"2021-03-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        // passing storage as a parameter ensures that storage is initialised","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        // separately initialise them to avoid the case where compiler initialises","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"        // appointment schedule before patient/doctor records","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"        ReadOnlyAddressBook\u003cPatient\u003e patientRecords \u003d initPatientRecords(storage);","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"        ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords \u003d initDoctorRecords(storage);","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        ReadOnlyAppointmentSchedule appointmentSchedule \u003d","lastModifiedDate":"2021-04-07"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"                initAppointmentSchedule(storage, patientRecords, doctorRecords);","lastModifiedDate":"2021-04-07"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"        return new ModelManager(patientRecords, doctorRecords, appointmentSchedule, userPrefs);","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    private ReadOnlyAddressBook\u003cPatient\u003e initPatientRecords(Storage storage) {","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e patientRecordsOptional;","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAddressBook\u003cPatient\u003e patientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecordsOptional \u003d storage.readPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"            if (patientRecordsOptional.isEmpty()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"                LOGGER.info(\"Patient data file not found. Will be starting with a sample Patient Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d patientRecordsOptional.orElseGet(SampleDataUtil::getSamplePatientRecords);","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Patient data file not in the correct format. Will be starting with an empty\"","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"                    + \" Patient Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Problem while reading from the patient data file. Will be starting with an empty\"","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"                    + \" Patient Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecords;","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    private ReadOnlyAddressBook\u003cDoctor\u003e initDoctorRecords(Storage storage) {","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cReadOnlyAddressBook\u003cDoctor\u003e\u003e doctorRecordsOptional;","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        try {","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"            doctorRecordsOptional \u003d storage.readDoctorRecords();","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"            if (doctorRecordsOptional.isEmpty()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"                LOGGER.info(\"Doctor data file not found. Will be starting with a sample Doctor Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"            }","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"            doctorRecords \u003d doctorRecordsOptional.orElseGet(SampleDataUtil::getSampleDoctorRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"            LOGGER.warning(\"Doctor data file not in the correct format. Will be starting with an empty\"","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"                    + \" Doctor Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"            doctorRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"            LOGGER.warning(\"Problem while reading from the doctor data file. Will be starting with an empty\"","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"                    + \" Doctor Record\");","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"            doctorRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"    private ReadOnlyAppointmentSchedule initAppointmentSchedule (Storage storage,","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"            ReadOnlyAddressBook\u003cPatient\u003e patientRecords, ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords) {","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cReadOnlyAppointmentSchedule\u003e appointmentScheduleOptional;","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAppointmentSchedule appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        // On exception or non existent data file, initialize with empty Appointment Schedule","lastModifiedDate":"2021-03-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentScheduleOptional \u003d storage.readAppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"            if (appointmentScheduleOptional.isEmpty()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"                LOGGER.info(\"Appointment data file not found. Will be starting with a sample Appointment Schedule\");","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"onnwards"},"content":"            appointmentSchedule \u003d appointmentScheduleOptional.orElseGet(SampleDataUtil::getSampleAppointmentSchedule);","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"            appointmentSchedule.checkAppointmentScheduleValidity(patientRecords, doctorRecords);","lastModifiedDate":"2021-04-07"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Appointment data file not in the correct format. Will be starting with an empty\"","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" Appointment Schedule\");","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Problem while reading from the appointment data file. Will be starting with an empty\"","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" Appointment Schedule\");","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":174,"author":{"gitId":"onnwards"},"content":"        } catch (AppointmentPatientNotInPatientRecordsException e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":175,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Some Patient data in Appointment data file does not correspond to a Patient \"","lastModifiedDate":"2021-04-07"},{"lineNumber":176,"author":{"gitId":"onnwards"},"content":"                    + \"in the Patient data file. Will be starting with an empty Appointment Schedule\");","lastModifiedDate":"2021-04-07"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-04-07"},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"        } catch (AppointmentDoctorNotInDoctorRecordsException e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":179,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Some Doctor data in Appointment data file does not correspond to a Doctor \"","lastModifiedDate":"2021-04-07"},{"lineNumber":180,"author":{"gitId":"onnwards"},"content":"                    + \"in the Doctor data file. Will be starting with an empty Appointment Schedule\");","lastModifiedDate":"2021-04-07"},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-04-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"            LOGGER.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2021-03-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":213,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2021-03-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":222,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2021-03-10"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":234,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":241,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2021-03-10"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":245,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Problem while reading from the file. Will be starting with an empty UserPrefs file.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":253,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2021-03-10"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"Starting App-Ointment \" + MainApp.VERSION);","lastModifiedDate":"2021-03-10"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping App-Ointment ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-10"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":271,"author":{"gitId":"onnwards"},"content":"            LOGGER.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2021-03-10"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":73,"onnwards":47,"-":154}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"onnwards":2,"-":110}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dCommand related messages\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPatient related messages\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_FORCE_DELETE_PATIENT_REQUIRED \u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"            \"The patient has existing appointments in appointment schedule.\"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"                    + \" Force delete command format required! \\n%1$s\";","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"            \"Patient records cannot be cleared until appointment schedule is cleared.\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"                    + \"Use the command \\\"clear-appt\\\" to clear the appointment schedule.\";","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dDoctor related messages\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_DOCTORS_LISTED_OVERVIEW \u003d \"%1$d doctors listed!\";","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX \u003d \"The doctor index provided is invalid\";","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_FORCE_DELETE_DOCTOR_REQUIRED \u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"            \"The doctor has existing appointments in appointment schedule.\"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"                    + \" Force delete command format required! \\n%1$s\";","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_CLEAR_APPOINTMENTS_BEFORE_DOCTORS_REQUIRED \u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"            \"Doctors records cannot be cleared until appointment schedule is cleared.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"                    + \"Use the command \\\"clear-appt\\\" to clear the appointment schedule.\";","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_DELETE_DOCTOR_SUCCESS \u003d \"Deleted Doctor: %1$s\";","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointment related messages\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_APPOINTMENTS_LISTED_OVERVIEW \u003d \"%1$d appointments listed!\";","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":1,"kwmiw":1,"onnwards":2,"pngsebastian":15,"-":10,"icytornado":8}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            LOGGER.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"            LOGGER.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"onnwards":3,"-":140}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"     * Returns the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"     * @see seedu.address.model.Model#getPatientRecords()","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 patient records file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    Path getPatientRecordsFilePath();","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DoctorRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     * @see seedu.address.model.Model#getDoctorRecords()","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords();","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns an unmodifiable view of the filtered list of doctors */","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 doctor records file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"    Path getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the AppointmentSchedule","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"     * @see seedu.address.model.Model#getAppointmentSchedule()","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAppointmentSchedule getAppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 appointment schedule file path.","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Jacob-Pang":37,"onnwards":2,"-":45,"icytornado":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.parser.UserInputParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    private final UserInputParser userInputParser;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        userInputParser \u003d new UserInputParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command Execution \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        Command command \u003d userInputParser.parseCommand(commandText);","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"            storage.savePatientRecords(model.getPatientRecords());","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            storage.saveDoctorRecords(model.getDoctorRecords());","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"            storage.saveAppointmentSchedule(model.getAppointmentSchedule());","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords() {","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getPatientRecordsFilePath();","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DoctorRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getDoctorRecords();","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"        return model.getFilteredDoctorList();","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getDoctorRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAppointmentSchedule getAppointmentSchedule() {","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getAppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2021-03-10"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jacob-Pang":43,"onnwards":5,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting App-Ointment as requested ...\";","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"onnwards":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/appointment/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_DURATION;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_END;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.AppointmentDisplay;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":" * Adds an appointment to the appointment schedule","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String COMMAND_WORD \u003d \"add-appt\";","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the appointment schedule \"","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"            + \"referencing the indexes in the displayed patient records and doctor records.\\n\"","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            + PREFIX_PATIENT + \"PATIENT INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"            + PREFIX_DOCTOR + \"DOCTOR INDEX (must be a positive integer)\"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_TIMESLOT_START + \"TIMESLOT START \"","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            + \"[\" + PREFIX_TIMESLOT_END + \"TIMESLOT END] \"","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"            + \"[\" + PREFIX_TIMESLOT_DURATION + \"TIMESLOT DURATION] \"","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_PATIENT + \"1 \"","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"            + PREFIX_DOCTOR + \"2 \"","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_TIMESLOT_START + \"2021-01-01 00:00 \"","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_TIMESLOT_DURATION + \"1H 30M \"","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_TAG + \"severe \"","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"            + PREFIX_TAG + \"brainDamage\";","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_APPOINTMENT_CONFLICT \u003d \"This appointment will result in conflicts \"","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            + \"in the appointment schedule\";","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    public final Index patientIndex;","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"    public final Index doctorIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    public final Timeslot timeslot;","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public final Set\u003cTag\u003e tagList;","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates an AddCommand to add the specified {@code Appointment}","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"    public AddAppointmentCommand(Index patientIndex, Index doctorIndex, Timeslot timeslot, Set\u003cTag\u003e tagList) {","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"        requireAllNonNull(patientIndex, doctorIndex, timeslot);","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-03-12"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"        this.doctorIndex \u003d doctorIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d timeslot;","lastModifiedDate":"2021-03-12"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-12"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-12"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e displayedPatientRecords \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        assert displayedPatientRecords !\u003d null : \"getFilteredPatientList method should not return null\";","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d displayedPatientRecords.size()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-12"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patient \u003d displayedPatientRecords.get(patientIndex.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"        UUID patientUuid \u003d patient.getUuid();","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"icytornado"},"content":"        List\u003cDoctor\u003e displayedDoctorRecords \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"icytornado"},"content":"        assert displayedDoctorRecords !\u003d null : \"getFilteredDoctorList method should not return null\";","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"icytornado"},"content":"        if (doctorIndex.getZeroBased() \u003e\u003d displayedDoctorRecords.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"icytornado"},"content":"        Doctor doctor \u003d displayedDoctorRecords.get(doctorIndex.getZeroBased());","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"        UUID doctorUuid \u003d doctor.getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        Appointment toAdd \u003d new Appointment(patientUuid, doctorUuid, timeslot, tagList);","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        if (model.hasConflictingAppointment(toAdd)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(MESSAGE_APPOINTMENT_CONFLICT);","lastModifiedDate":"2021-03-12"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2021-03-12"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"                new AppointmentDisplay(patient, doctor, timeslot, tagList)));","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-12"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-12"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-03-12"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 patientIndex.equals(((AddAppointmentCommand) other).patientIndex)","lastModifiedDate":"2021-03-12"},{"lineNumber":114,"author":{"gitId":"icytornado"},"content":"                \u0026\u0026 doctorIndex.equals(((AddAppointmentCommand) other).doctorIndex)","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 timeslot.equals(((AddAppointmentCommand) other).timeslot)","lastModifiedDate":"2021-03-12"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 tagList.equals(((AddAppointmentCommand) other).tagList));","lastModifiedDate":"2021-03-12"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"Jacob-Pang":89,"onnwards":14,"icytornado":16}},{"path":"src/main/java/seedu/address/logic/commands/appointment/ClearAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" * Clears the address book.","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"public class ClearAppointmentCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"clear-appt\";","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment Schedule has been cleared!\";","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        model.setAppointmentSchedule(new AppointmentSchedule());","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"onnwards":24}},{"path":"src/main/java/seedu/address/logic/commands/appointment/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-15"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":" * Deletes an appointment from the appointment schedule","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"    public static final String COMMAND_WORD \u003d \"delete-appt\";","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"            + \": Deletes the appointment identified by the index number used in the displayed appointment schedule.\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-15"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"        Appointment appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-15"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-15"},{"lineNumber":50,"author":{"gitId":"pngsebastian"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-15"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-15"},{"lineNumber":52,"author":{"gitId":"pngsebastian"},"content":"                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-03-15"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteAppointmentCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":55,"author":{"gitId":"pngsebastian"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"onnwards":4,"pngsebastian":51}},{"path":"src/main/java/seedu/address/logic/commands/appointment/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_DURATION;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_END;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.Duration;","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;","lastModifiedDate":"2021-04-06"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":" * Edits the details of an existing appointment in the appointment list.","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"public class EditAppointmentCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"edit-appt\";","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment identified \"","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"            + \"by the index number used in the displayed appointment list. \"","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"            + \"[\" + PREFIX_PATIENT + \"PATIENT_INDEX] \"","lastModifiedDate":"2021-04-06"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"            + \"[\" + PREFIX_DOCTOR + \"DOCTOR_INDEX] \"","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TIMESLOT_START + \"TIMESLOT START] \"","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TIMESLOT_END + \"TIMESLOT END] \"","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TIMESLOT_DURATION + \"TIMESLOT DURATION] \"","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2021-03-15"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"            + PREFIX_PATIENT + \"1 \"","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"            + PREFIX_DOCTOR + \"2 \"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TIMESLOT_START + \"2021-05-08 09:00 \"","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TIMESLOT_DURATION + \"1H 00M \"","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TAG + \"severe \"","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TAG + \"fever\";","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_APPOINTMENT_CONFLICT \u003d \"This appointment will result in conflicts.\";","lastModifiedDate":"2021-03-16"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"    private final Index index;","lastModifiedDate":"2021-03-15"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"icytornado"},"content":"     * @param index of the appointment in the filtered appointment list to edit","lastModifiedDate":"2021-03-15"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with","lastModifiedDate":"2021-03-13"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":71,"author":{"gitId":"icytornado"},"content":"    public EditAppointmentCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2021-03-15"},{"lineNumber":72,"author":{"gitId":"icytornado"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"icytornado"},"content":"        requireNonNull(editAppointmentDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"icytornado"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-15"},{"lineNumber":75,"author":{"gitId":"icytornado"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"icytornado"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"icytornado"},"content":"        // get the patient, doctor and appointment lists","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e displayedPatientRecords \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"icytornado"},"content":"        List\u003cDoctor\u003e displayedDoctorRecords \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-03-27"},{"lineNumber":84,"author":{"gitId":"icytornado"},"content":"        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2021-03-15"},{"lineNumber":85,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"icytornado"},"content":"        // check index","lastModifiedDate":"2021-03-16"},{"lineNumber":87,"author":{"gitId":"icytornado"},"content":"        if (index.getZeroBased() \u003e\u003d appointmentList.size()) {","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":90,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"icytornado"},"content":"        //get appointment to be edited","lastModifiedDate":"2021-03-16"},{"lineNumber":92,"author":{"gitId":"icytornado"},"content":"        Appointment appointmentToEdit \u003d appointmentList.get(index.getZeroBased());","lastModifiedDate":"2021-03-15"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        UUID patientUuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        UUID doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"        // check if patient index is present","lastModifiedDate":"2021-03-16"},{"lineNumber":97,"author":{"gitId":"icytornado"},"content":"        if (editAppointmentDescriptor.getPatientIndex().isPresent()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":98,"author":{"gitId":"icytornado"},"content":"            //check if patient index is valid","lastModifiedDate":"2021-03-16"},{"lineNumber":99,"author":{"gitId":"icytornado"},"content":"            if (editAppointmentDescriptor.patientIndex.getZeroBased() \u003e\u003d displayedPatientRecords.size()) {","lastModifiedDate":"2021-03-16"},{"lineNumber":100,"author":{"gitId":"icytornado"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-16"},{"lineNumber":101,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"icytornado"},"content":"            // assign patient","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"            patientUuid \u003d displayedPatientRecords.get(editAppointmentDescriptor.patientIndex.getZeroBased()).getUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"icytornado"},"content":"            // if patient index is not present","lastModifiedDate":"2021-03-16"},{"lineNumber":105,"author":{"gitId":"icytornado"},"content":"        } else {","lastModifiedDate":"2021-03-16"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"            patientUuid \u003d appointmentToEdit.getPatientUuid();","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":108,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"icytornado"},"content":"        // check if doctor index is present","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"icytornado"},"content":"        if (editAppointmentDescriptor.getDoctorIndex().isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"icytornado"},"content":"            //check if doctor index is valid","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"icytornado"},"content":"            if (editAppointmentDescriptor.doctorIndex.getZeroBased() \u003e\u003d displayedDoctorRecords.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"icytornado"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"icytornado"},"content":"            // assign doctor","lastModifiedDate":"2021-03-27"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"            doctorUuid \u003d displayedDoctorRecords.get(editAppointmentDescriptor.doctorIndex.getZeroBased()).getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"icytornado"},"content":"            // if doctor index is not present","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"icytornado"},"content":"        } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"            doctorUuid \u003d appointmentToEdit.getDoctorUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":120,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        // Timeslot","lastModifiedDate":"2021-04-06"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        Timeslot updatedTimeslot;","lastModifiedDate":"2021-04-06"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        LocalDateTime start \u003d (editAppointmentDescriptor.getStart().isPresent()) ? editAppointmentDescriptor.start","lastModifiedDate":"2021-04-06"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                : appointmentToEdit.getTimeslot().getStart();","lastModifiedDate":"2021-04-06"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"        try {","lastModifiedDate":"2021-04-06"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"            if (editAppointmentDescriptor.getEnd().isPresent()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"                updatedTimeslot \u003d new Timeslot(start, editAppointmentDescriptor.end);","lastModifiedDate":"2021-04-06"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"            } else if (editAppointmentDescriptor.getDuration().isPresent()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"                updatedTimeslot \u003d new Timeslot(start, editAppointmentDescriptor.duration);","lastModifiedDate":"2021-04-06"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"            } else {","lastModifiedDate":"2021-04-06"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"                updatedTimeslot \u003d new Timeslot(start, appointmentToEdit.getTimeslot().getEnd());","lastModifiedDate":"2021-04-06"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"            }","lastModifiedDate":"2021-04-06"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (NegativeOrZeroDurationException e) {","lastModifiedDate":"2021-04-06"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(Timeslot.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-04-06"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        // Tags","lastModifiedDate":"2021-04-06"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e updatedTags \u003d editAppointmentDescriptor.getTags().orElse(appointmentToEdit.getTags());","lastModifiedDate":"2021-04-06"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"        Appointment editedAppointment \u003d new Appointment(patientUuid, doctorUuid, updatedTimeslot, updatedTags);","lastModifiedDate":"2021-04-06"},{"lineNumber":141,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"        if (model.hasConflictingAppointmentExcludingTarget(appointmentToEdit, editedAppointment)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":143,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(MESSAGE_APPOINTMENT_CONFLICT);","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"icytornado"},"content":"        model.setAppointment(appointmentToEdit, editedAppointment);","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"icytornado"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":148,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));","lastModifiedDate":"2021-03-13"},{"lineNumber":149,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":150,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":151,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":152,"author":{"gitId":"icytornado"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-13"},{"lineNumber":153,"author":{"gitId":"icytornado"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-13"},{"lineNumber":154,"author":{"gitId":"icytornado"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":155,"author":{"gitId":"icytornado"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":156,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":157,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":158,"author":{"gitId":"icytornado"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-13"},{"lineNumber":159,"author":{"gitId":"icytornado"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":160,"author":{"gitId":"icytornado"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":161,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":162,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":163,"author":{"gitId":"icytornado"},"content":"        // state check","lastModifiedDate":"2021-03-13"},{"lineNumber":164,"author":{"gitId":"icytornado"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"icytornado"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-15"},{"lineNumber":166,"author":{"gitId":"icytornado"},"content":"                \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":167,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":168,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":169,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":170,"author":{"gitId":"icytornado"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-13"},{"lineNumber":171,"author":{"gitId":"icytornado"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2021-03-13"},{"lineNumber":172,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":173,"author":{"gitId":"icytornado"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2021-03-13"},{"lineNumber":174,"author":{"gitId":"icytornado"},"content":"        private Index patientIndex;","lastModifiedDate":"2021-03-13"},{"lineNumber":175,"author":{"gitId":"icytornado"},"content":"        private Index doctorIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"        private LocalDateTime start;","lastModifiedDate":"2021-04-06"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"        private LocalDateTime end;","lastModifiedDate":"2021-04-06"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"        private Duration duration;","lastModifiedDate":"2021-04-06"},{"lineNumber":179,"author":{"gitId":"icytornado"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-13"},{"lineNumber":180,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":181,"author":{"gitId":"icytornado"},"content":"        public EditAppointmentDescriptor() {}","lastModifiedDate":"2021-03-13"},{"lineNumber":182,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":183,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-13"},{"lineNumber":184,"author":{"gitId":"icytornado"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-13"},{"lineNumber":185,"author":{"gitId":"icytornado"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-13"},{"lineNumber":186,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-13"},{"lineNumber":187,"author":{"gitId":"icytornado"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2021-03-13"},{"lineNumber":188,"author":{"gitId":"icytornado"},"content":"            setPatientIndex(toCopy.patientIndex);","lastModifiedDate":"2021-03-13"},{"lineNumber":189,"author":{"gitId":"icytornado"},"content":"            setDoctorIndex(toCopy.doctorIndex);","lastModifiedDate":"2021-03-27"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"            setStart(toCopy.start);","lastModifiedDate":"2021-04-06"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"            setEnd(toCopy.end);","lastModifiedDate":"2021-04-06"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"            setDuration(toCopy.duration);","lastModifiedDate":"2021-04-06"},{"lineNumber":193,"author":{"gitId":"icytornado"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-03-13"},{"lineNumber":194,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":195,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":196,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-13"},{"lineNumber":197,"author":{"gitId":"icytornado"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-13"},{"lineNumber":198,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-13"},{"lineNumber":199,"author":{"gitId":"icytornado"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-13"},{"lineNumber":200,"author":{"gitId":"Jacob-Pang"},"content":"            return CollectionUtil.isAnyNonNull(patientIndex, doctorIndex, start, end, duration, tags);","lastModifiedDate":"2021-04-06"},{"lineNumber":201,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":202,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":203,"author":{"gitId":"icytornado"},"content":"        public void setPatientIndex(Index patientIndex) {","lastModifiedDate":"2021-03-13"},{"lineNumber":204,"author":{"gitId":"icytornado"},"content":"            this.patientIndex \u003d patientIndex;","lastModifiedDate":"2021-03-13"},{"lineNumber":205,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":206,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":207,"author":{"gitId":"icytornado"},"content":"        public Optional\u003cIndex\u003e getPatientIndex() {","lastModifiedDate":"2021-03-13"},{"lineNumber":208,"author":{"gitId":"icytornado"},"content":"            return Optional.ofNullable(patientIndex);","lastModifiedDate":"2021-03-13"},{"lineNumber":209,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":210,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":211,"author":{"gitId":"icytornado"},"content":"        public void setDoctorIndex(Index doctorIndex) {","lastModifiedDate":"2021-03-27"},{"lineNumber":212,"author":{"gitId":"icytornado"},"content":"            this.doctorIndex \u003d doctorIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":213,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":214,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":215,"author":{"gitId":"icytornado"},"content":"        public Optional\u003cIndex\u003e getDoctorIndex() {","lastModifiedDate":"2021-03-27"},{"lineNumber":216,"author":{"gitId":"icytornado"},"content":"            return Optional.ofNullable(doctorIndex);","lastModifiedDate":"2021-03-27"},{"lineNumber":217,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":218,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"        public void setStart(LocalDateTime start) {","lastModifiedDate":"2021-04-06"},{"lineNumber":220,"author":{"gitId":"Jacob-Pang"},"content":"            this.start \u003d start;","lastModifiedDate":"2021-04-06"},{"lineNumber":221,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":222,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"        public Optional\u003cLocalDateTime\u003e getStart() {","lastModifiedDate":"2021-04-06"},{"lineNumber":224,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.ofNullable(start);","lastModifiedDate":"2021-04-06"},{"lineNumber":225,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":226,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"        public void setEnd(LocalDateTime end) {","lastModifiedDate":"2021-04-06"},{"lineNumber":228,"author":{"gitId":"Jacob-Pang"},"content":"            this.end \u003d end;","lastModifiedDate":"2021-04-06"},{"lineNumber":229,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":230,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":231,"author":{"gitId":"Jacob-Pang"},"content":"        public Optional\u003cLocalDateTime\u003e getEnd() {","lastModifiedDate":"2021-04-06"},{"lineNumber":232,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.ofNullable(end);","lastModifiedDate":"2021-04-06"},{"lineNumber":233,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":234,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":235,"author":{"gitId":"Jacob-Pang"},"content":"        public void setDuration(Duration duration) {","lastModifiedDate":"2021-04-06"},{"lineNumber":236,"author":{"gitId":"Jacob-Pang"},"content":"            this.duration \u003d duration;","lastModifiedDate":"2021-04-06"},{"lineNumber":237,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":238,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":239,"author":{"gitId":"Jacob-Pang"},"content":"        public Optional\u003cDuration\u003e getDuration() {","lastModifiedDate":"2021-04-06"},{"lineNumber":240,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.ofNullable(duration);","lastModifiedDate":"2021-04-06"},{"lineNumber":241,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":242,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":243,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-13"},{"lineNumber":244,"author":{"gitId":"icytornado"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-03-13"},{"lineNumber":245,"author":{"gitId":"icytornado"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-13"},{"lineNumber":246,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-13"},{"lineNumber":247,"author":{"gitId":"icytornado"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-13"},{"lineNumber":248,"author":{"gitId":"icytornado"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-13"},{"lineNumber":249,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":250,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":251,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-13"},{"lineNumber":252,"author":{"gitId":"icytornado"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-13"},{"lineNumber":253,"author":{"gitId":"icytornado"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-13"},{"lineNumber":254,"author":{"gitId":"icytornado"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-03-13"},{"lineNumber":255,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-13"},{"lineNumber":256,"author":{"gitId":"icytornado"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-03-13"},{"lineNumber":257,"author":{"gitId":"icytornado"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-03-13"},{"lineNumber":258,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":259,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":260,"author":{"gitId":"icytornado"},"content":"        @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":261,"author":{"gitId":"icytornado"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-13"},{"lineNumber":262,"author":{"gitId":"icytornado"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-13"},{"lineNumber":263,"author":{"gitId":"icytornado"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":264,"author":{"gitId":"icytornado"},"content":"                return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":265,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":266,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":267,"author":{"gitId":"icytornado"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-13"},{"lineNumber":268,"author":{"gitId":"icytornado"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":269,"author":{"gitId":"icytornado"},"content":"                return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":270,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":271,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":272,"author":{"gitId":"icytornado"},"content":"            // state check","lastModifiedDate":"2021-03-13"},{"lineNumber":273,"author":{"gitId":"icytornado"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":274,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":275,"author":{"gitId":"icytornado"},"content":"            return getPatientIndex().equals(e.getPatientIndex())","lastModifiedDate":"2021-03-13"},{"lineNumber":276,"author":{"gitId":"icytornado"},"content":"                    \u0026\u0026 getDoctorIndex().equals(e.getDoctorIndex())","lastModifiedDate":"2021-03-27"},{"lineNumber":277,"author":{"gitId":"Jacob-Pang"},"content":"                    \u0026\u0026 getStart().equals(e.getStart())","lastModifiedDate":"2021-04-06"},{"lineNumber":278,"author":{"gitId":"Jacob-Pang"},"content":"                    \u0026\u0026 getEnd().equals(e.getEnd())","lastModifiedDate":"2021-04-06"},{"lineNumber":279,"author":{"gitId":"Jacob-Pang"},"content":"                    \u0026\u0026 getDuration().equals(e.getDuration())","lastModifiedDate":"2021-04-06"},{"lineNumber":280,"author":{"gitId":"icytornado"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-03-13"},{"lineNumber":281,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":282,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":283,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Jacob-Pang":57,"onnwards":11,"icytornado":215}},{"path":"src/main/java/seedu/address/logic/commands/appointment/FindAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-19"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.appointment.AppointmentContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":" * Finds and lists all appointments in the current Appointment Schedule","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":" * based on matching tags.","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"public class FindAppointmentCommand extends Command {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    public static final String COMMAND_WORD \u003d \"find-appt\";","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": \"","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"            + \"Finds all appointments from the appointment schedule \"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"            + \"in which patients, doctors, timeslots, or tags contain any of \"","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"            + \"the specified keywords (case-insensitive) and \"","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            + \"displays them as an indexed list.\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"            + \"Parameters: (Any one or more) \"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"            + PREFIX_PATIENT + \"PATIENT NAME \"","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"            + PREFIX_DOCTOR + \"DOCTOR \"","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"            + PREFIX_TIMESLOT_START + \"TIMESLOT START \"","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-04-07"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"            + PREFIX_TAG + \"brainDamage\";","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    private final AppointmentContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"    public FindAppointmentCommand(AppointmentContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        model.updateFilteredAppointmentList(predicate);","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                String.format(Messages.MESSAGE_APPOINTMENTS_LISTED_OVERVIEW,","lastModifiedDate":"2021-03-19"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                model.getFilteredAppointmentList().size()));","lastModifiedDate":"2021-03-19"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"                || (other instanceof FindAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 predicate.equals(((FindAppointmentCommand) other).predicate));","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"kwmiw":53,"onnwards":5}},{"path":"src/main/java/seedu/address/logic/commands/appointment/ListAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" * Lists all persons in the Appointment Schedule to the user.","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"public class ListAppointmentCommand extends Command {","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"list-appt\";","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Appointments\";","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"onnwards":26}},{"path":"src/main/java/seedu/address/logic/commands/doctor/AddDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":" * Adds a person to the address book.","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"public class AddDoctorCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"add-doctor\";","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a doctor to the doctor records. \"","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: \"","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"            + PREFIX_NAME + \"John \"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TAG + \"psychologist \"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"            + PREFIX_TAG + \"pharmacist\";","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New doctor added: %1$s\";","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"This doctor already exists in the doctor records\";","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"    private final Doctor toAdd;","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"     * Creates an AddCommand to add the specified {@code Doctor}","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"    public AddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"        toAdd \u003d doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"        if (model.hasDoctor(toAdd)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        if (model.hasConflictingUuid(toAdd.getUuid())) {","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"            Doctor newUuidDoctor \u003d toAdd;","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            while (model.hasConflictingUuid(newUuidDoctor.getUuid())) {","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                newUuidDoctor \u003d new Doctor(toAdd.getName(), toAdd.getTags());","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            model.addDoctor(newUuidDoctor);","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"        model.addDoctor(toAdd);","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"                || (other instanceof AddDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"                \u0026\u0026 toAdd.equals(((AddDoctorCommand) other).toAdd));","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"onnwards":9,"icytornado":60}},{"path":"src/main/java/seedu/address/logic/commands/doctor/ClearDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_APPOINTMENTS_BEFORE_DOCTORS_REQUIRED;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":" * Clears the address book.","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"public class ClearDoctorCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"clear-doctor\";","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Doctor records have been cleared!\";","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"        for (Doctor doctorToClear : lastShownList) {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"            if (model.hasDoctorInAppointmentSchedule(doctorToClear)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"                throw new CommandException(MESSAGE_CLEAR_APPOINTMENTS_BEFORE_DOCTORS_REQUIRED);","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        model.setDoctorRecords(new AddressBook\u003c\u003e());","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":1,"pngsebastian":15,"icytornado":21}},{"path":"src/main/java/seedu/address/logic/commands/doctor/DeleteDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"public class DeleteDoctorCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"delete-doctor\";","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"            + \": Deletes the doctor identified by the index number used in the displayed doctor records.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"    public static final String FORCE_DELETE_MESSAGE_USAGE \u003d COMMAND_WORD + \" --force\"","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"            + \": Deletes the doctor identified by the index number used in the displayed doctor records,\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"            + \"along with all the existing appointments associated with the person in the appointment schedule.\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"            + \"Example: \" + COMMAND_WORD + \" --force \" + \" 1\";","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"    private final Index targetIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"    private final boolean isForceDelete;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"     * Constructor: creates a DeleteDoctorCommand","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"     * @param targetIndex index of doctor to be deleted","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"     * @param isForceDelete true if force delete is required","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"    public DeleteDoctorCommand(Index targetIndex, boolean isForceDelete) {","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"        this.isForceDelete \u003d isForceDelete;","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"        Doctor doctorToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"        if (isForceDelete) {","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            model.deleteDoctorAppointments(doctorToDelete.getUuid());","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"        // checks if doctor has any existing appointments","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"        if (model.hasDoctorInAppointmentSchedule(doctorToDelete)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(String.format(","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"pngsebastian"},"content":"                    Messages.MESSAGE_FORCE_DELETE_DOCTOR_REQUIRED, FORCE_DELETE_MESSAGE_USAGE));","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"        model.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete));","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"icytornado"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"icytornado"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"icytornado"},"content":"                || (other instanceof DeleteDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"icytornado"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteDoctorCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"onnwards":1,"pngsebastian":14,"icytornado":62}},{"path":"src/main/java/seedu/address/logic/commands/doctor/EditDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DOCTORS;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":" * Edits the details of an existing person in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"public class EditDoctorCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"edit-doctor\";","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the doctor identified \"","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"            + \"by the index number used in the displayed doctor list. \"","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_EDIT_DOCTOR_SUCCESS \u003d \"Edited Doctor: %1$s\";","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"This Doctor already exists in the Doctor list.\";","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"    private final Index index;","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"    private final EditDoctorDescriptor editDoctorDescriptor;","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     * @param index of the person in the filtered doctor list to edit","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"     * @param editDoctorDescriptor details to edit the doctor with","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"    public EditDoctorCommand(Index index, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"        requireNonNull(editDoctorDescriptor);","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"        this.editDoctorDescriptor \u003d new EditDoctorDescriptor(editDoctorDescriptor);","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"        List\u003cDoctor\u003e lastShownList \u003d model.getFilteredDoctorList();","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"        Doctor doctorToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"        Doctor editedDoctor \u003d createEditedDoctor(doctorToEdit, editDoctorDescriptor);","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"icytornado"},"content":"        if (!doctorToEdit.isSamePerson(editedDoctor) \u0026\u0026 model.hasDoctor(editedDoctor)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"icytornado"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"icytornado"},"content":"        model.setDoctor(doctorToEdit, editedDoctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"icytornado"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_DOCTORS);","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor));","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":80,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"     * Creates and returns a {@code Doctor} with the details of {@code doctorToEdit}","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"     * edited with {@code editDoctorDescriptor}.","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":85,"author":{"gitId":"icytornado"},"content":"    private static Doctor createEditedDoctor(Doctor doctorToEdit, EditDoctorDescriptor editDoctorDescriptor) {","lastModifiedDate":"2021-03-27"},{"lineNumber":86,"author":{"gitId":"icytornado"},"content":"        assert doctorToEdit !\u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":87,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        UUID doctorUuid \u003d doctorToEdit.getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"icytornado"},"content":"        Name updatedName \u003d editDoctorDescriptor.getName().orElse(doctorToEdit.getName());","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"icytornado"},"content":"        Set\u003cTag\u003e updatedTags \u003d editDoctorDescriptor.getTags().orElse(doctorToEdit.getTags());","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"        return new Doctor(doctorUuid, updatedName, updatedTags);","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"icytornado"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"icytornado"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"icytornado"},"content":"            return true;","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"icytornado"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"icytornado"},"content":"        if (!(other instanceof EditDoctorCommand)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"icytornado"},"content":"            return false;","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"icytornado"},"content":"        // state check","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"icytornado"},"content":"        EditDoctorCommand e \u003d (EditDoctorCommand) other;","lastModifiedDate":"2021-03-27"},{"lineNumber":109,"author":{"gitId":"icytornado"},"content":"        return index.equals(e.index)","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"icytornado"},"content":"                \u0026\u0026 editDoctorDescriptor.equals(e.editDoctorDescriptor);","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"     * Stores the details to edit the doctor with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"     * corresponding field value of the doctor.","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"icytornado"},"content":"    public static class EditDoctorDescriptor {","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"icytornado"},"content":"        private Name name;","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"icytornado"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"icytornado"},"content":"        public EditDoctorDescriptor() {}","lastModifiedDate":"2021-03-27"},{"lineNumber":122,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"icytornado"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"icytornado"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"icytornado"},"content":"        public EditDoctorDescriptor(EditDoctorDescriptor toCopy) {","lastModifiedDate":"2021-03-27"},{"lineNumber":128,"author":{"gitId":"icytornado"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-03-27"},{"lineNumber":129,"author":{"gitId":"icytornado"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":133,"author":{"gitId":"icytornado"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2021-03-27"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"         * UUID is not checked since an edited doctor can have a different UUID,","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"         * since it may be automatically generated.","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":137,"author":{"gitId":"icytornado"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-27"},{"lineNumber":138,"author":{"gitId":"icytornado"},"content":"            return CollectionUtil.isAnyNonNull(name, tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":139,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":140,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"icytornado"},"content":"        public void setName(Name name) {","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"icytornado"},"content":"            this.name \u003d name;","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":145,"author":{"gitId":"icytornado"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"icytornado"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-27"},{"lineNumber":147,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":148,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":149,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":150,"author":{"gitId":"icytornado"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2021-03-27"},{"lineNumber":151,"author":{"gitId":"icytornado"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":153,"author":{"gitId":"icytornado"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":154,"author":{"gitId":"icytornado"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2021-03-27"},{"lineNumber":155,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":156,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":157,"author":{"gitId":"icytornado"},"content":"        /**","lastModifiedDate":"2021-03-27"},{"lineNumber":158,"author":{"gitId":"icytornado"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-27"},{"lineNumber":159,"author":{"gitId":"icytornado"},"content":"         * if modification is attempted.","lastModifiedDate":"2021-03-27"},{"lineNumber":160,"author":{"gitId":"icytornado"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2021-03-27"},{"lineNumber":161,"author":{"gitId":"icytornado"},"content":"         */","lastModifiedDate":"2021-03-27"},{"lineNumber":162,"author":{"gitId":"icytornado"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2021-03-27"},{"lineNumber":163,"author":{"gitId":"icytornado"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":164,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":165,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":166,"author":{"gitId":"icytornado"},"content":"        @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":167,"author":{"gitId":"icytornado"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":168,"author":{"gitId":"icytornado"},"content":"            // short circuit if same object","lastModifiedDate":"2021-03-27"},{"lineNumber":169,"author":{"gitId":"icytornado"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-27"},{"lineNumber":170,"author":{"gitId":"icytornado"},"content":"                return true;","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":173,"author":{"gitId":"icytornado"},"content":"            // instanceof handles nulls","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"icytornado"},"content":"            if (!(other instanceof EditDoctorDescriptor)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":175,"author":{"gitId":"icytornado"},"content":"                return false;","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"icytornado"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":177,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":178,"author":{"gitId":"icytornado"},"content":"            // state check","lastModifiedDate":"2021-03-27"},{"lineNumber":179,"author":{"gitId":"icytornado"},"content":"            EditDoctorDescriptor e \u003d (EditDoctorDescriptor) other;","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":181,"author":{"gitId":"icytornado"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2021-03-27"},{"lineNumber":182,"author":{"gitId":"icytornado"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2021-03-27"},{"lineNumber":183,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":184,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":185,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":12,"icytornado":172}},{"path":"src/main/java/seedu/address/logic/commands/doctor/FindDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class FindDoctorCommand extends Command {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"find-doctor\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all doctors whose names contain any of \"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public FindDoctorCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                String.format(Messages.MESSAGE_DOCTORS_LISTED_OVERVIEW, model.getFilteredDoctorList().size()));","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof FindDoctorCommand // instanceof handles nulls","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 predicate.equals(((FindDoctorCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":10,"onnwards":1,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/doctor/ListDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DOCTORS;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":" * Lists all persons in the doctor records to the user.","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"public class ListDoctorCommand extends Command {","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"list-doctor\";","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all doctors\";","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"        model.updateFilteredDoctorList(PREDICATE_SHOW_ALL_DOCTORS);","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"icytornado":25}},{"path":"src/main/java/seedu/address/logic/commands/patient/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"public class AddPatientCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String COMMAND_WORD \u003d \"add-patient\";","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patient records. \"","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the patient records\";","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    private final Patient toAdd;","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        if (model.hasConflictingUuid(toAdd.getUuid())) {","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"            Patient newUuidPatient \u003d toAdd;","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            while (model.hasConflictingUuid(newUuidPatient.getUuid())) {","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                newUuidPatient \u003d new Patient(toAdd.getName(), toAdd.getPhone(),","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                        toAdd.getEmail(), toAdd.getAddress(), toAdd.getTags());","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"            model.addPatient(newUuidPatient);","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        assert !model.hasConflictingUuid(toAdd.getUuid());","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));","lastModifiedDate":"2021-03-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":15,"onnwards":14,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/patient/ClearPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import java.util.List;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"public class ClearPatientCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"clear-patient\";","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patient records has been cleared!\";","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"        for (Patient patientToClear : lastShownList) {","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"            if (model.hasPatientInAppointmentSchedule(patientToClear)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"                throw new CommandException(MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        model.setPatientRecords(new AddressBook\u003c\u003e());","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":6,"pngsebastian":16,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/patient/DeletePatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"public class DeletePatientCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"    public static final String COMMAND_WORD \u003d \"delete-patient\";","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient records.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"    public static final String FORCE_DELETE_MESSAGE_USAGE \u003d COMMAND_WORD + \" --force\"","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient records,\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"            + \"along with all the existing appointments associated with the patient in the appointment schedule.\\n\"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"            + \"Example: \" + COMMAND_WORD + \" --force \" + \" 1\";","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"    private final boolean isForceDelete;","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"     * Constructor: creates a DeletePatientCommand","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"     * @param targetIndex index of patient to be deleted","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"     * @param isForceDelete true if force delete is required","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"    public DeletePatientCommand(Index targetIndex, boolean isForceDelete) {","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"        this.isForceDelete \u003d isForceDelete;","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"pngsebastian"},"content":"        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"        if (isForceDelete) {","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            model.deletePatientAppointments(patientToDelete.getUuid());","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"pngsebastian"},"content":"        // checks if patient has any existing appointments","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"pngsebastian"},"content":"        if (model.hasPatientInAppointmentSchedule(patientToDelete)) {","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"pngsebastian"},"content":"            throw new CommandException(String.format(","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                    Messages.MESSAGE_FORCE_DELETE_PATIENT_REQUIRED, FORCE_DELETE_MESSAGE_USAGE));","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"pngsebastian"},"content":"        return new CommandResult(String.format(Messages.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"pngsebastian"},"content":"                || (other instanceof DeletePatientCommand // instanceof handles nulls","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"pngsebastian"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePatientCommand) other).targetIndex)); // state check","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":4,"onnwards":5,"pngsebastian":29,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/patient/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":" * Edits the details of an existing patient in the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"public class EditPatientCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"    public static final String COMMAND_WORD \u003d \"edit-patient\";","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \"","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"            + \"by the index number used in the displayed patient list. \"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This Patient already exists in the Patient list.\";","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     * @param index of the person in the filtered patient list to edit","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"     * @param editPatientDescriptor details to edit the patient with","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));","lastModifiedDate":"2021-03-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"     * Creates and returns a {@code Patient} with the details of {@code patientToEdit}","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"     * edited with {@code editPatientDescriptor}.","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"        UUID patientUuid \u003d patientToEdit.getUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        Name updatedName \u003d editPatientDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        Phone updatedPhone \u003d editPatientDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        Email updatedEmail \u003d editPatientDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        Address updatedAddress \u003d editPatientDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPatientDescriptor.getTags().orElse(patientToEdit.getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"        return new Patient(patientUuid, updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"icytornado"},"content":"        if (!(other instanceof EditPatientCommand)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand e \u003d (EditPatientCommand) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will replace the","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        public EditPatientDescriptor() {}","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"         * UUID is not checked since an edited patient can have a different UUID,","lastModifiedDate":"2021-03-26"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"         * since it may be automatically generated.","lastModifiedDate":"2021-03-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2021-03-20"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Jacob-Pang":30,"onnwards":15,"-":181,"icytornado":6}},{"path":"src/main/java/seedu/address/logic/commands/patient/ListPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" * Lists all persons in the patient records to the user.","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"public class ListPatientCommand extends Command {","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"list-patient\";","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":2,"onnwards":7,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Prefix PREFIX_PATIENT \u003d new Prefix(\"pt/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Prefix PREFIX_DOCTOR \u003d new Prefix(\"dr/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Prefix PREFIX_TIMESLOT_START \u003d new Prefix(\"at/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Prefix PREFIX_TIMESLOT_END \u003d new Prefix(\"to/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Prefix PREFIX_TIMESLOT_DURATION \u003d new Prefix(\"dur/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"Jacob-Pang":8,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/TimeslotParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import java.time.DayOfWeek;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import java.time.temporal.TemporalAdjusters;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"import java.util.Date;","lastModifiedDate":"2021-04-07"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":" * Contains Utility methods used for parsing dates, time, and timeslots from raw user inputs","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"public class TimeslotParser {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_INVALID_DATE_TIME_FORMAT \u003d \"Invalid Date Time Format!\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            + \"Input format for date time parameters must be any of:\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"            + \"at/[DATE] [TIME]\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"            + \"\u003d\u003d\u003d\u003d Date \u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e DD-MM-YYYY\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e DD-MM-YY\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e DD/MM/YYYY\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e DD/MM/YY\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e YYYY-MM-DD\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e YY-MM-DD\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e next DAY\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e next month\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e next year\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"            + \"\u003d\u003d\u003d\u003d Time \u003d\u003d\u003d\u003d\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e hh:mm (In 24-Hour format)\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"            + \"\u003e hh:mmam/pm\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"            + \"Example:\\n\" + PREFIX_TIMESLOT_START","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"            + \"12/12/21 01:15pm or 12-12-21 13:15\";","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_INVALID_NEXT_DATE_TIME_FORMAT \u003d \"Invalid Date Time Format with next keyword!\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"            + \"Abbreviations for Days are not allowed.\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"            + \"Input format for next date time parameters must be:\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"            + \"at/next [DAY] [TIME] or next [DAY]\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"            + \"Example:\\n\" + PREFIX_TIMESLOT_START","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"            + \"next Wednesday 12:12pm or next Wednesday\";","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_INVALID_PAST_DATE_TIME_FORMAT \u003d \"Invalid date and time!\\n\"","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"            + \"This timeslot has already occurred in the past.\"","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"            + \"Please input future dates and times that that have yet to occur as of now.\";","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_INVALID_DURATION_FORMAT \u003d \"Input format for duration must be: \"","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"            + \"[%d UNIT...] where units are { H:hours, M:minutes }\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"            + \"Examples of duration inputs:\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"            + \"2H 30M - returns a duration of 2 hours, 30 minutes and 30 seconds\\n\"","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"            + \"150M   - returns a duration of 150 minutes\";","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"    private static final String PREFIX_DURATION_PARSE_SEQUENCE \u003d \"PT\";","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"    private static final String REMOVE_WHITESPACE_REGEX \u003d \"\\\\s+\";","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String userInput} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"     * Leading and trailing whitespaces will be trimmed. Raw User Input set to all Uppercase.","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"     * Multiple user Input formats are accepted and parsed accordingly, mainly in absolute","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"     * date formats or the next relevant LocalDateTime.","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException for the following scenarios:","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"     * - if the given {@code LocalDateTime} does not conform to the expected date time format.","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"     * - if the given {@code LocalDateTime} is a date time that has already occurred in the past as of now.","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"    public static LocalDateTime parseDateTime(String userInput) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"        String formattedInput \u003d userInput.toUpperCase().trim();","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"        boolean isOldDateTime \u003d false;","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"        if (formattedInput.contains(\"NEXT\")) {","lastModifiedDate":"2021-03-27"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"            return parseNextDateTime(formattedInput);","lastModifiedDate":"2021-03-27"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"        } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"            for (DateTimeFormat dateTimeFormat : DateTimeFormat.values()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"                try {","lastModifiedDate":"2021-03-27"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"                    LocalDateTime timeslotInput \u003d LocalDateTime.parse(formattedInput,","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"                            dateTimeFormat.getDateTimeFormatter());","lastModifiedDate":"2021-04-07"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"                    if (timeslotInput.compareTo(LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES)) \u003c 0) {","lastModifiedDate":"2021-04-07"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"                        isOldDateTime \u003d true;","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"                        break;","lastModifiedDate":"2021-04-07"},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"                    }","lastModifiedDate":"2021-04-07"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"                    return timeslotInput;","lastModifiedDate":"2021-04-07"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"                    continue;","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"                }","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"            String messageUsage \u003d isOldDateTime ? MESSAGE_INVALID_PAST_DATE_TIME_FORMAT","lastModifiedDate":"2021-04-07"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"                    : MESSAGE_INVALID_DATE_TIME_FORMAT;","lastModifiedDate":"2021-04-07"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(messageUsage);","lastModifiedDate":"2021-04-07"},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String userInput} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-27"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"     * Parses user input containing the next day, month or year. Time can remain the same or","lastModifiedDate":"2021-03-27"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"     * revised into a new one as per user input.","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException if the given {@code LocalDateTime} does not","lastModifiedDate":"2021-04-07"},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":"     * conform to the expected date time format.","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"    public static LocalDateTime parseNextDateTime(String userInput) throws ParseException {","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"        final Pattern nextDateTimeFormat \u003d Pattern.compile(\"(?\u003cnextKeyword\u003e\\\\w+)\\\\s(?\u003cnextDatePeriod\u003e\\\\w+)\"","lastModifiedDate":"2021-04-07"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"                        + \"\\\\s(?\u003ctimeInput\u003e.*)\", Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"        final Matcher nextDateTimeMatcher \u003d nextDateTimeFormat.matcher(userInput);","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"        //for inputs with no user-specified time","lastModifiedDate":"2021-04-07"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":"        final Pattern nextDateFormat \u003d Pattern.compile(\"(?\u003cnextKeyword\u003e\\\\w+)\\\\s(?\u003cnextDatePeriod\u003e\\\\w+)\",","lastModifiedDate":"2021-04-07"},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":"                Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-04-07"},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":"        final Matcher nextDateMatcher \u003d nextDateFormat.matcher(userInput);","lastModifiedDate":"2021-04-07"},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"            LocalDateTime parsedDate \u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":"            if (nextDateTimeMatcher.matches()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"                final String nextDatePeriod \u003d nextDateTimeMatcher.group(\"nextDatePeriod\");","lastModifiedDate":"2021-04-07"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":"                final String timeInput \u003d nextDateTimeMatcher.group(\"timeInput\").trim();","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":"                parsedDate \u003d parseNextDate(nextDatePeriod);","lastModifiedDate":"2021-04-07"},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"                int[] hoursMinutesArray \u003d parseNextTime(timeInput);","lastModifiedDate":"2021-04-07"},{"lineNumber":126,"author":{"gitId":"kwmiw"},"content":"                parsedDate \u003d parsedDate.withHour(hoursMinutesArray[0]);","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"kwmiw"},"content":"                parsedDate \u003d parsedDate.withMinute(hoursMinutesArray[1]);","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"            } else if (nextDateMatcher.matches()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"                final String nextDatePeriod \u003d nextDateMatcher.group(\"nextDatePeriod\");","lastModifiedDate":"2021-04-07"},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"                parsedDate \u003d parseNextDate(nextDatePeriod);","lastModifiedDate":"2021-04-07"},{"lineNumber":132,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"kwmiw"},"content":"            } else {","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"kwmiw"},"content":"                throw new ParseException(MESSAGE_INVALID_DATE_TIME_FORMAT);","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"kwmiw"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":136,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"kwmiw"},"content":"            return parsedDate;","lastModifiedDate":"2021-03-27"},{"lineNumber":138,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":139,"author":{"gitId":"kwmiw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":140,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(MESSAGE_INVALID_NEXT_DATE_TIME_FORMAT);","lastModifiedDate":"2021-04-07"},{"lineNumber":141,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":142,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":144,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":145,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String nextDatePeriod} into a {@code LocalDateTime}.","lastModifiedDate":"2021-04-07"},{"lineNumber":146,"author":{"gitId":"kwmiw"},"content":"     * Adjusts the date in current LocalDateTime based on user next date input.","lastModifiedDate":"2021-04-07"},{"lineNumber":147,"author":{"gitId":"kwmiw"},"content":"     * Flips {@code isInvalidTime} if","lastModifiedDate":"2021-04-07"},{"lineNumber":148,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":149,"author":{"gitId":"kwmiw"},"content":"    public static LocalDateTime parseNextDate(String nextDatePeriod) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":150,"author":{"gitId":"kwmiw"},"content":"        LocalDateTime currentDateTime \u003d LocalDateTime.now().withSecond(0).withNano(0);","lastModifiedDate":"2021-04-07"},{"lineNumber":151,"author":{"gitId":"kwmiw"},"content":"        LocalDateTime parsedDate \u003d null;","lastModifiedDate":"2021-04-07"},{"lineNumber":152,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":153,"author":{"gitId":"kwmiw"},"content":"        if (Arrays.stream(Day.values()).anyMatch(e -\u003e e.name().equals(nextDatePeriod))) {","lastModifiedDate":"2021-04-07"},{"lineNumber":154,"author":{"gitId":"kwmiw"},"content":"            parsedDate \u003d currentDateTime.with(TemporalAdjusters.next(DayOfWeek.valueOf(nextDatePeriod)));","lastModifiedDate":"2021-04-07"},{"lineNumber":155,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":156,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":157,"author":{"gitId":"kwmiw"},"content":"        if (nextDatePeriod.contains(\"MONTH\")) {","lastModifiedDate":"2021-04-07"},{"lineNumber":158,"author":{"gitId":"kwmiw"},"content":"            parsedDate \u003d currentDateTime.plusMonths(1);","lastModifiedDate":"2021-04-07"},{"lineNumber":159,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":160,"author":{"gitId":"kwmiw"},"content":"        if (nextDatePeriod.contains(\"YEAR\")) {","lastModifiedDate":"2021-04-07"},{"lineNumber":161,"author":{"gitId":"kwmiw"},"content":"            parsedDate \u003d currentDateTime.plusYears(1);","lastModifiedDate":"2021-04-07"},{"lineNumber":162,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":163,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":164,"author":{"gitId":"kwmiw"},"content":"        if (parsedDate \u003d\u003d null) {","lastModifiedDate":"2021-04-07"},{"lineNumber":165,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(MESSAGE_INVALID_NEXT_DATE_TIME_FORMAT);","lastModifiedDate":"2021-04-07"},{"lineNumber":166,"author":{"gitId":"kwmiw"},"content":"        } else {","lastModifiedDate":"2021-04-07"},{"lineNumber":167,"author":{"gitId":"kwmiw"},"content":"            return parsedDate;","lastModifiedDate":"2021-04-07"},{"lineNumber":168,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":169,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":170,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":172,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String timeInput} into a {@code LocalDateTime}.","lastModifiedDate":"2021-03-27"},{"lineNumber":173,"author":{"gitId":"kwmiw"},"content":"     * Adjusts the time in current LocalDateTime based on user time input.","lastModifiedDate":"2021-03-27"},{"lineNumber":174,"author":{"gitId":"kwmiw"},"content":"     * Accommodates both 24-clock or Meridian time format.","lastModifiedDate":"2021-03-28"},{"lineNumber":175,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":176,"author":{"gitId":"kwmiw"},"content":"    public static int[] parseNextTime(String timeInput) {","lastModifiedDate":"2021-04-07"},{"lineNumber":177,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"kwmiw"},"content":"        String revisedTimeInput \u003d (timeInput.contains(\"PM\") || timeInput.contains(\"AM\"))","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"kwmiw"},"content":"                ? removeMeridian(timeInput)","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"kwmiw"},"content":"                : timeInput;","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"kwmiw"},"content":"        String[] hoursMinutesRawArray \u003d revisedTimeInput.split(\":\");","lastModifiedDate":"2021-03-28"},{"lineNumber":183,"author":{"gitId":"kwmiw"},"content":"        int[] hoursMinutesIntegerArray \u003d Arrays.stream(hoursMinutesRawArray).mapToInt(Integer::parseInt).toArray();","lastModifiedDate":"2021-03-27"},{"lineNumber":184,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"kwmiw"},"content":"        if (timeInput.contains(\"PM\")) {","lastModifiedDate":"2021-03-27"},{"lineNumber":186,"author":{"gitId":"kwmiw"},"content":"            hoursMinutesIntegerArray[0] \u003d (hoursMinutesIntegerArray[0]) + 12;","lastModifiedDate":"2021-03-27"},{"lineNumber":187,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":188,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":189,"author":{"gitId":"kwmiw"},"content":"        if (timeInput.contains(\"AM\") \u0026\u0026 hoursMinutesIntegerArray[0] \u003d\u003d 12) {","lastModifiedDate":"2021-03-28"},{"lineNumber":190,"author":{"gitId":"kwmiw"},"content":"            hoursMinutesIntegerArray[0] \u003d 0;","lastModifiedDate":"2021-03-28"},{"lineNumber":191,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":192,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":193,"author":{"gitId":"kwmiw"},"content":"        return hoursMinutesIntegerArray;","lastModifiedDate":"2021-03-27"},{"lineNumber":194,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":195,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":196,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":197,"author":{"gitId":"kwmiw"},"content":"     * Removes Meridian format from a {@code String timeInput} to {@code String}.","lastModifiedDate":"2021-03-27"},{"lineNumber":198,"author":{"gitId":"kwmiw"},"content":"     * Gets rid of Meridian Format of \"AM\" and \"PM\" in raw user time input.","lastModifiedDate":"2021-03-27"},{"lineNumber":199,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":200,"author":{"gitId":"kwmiw"},"content":"    public static String removeMeridian(String timeInput) {","lastModifiedDate":"2021-03-27"},{"lineNumber":201,"author":{"gitId":"kwmiw"},"content":"        String timeSubString \u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":202,"author":{"gitId":"kwmiw"},"content":"        if ((timeInput !\u003d null) \u0026\u0026 (timeInput.length() \u003e 0)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":203,"author":{"gitId":"kwmiw"},"content":"            timeSubString \u003d timeInput.substring(0, timeInput.length() - 2);","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":205,"author":{"gitId":"kwmiw"},"content":"        return timeSubString;","lastModifiedDate":"2021-03-27"},{"lineNumber":206,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":207,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":208,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":209,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String duration} into a {@code Duration}.","lastModifiedDate":"2021-03-27"},{"lineNumber":210,"author":{"gitId":"kwmiw"},"content":"     * All whitespaces will be removed.","lastModifiedDate":"2021-03-27"},{"lineNumber":211,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":212,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException if the given {@code duration} does not","lastModifiedDate":"2021-03-27"},{"lineNumber":213,"author":{"gitId":"kwmiw"},"content":"     * conform to the expected duration format.","lastModifiedDate":"2021-03-27"},{"lineNumber":214,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":215,"author":{"gitId":"kwmiw"},"content":"    public static Duration parseDuration(String duration) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":216,"author":{"gitId":"kwmiw"},"content":"        requireNonNull(duration);","lastModifiedDate":"2021-03-27"},{"lineNumber":217,"author":{"gitId":"kwmiw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":218,"author":{"gitId":"kwmiw"},"content":"            return Duration.parse(PREFIX_DURATION_PARSE_SEQUENCE + duration.replaceAll(","lastModifiedDate":"2021-03-27"},{"lineNumber":219,"author":{"gitId":"kwmiw"},"content":"                    REMOVE_WHITESPACE_REGEX, \"\"));","lastModifiedDate":"2021-03-27"},{"lineNumber":220,"author":{"gitId":"kwmiw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":221,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(MESSAGE_INVALID_DURATION_FORMAT);","lastModifiedDate":"2021-03-27"},{"lineNumber":222,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":223,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":224,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":225,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":226,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String userInput} into a {@code Date}.","lastModifiedDate":"2021-04-07"},{"lineNumber":227,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":228,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException if the given {@code Date} does not conform to the expected date time format.","lastModifiedDate":"2021-04-07"},{"lineNumber":229,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":230,"author":{"gitId":"kwmiw"},"content":"    public static Date parseStandardDate(String userInput) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":231,"author":{"gitId":"kwmiw"},"content":"        for (StandardDateFormat standardDateFormat : StandardDateFormat.values()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":232,"author":{"gitId":"kwmiw"},"content":"            try {","lastModifiedDate":"2021-04-07"},{"lineNumber":233,"author":{"gitId":"kwmiw"},"content":"                SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(standardDateFormat.getDatePattern());","lastModifiedDate":"2021-04-07"},{"lineNumber":234,"author":{"gitId":"kwmiw"},"content":"                simpleDateFormat.setLenient(false);","lastModifiedDate":"2021-04-07"},{"lineNumber":235,"author":{"gitId":"kwmiw"},"content":"                return simpleDateFormat.parse(userInput);","lastModifiedDate":"2021-04-07"},{"lineNumber":236,"author":{"gitId":"kwmiw"},"content":"            } catch (java.text.ParseException e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":237,"author":{"gitId":"kwmiw"},"content":"                continue;","lastModifiedDate":"2021-04-07"},{"lineNumber":238,"author":{"gitId":"kwmiw"},"content":"            }","lastModifiedDate":"2021-04-07"},{"lineNumber":239,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":240,"author":{"gitId":"kwmiw"},"content":"        throw new ParseException(MESSAGE_INVALID_DATE_TIME_FORMAT);","lastModifiedDate":"2021-04-07"},{"lineNumber":241,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":242,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":243,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":244,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String userInput} in 12-Hour clock format into a {@code String} in 24-Hour clock format.","lastModifiedDate":"2021-04-07"},{"lineNumber":245,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":246,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException if the given {@code String} does not conform to the expected time format.","lastModifiedDate":"2021-04-07"},{"lineNumber":247,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":248,"author":{"gitId":"kwmiw"},"content":"    public static String parseStandardTime(String userInput) throws ParseException {","lastModifiedDate":"2021-04-07"},{"lineNumber":249,"author":{"gitId":"kwmiw"},"content":"        try {","lastModifiedDate":"2021-04-07"},{"lineNumber":250,"author":{"gitId":"kwmiw"},"content":"            SimpleDateFormat meridianFormat \u003d new SimpleDateFormat(\"hh:mma\");","lastModifiedDate":"2021-04-07"},{"lineNumber":251,"author":{"gitId":"kwmiw"},"content":"            SimpleDateFormat hourFormat \u003d new SimpleDateFormat(\"HH:mm\");","lastModifiedDate":"2021-04-07"},{"lineNumber":252,"author":{"gitId":"kwmiw"},"content":"            return hourFormat.format(meridianFormat.parse(userInput));","lastModifiedDate":"2021-04-07"},{"lineNumber":253,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":254,"author":{"gitId":"kwmiw"},"content":"        } catch (java.text.ParseException e) {","lastModifiedDate":"2021-04-07"},{"lineNumber":255,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_TIME_FORMAT);","lastModifiedDate":"2021-04-07"},{"lineNumber":256,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":257,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":258,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":259,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":260,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String start} and {@code String end} into a {@code Timeslot}.","lastModifiedDate":"2021-03-27"},{"lineNumber":261,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":262,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException for the following scenarios:","lastModifiedDate":"2021-03-27"},{"lineNumber":263,"author":{"gitId":"kwmiw"},"content":"     * - the given {@code start} or {@code end} does not conform to the expected date","lastModifiedDate":"2021-03-27"},{"lineNumber":264,"author":{"gitId":"kwmiw"},"content":"     * time format","lastModifiedDate":"2021-03-27"},{"lineNumber":265,"author":{"gitId":"kwmiw"},"content":"     * - the {@code LocalDateTime} represented by {@code end} is not strictly after","lastModifiedDate":"2021-03-27"},{"lineNumber":266,"author":{"gitId":"kwmiw"},"content":"     * {@code start}","lastModifiedDate":"2021-03-27"},{"lineNumber":267,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":268,"author":{"gitId":"kwmiw"},"content":"    public static Timeslot parseTimeslotByEnd(String start, String end) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":269,"author":{"gitId":"kwmiw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":270,"author":{"gitId":"kwmiw"},"content":"            return new Timeslot(parseDateTime(start), parseDateTime(end));","lastModifiedDate":"2021-03-27"},{"lineNumber":271,"author":{"gitId":"kwmiw"},"content":"        } catch (NegativeOrZeroDurationException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":272,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(Timeslot.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":273,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":274,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":275,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":276,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":277,"author":{"gitId":"kwmiw"},"content":"     * Parses a {@code String start} and {@code String duration} into a {@code Timeslot}.","lastModifiedDate":"2021-03-27"},{"lineNumber":278,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":279,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException for the following scenarios:","lastModifiedDate":"2021-03-27"},{"lineNumber":280,"author":{"gitId":"kwmiw"},"content":"     * - the given {@code start} does not conform to the expected date time format","lastModifiedDate":"2021-03-27"},{"lineNumber":281,"author":{"gitId":"kwmiw"},"content":"     * - the given {@code duration} does not conform to the expected duration format","lastModifiedDate":"2021-03-27"},{"lineNumber":282,"author":{"gitId":"kwmiw"},"content":"     * - the given {@code Duration} represented by {@code duration} is negative.","lastModifiedDate":"2021-03-27"},{"lineNumber":283,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":284,"author":{"gitId":"kwmiw"},"content":"    public static Timeslot parseTimeslotByDuration(String start, String duration) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":285,"author":{"gitId":"kwmiw"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":286,"author":{"gitId":"kwmiw"},"content":"            return new Timeslot(parseDateTime(start), parseDuration(duration));","lastModifiedDate":"2021-03-27"},{"lineNumber":287,"author":{"gitId":"kwmiw"},"content":"        } catch (NegativeOrZeroDurationException e) {","lastModifiedDate":"2021-03-27"},{"lineNumber":288,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(Timeslot.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":289,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":290,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":291,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-27"},{"lineNumber":292,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":293,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":294,"author":{"gitId":"kwmiw"},"content":" * This documents the Days of the Week recognised by the parser for \"next\" commands","lastModifiedDate":"2021-03-29"},{"lineNumber":295,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":296,"author":{"gitId":"kwmiw"},"content":"enum Day {","lastModifiedDate":"2021-03-27"},{"lineNumber":297,"author":{"gitId":"kwmiw"},"content":"    MONDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":298,"author":{"gitId":"kwmiw"},"content":"    TUESDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":299,"author":{"gitId":"kwmiw"},"content":"    WEDNESDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":300,"author":{"gitId":"kwmiw"},"content":"    THURSDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":301,"author":{"gitId":"kwmiw"},"content":"    FRIDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":302,"author":{"gitId":"kwmiw"},"content":"    SATURDAY,","lastModifiedDate":"2021-03-27"},{"lineNumber":303,"author":{"gitId":"kwmiw"},"content":"    SUNDAY","lastModifiedDate":"2021-03-27"},{"lineNumber":304,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-27"},{"lineNumber":305,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":306,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":307,"author":{"gitId":"kwmiw"},"content":" * This documents the Days of the Week recognised by the parser for \"next\" commands.","lastModifiedDate":"2021-03-29"},{"lineNumber":308,"author":{"gitId":"kwmiw"},"content":" * Includes formats for absolute datess and time in 24-Hour Clock and Meridian Clock.","lastModifiedDate":"2021-03-29"},{"lineNumber":309,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":310,"author":{"gitId":"kwmiw"},"content":"enum DateTimeFormat {","lastModifiedDate":"2021-03-29"},{"lineNumber":311,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YY_HR(\"dd/MM/yy HH:mm\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":312,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YY_MERIDIAN(\"dd/MM/yy hh:mma\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":313,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YYYY_HR(\"dd/MM/yyyy HH:mm\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":314,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YYYY_MERIDIAN(\"dd/MM/yyyy hh:mma\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":315,"author":{"gitId":"kwmiw"},"content":"    DD_DASH_MM_DASH_YY_HR(\"dd-MM-yy HH:mm\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":316,"author":{"gitId":"kwmiw"},"content":"    DD_DASH_MM_DASH_YY_MERIDIAN(\"dd-MM-yy hh:mma\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":317,"author":{"gitId":"kwmiw"},"content":"    DD_DASH_MM_DASH_YYYY_HR(\"dd-MM-yyyy HH:mm\"),","lastModifiedDate":"2021-03-29"},{"lineNumber":318,"author":{"gitId":"onnwards"},"content":"    DD_DASH_MM_DASH_YYYY_MERIDIAN(\"dd-MM-yyyy hh:mma\"),","lastModifiedDate":"2021-03-31"},{"lineNumber":319,"author":{"gitId":"kwmiw"},"content":"    YYYY_DASH_MM_DASH_DD_HR(\"yyyy-MM-dd HH:mm\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":320,"author":{"gitId":"kwmiw"},"content":"    YYYY_DASH_MM_DASH_DD_MERIDIAN(\"yyyy-MM-dd hh:mma\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":321,"author":{"gitId":"kwmiw"},"content":"    YY_DASH_MM_DASH_DD_HR(\"yy-MM-dd HH:mm\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":322,"author":{"gitId":"kwmiw"},"content":"    YY_DASH_MM_DASH_DD_MERIDIAN(\"yy-MM-dd hh:mma\");","lastModifiedDate":"2021-04-07"},{"lineNumber":323,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":324,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":325,"author":{"gitId":"kwmiw"},"content":"    private String dateTimePattern;","lastModifiedDate":"2021-03-29"},{"lineNumber":326,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":327,"author":{"gitId":"kwmiw"},"content":"    DateTimeFormat(String dateTimePattern) {","lastModifiedDate":"2021-04-07"},{"lineNumber":328,"author":{"gitId":"kwmiw"},"content":"        this.dateTimePattern \u003d dateTimePattern;","lastModifiedDate":"2021-03-29"},{"lineNumber":329,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":330,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":331,"author":{"gitId":"kwmiw"},"content":"    public DateTimeFormatter getDateTimeFormatter() {","lastModifiedDate":"2021-03-29"},{"lineNumber":332,"author":{"gitId":"kwmiw"},"content":"        return DateTimeFormatter.ofPattern(dateTimePattern);","lastModifiedDate":"2021-03-29"},{"lineNumber":333,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":334,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":335,"author":{"gitId":"kwmiw"},"content":"    public String getDateTimePattern() {","lastModifiedDate":"2021-03-29"},{"lineNumber":336,"author":{"gitId":"kwmiw"},"content":"        return dateTimePattern;","lastModifiedDate":"2021-03-29"},{"lineNumber":337,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":338,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-29"},{"lineNumber":339,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":340,"author":{"gitId":"kwmiw"},"content":"enum StandardDateFormat {","lastModifiedDate":"2021-04-07"},{"lineNumber":341,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YY(\"dd/MM/yy\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":342,"author":{"gitId":"kwmiw"},"content":"    DD_SLASH_MM_SLASH_YYYY(\"dd/MM/yyyy\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":343,"author":{"gitId":"kwmiw"},"content":"    DD_DASH_MM_DASH_YY(\"dd-MM-yy\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":344,"author":{"gitId":"kwmiw"},"content":"    DD_DASH_MM_DASH_YYYY(\"dd-MM-yyyy\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":345,"author":{"gitId":"kwmiw"},"content":"    YYYY_DASH_MM_DASH_DD(\"yyyy-MM-dd\"),","lastModifiedDate":"2021-04-07"},{"lineNumber":346,"author":{"gitId":"kwmiw"},"content":"    YY_DASH_MM_DASH_DD(\"yy-MM-dd\");","lastModifiedDate":"2021-04-07"},{"lineNumber":347,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":348,"author":{"gitId":"kwmiw"},"content":"    private String datePattern;","lastModifiedDate":"2021-04-07"},{"lineNumber":349,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":350,"author":{"gitId":"kwmiw"},"content":"    StandardDateFormat(String datePattern) {","lastModifiedDate":"2021-04-07"},{"lineNumber":351,"author":{"gitId":"kwmiw"},"content":"        this.datePattern \u003d datePattern;","lastModifiedDate":"2021-04-07"},{"lineNumber":352,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":353,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":354,"author":{"gitId":"kwmiw"},"content":"    public String getDatePattern() {","lastModifiedDate":"2021-04-07"},{"lineNumber":355,"author":{"gitId":"kwmiw"},"content":"        return datePattern;","lastModifiedDate":"2021-04-07"},{"lineNumber":356,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":357,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"kwmiw":356,"onnwards":1}},{"path":"src/main/java/seedu/address/logic/parser/UserInputParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.AddAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.ClearAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.EditAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.FindAppointmentCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.ListAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.AddDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.ClearDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.DeleteDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.FindDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.doctor.ListDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.ClearPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.DeletePatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.ListPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.appointment.AddAppointmentCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.appointment.DeleteAppointmentCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.appointment.EditAppointmentCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.appointment.FindAppointmentCommandParser;","lastModifiedDate":"2021-03-19"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.doctor.AddDoctorCommandParser;","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.doctor.DeleteDoctorCommandParser;","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.doctor.EditDoctorCommandParser;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.doctor.FindDoctorCommandParser;","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.AddPatientCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.DeletePatientCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.EditPatientCommandParser;","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.FindPatientCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.FindPatientCommandParser;","lastModifiedDate":"2021-03-19"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"import seedu.address.storage.InputCommandStorage;","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"public class UserInputParser {","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    private static final String CLOSEST_COMMAND_MESSAGE \u003d \"Invalid command! Perhaps you meant: \\n\\\"%s\\\"?\";","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"     * Used for storing user input in its raw form.","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"    private final InputCommandStorage inputCommandStorage \u003d new InputCommandStorage();","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"        //store userInput in inputCommandStorage","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"        inputCommandStorage.addInput(userInput);","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        switch (CommandWord.fromString(commandWord)) {","lastModifiedDate":"2021-03-30"},{"lineNumber":84,"author":{"gitId":"pngsebastian"},"content":"        // Appointment related commands","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"        case ADD_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        case CLEAR_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"            return new ClearAppointmentCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"        case DELETE_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"pngsebastian"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        case EDIT_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"pngsebastian"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"        case FIND_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"pngsebastian"},"content":"            return new FindAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"        case LIST_APPOINTMENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"            return new ListAppointmentCommand();","lastModifiedDate":"2021-03-16"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"pngsebastian"},"content":"        // Patient related commands","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"        case ADD_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"        case CLEAR_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"pngsebastian"},"content":"            return new ClearPatientCommand();","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        case DELETE_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"pngsebastian"},"content":"            return new DeletePatientCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        case EDIT_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"pngsebastian"},"content":"            return new EditPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"        case FIND_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"            return new FindPatientCommandParser().parse(arguments);","lastModifiedDate":"2021-03-17"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"        case LIST_PATIENT:","lastModifiedDate":"2021-03-30"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"            return new ListPatientCommand();","lastModifiedDate":"2021-03-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"        // Doctor related commands","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"        case ADD_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"            return new AddDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"        case CLEAR_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"            return new ClearDoctorCommand();","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"        case DELETE_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"            return new DeleteDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"        case EDIT_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"            return new EditDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"        case FIND_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"            return new FindDoctorCommandParser().parse(arguments);","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"        case LIST_DOCTOR:","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"            return new ListDoctorCommand();","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"        // Common Commands","lastModifiedDate":"2021-03-16"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"        case EXIT:","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"onnwards"},"content":"        case HELP:","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"            throw handleUnknownCommand(commandWord);","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":153,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":156,"author":{"gitId":"onnwards"},"content":"     * Wrapper method to handle an unknown command and returns a relevant ParseException.","lastModifiedDate":"2021-03-30"},{"lineNumber":157,"author":{"gitId":"onnwards"},"content":"     *","lastModifiedDate":"2021-03-30"},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"     * @param commandWord the command word which is not in {@link CommandWord#values()}","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"onnwards"},"content":"     * @return {@code ParseException} with the relevant message","lastModifiedDate":"2021-03-30"},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":161,"author":{"gitId":"onnwards"},"content":"    public ParseException handleUnknownCommand(String commandWord) {","lastModifiedDate":"2021-03-30"},{"lineNumber":162,"author":{"gitId":"onnwards"},"content":"        String closestCommand \u003d MinEditDistance.getClosestCommand(commandWord);","lastModifiedDate":"2021-03-30"},{"lineNumber":163,"author":{"gitId":"onnwards"},"content":"        if (closestCommand.equals(\"\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"            return new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2021-03-30"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":166,"author":{"gitId":"onnwards"},"content":"        return new ParseException(String.format(CLOSEST_COMMAND_MESSAGE, closestCommand));","lastModifiedDate":"2021-03-30"},{"lineNumber":167,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":168,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":169,"author":{"gitId":"onnwards"},"content":"    private static class MinEditDistance {","lastModifiedDate":"2021-03-30"},{"lineNumber":170,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":171,"author":{"gitId":"onnwards"},"content":"        private static final int MAX_EDIT_DISTANCE \u003d 10;","lastModifiedDate":"2021-03-30"},{"lineNumber":172,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":173,"author":{"gitId":"onnwards"},"content":"        /**","lastModifiedDate":"2021-03-30"},{"lineNumber":174,"author":{"gitId":"onnwards"},"content":"         * Compares the {@code testCommand} with the string representation of all {@code CommandWord}s","lastModifiedDate":"2021-03-30"},{"lineNumber":175,"author":{"gitId":"onnwards"},"content":"         * in {@link CommandWord#values()} and returns the closest {@code CommandWord} if the","lastModifiedDate":"2021-03-30"},{"lineNumber":176,"author":{"gitId":"onnwards"},"content":"         * minimum edit distance between the known {@code CommandWord} String and {@code testCommand}","lastModifiedDate":"2021-03-30"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":"         * is less than or equal to {@code MAX_EDIT_DISTANCE}.","lastModifiedDate":"2021-03-30"},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"         */","lastModifiedDate":"2021-03-30"},{"lineNumber":179,"author":{"gitId":"onnwards"},"content":"        public static String getClosestCommand(String testCommand) {","lastModifiedDate":"2021-03-30"},{"lineNumber":180,"author":{"gitId":"onnwards"},"content":"            return Stream.of(CommandWord.values())","lastModifiedDate":"2021-03-30"},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"                    .map(cw -\u003e getMinEditDistance(cw.getCommandWord().toLowerCase(), testCommand.toLowerCase()))","lastModifiedDate":"2021-03-30"},{"lineNumber":182,"author":{"gitId":"onnwards"},"content":"                    .min(new Comparator\u003cPair\u003cString, Integer\u003e\u003e() {","lastModifiedDate":"2021-03-30"},{"lineNumber":183,"author":{"gitId":"onnwards"},"content":"                        public int compare(Pair\u003cString, Integer\u003e pair1, Pair\u003cString, Integer\u003e pair2) {","lastModifiedDate":"2021-03-30"},{"lineNumber":184,"author":{"gitId":"onnwards"},"content":"                            if (pair1.getValue() \u003d\u003d pair2.getValue()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":185,"author":{"gitId":"onnwards"},"content":"                                return 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"                            } else if (pair1.getValue() \u003e pair2.getValue()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":187,"author":{"gitId":"onnwards"},"content":"                                return 1;","lastModifiedDate":"2021-03-30"},{"lineNumber":188,"author":{"gitId":"onnwards"},"content":"                            } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"                                return -1;","lastModifiedDate":"2021-03-30"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"                            }","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"                        }","lastModifiedDate":"2021-03-30"},{"lineNumber":192,"author":{"gitId":"onnwards"},"content":"                    })","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"                    .filter(pair -\u003e pair.getValue() \u003c\u003d MAX_EDIT_DISTANCE)","lastModifiedDate":"2021-03-30"},{"lineNumber":194,"author":{"gitId":"onnwards"},"content":"                    .map(pair -\u003e pair.getKey()).orElse(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"onnwards"},"content":"        /**","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"onnwards"},"content":"         * Calculates the minimum edit distance between 2 strings.","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"onnwards"},"content":"         *","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"onnwards"},"content":"         * @param knownCommand String that represents the known command String","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"onnwards"},"content":"         * @param unknownCommand String that represents the unknown command String","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"onnwards"},"content":"         * @return {@code Pair\u003cString, Integer\u003e}, a pair containing the known","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"         * command string and its corresponding minimum edit distance","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"onnwards"},"content":"         */","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"onnwards"},"content":"        private static Pair\u003cString, Integer\u003e getMinEditDistance(String knownCommand, String unknownCommand) {","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"onnwards"},"content":"            // terminate early if the minimum edit distance is confirmed to be more than MAX_EDIT_DISTANCE","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"onnwards"},"content":"            if (Math.abs(knownCommand.length() - unknownCommand.length()) \u003e MAX_EDIT_DISTANCE) {","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003c\u003e(knownCommand, MAX_EDIT_DISTANCE + 1);","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // @@author onnwards-reused","lastModifiedDate":"2021-03-30"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // minimum edit distance algorithm reused from","lastModifiedDate":"2021-03-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // https://www.geeksforgeeks.org/java-program-to-implement-levenshtein-distance-computing-algorithm/","lastModifiedDate":"2021-03-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            // with minor modifications","lastModifiedDate":"2021-03-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            int[][] minEditDistArr \u003d new int[knownCommand.length() + 1][unknownCommand.length() + 1];","lastModifiedDate":"2021-03-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            for (int i \u003d 0; i \u003c\u003d knownCommand.length(); i++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                for (int j \u003d 0; j \u003c\u003d unknownCommand.length(); j++) {","lastModifiedDate":"2021-03-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                    if (i \u003d\u003d 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                        minEditDistArr[i][j] \u003d j;","lastModifiedDate":"2021-03-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    } else if (j \u003d\u003d 0) {","lastModifiedDate":"2021-03-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                        minEditDistArr[i][j] \u003d i;","lastModifiedDate":"2021-03-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    } else {","lastModifiedDate":"2021-03-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                        minEditDistArr[i][j] \u003d Stream.of(","lastModifiedDate":"2021-03-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                            minEditDistArr[i - 1][j] + 1,","lastModifiedDate":"2021-03-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                            minEditDistArr[i][j - 1] + 1,","lastModifiedDate":"2021-03-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                            minEditDistArr[i - 1][j - 1]","lastModifiedDate":"2021-03-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                                    + (knownCommand.charAt(i - 1) \u003d\u003d unknownCommand.charAt(j - 1) ? 0 : 1)","lastModifiedDate":"2021-03-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                        )","lastModifiedDate":"2021-03-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                        .reduce(Integer.MAX_VALUE, Integer::min);","lastModifiedDate":"2021-03-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    }","lastModifiedDate":"2021-03-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return new Pair\u003c\u003e(knownCommand, minEditDistArr[knownCommand.length()][unknownCommand.length()]);","lastModifiedDate":"2021-03-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    enum CommandWord {","lastModifiedDate":"2021-03-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        // Appointment related commands","lastModifiedDate":"2021-03-30"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        ADD_APPOINTMENT(AddAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        CLEAR_APPOINTMENT(ClearAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        DELETE_APPOINTMENT(DeleteAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        EDIT_APPOINTMENT(EditAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        FIND_APPOINTMENT(FindAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        LIST_APPOINTMENT(ListAppointmentCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        // Patient related commands","lastModifiedDate":"2021-03-30"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        ADD_PATIENT(AddPatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        CLEAR_PATIENT(ClearPatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        DELETE_PATIENT(DeletePatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        EDIT_PATIENT(EditPatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        FIND_PATIENT(FindPatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        LIST_PATIENT(ListPatientCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        // Patient related commands","lastModifiedDate":"2021-03-30"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        ADD_DOCTOR(AddDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        CLEAR_DOCTOR(ClearDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        DELETE_DOCTOR(DeleteDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        EDIT_DOCTOR(EditDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        FIND_DOCTOR(FindDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        LIST_DOCTOR(ListDoctorCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        // Common Commands","lastModifiedDate":"2021-03-30"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        EXIT(ExitCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        HELP(HelpCommand.COMMAND_WORD),","lastModifiedDate":"2021-03-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        UNKNOWN(\"\");","lastModifiedDate":"2021-03-30"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        private final String commandWord;","lastModifiedDate":"2021-03-30"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        private CommandWord(String commandWord) {","lastModifiedDate":"2021-03-30"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            this.commandWord \u003d commandWord;","lastModifiedDate":"2021-03-30"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        public String getCommandWord() {","lastModifiedDate":"2021-03-30"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            return commandWord;","lastModifiedDate":"2021-03-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        public static CommandWord fromString(String commandWordString) {","lastModifiedDate":"2021-03-30"},{"lineNumber":278,"author":{"gitId":"-"},"content":"            return Stream.of(CommandWord.values())","lastModifiedDate":"2021-03-30"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                    .filter(cw -\u003e cw.commandWord.equals(commandWordString))","lastModifiedDate":"2021-03-30"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                    .findFirst()","lastModifiedDate":"2021-03-30"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                    .orElse(CommandWord.UNKNOWN);","lastModifiedDate":"2021-03-30"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":3,"kwmiw":12,"onnwards":137,"pngsebastian":12,"-":120}},{"path":"src/main/java/seedu/address/logic/parser/appointment/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_DURATION;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_END;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.AddAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.TimeslotParser;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"     * and returns an AddAppointmentCommand object for execution.","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATIENT, PREFIX_DOCTOR,","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"                PREFIX_TIMESLOT_START, PREFIX_TIMESLOT_END, PREFIX_TIMESLOT_DURATION, PREFIX_TAG);","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PATIENT, PREFIX_DOCTOR, PREFIX_TIMESLOT_START)","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"                || !areAnyPrefixesPresent(argMultimap, PREFIX_TIMESLOT_END, PREFIX_TIMESLOT_DURATION)","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        Index patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        Index doctorIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DOCTOR).get());","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        Timeslot timeslot \u003d (argMultimap.getValue(PREFIX_TIMESLOT_END).isPresent())","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"                ? TimeslotParser.parseTimeslotByEnd(argMultimap.getValue(PREFIX_TIMESLOT_START).get(),","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                        argMultimap.getValue(PREFIX_TIMESLOT_END).get())","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"                : TimeslotParser.parseTimeslotByDuration(argMultimap.getValue(PREFIX_TIMESLOT_START).get(),","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"                        argMultimap.getValue(PREFIX_TIMESLOT_DURATION).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return new AddAppointmentCommand(patientIndex, doctorIndex, timeslot, tagList);","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if any one of the prefixes is non-empty {@code Optional} values in the given","lastModifiedDate":"2021-03-12"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-12"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-12"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"Jacob-Pang":64,"kwmiw":8,"onnwards":2}},{"path":"src/main/java/seedu/address/logic/parser/appointment/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.DeleteAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-15"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object","lastModifiedDate":"2021-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-15"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2021-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-15"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-15"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2021-03-15"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"            return new DeleteAppointmentCommand(index);","lastModifiedDate":"2021-03-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-15"}],"authorContributionMap":{"onnwards":4,"pngsebastian":6,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/appointment/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_DURATION;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_END;","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-15"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.EditAppointmentCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.TimeslotParser;","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"     * Parses the given {@code String} of arguments in the context of the EditAppointmentCommand","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"     * and returns an EditAppointmentCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT, PREFIX_DOCTOR,","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"                        PREFIX_TIMESLOT_START, PREFIX_TIMESLOT_END, PREFIX_TIMESLOT_DURATION, PREFIX_TAG);","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"        Index index;","lastModifiedDate":"2021-03-15"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"        try {","lastModifiedDate":"2021-03-15"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-15"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-15"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT).isPresent()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"            editAppointmentDescriptor","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"                    .setPatientIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT).get()));","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        if (argMultimap.getValue(PREFIX_DOCTOR).isPresent()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            editAppointmentDescriptor","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                    .setDoctorIndex(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_DOCTOR).get()));","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        if (argMultimap.getValue(PREFIX_TIMESLOT_START).isPresent()) {","lastModifiedDate":"2021-04-06"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"            editAppointmentDescriptor","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"                    .setStart(TimeslotParser.parseDateTime(argMultimap.getValue(PREFIX_TIMESLOT_START).get()));","lastModifiedDate":"2021-04-06"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"        if (argMultimap.getValue(PREFIX_TIMESLOT_END).isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"            editAppointmentDescriptor","lastModifiedDate":"2021-04-06"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"                    .setEnd(TimeslotParser.parseDateTime(argMultimap.getValue(PREFIX_TIMESLOT_END).get()));","lastModifiedDate":"2021-04-06"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"        if (argMultimap.getValue(PREFIX_TIMESLOT_DURATION).isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"            editAppointmentDescriptor","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                    .setDuration(TimeslotParser.parseDuration(argMultimap.getValue(PREFIX_TIMESLOT_DURATION).get()));","lastModifiedDate":"2021-04-06"},{"lineNumber":72,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":73,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":74,"author":{"gitId":"icytornado"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAppointmentDescriptor::setTags);","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"icytornado"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"icytornado"},"content":"        return new EditAppointmentCommand(index, editAppointmentDescriptor);","lastModifiedDate":"2021-03-15"},{"lineNumber":81,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"icytornado"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"icytornado"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"icytornado"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":88,"author":{"gitId":"icytornado"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":89,"author":{"gitId":"icytornado"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-03-13"},{"lineNumber":90,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"icytornado"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":92,"author":{"gitId":"icytornado"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-13"},{"lineNumber":93,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":94,"author":{"gitId":"icytornado"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"icytornado"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"Jacob-Pang":11,"kwmiw":1,"onnwards":8,"icytornado":77}},{"path":"src/main/java/seedu/address/logic/parser/appointment/FindAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.appointment;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMESLOT_START;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import java.util.List;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.appointment.FindAppointmentCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.TimeslotParser;","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.appointment.AppointmentContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":" * Parses input arguments and creates a new FindAppointmentCommand object","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"public class FindAppointmentCommandParser implements Parser\u003cFindAppointmentCommand\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"     * Parses the given {@code String} of arguments in the context of the FindAppointmentCommand","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"     * and returns a FindAppointmentCommand object for execution.","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"    public FindAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-19"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATIENT, PREFIX_DOCTOR,","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"                PREFIX_TIMESLOT_START, PREFIX_TAG);","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        if (!areAnyPrefixesPresent(argMultimap, PREFIX_PATIENT, PREFIX_DOCTOR,","lastModifiedDate":"2021-04-07"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"                PREFIX_TIMESLOT_START, PREFIX_TAG)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        List\u003cString\u003e patientKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        List\u003cString\u003e doctorKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        List\u003cString\u003e timeStartKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        List\u003cString\u003e tagKeywords \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2021-03-19"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT).isPresent()) {","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"            Collections.addAll(patientKeywords, listKeywords(argMultimap, PREFIX_PATIENT));","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"        if (argMultimap.getValue(PREFIX_DOCTOR).isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            Collections.addAll(doctorKeywords, listKeywords(argMultimap, PREFIX_DOCTOR));","lastModifiedDate":"2021-03-19"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"        if (argMultimap.getValue(PREFIX_TIMESLOT_START).isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"            String[] standardDateTimeInput \u003d listKeywords(argMultimap, PREFIX_TIMESLOT_START);","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"            //align with dateTimeFormat in timeslot","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"            SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"            for (int i \u003d 0; i \u003c\u003d standardDateTimeInput.length - 1; i++) {","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"                String s \u003d standardDateTimeInput[i].toUpperCase().trim();","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"                if (s.contains(\"/\") || s.contains(\"-\")) {","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"                    standardDateTimeInput[i] \u003d format.format(TimeslotParser.parseStandardDate(s));","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"                }","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"                if (s.contains(\"AM\") || s.contains(\"PM\")) {","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"                    standardDateTimeInput[i] \u003d TimeslotParser.parseStandardTime(s);","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"                }","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"            }","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"            Collections.addAll(timeStartKeywords, standardDateTimeInput);","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            Collections.addAll(tagKeywords, listKeywords(argMultimap, PREFIX_TAG));","lastModifiedDate":"2021-03-19"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"        return new FindAppointmentCommand(new AppointmentContainsKeywordsPredicate(patientKeywords,","lastModifiedDate":"2021-03-17"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"                doctorKeywords, timeStartKeywords, tagKeywords));","lastModifiedDate":"2021-03-17"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"     * Returns true if any one of the prefixes is non-empty {@code Optional} values in the given","lastModifiedDate":"2021-03-17"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-17"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":"    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-17"},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-17"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"     * Converts the keyword input by user into a String array","lastModifiedDate":"2021-03-17"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"     * @param argMultimap","lastModifiedDate":"2021-03-17"},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"     * @param prefix","lastModifiedDate":"2021-03-17"},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"     * @return String Array of all Keywords","lastModifiedDate":"2021-03-17"},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":"     * @throws ParseException","lastModifiedDate":"2021-03-17"},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"    public String[] listKeywords(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        String keywords \u003d argMultimap.getValue(prefix).get();","lastModifiedDate":"2021-03-19"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"        requireNonNull(keywords);","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"        String trimmedKeywords \u003d keywords.trim();","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"        if (trimmedKeywords.isEmpty()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":"                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"        return trimmedKeywords.split(\"\\\\s+\");","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"kwmiw":107,"onnwards":11}},{"path":"src/main/java/seedu/address/logic/parser/doctor/AddDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.parser.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.doctor.AddDoctorCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":" * Parses input arguments and creates a new AddDoctorCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * and returns an AddDoctorCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"    public AddDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"        Doctor person \u003d new Doctor(name, tagList);","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"        return new AddDoctorCommand(person);","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":3,"icytornado":51}},{"path":"src/main/java/seedu/address/logic/parser/doctor/DeleteDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.parser.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.doctor.DeleteDoctorCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":" * Parses input arguments and creates a new DeleteDoctorCommand object","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"public class DeleteDoctorCommandParser implements Parser\u003cDeleteDoctorCommand\u003e {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"     * Used for the separation of force delete format and doctor index from the format \u0027--force INDEX\u0027.","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"    private static final Pattern FORCE_DELETE_FORMAT \u003d Pattern.compile(\"(?\u003cforceDelete\u003e\\\\D+)(?\u003cdoctorIndex\u003e.*)\");","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"     * Parses the given {@code args} in the context of the DeleteDoctorCommand","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"     * and returns a DeleteDoctorCommand object for execution.","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"    public DeleteDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"        final Matcher forceDeleteMatcher \u003d FORCE_DELETE_FORMAT.matcher(args.trim());","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"        boolean isForceDelete \u003d false;","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"        String indexToParse \u003d args;","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"        if (forceDeleteMatcher.matches()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"            final String forceDelete \u003d forceDeleteMatcher.group(\"forceDelete\").trim();","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"            final String doctorIndex \u003d forceDeleteMatcher.group(\"doctorIndex\");","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"            if (forceDelete.equals(\"--force\")) {","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"                isForceDelete \u003d true;","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"                indexToParse \u003d doctorIndex;","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"            Index index \u003d ParserUtil.parseIndex(indexToParse);","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"            return new DeleteDoctorCommand(index, isForceDelete);","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"            String messageUsage \u003d isForceDelete ? DeleteDoctorCommand.FORCE_DELETE_MESSAGE_USAGE","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"pngsebastian"},"content":"                    : DeleteDoctorCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage), pe);","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"pngsebastian":30,"icytornado":26}},{"path":"src/main/java/seedu/address/logic/parser/doctor/EditDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.parser.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import java.util.Collection;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand.EditDoctorDescriptor;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":" * Parses input arguments and creates a new EditDoctorCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"public class EditDoctorCommandParser implements Parser\u003cEditDoctorCommand\u003e {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDoctorCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * and returns an EditDoctorCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"    public EditDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"        Index index;","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"                    EditDoctorCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"        EditDoctorDescriptor editDoctorDescriptor \u003d new EditDoctorDescriptor();","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"            editDoctorDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editDoctorDescriptor::setTags);","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"        if (!editDoctorDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(EditDoctorCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"        return new EditDoctorCommand(index, editDoctorDescriptor);","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":71,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":72,"author":{"gitId":"icytornado"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2021-03-27"},{"lineNumber":73,"author":{"gitId":"icytornado"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2021-03-27"},{"lineNumber":74,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":75,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":76,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"onnwards":3,"icytornado":73}},{"path":"src/main/java/seedu/address/logic/parser/doctor/FindDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.logic.parser.doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.doctor.FindDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":" * Parses input arguments and creates a new FindDoctorCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"public class FindDoctorCommandParser implements Parser\u003cFindDoctorCommand\u003e {","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * Parses the given {@code String} of arguments in the context of the FindDoctorCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * and returns a FindDoctorCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"    public FindDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"        return new FindDoctorCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":3,"icytornado":30}},{"path":"src/main/java/seedu/address/logic/parser/patient/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":" * Parses input arguments and creates a new AddPatientCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        Patient person \u003d new Patient(name, phone, email, address, tagList);","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        return new AddPatientCommand(person);","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"Jacob-Pang":6,"onnwards":10,"-":49}},{"path":"src/main/java/seedu/address/logic/parser/patient/DeletePatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.DeletePatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":" * Parses input arguments and creates a new DeletePatientCommand object","lastModifiedDate":"2021-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":"public class DeletePatientCommandParser implements Parser\u003cDeletePatientCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"     * Used for the separation of force delete format and patient index from the format \u0027--force INDEX\u0027.","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"    private static final Pattern FORCE_DELETE_FORMAT \u003d Pattern.compile(\"(?\u003cforceDelete\u003e\\\\D+)(?\u003cpatientIndex\u003e.*)\");","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"     * Parses the given {@code args} in the context of the DeletePatientCommand","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"     * and returns a DeletePatientCommand object for execution.","lastModifiedDate":"2021-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"    public DeletePatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"        final Matcher forceDeleteMatcher \u003d FORCE_DELETE_FORMAT.matcher(args.trim());","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"        boolean isForceDelete \u003d false;","lastModifiedDate":"2021-03-26"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"        String indexToParse \u003d args;","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"        if (forceDeleteMatcher.matches()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"            final String forceDelete \u003d forceDeleteMatcher.group(\"forceDelete\").trim();","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"            final String patientIndex \u003d forceDeleteMatcher.group(\"patientIndex\");","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"            if (forceDelete.equals(\"--force\")) {","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"                isForceDelete \u003d true;","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"                indexToParse \u003d patientIndex;","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"            Index index \u003d ParserUtil.parseIndex(indexToParse);","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"            return new DeletePatientCommand(index, isForceDelete);","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"            String messageUsage \u003d isForceDelete ? DeletePatientCommand.FORCE_DELETE_MESSAGE_USAGE","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"pngsebastian"},"content":"                    : DeletePatientCommand.MESSAGE_USAGE;","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage), pe);","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"onnwards":4,"pngsebastian":35,"-":18}},{"path":"src/main/java/seedu/address/logic/parser/patient/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentMultimap;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":" * Parses input arguments and creates a new EditPatientCommand object","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPatientCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * and returns an EditPatientCommand object for execution.","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"    public EditPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"                    EditPatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        return new EditPatientCommand(index, editPatientDescriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Jacob-Pang":9,"onnwards":9,"-":64,"icytornado":5}},{"path":"src/main/java/seedu/address/logic/parser/patient/FindPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-19"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"public class FindPatientCommand extends Command {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public static final String COMMAND_WORD \u003d \"find-patient\";","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \"","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    public FindPatientCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"        return new CommandResult(","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"                || (other instanceof FindPatientCommand // instanceof handles nulls","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 predicate.equals(((FindPatientCommand) other).predicate)); // state check","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"Jacob-Pang":2,"kwmiw":38,"onnwards":4}},{"path":"src/main/java/seedu/address/logic/parser/patient/FindPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.Parser;","lastModifiedDate":"2021-03-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * Parses input arguments and creates a new FindPatientCommand object","lastModifiedDate":"2021-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"public class FindPatientCommandParser implements Parser\u003cFindPatientCommand\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPatientCommand","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"     * and returns a FindPatientCommand object for execution.","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    public FindPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"        return new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"kwmiw":7,"onnwards":2,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class AddressBook\u003cT extends Person\u003e implements ReadOnlyAddressBook\u003cT\u003e {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    private final UniquePersonList\u003cT\u003e persons;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        persons \u003d new UniquePersonList\u003cT\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBook(ReadOnlyAddressBook\u003cT\u003e toBeCopied) {","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPersons(List\u003cT\u003e persons) {","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public void resetData(ReadOnlyAddressBook\u003cT\u003e newData) {","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"     * Returns true if addressbook contains a person with a conflicting UUID.","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     * (which is not likely to happen, but just in case)","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        return persons.hasConflictingUuid(uuid);","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasPerson(T person) {","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public void addPerson(T p) {","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPerson(T target, T editedPerson) {","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    public void removePerson(T key) {","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cT\u003e getPersonList() {","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":11,"onnwards":9,"-":109}},{"path":"src/main/java/seedu/address/model/AppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.NonConflictingAppointmentList;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoctorNotInDoctorRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentPatientNotInPatientRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * Wraps all data at the appointment-schedule level","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * Conflicting appointments are not allowed","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentSchedule implements ReadOnlyAppointmentSchedule {","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private final NonConflictingAppointmentList appointments;","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    /*","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     *   among constructors.","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    {","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        appointments \u003d new NonConflictingAppointmentList();","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule() {}","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates an AppointmentSchedule using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule(ReadOnlyAppointmentSchedule toBeCopied) {","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        this();","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    //// list overwrite operations","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the contents of the appointment list with {@code appointments}.","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointments} must not contain conflicting appointments.","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"     * Resets the existing data of this {@code AppointmentSchedule} with {@code newData}.","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    public void resetData(ReadOnlyAppointmentSchedule newData) {","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(newData);","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    //// appointment-level operations","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    public void checkAppointmentScheduleValidity(","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                ReadOnlyAddressBook\u003cPatient\u003e patientRecords,","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords)","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                throws AppointmentPatientNotInPatientRecordsException,","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                AppointmentDoctorNotInDoctorRecordsException {","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        appointments.checkAppointmentPatientValidity(patientRecords.getPersonList());","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        appointments.checkAppointmentDoctorValidity(doctorRecords.getPersonList());","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"     * in the appointment schedule.","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"pngsebastian"},"content":"     * Returns true if a patient has existing appointments in the appointment schedule.","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"pngsebastian"},"content":"    public boolean hasPatientInSchedule(Patient patient) {","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"pngsebastian"},"content":"        return appointments.hasPatientInSchedule(patient);","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"icytornado"},"content":"     * Returns true if a doctor has existing appointments in the appointment schedule.","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":95,"author":{"gitId":"icytornado"},"content":"    public boolean hasDoctorInSchedule(Doctor doctor) {","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"        return appointments.hasDoctorInSchedule(doctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":98,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment has a conflict with {@code appointment} exists","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"     * in the appointment schedule.","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment appointment) {","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.hasConflict(appointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"     * Returns true if an appointment has a conflict with {@code appointment} exists","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"     * in the appointment schedule.","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictExcludingTarget(Appointment target, Appointment appointment) {","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        return appointments.hasConflictExcludingTarget(target, appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":117,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"pngsebastian"},"content":"     * Removes {@code toRemove} from this {@code AppointmentSchedule}.","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"pngsebastian"},"content":"     * {@code toRemove} must exist in the appointment schedule.","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":121,"author":{"gitId":"pngsebastian"},"content":"    public void removeAppointment(Appointment toRemove) {","lastModifiedDate":"2021-03-26"},{"lineNumber":122,"author":{"gitId":"pngsebastian"},"content":"        appointments.remove(toRemove);","lastModifiedDate":"2021-03-26"},{"lineNumber":123,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":124,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":125,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"     * Deletes all appointments associated with the input {@code patientUuid} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"    public void deletePatientAppointments(UUID patientUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"        appointments.deletePatientAppointments(patientUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":131,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":132,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"pngsebastian"},"content":"     * Deletes all appointments associated with the input {@code doctor} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"    public void deleteDoctorAppointments(UUID doctorUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"        appointments.deleteDoctorAppointments(doctorUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds an appointment to the address book.","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must not have conflicts with the existing appointments in the","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"     * appointment schedule","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"    public void addAppointment(Appointment toAdd) {","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.add(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the AppointmentSchedule.","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment {@code editedAppointment} must not have conflicts with any existing","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"     * appointments in the appointment schedule.","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"    //// util methods","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.asUnmodifiableObservableList().size() + \" appointments\";","lastModifiedDate":"2021-03-08"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-08"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2021-03-08"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-08"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof AppointmentSchedule // instanceof handles nulls","lastModifiedDate":"2021-03-08"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 appointments.equals(((AppointmentSchedule) other).appointments));","lastModifiedDate":"2021-03-08"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.hashCode();","lastModifiedDate":"2021-03-08"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":125,"onnwards":27,"pngsebastian":24,"icytornado":8}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"    Predicate\u003cDoctor\u003e PREDICATE_SHOW_ALL_DOCTORS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"     * Returns the user prefs\u0027 PatientRecords file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    Path getPatientRecordsFilePath();","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     * Sets the user prefs\u0027 PatientRecords file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"    void setPatientRecordsFilePath(Path patientRecordsFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     * Replaces PatientRecords data with the data in {@code patientRecords}.","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    void setPatientRecords(ReadOnlyAddressBook\u003cPatient\u003e patientRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"    /** Returns the PatientRecords */","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"     * Returns true if model contains a conflicting UUID.","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"     * (which is not likely to happen, but just in case)","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    boolean hasConflictingUuid(UUID uuid);","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"     * Deletes the given patient.","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"     * The person must exist in the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"     * Adds the given patient.","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"     * {@code person} must not already exist in the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"     * Replaces the given Patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"     * {@code target} must exist in the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"     * The patient identity of {@code editedPatient} must not be the same as","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"     * another existing patient in the PatientRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate);","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"icytornado"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DoctorRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-27"},{"lineNumber":102,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"     * Returns the user prefs\u0027 DoctorRecords file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":105,"author":{"gitId":"icytornado"},"content":"    Path getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-27"},{"lineNumber":106,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":107,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"     * Sets the user prefs\u0027 DoctorRecords file path.","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"    void setDoctorRecordsFilePath(Path doctorRecordsFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"     * Replaces DoctorRecords data with the data in {@code doctoRecords}.","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"    void setDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":117,"author":{"gitId":"icytornado"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2021-03-27"},{"lineNumber":118,"author":{"gitId":"icytornado"},"content":"    ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords();","lastModifiedDate":"2021-03-27"},{"lineNumber":119,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":120,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"     * Returns true if a Doctor with the same identity as {@code doctor} exists in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":123,"author":{"gitId":"icytornado"},"content":"    boolean hasDoctor(Doctor doctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":124,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":125,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"     * Deletes the given doctor.","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"     * The person must exist in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":129,"author":{"gitId":"icytornado"},"content":"    void deleteDoctor(Doctor target);","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"     * Adds the given doctor.","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"     * {@code doctor} must not already exist in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"    void addDoctor(Doctor doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":137,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"     * Replaces the given person {@code target} with {@code editedDoctor}.","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"     * {@code target} must exist in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"     * The doctor identity of {@code editedDoctor} must not be the same as another existing doctor in the DoctorRecords.","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":142,"author":{"gitId":"icytornado"},"content":"    void setDoctor(Doctor target, Doctor editedDoctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":143,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"    /** Returns an unmodifiable view of the filtered doctor list */","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"icytornado"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2021-03-27"},{"lineNumber":146,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"     * Updates the filter of the filtered doctor list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":151,"author":{"gitId":"icytornado"},"content":"    void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate);","lastModifiedDate":"2021-03-27"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 appointment schedule file path.","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the user prefs\u0027 appointment schedule file path.","lastModifiedDate":"2021-03-10"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"     * Replaces appointment schedule book data with the data in {@code appointmentSchedule}.","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule);","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns the AppointmentSchedule */","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAppointmentSchedule getAppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":173,"author":{"gitId":"pngsebastian"},"content":"     * Returns true if patient has existing appointments in the appointment schedule.","lastModifiedDate":"2021-03-26"},{"lineNumber":174,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":175,"author":{"gitId":"pngsebastian"},"content":"    boolean hasPatientInAppointmentSchedule(Patient patient);","lastModifiedDate":"2021-03-26"},{"lineNumber":176,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":177,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"     * Returns true if doctor has existing appointments in the appointment schedule.","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":180,"author":{"gitId":"icytornado"},"content":"    boolean hasDoctorInAppointmentSchedule(Doctor doctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":181,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment that conflicts with {@code appointment} exists in the appointment schedule.","lastModifiedDate":"2021-03-10"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"    boolean hasConflictingAppointment(Appointment appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":187,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":188,"author":{"gitId":"onnwards"},"content":"     * Returns true if an appointment that conflicts with {@code appointment}","lastModifiedDate":"2021-03-17"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"     * exists in the appointment schedule excluding the target.","lastModifiedDate":"2021-03-17"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"    boolean hasConflictingAppointmentExcludingTarget(Appointment target, Appointment appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":192,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":193,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":195,"author":{"gitId":"pngsebastian"},"content":"     * Deletes the given appointment {@code target}.","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must exist in the appointment schedule.","lastModifiedDate":"2021-03-10"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2021-03-10"},{"lineNumber":199,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":200,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":201,"author":{"gitId":"pngsebastian"},"content":"     * Deletes all appointments associated with the input {@code patient} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"    void deletePatientAppointments(UUID patientUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":206,"author":{"gitId":"pngsebastian"},"content":"     * Deletes all appointments associated with the input {@code doctor} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":208,"author":{"gitId":"onnwards"},"content":"    void deleteDoctorAppointments(UUID doctorUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds the given appointment.","lastModifiedDate":"2021-03-10"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointment} must not be in conflict with existing appointments in the appointment schedule.","lastModifiedDate":"2021-03-10"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":214,"author":{"gitId":"Jacob-Pang"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2021-03-10"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the appointment schedule.","lastModifiedDate":"2021-03-10"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"     * The {@code editedAppointment} must not be in conflict with another appointment in the appointment schedule","lastModifiedDate":"2021-03-10"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":221,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2021-03-10"},{"lineNumber":224,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2021-03-10"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2021-03-10"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2021-03-10"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":230,"author":{"gitId":"Jacob-Pang"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Jacob-Pang":54,"onnwards":48,"pngsebastian":12,"-":80,"icytornado":37}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":" * Represents the in-memory model of the app data.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private final AddressBook\u003cPatient\u003e patientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    private final AddressBook\u003cDoctor\u003e doctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private final AppointmentSchedule appointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    private final FilteredList\u003cDoctor\u003e filteredDoctors;","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * Initializes a ModelManager with the given patientRecords, doctorRecords, appointmentSchedule and userPrefs.","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    public ModelManager(ReadOnlyAddressBook\u003cPatient\u003e patientRecords, ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords,","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"                        ReadOnlyAppointmentSchedule appointmentSchedule, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(appointmentSchedule, patientRecords, userPrefs);","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Initializing with patientRecords: \" + patientRecords","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                + \" and doctorRecords: \" + doctorRecords","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                + \" and appointment schedule: \" + appointmentSchedule","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        this.patientRecords \u003d new AddressBook\u003c\u003e(patientRecords);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctorRecords \u003d new AddressBook\u003c\u003e(doctorRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule \u003d new AppointmentSchedule(appointmentSchedule);","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.patientRecords.getPersonList());","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        filteredDoctors \u003d new FilteredList\u003c\u003e(this.doctorRecords.getPersonList());","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentSchedule.getAppointmentList());","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        this(new AddressBook\u003c\u003e(), new AddressBook\u003c\u003e(), new AppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        return userPrefs.getPatientRecordsFilePath();","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setPatientRecordsFilePath(addressBookFilePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecords(ReadOnlyAddressBook\u003cPatient\u003e patientRecords) {","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        this.patientRecords.resetData(patientRecords);","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords() {","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        requireNonNull(uuid);","lastModifiedDate":"2021-03-22"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        return patientRecords.hasConflictingUuid(uuid)","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"                || doctorRecords.hasConflictingUuid(uuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecords.hasPerson(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        patientRecords.removePerson(target);","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        patientRecords.addPerson(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"        patientRecords.setPerson(target, editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"        return filteredPatients;","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DoctorRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getDoctorRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"        return userPrefs.getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctorRecordsFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setPatientRecordsFilePath(addressBookFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords) {","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctorRecords.resetData(doctorRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecords.hasPerson(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"    public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"        doctorRecords.removePerson(target);","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"        doctorRecords.addPerson(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"        updateFilteredDoctorList(PREDICATE_SHOW_ALL_DOCTORS);","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"        doctorRecords.setPerson(target, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2021-03-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":205,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"        return filteredDoctors;","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"        filteredDoctors.setPredicate(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":215,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-10"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"        return userPrefs.getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-10"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":220,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":221,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":222,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {","lastModifiedDate":"2021-03-10"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentScheduleFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":224,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setAppointmentScheduleFilePath(appointmentScheduleFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":225,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":226,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":228,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) {","lastModifiedDate":"2021-03-10"},{"lineNumber":229,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule.resetData(appointmentSchedule);","lastModifiedDate":"2021-03-10"},{"lineNumber":230,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":231,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":232,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":233,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAppointmentSchedule getAppointmentSchedule() {","lastModifiedDate":"2021-03-10"},{"lineNumber":234,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":235,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":236,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":237,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":238,"author":{"gitId":"pngsebastian"},"content":"    public boolean hasPatientInAppointmentSchedule(Patient patient) {","lastModifiedDate":"2021-03-26"},{"lineNumber":239,"author":{"gitId":"pngsebastian"},"content":"        requireNonNull(patient);","lastModifiedDate":"2021-03-26"},{"lineNumber":240,"author":{"gitId":"pngsebastian"},"content":"        return appointmentSchedule.hasPatientInSchedule(patient);","lastModifiedDate":"2021-03-26"},{"lineNumber":241,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":242,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":243,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":244,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasDoctorInAppointmentSchedule(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":245,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":246,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule.hasDoctorInSchedule(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":247,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":248,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":249,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":250,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflictingAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-10"},{"lineNumber":251,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":252,"author":{"gitId":"onnwards"},"content":"        return appointmentSchedule.hasConflict(appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":253,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":254,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":255,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":256,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictingAppointmentExcludingTarget(Appointment target, Appointment appointment) {","lastModifiedDate":"2021-03-17"},{"lineNumber":257,"author":{"gitId":"onnwards"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":258,"author":{"gitId":"onnwards"},"content":"        return appointmentSchedule.hasConflictExcludingTarget(target, appointment);","lastModifiedDate":"2021-03-17"},{"lineNumber":259,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":260,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":261,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":262,"author":{"gitId":"Jacob-Pang"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-03-10"},{"lineNumber":263,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.removeAppointment(target);","lastModifiedDate":"2021-03-10"},{"lineNumber":264,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":265,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":266,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":267,"author":{"gitId":"onnwards"},"content":"    public void deletePatientAppointments(UUID patientUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":268,"author":{"gitId":"onnwards"},"content":"        requireNonNull(patientUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":269,"author":{"gitId":"onnwards"},"content":"        appointmentSchedule.deletePatientAppointments(patientUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":270,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":271,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":272,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":273,"author":{"gitId":"onnwards"},"content":"    public void deleteDoctorAppointments(UUID doctorUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":274,"author":{"gitId":"onnwards"},"content":"        requireNonNull(doctorUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":275,"author":{"gitId":"onnwards"},"content":"        appointmentSchedule.deleteDoctorAppointments(doctorUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":276,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":277,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":278,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":279,"author":{"gitId":"Jacob-Pang"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-10"},{"lineNumber":280,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.addAppointment(appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":281,"author":{"gitId":"Jacob-Pang"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2021-03-10"},{"lineNumber":282,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":283,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":284,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":285,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-03-10"},{"lineNumber":286,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":287,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":288,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.setAppointment(target, editedAppointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":289,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":290,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":291,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":292,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2021-03-10"},{"lineNumber":293,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code versionedAppointmentSchedule}","lastModifiedDate":"2021-03-10"},{"lineNumber":294,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":295,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":296,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-03-10"},{"lineNumber":297,"author":{"gitId":"Jacob-Pang"},"content":"        return filteredAppointments;","lastModifiedDate":"2021-03-10"},{"lineNumber":298,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":299,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":300,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":301,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-03-10"},{"lineNumber":302,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":303,"author":{"gitId":"Jacob-Pang"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2021-03-10"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":310,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":315,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":320,"author":{"gitId":"Jacob-Pang"},"content":"        return userPrefs.equals(other.userPrefs)","lastModifiedDate":"2021-03-29"},{"lineNumber":321,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 patientRecords.equals(other.patientRecords)","lastModifiedDate":"2021-03-20"},{"lineNumber":322,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 doctorRecords.equals(other.doctorRecords)","lastModifiedDate":"2021-03-29"},{"lineNumber":323,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 appointmentSchedule.equals(other.appointmentSchedule)","lastModifiedDate":"2021-03-29"},{"lineNumber":324,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients)","lastModifiedDate":"2021-03-29"},{"lineNumber":325,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 filteredDoctors.equals(other.filteredDoctors)","lastModifiedDate":"2021-03-29"},{"lineNumber":326,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2021-03-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":149,"onnwards":30,"pngsebastian":12,"-":137}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"public interface ReadOnlyAddressBook\u003cT extends Person\u003e {","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cT\u003e getPersonList();","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":2,"-":14}},{"path":"src/main/java/seedu/address/model/ReadOnlyAppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoctorNotInDoctorRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentPatientNotInPatientRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"public interface ReadOnlyAppointmentSchedule {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an unmodifiable view of the appointments list.","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"     * This list will not contain any conflicting appointments.","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * Checks the AppointmentSchedule to ensure the validity of its patient and doctor data.","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * @param patientRecords the current list of Patients","lastModifiedDate":"2021-04-07"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * @param doctorRecords the current list of Doctors","lastModifiedDate":"2021-04-07"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * @throws AppointmentPatientNotInPatientRecordsException if a patient\u0027s data in","lastModifiedDate":"2021-04-07"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * appointmentSchedule does not match any patient in the patientRecord","lastModifiedDate":"2021-04-07"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * @throws AppointmentDoctorNotInDoctorRecordsException if a doctor\u0027s data in","lastModifiedDate":"2021-04-07"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     * appointmentSchedule does not match any doctor in the doctorRecord","lastModifiedDate":"2021-04-07"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    void checkAppointmentScheduleValidity(","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"            ReadOnlyAddressBook\u003cPatient\u003e patientRecords,","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"            ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords) throws","lastModifiedDate":"2021-04-07"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            AppointmentPatientNotInPatientRecordsException,","lastModifiedDate":"2021-04-07"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            AppointmentDoctorNotInDoctorRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":12,"onnwards":20}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    public GuiSettings getGuiSettings();","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public Path getPatientRecordsFilePath();","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public void setPatientRecordsFilePath(Path patientRecordsFilePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    public Path getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    public void setDoctorRecordsFilePath(Path doctorRecordsFilePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public Path getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath);","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"onnwards":14,"-":14}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private Path patientRecordsFilePath \u003d Paths.get(\"data\", \"PatientRecords.json\");","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    private Path doctorRecordsFilePath \u003d Paths.get(\"data\", \"DoctorRecords.json\");","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private Path appointmentScheduleFilePath \u003d Paths.get(\"data\", \"AppointmentSchedule.json\");","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        setPatientRecordsFilePath(newUserPrefs.getPatientRecordsFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        setDoctorRecordsFilePath(newUserPrefs.getDoctorRecordsFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        setAppointmentScheduleFilePath(newUserPrefs.getAppointmentScheduleFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecordsFilePath;","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath(Path patientRecordsFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(patientRecordsFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        this.patientRecordsFilePath \u003d patientRecordsFilePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DoctorRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getDoctorRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecordsFilePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctorRecordsFilePath(Path doctorRecordsFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(doctorRecordsFilePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctorRecordsFilePath \u003d doctorRecordsFilePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleFilePath;","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentScheduleFilePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentScheduleFilePath \u003d appointmentScheduleFilePath;","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 patientRecordsFilePath.equals(o.patientRecordsFilePath);","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(guiSettings, patientRecordsFilePath);","lastModifiedDate":"2021-03-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        sb.append(\"\\nLocal data file location : \" + patientRecordsFilePath);","lastModifiedDate":"2021-03-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":29,"onnwards":8,"-":79}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.DoctorMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.PatientMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * Represents an appointment in the appointment schedule","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * Guarantees: field values are validated, immutable.","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" * TODO: convert doctor into Person field.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    // Data fields","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private final UUID patientUuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private final UUID doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private final Timeslot timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    public Appointment(UUID patientUuid, UUID doctorUuid, Timeslot timeslot, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        requireAllNonNull(patientUuid, doctorUuid, timeslot, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        this.patientUuid \u003d patientUuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        this.doctorUuid \u003d doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    //// Accessors","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public UUID getPatientUuid() {","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        return patientUuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    public UUID getDoctorUuid() {","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        return doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot getTimeslot() {","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getAppointmentStart() {","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot.getStart();","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getAppointmentEnd() {","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot.getEnd();","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"     * if modification is attempted.","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"     * Remove brackets from Tags and converting the Set of Tags to Strings","lastModifiedDate":"2021-03-17"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"    public Set\u003cString\u003e convertToStringSet(Set\u003cTag\u003e setTag) {","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"        HashSet\u003cString\u003e stringSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-17"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"        setTag.forEach(tag -\u003e stringSet.add(tag.toRawString()));","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"        return stringSet;","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    //// Boolean checks","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"     * Defines the default sorting criterion by Appointment datetime.","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public int compareTo(Appointment otherAppointment) {","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        return getTimeslot().compareTo(otherAppointment.getTimeslot());","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns whether there is a scheduling conflict between this appointment and the other.","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"        return (patientUuid.equals(toCheck.getPatientUuid())","lastModifiedDate":"2021-03-23"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"                || doctorUuid.equals(toCheck.getDoctorUuid()))","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 getTimeslot().hasOverlap(toCheck.getTimeslot());","lastModifiedDate":"2021-03-08"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean isDue() {","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"        return getAppointmentStart().isBefore(LocalDateTime.now());","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasExpired() {","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        return getAppointmentEnd().isBefore(LocalDateTime.now());","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if both appointments have the same data fields.","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"            return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"        return otherAppointment.getPatientUuid().equals(getPatientUuid())","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"                \u0026\u0026 otherAppointment.getDoctorUuid().equals(getDoctorUuid())","lastModifiedDate":"2021-03-30"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherAppointment.getTimeslot().equals(getTimeslot())","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherAppointment.getTags().equals(getTags());","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"        return Objects.hash(patientUuid, doctorUuid, timeslot, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"                .append(PatientMap.getPatientFromUuid(getPatientUuid()))","lastModifiedDate":"2021-04-06"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Doctor: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"                .append(DoctorMap.getDoctorFromUuid(getDoctorUuid()))","lastModifiedDate":"2021-04-06"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Timeslot: \")","lastModifiedDate":"2021-03-08"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getTimeslot().toString());","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":117,"kwmiw":8,"onnwards":21}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import java.util.function.Function;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2021-03-17"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.DoctorMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.PatientMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":" * Tests that a {@code Appointment}\u0027s {@code Prefix} matches any of the keywords given.","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"public class AppointmentContainsKeywordsPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    private final List\u003cString\u003e patientList;","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    private final List\u003cString\u003e doctorList;","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"    private final List\u003cString\u003e timeStartList;","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    private final List\u003cString\u003e tagsList;","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"     * Constructor for Predicate","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"     *","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"     * @param patientList of keywords of patient names","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"     * @param doctorList of keywords of doctor names","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    public AppointmentContainsKeywordsPredicate(List\u003cString\u003e patientList, List\u003cString\u003e doctorList,","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"                                                List\u003cString\u003e timeStartList, List\u003cString\u003e tagsList) {","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"        this.patientList \u003d patientList;","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        this.doctorList \u003d doctorList;","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"        this.tagsList \u003d tagsList;","lastModifiedDate":"2021-03-17"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"        this.timeStartList \u003d timeStartList;","lastModifiedDate":"2021-03-17"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        Map\u003cUUID, Patient\u003e patientHashMap \u003d PatientMap.getPatientMap();","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        Map\u003cUUID, Doctor\u003e doctorHashMap \u003d DoctorMap.getDoctorMap();","lastModifiedDate":"2021-04-07"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        Predicate\u003cString\u003e isMatchPatient \u003d keyword -\u003e StringUtil.containsWordIgnoreCase(","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"                patientHashMap.get(appointment.getPatientUuid())","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"                .getName().fullName, keyword);","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        Predicate\u003cString\u003e isMatchDoctor \u003d keyword -\u003e StringUtil.containsWordIgnoreCase(","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                doctorHashMap.get(appointment.getDoctorUuid())","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                .getName().fullName, keyword);","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"        Predicate\u003cString\u003e isMatchTimeStart \u003d keyword","lastModifiedDate":"2021-03-17"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(appointment.getAppointmentStart().toString()","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"                .replace(\"T\", \" \"), keyword);","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        Set\u003cString\u003e stringSet \u003d appointment.convertToStringSet(appointment.getTags());","lastModifiedDate":"2021-03-19"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        String allTags \u003d String.join(\" \", stringSet);","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"        Predicate\u003cString\u003e isMatchTags \u003d keyword -\u003e StringUtil.containsWordIgnoreCase(allTags, keyword);","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"        Function\u003cString, List\u003cString\u003e\u003e patientNameSplitMapper \u003d new Function\u003c\u003e() {","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            public List\u003cString\u003e apply(String patientName) {","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                return Arrays.asList(patientName.split(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"            };","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        };","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        Predicate\u003cList\u003cString\u003e\u003e isMatchPatientName \u003d keywords -\u003e keywords.stream().anyMatch(isMatchPatient);","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        return patientList.stream().map(patientNameSplitMapper).anyMatch(isMatchPatientName)","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"                || doctorList.stream().anyMatch(isMatchDoctor)","lastModifiedDate":"2021-03-17"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"                || (!timeStartList.isEmpty() \u0026\u0026 timeStartList.stream().allMatch(isMatchTimeStart))","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"                || tagsList.stream().anyMatch(isMatchTags);","lastModifiedDate":"2021-03-17"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"    @Override","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-17"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-17"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"                || (other instanceof AppointmentContainsKeywordsPredicate","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 patientList.equals(((AppointmentContainsKeywordsPredicate) other).patientList)","lastModifiedDate":"2021-03-17"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 doctorList.equals(((AppointmentContainsKeywordsPredicate) other).doctorList)","lastModifiedDate":"2021-03-17"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 tagsList.equals(((AppointmentContainsKeywordsPredicate) other).tagsList));","lastModifiedDate":"2021-03-17"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"kwmiw":57,"onnwards":28}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" * Represents an appointment in the appointment schedule","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":" * Guarantees: field values are validated, immutable.","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":" * TODO: convert doctor into Person field.","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class AppointmentDisplay extends Appointment {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    // Data fields","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private final Patient patient;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private final Doctor doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public AppointmentDisplay(Patient patient, Doctor doctor, Timeslot timeslot, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        super(patient.getUuid(), doctor.getUuid(), timeslot, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        requireAllNonNull(patient, doctor, timeslot, tags);","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    public String toString() {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"                .append(getPatient().toString())","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                .append(\"; Doctor: \")","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                .append(getDoctor().toString())","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"                .append(\"; Timeslot: \")","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                .append(getTimeslot().toString());","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    //// Accessors","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    public Patient getPatient() {","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        return patient;","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"    public Doctor getDoctor() {","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        return doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"onnwards":57}},{"path":"src/main/java/seedu/address/model/appointment/NonConflictingAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-26"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.AppointmentConflictException;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoctorNotInDoctorRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.exceptions.AppointmentPatientNotInPatientRecordsException;","lastModifiedDate":"2021-04-07"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":" * A list of appointments that enforces non-conflict between its elements, does not allow nulls and orders the","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":" * elements by their sorting criterion using {@code Appointment#compareTo(Appointment)}.","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":" * Appointments are considered non-conflicting by comparing using {@code Appointment#hasConflict(Appointment)}. \u0027","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":" * As such, adding and updating of appointments uses Appointment#hasConflict(Appointment) so as to ensure that the","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":" * appointment being added or updated does not conflict with any existing appointments in the","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":" * NonConflictingAppointmentList.","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":" * Removal of an appointment uses Appointment#equals(Object) so as to ensure that the appointment with exactly the","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":" * same fields will be removed.","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":" *","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"public class NonConflictingAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    //// accessors","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     * Checks the appointmentSchedule to ensure the validity of its patient data.","lastModifiedDate":"2021-04-07"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"     * @param patientRecords the current list of Patients","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"     * @throws AppointmentPatientNotInPatientRecordsException if a patient\u0027s data in","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"     * appointmentSchedule does not match any patient in the patientRecord","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    public void checkAppointmentPatientValidity(List\u003cPatient\u003e patientRecords)","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            throws AppointmentPatientNotInPatientRecordsException {","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        boolean isValid \u003d internalList.stream().allMatch(appt -\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            return patientRecords.stream().map(pt -\u003e pt.getUuid()).anyMatch(appt.getPatientUuid()::equals);","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        if (!isValid) {","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            throw new AppointmentPatientNotInPatientRecordsException();","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * Checks the appointmentSchedule to ensure the validity of its doctor data.","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     *","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     * @param doctorRecords the current list of Doctors","lastModifiedDate":"2021-04-07"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     * @throws AppointmentDoctorNotInDoctorRecordsException if a doctor\u0027s data in","lastModifiedDate":"2021-04-07"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * appointmentSchedule does not match any doctor in the doctorRecord","lastModifiedDate":"2021-04-07"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-04-07"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"    public void checkAppointmentDoctorValidity(List\u003cDoctor\u003e doctorRecords)","lastModifiedDate":"2021-04-07"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"            throws AppointmentDoctorNotInDoctorRecordsException {","lastModifiedDate":"2021-04-07"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"        boolean isValid \u003d internalList.stream().allMatch(appt -\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"            return doctorRecords.stream().map(dr -\u003e dr.getUuid()).anyMatch(appt.getDoctorUuid()::equals);","lastModifiedDate":"2021-04-07"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-04-07"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        if (!isValid) {","lastModifiedDate":"2021-04-07"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"            throw new AppointmentDoctorNotInDoctorRecordsException();","lastModifiedDate":"2021-04-07"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-04-07"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":82,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"pngsebastian"},"content":"     * Returns true if the list contains appointments that corresponds to the input patient.","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"pngsebastian"},"content":"    public boolean hasPatientInSchedule(Patient patient) {","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        return internalList.stream().anyMatch(appt -\u003e appt.getPatientUuid().equals(patient.getUuid()));","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":90,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":91,"author":{"gitId":"icytornado"},"content":"     * Returns true if the list contains appointments that corresponds to the input doctor.","lastModifiedDate":"2021-03-27"},{"lineNumber":92,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":93,"author":{"gitId":"icytornado"},"content":"    public boolean hasDoctorInSchedule(Doctor doctor) {","lastModifiedDate":"2021-03-27"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        return internalList.stream().anyMatch(appt -\u003e appt.getDoctorUuid().equals(doctor.getUuid()));","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":96,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the list contains appointments that are in conflict with {@code toCheck}","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment toCheck) {","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.stream().anyMatch(toCheck::hasConflict);","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"     * Returns true if the list contains appointments that are in conflict with {@code toCheck}","lastModifiedDate":"2021-03-17"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictExcludingTarget(Appointment toExclude, Appointment toCheck) {","lastModifiedDate":"2021-03-17"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2021-03-17"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        return internalList.stream().anyMatch(appt -\u003e {","lastModifiedDate":"2021-03-17"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"            return toCheck.hasConflict(appt) \u0026\u0026 !toExclude.equals(appt);","lastModifiedDate":"2021-03-17"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-03-17"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if {@code persons} contains non-conflicting appointments.","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"    private boolean appointmentsAreNotInConflict(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"                if (appointments.get(i).hasConflict(appointments.get(j))) {","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"                    return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"                }","lastModifiedDate":"2021-03-08"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"        return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"    //// mutators: incorporates sorting","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must not have conflicts with existing appointments in the list","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"        if (hasConflict(toAdd)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment {@code editedPerson} must not have conflicts with existing appointments","lastModifiedDate":"2021-03-08"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"     * in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":166,"author":{"gitId":"onnwards"},"content":"        if (hasConflictExcludingTarget(target, editedAppointment)) {","lastModifiedDate":"2021-03-17"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();","lastModifiedDate":"2021-03-08"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2021-03-08"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2021-03-08"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2021-03-08"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":187,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":188,"author":{"gitId":"pngsebastian"},"content":"     * Deletes all appointments associated with the input {@code patient} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":189,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"    public void deletePatientAppointments(UUID patientUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"pngsebastian"},"content":"        List\u003cAppointment\u003e patientAppointmentList \u003d internalList.stream().filter(appointment -\u003e","lastModifiedDate":"2021-03-26"},{"lineNumber":192,"author":{"gitId":"onnwards"},"content":"                appointment.getPatientUuid().equals(patientUuid)).collect(Collectors.toList());","lastModifiedDate":"2021-03-30"},{"lineNumber":193,"author":{"gitId":"pngsebastian"},"content":"        patientAppointmentList.forEach(appointment -\u003e internalList.remove(appointment));","lastModifiedDate":"2021-03-26"},{"lineNumber":194,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":195,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":196,"author":{"gitId":"pngsebastian"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"pngsebastian"},"content":"     * Deletes all appointments associated with the input {@code doctor} from the appointment schedule.","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"pngsebastian"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"onnwards"},"content":"    public void deleteDoctorAppointments(UUID doctorUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":200,"author":{"gitId":"pngsebastian"},"content":"        List\u003cAppointment\u003e doctorAppointmentList \u003d internalList.stream().filter(appointment -\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":201,"author":{"gitId":"onnwards"},"content":"                appointment.getDoctorUuid().equals(doctorUuid)).collect(Collectors.toList());","lastModifiedDate":"2021-03-30"},{"lineNumber":202,"author":{"gitId":"pngsebastian"},"content":"        doctorAppointmentList.forEach(appointment -\u003e internalList.remove(appointment));","lastModifiedDate":"2021-03-30"},{"lineNumber":203,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":204,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":205,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(NonConflictingAppointmentList replacement) {","lastModifiedDate":"2021-03-09"},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2021-03-08"},{"lineNumber":207,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":208,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":209,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":210,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2021-03-08"},{"lineNumber":213,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointments} must not contain conflicting appointments","lastModifiedDate":"2021-03-08"},{"lineNumber":214,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":215,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2021-03-08"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2021-03-08"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"        if (!appointmentsAreNotInConflict(appointments)) {","lastModifiedDate":"2021-03-09"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();","lastModifiedDate":"2021-03-08"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":220,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":221,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2021-03-08"},{"lineNumber":222,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);","lastModifiedDate":"2021-03-08"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":224,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":225,"author":{"gitId":"Jacob-Pang"},"content":"    //// overriding methods","lastModifiedDate":"2021-03-08"},{"lineNumber":226,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":228,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-08"},{"lineNumber":229,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof NonConflictingAppointmentList // instanceof handles nulls","lastModifiedDate":"2021-03-09"},{"lineNumber":230,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 internalList.equals(((NonConflictingAppointmentList) other).internalList));","lastModifiedDate":"2021-03-09"},{"lineNumber":231,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":232,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":233,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":234,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":235,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.hashCode();","lastModifiedDate":"2021-03-08"},{"lineNumber":236,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":237,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":238,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":239,"author":{"gitId":"Jacob-Pang"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2021-03-08"},{"lineNumber":240,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.iterator();","lastModifiedDate":"2021-03-08"},{"lineNumber":241,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":242,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":158,"onnwards":54,"pngsebastian":22,"icytornado":8}},{"path":"src/main/java/seedu/address/model/appointment/Timeslot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * Represents the timeslot allocated to an appointment.","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" * date time values are truncated to minutes.","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"public class Timeslot implements Comparable\u003cTimeslot\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public static final DateTimeFormatter DISPLAY_DATE_TIME_FORMATTER \u003d DateTimeFormatter","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"            .ofPattern(\"dd MMM yy hh:mm a\");","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Timeslot end date and time must be strictly \"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"            + \"after the start date and time\";","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public final LocalDateTime start;","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    public final LocalDateTime end;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructor based on specified start and end dateTime.","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     * The end dateTime must be strictly larger than the start dateTime.","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws NegativeOrZeroDurationException","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot(LocalDateTime start, LocalDateTime end) throws NegativeOrZeroDurationException {","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(start, end);","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        LocalDateTime truncatedStart \u003d start.truncatedTo(ChronoUnit.MINUTES);","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        LocalDateTime truncatedEnd \u003d end.truncatedTo(ChronoUnit.MINUTES);","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        if (!truncatedEnd.isAfter(truncatedStart)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            throw new NegativeOrZeroDurationException();","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d truncatedStart;","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d truncatedEnd;","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructor based on specified start and duration.","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * The duration must be strictly more than zero seconds.","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws NegativeOrZeroDurationException","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot(LocalDateTime start, Duration duration) throws NegativeOrZeroDurationException {","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(start, duration);","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        LocalDateTime truncatedStart \u003d start.truncatedTo(ChronoUnit.MINUTES);","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        LocalDateTime truncatedEnd \u003d start.plus(duration).truncatedTo(ChronoUnit.MINUTES);","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        if (!truncatedEnd.isAfter(truncatedStart)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            throw new NegativeOrZeroDurationException();","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d truncatedStart;","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d truncatedEnd;","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    //// Accessors","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        return start;","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getEnd() {","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        return end;","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    //// Boolean Checks","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the timeslot {@code otherTimeslot} chronologically overlaps","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"     * with this timeslot.","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasOverlap(Timeslot otherTimeslot) {","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        assert otherTimeslot !\u003d null : \"the Timeslot provided should not be null\";","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        return start.isBefore(otherTimeslot.getEnd()) \u0026\u0026 end.isAfter(otherTimeslot.getStart());","lastModifiedDate":"2021-04-06"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    public int compareTo(Timeslot otherTimeslot) {","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        int compareStart \u003d getStart().compareTo(otherTimeslot.getStart());","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        if (compareStart \u003d\u003d 0) {","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"            return getEnd().compareTo(otherTimeslot.getEnd());","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        return compareStart;","lastModifiedDate":"2021-03-08"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if both timeslots represent the same period.","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-08"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        if (!(other instanceof Timeslot)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"            return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        Timeslot otherTimeslot \u003d (Timeslot) other;","lastModifiedDate":"2021-03-08"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        return otherTimeslot.getStart().equals(getStart())","lastModifiedDate":"2021-03-08"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherTimeslot.getEnd().equals(getEnd());","lastModifiedDate":"2021-03-08"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-08"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(start, end);","lastModifiedDate":"2021-03-08"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-08"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(\"From \")","lastModifiedDate":"2021-03-08"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"                .append(DISPLAY_DATE_TIME_FORMATTER.format(getStart()))","lastModifiedDate":"2021-03-12"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\" To \")","lastModifiedDate":"2021-03-08"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                .append(DISPLAY_DATE_TIME_FORMATTER.format(getEnd()));","lastModifiedDate":"2021-03-12"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":128,"onnwards":1}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentConflictException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation will result in conflicting appointments.","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentConflictException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentConflictException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        super(\"Operation would result in conflicting appointments\");","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":14}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentDoctorNotInDoctorRecordsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Signals that the operation will result in a negative or zero duration for an appointment.","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class AppointmentDoctorNotInDoctorRecordsException extends Exception {","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    public AppointmentDoctorNotInDoctorRecordsException() {","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"        super(\"patient UUID in AppointmentSchedule does not exist in PatientRecords\");","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"onnwards":11}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":7}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentPatientNotInPatientRecordsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-04-07"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-04-07"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Signals that the operation will result in a negative or zero duration for an appointment.","lastModifiedDate":"2021-04-07"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-04-07"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-07"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class AppointmentPatientNotInPatientRecordsException extends Exception {","lastModifiedDate":"2021-04-07"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    public AppointmentPatientNotInPatientRecordsException() {","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"        super(\"patient UUID in AppointmentSchedule does not exist in PatientRecords\");","lastModifiedDate":"2021-04-07"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-04-07"}],"authorContributionMap":{"onnwards":11}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/NegativeOrZeroDurationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation will result in a negative or zero duration for an appointment.","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"public class NegativeOrZeroDurationException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"    public NegativeOrZeroDurationException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"        super(\"Operation would result in an appointment with negative or zero duration\");","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":11}},{"path":"src/main/java/seedu/address/model/person/Doctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":" * Represents a Doctor class in the Doctors Records","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"public class Doctor extends Person {","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null, except for UUID,","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * which can be generated automatically by superclass.","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":"    public Doctor(Name name, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-27"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"        super(name, tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public Doctor(UUID uuid, Name name, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        super(uuid, name, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"     * Returns true if both doctors have the same identity and data fields.","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"            return true;","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"        if (!(other instanceof Doctor)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"            return false;","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor otherDoctor \u003d (Doctor) other;","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        return otherDoctor.getName().equals(getName())","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherDoctor.getTags().equals(getTags());","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"        return Objects.hash(name, tags);","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"    public String toString() {","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        return super.toString(); // to modify when unique fields arise","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":4,"onnwards":10,"icytornado":44}},{"path":"src/main/java/seedu/address/model/person/DoctorMap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.Map;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"public class DoctorMap {","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    public static final Map\u003cUUID, Doctor\u003e DOCTOR_MAP \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    public static Map\u003cUUID, Doctor\u003e getDoctorMap() {","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"        return DOCTOR_MAP;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static Doctor getDoctorFromUuid(UUID doctorUuid) {","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        assert DOCTOR_MAP.containsKey(doctorUuid);","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        return DOCTOR_MAP.get(doctorUuid);","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * With the given {@code doctorList}, updates the values of {@code DOCTOR_HASH_MAP}","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * using the {@code Doctor}\u0027s UUID as the key.","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public static void updateDoctorHashMap(List\u003cDoctor\u003e doctorList) {","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        for (Doctor dr: doctorList) {","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"            DOCTOR_MAP.put(dr.getUuid(), dr);","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"onnwards":30}},{"path":"src/main/java/seedu/address/model/person/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":" * Represents a Patient class in the Patient Records","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class Patient extends Person {","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    // Patient contact fields","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private final Phone phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    private final Email email;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private final Address address;","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null, except for UUID,","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * which can be generated automatically by superclass.","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    public Patient(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        super(name, tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(phone, email, address);","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        this.address \u003d address;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    public Patient(UUID uuid, Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        super(uuid, name, tags);","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        requireAllNonNull(phone, email, address);","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        this.address \u003d address;","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public Phone getPhone() {","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        return phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public Email getEmail() {","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return email;","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public Address getAddress() {","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return address;","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if both patients have the same identity and data fields.","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"            return true;","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"            return false;","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        return otherPatient.getName().equals(getName())","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherPatient.getPhone().equals(getPhone())","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherPatient.getEmail().equals(getEmail())","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherPatient.getAddress().equals(getAddress())","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherPatient.getTags().equals(getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(getName())","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getPhone())","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getEmail())","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getAddress());","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        return builder.toString();","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"Jacob-Pang":89,"onnwards":15}},{"path":"src/main/java/seedu/address/model/person/PatientMap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-04-06"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;","lastModifiedDate":"2021-04-06"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.Map;","lastModifiedDate":"2021-04-06"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-04-06"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"public class PatientMap {","lastModifiedDate":"2021-04-06"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    private static final Map\u003cUUID, Patient\u003e PATIENT_MAP \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    public static Map\u003cUUID, Patient\u003e getPatientMap() {","lastModifiedDate":"2021-04-07"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"        return PATIENT_MAP;","lastModifiedDate":"2021-04-07"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static Patient getPatientFromUuid(UUID patientUuid) {","lastModifiedDate":"2021-04-06"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        assert PATIENT_MAP.containsKey(patientUuid);","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        return PATIENT_MAP.get(patientUuid);","lastModifiedDate":"2021-04-07"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-04-06"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * With the given {@code patientList}, updates the values of {@code PATIENT_HASH_MAP}","lastModifiedDate":"2021-04-06"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * using the {@code Patient}\u0027s UUID as the key.","lastModifiedDate":"2021-04-06"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-04-06"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public static void updatePatientHashMap(List\u003cPatient\u003e patientList) {","lastModifiedDate":"2021-04-06"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        for (Patient pt: patientList) {","lastModifiedDate":"2021-04-06"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"            PATIENT_MAP.put(pt.getUuid(), pt);","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-04-06"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-04-06"}],"authorContributionMap":{"onnwards":30}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"public abstract class Person {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    // UUID to determine uniqueness","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    protected final UUID uuid;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    protected final Name name;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null, except for UUID,","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * which can be generated automatically.","lastModifiedDate":"2021-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public Person(Name name, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(name, tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        this.uuid \u003d UUID.randomUUID();","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    public Person(UUID uuid, Name name, Set\u003cTag\u003e tags) {","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        requireAllNonNull(name, tags);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        this.uuid \u003d uuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    public UUID getUuid() {","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        return uuid;","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        return otherPerson.getUuid().equals(getUuid())","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName())","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(name, tags);","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(getName());","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":7,"onnwards":18,"-":91}},{"path":"src/main/java/seedu/address/model/person/SamePersonPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.person;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"public class SamePersonPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"    private final Person person;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"    public SamePersonPredicate(Person person) {","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"        this.person \u003d person;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"        return this.person.equals(person);","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof SamePersonPredicate // instanceof handles nulls","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 person.equals(((SamePersonPredicate) other).person)); // state check","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":22}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"public class UniquePersonList\u003cT extends Person\u003e implements Iterable\u003cT\u003e {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean contains(T toCheck) {","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public void add(T toAdd) {","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPerson(T target, T editedPerson) {","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public void remove(T toRemove) {","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"     * Returns true if the list contains a person with a conflicting UUID.","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"     * (which is not likely to happen, but just in case)","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        return internalList.stream().anyMatch(toCheck -\u003e toCheck.uuid \u003d\u003d uuid);","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPersons(UniquePersonList\u003cT\u003e replacement) {","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPersons(List\u003cT\u003e persons) {","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    public Iterator\u003cT\u003e iterator() {","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"    private boolean personsAreUnique(List\u003cT\u003e persons) {","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Jacob-Pang":12,"onnwards":9,"-":125}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-17"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"     * Format state as text for processing","lastModifiedDate":"2021-03-17"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-17"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"    public String toRawString() {","lastModifiedDate":"2021-03-17"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        return tagName;","lastModifiedDate":"2021-03-17"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"kwmiw":7,"-":54}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.util.List;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        return new Patient[] {","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"b409e370-8250-4882-a1f4-96fe700b4a43\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Alex Karev\"), new Phone(\"87438807\"), new Email(\"alexkarev@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), getTagSet(\"PotentialExpressiveDisorder\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"1dba7799-d7e2-42b3-8e29-968c5f755707\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                    getTagSet(\"Elderly\", \"Dementia\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"58f03932-3222-4049-a901-574cbd969fda\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getTagSet(\"BrainDamage\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"79008edc-5f0e-4d3b-bc0b-6a7da838e89b\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                    new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getTagSet(\"Headache\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"889ba8ca-bd6d-4a71-8641-5de7e7f5c743\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Edward Hyde\"), new Phone(\"92492021\"), new Email(\"edward@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), getTagSet(\"ViolentTendencies\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            new Patient(UUID.fromString(\"748f9bc7-3830-4f2b-b43e-daca7cf4cc4b\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Freddie Highmore\"), new Phone(\"92624417\"), new Email(\"fredh@example.com\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getTagSet(\"PotentialAutism\"))","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public static ReadOnlyAddressBook\u003cPatient\u003e getSamplePatientRecords() {","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e samplePatientRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"            samplePatientRecords.addPerson(samplePatient);","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        return samplePatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    public static Doctor[] getSampleDoctors() {","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        return new Doctor[] {","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"ad9b1acb-286f-4e20-ae4a-00604b96f456\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Meredith Grey\"), getTagSet(\"GreysAnatomy\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"67ba8da5-356c-4b9d-9828-f144574daae3\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Who\"), getTagSet(\"DoctorWho\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"994c0ccf-e185-4895-84ea-205373331e22\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Strange\"), getTagSet(\"BenedictCumberbatch\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"810493c6-0a23-405b-8c53-d3b13cb9dcb5\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Jekyll\"), getTagSet(\"StrangeCase\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"a7fa98cc-15e0-4030-9ade-d42be3f18ba0\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Murphy\"), getTagSet(\"TheGoodDoctor\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"            new Doctor(UUID.fromString(\"1fddebf5-3712-49b3-a44f-af755caa8ac5\"),","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"                    new Name(\"Dr Drake Ramoray\"), getTagSet(\"JoeyTribbiani\"))","lastModifiedDate":"2021-03-30"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        };","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public static ReadOnlyAddressBook\u003cDoctor\u003e getSampleDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cDoctor\u003e sampleDoctorRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        for (Doctor sampleDoctor : getSampleDoctors()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"            sampleDoctorRecords.addPerson(sampleDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        return sampleDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"    public static Appointment[] getSampleAppointments() {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        List\u003cPatient\u003e samplePatientRecordsList \u003d getSamplePatientRecords().getPersonList();","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        List\u003cDoctor\u003e sampleDoctorRecordsList \u003d getSampleDoctorRecords().getPersonList();","lastModifiedDate":"2021-03-30"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        return new Appointment[] {","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            new Appointment(samplePatientRecordsList.get(1).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"                    sampleDoctorRecordsList.get(1).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"                    new Timeslot(LocalDateTime.of(2021, 1, 1, 12, 0), Duration.ofMinutes(60)),","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"                    getTagSet(\"Consultation\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"            new Appointment(samplePatientRecordsList.get(0).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"                    sampleDoctorRecordsList.get(1).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"                    new Timeslot(LocalDateTime.of(2005, 3, 26, 17, 16), Duration.ofMinutes(25)),","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"                    getTagSet(\"TimeTravelScan\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"            new Appointment(samplePatientRecordsList.get(4).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"                    sampleDoctorRecordsList.get(3).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"                    new Timeslot(LocalDateTime.of(2020, 1, 5, 12, 0), Duration.ofMinutes(141)),","lastModifiedDate":"2021-03-30"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"                    getTagSet(\"AlterEgoExamination\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"            new Appointment(samplePatientRecordsList.get(5).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"                    sampleDoctorRecordsList.get(4).getUuid(),","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"                    new Timeslot(LocalDateTime.of(2017, 9, 25, 10, 0), Duration.ofMinutes(44)),","lastModifiedDate":"2021-03-30"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"                    getTagSet(\"AutismDiagnosis\")),","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"        };","lastModifiedDate":"2021-03-30"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"    public static ReadOnlyAppointmentSchedule getSampleAppointmentSchedule() {","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        AppointmentSchedule sampleAppointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        for (Appointment sampleAppointment : getSampleAppointments()) {","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"            sampleAppointmentSchedule.addAppointment(sampleAppointment);","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        return sampleAppointmentSchedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Jacob-Pang":22,"onnwards":67,"-":37}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"public abstract class AddressBookStorage\u003cT extends Person\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    protected Path filePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBookStorage(Path filePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        return filePath;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cT\u003e\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public abstract Optional\u003cReadOnlyAddressBook\u003cT\u003e\u003e readAddressBook(Path filePath) throws DataConversionException;","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAddressBook(ReadOnlyAddressBook\u003cT\u003e addressBook) throws IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public abstract void saveAddressBook(ReadOnlyAddressBook\u003cT\u003e addressBook, Path filePath) throws IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":26,"-":36}},{"path":"src/main/java/seedu/address/storage/AppointmentScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":" * Represents a storage for {@link seedu.address.model.AppointmentSchedule}.","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"public interface AppointmentScheduleStorage {","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns AppointmentSchedule data as a {@link ReadOnlyAppointmentSchedule}.","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     * @see #getAppointmentScheduleFilePath()","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath) throws DataConversionException,","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     * Saves the given {@link ReadOnlyAppointmentSchedule} to the storage.","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     * @param appointmentSchedule cannot be null.","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * @see #saveAppointmentSchedule(ReadOnlyAppointmentSchedule)","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath) throws IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":45}},{"path":"src/main/java/seedu/address/storage/InputCommandStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-30"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.util.List;","lastModifiedDate":"2021-03-31"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"/**","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * Represents a storage for all user inputs keyed in the {@code CommandBox}.","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" */","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"public class InputCommandStorage {","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    private static List\u003cString\u003e inputCommandList;","lastModifiedDate":"2021-03-31"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"    private static int currentPointer;","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"     * Constructor for InputCommandStorage. No inputs have been keyed in by user,","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"     * CurrentPointer is set to 0, will traverse as keyCodes in","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"     * {@code handleToggleQuery(KeyEvent event)} changes.","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    public InputCommandStorage() {","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"        this.inputCommandList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-31"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        currentPointer \u003d 0;","lastModifiedDate":"2021-03-30"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"     * Returns all previous user inputs stored in inputCommandList","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    public List\u003cString\u003e getInputCommandList() {","lastModifiedDate":"2021-03-31"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        return inputCommandList;","lastModifiedDate":"2021-03-30"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"     * Appends all new user inputs into inputCommandList.","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     * Pointer increments to latest input.","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"     * @param userInput being parsed","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    public void addInput(String userInput) {","lastModifiedDate":"2021-03-31"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"        inputCommandList.add(userInput);","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        currentPointer \u003d inputCommandList.size();","lastModifiedDate":"2021-03-31"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"     * Returns previous or next user input at index of currentPointer.","lastModifiedDate":"2021-03-31"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"     * @param isUpPressed if user is calling the previous input","lastModifiedDate":"2021-03-31"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    public static String retrieveInput(boolean isUpPressed) {","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        if (isUpPressed) {","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"            decrementCurrentPointer();","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"        } else {","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"            incrementCurrentPointer();","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"        return getCurrentPointerInput();","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"     * Increments current pointer within inputCommandList","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"    public static void incrementCurrentPointer() {","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        if (currentPointer \u003c inputCommandList.size()) {","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"            currentPointer++;","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"     * Decrements current pointer within inputCommandList","lastModifiedDate":"2021-03-31"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"    public static void decrementCurrentPointer() {","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"        if (currentPointer \u003e 0) {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"            currentPointer--;","lastModifiedDate":"2021-03-31"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"    /**","lastModifiedDate":"2021-03-31"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"     * Returns input at currentPointer index","lastModifiedDate":"2021-03-31"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"     */","lastModifiedDate":"2021-03-31"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"    public static String getCurrentPointerInput() {","lastModifiedDate":"2021-03-31"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"        return (currentPointer \u003d\u003d inputCommandList.size())","lastModifiedDate":"2021-03-31"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"                ? \"\"","lastModifiedDate":"2021-03-31"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"                : inputCommandList.get(currentPointer);","lastModifiedDate":"2021-03-31"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"}","lastModifiedDate":"2021-03-30"}],"authorContributionMap":{"kwmiw":81}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private final String patientUuid;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    private final String doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private final JsonAdaptedTimeslot timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"patient\") String patientUuid,","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"                                  @JsonProperty(\"doctor\") String doctorUuid,","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                                  @JsonProperty(\"timeslot\") JsonAdaptedTimeslot timeslot,","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        this.patientUuid \u003d patientUuid;","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        this.doctorUuid \u003d doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        patientUuid \u003d source.getPatientUuid().toString();","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        doctorUuid \u003d source.getDoctorUuid().toString();","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new JsonAdaptedTimeslot(source.getTimeslot());","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        final List\u003cTag\u003e appointmentTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentTags.add(tag.toModelType());","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        if (patientUuid \u003d\u003d null) {","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"patient\"));","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"        final UUID modelPatientUuid \u003d UUID.fromString(patientUuid);","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        if (doctorUuid \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"doctor\"));","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        final UUID modelDoctorUuid \u003d UUID.fromString(doctorUuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        if (timeslot \u003d\u003d null) {","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"                    Timeslot.class.getSimpleName()));","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        final Timeslot modelTimeslot \u003d timeslot.toModelType();","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(appointmentTags);","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        return new Appointment(modelPatientUuid, modelDoctorUuid, modelTimeslot, modelTags);","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":77,"onnwards":15}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedDoctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"public class JsonAdaptedDoctor extends JsonAdaptedPerson {","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Doctor\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public static final String UUID_MESSAGE_CONSTRAINTS \u003d \"This is not a valid UUID field\";","lastModifiedDate":"2021-03-30"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"     * Constructs a {@code JsonAdaptedDoctor} with the given person details.","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public JsonAdaptedDoctor(@JsonProperty(\"uuid\") String uuid, @JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-30"},{"lineNumber":26,"author":{"gitId":"icytornado"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        super(uuid, name, tagged);","lastModifiedDate":"2021-03-30"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"     * Converts a given {@code Doctor} into this class for Jackson use.","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"    public JsonAdaptedDoctor(Doctor source) {","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"        super(source);","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"     * Converts this Jackson-friendly adapted doctor object into the model\u0027s {@code Doctor} object.","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted doctor.","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"    public Doctor toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        if (uuid \u003d\u003d null) {","lastModifiedDate":"2021-03-30"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName()));","lastModifiedDate":"2021-03-30"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        final UUID modelUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        try {","lastModifiedDate":"2021-03-30"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            modelUuid \u003d UUID.fromString(uuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-03-30"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            throw new IllegalValueException(UUID_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-30"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"icytornado"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":65,"author":{"gitId":"icytornado"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-03-27"},{"lineNumber":66,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":67,"author":{"gitId":"icytornado"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2021-03-27"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        return new Doctor(modelUuid, modelName, modelTags);","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":70,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":15,"icytornado":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedPatient extends JsonAdaptedPerson {","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    public static final String UUID_MESSAGE_CONSTRAINTS \u003d \"This is not a valid UUID field\";","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private final String phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private final String email;","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private final String address;","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given person details.","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"uuid\") String uuid, @JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2021-03-26"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"                             @JsonProperty(\"address\") String address,","lastModifiedDate":"2021-03-26"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        super(uuid, name, tagged);","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        this.email \u003d email;","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        this.address \u003d address;","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        super(source);","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"        if (uuid \u003d\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName()));","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        final UUID modelUuid;","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        try {","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"            modelUuid \u003d UUID.fromString(uuid);","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"            throw new IllegalValueException(UUID_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2021-03-20"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        return new Patient(modelUuid, modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"Jacob-Pang":92,"onnwards":17}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public abstract class JsonAdaptedPerson {","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    protected final String uuid;","lastModifiedDate":"2021-03-26"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    protected final String name;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    protected final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"uuid\") String uuid, @JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        this.uuid \u003d uuid;","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        uuid \u003d source.getUuid().toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public abstract Person toModelType() throws IllegalValueException;","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":5,"onnwards":4,"-":44}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTimeslot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":" * Jackson-friendly version of {@link Timeslot}.","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedTimeslot {","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    private final String start;","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private final String end;","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonAdaptedTimeslot} with the given {@code start} and {@code end}.","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedTimeslot(@JsonProperty(\"start\") String start, @JsonProperty(\"end\") String end) {","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code Timeslot} into this class for Jackson use.","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedTimeslot(Timeslot source) {","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d source.getStart().toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d source.getEnd().toString();","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    public String getStart() {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        return start;","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public String getEnd() {","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        return end;","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this Jackson-friendly adapted timeslot object into the model\u0027s {@code Timeslot} object.","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if the end dateTime is equal to or before the start dateTime","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * raises a {@code NegativeOrZeroDurationException}.","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        try {","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            return new Timeslot(LocalDateTime.parse(start), LocalDateTime.parse(end));","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (NegativeOrZeroDurationException e) {","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Timeslot.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":58}},{"path":"src/main/java/seedu/address/storage/JsonAppointmentScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * A class to access AppointmentSchedule data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAppointmentScheduleStorage implements AppointmentScheduleStorage {","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonAppointmentScheduleStorage.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAppointmentScheduleStorage(Path filePath) {","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        return filePath;","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException {","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return readAppointmentSchedule(filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #readAppointmentSchedule()}.","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cJsonSerializableAppointmentSchedule\u003e jsonAppointmentSchedule \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                filePath, JsonSerializableAppointmentSchedule.class);","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        if (!jsonAppointmentSchedule.isPresent()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        try {","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.of(jsonAppointmentSchedule.get().toModelType());","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            LOGGER.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        saveAppointmentSchedule(appointmentSchedule, filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #saveAppointmentSchedule(ReadOnlyAppointmentSchedule)}.","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath) throws","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"            IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentSchedule);","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAppointmentSchedule(appointmentSchedule), filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":80,"onnwards":2}},{"path":"src/main/java/seedu/address/storage/JsonDoctorRecordsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * A class to access DoctorRecords data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonDoctorRecordsStorage extends AddressBookStorage\u003cDoctor\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"icytornado"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonDoctorRecordsStorage.class);","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"icytornado"},"content":"    public JsonDoctorRecordsStorage(Path filePath) {","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        super(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"icytornado"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cDoctor\u003e\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"icytornado"},"content":"        Optional\u003cJsonSerializableDoctorRecords\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"icytornado"},"content":"                filePath, JsonSerializableDoctorRecords.class);","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"icytornado"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"        try {","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"icytornado"},"content":"            LOGGER.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"icytornado"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"icytornado"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"icytornado"},"content":"    @Override","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"icytornado"},"content":"    public void saveAddressBook(ReadOnlyAddressBook\u003cDoctor\u003e addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableDoctorRecords(addressBook), filePath);","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":2,"onnwards":1,"icytornado":54}},{"path":"src/main/java/seedu/address/storage/JsonPatientRecordsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * A class to access PatientRecords data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonPatientRecordsStorage extends AddressBookStorage\u003cPatient\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonPatientRecordsStorage.class);","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonPatientRecordsStorage(Path filePath) {","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        super(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cJsonSerializablePatientRecords\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"                filePath, JsonSerializablePatientRecords.class);","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            LOGGER.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAddressBook(ReadOnlyAddressBook\u003cPatient\u003e addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        JsonUtil.saveJsonFile(new JsonSerializablePatientRecords(addressBook), filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":11,"onnwards":2,"-":43}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * An Immutable AppointmentSchedule that is serializable to JSON format.","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@JsonRootName(value \u003d \"appointmentSchedule\")","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonSerializableAppointmentSchedule {","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_CONFLICTING_APPOINTMENTS \u003d \"Appointments list contains conflicts.\";","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonSerializableAppointmentSchedule} with the given appointments.","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializableAppointmentSchedule(","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code ReadOnlyAppointmentSchedule} into this class for Jackson use.","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentSchedule}.","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializableAppointmentSchedule(ReadOnlyAppointmentSchedule source) {","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this appointment schedule into the model\u0027s {@code AppointmentSchedule} object.","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentSchedule appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            if (appointmentSchedule.hasConflict(appointment)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                throw new IllegalValueException(MESSAGE_CONFLICTING_APPOINTMENTS);","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule.addAppointment(appointment);","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"Jacob-Pang":62}},{"path":"src/main/java/seedu/address/storage/JsonSerializableDoctorRecords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-03-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2021-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@JsonRootName(value \u003d \"doctorRecords\")","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"class JsonSerializableDoctorRecords {","lastModifiedDate":"2021-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"icytornado"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"Doctors list contains duplicate person(s).\";","lastModifiedDate":"2021-03-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":24,"author":{"gitId":"icytornado"},"content":"    private final List\u003cJsonAdaptedDoctor\u003e doctors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2021-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":29,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-27"},{"lineNumber":31,"author":{"gitId":"icytornado"},"content":"    public JsonSerializableDoctorRecords(@JsonProperty(\"doctors\") List\u003cJsonAdaptedDoctor\u003e doctors) {","lastModifiedDate":"2021-03-27"},{"lineNumber":32,"author":{"gitId":"icytornado"},"content":"        this.doctors.addAll(doctors);","lastModifiedDate":"2021-03-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"icytornado"},"content":"    public JsonSerializableDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e source) {","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"icytornado"},"content":"        doctors.addAll(source.getPersonList().stream().map(JsonAdaptedDoctor::new)","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"icytornado"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2021-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-27"},{"lineNumber":50,"author":{"gitId":"icytornado"},"content":"    public AddressBook\u003cDoctor\u003e toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-27"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"        AddressBook\u003cDoctor\u003e addressBook \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-27"},{"lineNumber":52,"author":{"gitId":"icytornado"},"content":"        for (JsonAdaptedDoctor jsonAdaptedDoctor : doctors) {","lastModifiedDate":"2021-03-27"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"            Doctor doctor \u003d jsonAdaptedDoctor.toModelType();","lastModifiedDate":"2021-03-27"},{"lineNumber":54,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":55,"author":{"gitId":"icytornado"},"content":"            if (addressBook.hasPerson(doctor)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-03-27"},{"lineNumber":58,"author":{"gitId":"icytornado"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"            addressBook.addPerson(doctor);","lastModifiedDate":"2021-03-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2021-03-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-27"}],"authorContributionMap":{"Jacob-Pang":1,"-":44,"icytornado":19}},{"path":"src/main/java/seedu/address/storage/JsonSerializablePatientRecords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@JsonRootName(value \u003d \"patientRecords\")","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"class JsonSerializablePatientRecords {","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate person(s).\";","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializablePatientRecords(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializablePatientRecords(ReadOnlyAddressBook\u003cPatient\u003e source) {","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        patients.addAll(source.getPersonList().stream().map(JsonAdaptedPatient::new)","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBook\u003cPatient\u003e toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e addressBook \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            if (addressBook.hasPerson(patient)) {","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"            addressBook.addPerson(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":20,"-":44}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"public interface Storage extends UserPrefsStorage, AppointmentScheduleStorage {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    Path getPatientRecordsFilePath();","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e readPatientRecords() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    void savePatientRecords(ReadOnlyAddressBook\u003cPatient\u003e patientRecords) throws IOException;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Doctor Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    Path getDoctorRecordsFilePath();","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAddressBook\u003cDoctor\u003e\u003e readDoctorRecords() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    void saveDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e doctorRecords) throws IOException;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException;","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Jacob-Pang":18,"-":28}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private AddressBookStorage\u003cPatient\u003e patientRecordsStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private AddressBookStorage\u003cDoctor\u003e doctorRecordsStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private AppointmentScheduleStorage appointmentScheduleStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} patient records","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * and {@code UserPrefStorage}.","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public StorageManager(AddressBookStorage\u003cPatient\u003e patientRecordsStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                          AddressBookStorage\u003cDoctor\u003e doctorRecordsStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"                          AppointmentScheduleStorage appointmentScheduleStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                          UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        this.patientRecordsStorage \u003d patientRecordsStorage;","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctorRecordsStorage \u003d doctorRecordsStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentScheduleStorage \u003d appointmentScheduleStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Patient Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecordsStorage.getAddressBookFilePath();","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e readPatientRecords() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        return readPatientRecords(patientRecordsStorage.getAddressBookFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns a {@code ReadOnlyAddressBook\u003cPatient\u003e} representing patient records if {@code filePath} exists.","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e readPatientRecords(Path filePath) throws","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"            DataConversionException, IOException {","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecordsStorage.readAddressBook(filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public void savePatientRecords(ReadOnlyAddressBook\u003cPatient\u003e addressBook) throws IOException {","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        savePatientRecords(addressBook, patientRecordsStorage.getAddressBookFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * Saves a {@code ReadOnlyAddressBook\u003cPatient\u003e} representing patient records based on {@code filePath}.","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    public void savePatientRecords(ReadOnlyAddressBook\u003cPatient\u003e addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        patientRecordsStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Doctor Records \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getDoctorRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecordsStorage.getAddressBookFilePath();","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cDoctor\u003e\u003e readDoctorRecords() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        return readDoctorRecords(doctorRecordsStorage.getAddressBookFilePath());","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns a {@code ReadOnlyAddressBook\u003cPatient\u003e} representing patient records if {@code filePath} exists.","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAddressBook\u003cDoctor\u003e\u003e readDoctorRecords(Path filePath) throws","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"            DataConversionException, IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        LOGGER.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecordsStorage.readAddressBook(filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e addressBook) throws IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        saveDoctorRecords(addressBook, doctorRecordsStorage.getAddressBookFilePath());","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"     * Saves a {@code ReadOnlyAddressBook\u003cPatient\u003e} representing patient records based on {@code filePath}.","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e addressBook, Path filePath) throws IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        LOGGER.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        doctorRecordsStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Appointment Schedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d //","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-08"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleStorage.getAppointmentScheduleFilePath();","lastModifiedDate":"2021-03-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"        return readAppointmentSchedule(appointmentScheduleStorage.getAppointmentScheduleFilePath());","lastModifiedDate":"2021-03-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath)","lastModifiedDate":"2021-03-08"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleStorage.readAppointmentSchedule(filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        saveAppointmentSchedule(appointmentSchedule, appointmentScheduleStorage.getAppointmentScheduleFilePath());","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath)","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"            throws IOException {","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentScheduleStorage.saveAppointmentSchedule(appointmentSchedule, filePath);","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":79,"onnwards":5,"-":74}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.AppointmentDisplay;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    public final Appointment appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    private Label patientName;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    private Label doctorName;","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    private Label timeslot;","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    public AppointmentCard(AppointmentDisplay appointment, int displayedIndex) {","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        patientName.setText(appointment.getPatient().getName().fullName);","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        doctorName.setText(appointment.getDoctor().getName().fullName);","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        timeslot.setText(appointment.getTimeslot().toString());","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        appointment.getTags().stream()","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                .forEach(tag -\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                    Label label \u003d new Label(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                    // dummy Text object to do width calculation","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                    Text text \u003d new Text(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                    if (text.getLayoutBounds().getWidth() \u003e 250) {","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                        label.setPrefWidth(250);","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                    }","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                    tags.getChildren().add(label);","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                });","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"                \u0026\u0026 appointment.equals(card.appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":26,"-":57}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.AppointmentDisplay;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-30"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.DoctorMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.PatientMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    private ListView\u003cAppointmentDisplay\u003e appointmentListView;","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code patientList}, {@code appointmentList}.","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    public AppointmentListPanel(ObservableList\u003cPatient\u003e patientList,","lastModifiedDate":"2021-03-30"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"            ObservableList\u003cDoctor\u003e doctorList, ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        // maintain a hashmap to improve speed of searching","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        ObservableList\u003cAppointmentDisplay\u003e displayAppointmentList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        Map\u003cUUID, Patient\u003e patientHashMap \u003d PatientMap.getPatientMap();","lastModifiedDate":"2021-04-07"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        Map\u003cUUID, Doctor\u003e doctorHashMap \u003d DoctorMap.getDoctorMap();","lastModifiedDate":"2021-04-07"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        PatientMap.updatePatientHashMap(patientList);","lastModifiedDate":"2021-04-06"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        DoctorMap.updateDoctorHashMap(doctorList);","lastModifiedDate":"2021-04-06"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c appointmentList.size(); i++) {","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            displayAppointmentList.add(mapToDisplayAppointment(","lastModifiedDate":"2021-03-30"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                    patientHashMap, doctorHashMap, appointmentList.get(i)));","lastModifiedDate":"2021-04-06"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        appointmentList.addListener(new ListChangeListener\u003cAppointment\u003e() {","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            // maintain a hashmap to improve speed of searching","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            public void onChanged(Change\u003c? extends Appointment\u003e change) {","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                while (change.next());","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                // everything can be handled with just 1 clear and add of all appointments.","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                displayAppointmentList.clear();","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                for (Appointment appt: change.getList()) {","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                    displayAppointmentList.add(mapToDisplayAppointment(","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                        patientHashMap, doctorHashMap, appt));","lastModifiedDate":"2021-04-06"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                }","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        // patientList also needs listener to update the appointment display list","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        patientList.addListener(new ListChangeListener\u003cPatient\u003e() {","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"            @Override","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"            public void onChanged(Change\u003c? extends Patient\u003e change) {","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                PatientMap.updatePatientHashMap(patientList);","lastModifiedDate":"2021-04-06"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                while (change.next());","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                displayAppointmentList.clear();","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"                for (Appointment appt: appointmentList) {","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                    displayAppointmentList.add(mapToDisplayAppointment(","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"                        patientHashMap, doctorHashMap, appt));","lastModifiedDate":"2021-04-06"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-03-30"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        // doctorList also needs listener to update the appointment display list","lastModifiedDate":"2021-03-30"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        doctorList.addListener(new ListChangeListener\u003cDoctor\u003e() {","lastModifiedDate":"2021-03-30"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"            @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"            public void onChanged(Change\u003c? extends Doctor\u003e change) {","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"                DoctorMap.updateDoctorHashMap(doctorList);","lastModifiedDate":"2021-04-06"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"                while (change.next());","lastModifiedDate":"2021-03-30"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"                displayAppointmentList.clear();","lastModifiedDate":"2021-03-30"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"                for (Appointment appt: appointmentList) {","lastModifiedDate":"2021-03-30"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"                    displayAppointmentList.add(mapToDisplayAppointment(","lastModifiedDate":"2021-03-30"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"                        patientHashMap, doctorHashMap, appt));","lastModifiedDate":"2021-04-06"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"                }","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"        });","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        appointmentListView.setItems(FXCollections.unmodifiableObservableList(displayAppointmentList));","lastModifiedDate":"2021-03-23"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());","lastModifiedDate":"2021-03-23"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"     * With the given {@code Appointment}, gets the corresponding {@code Patient} from","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"     * {@code Map} using the {@code Appointment}\u0027s PatientUuid as the key.","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"     * If {@code Patient} does not exist in the {@code Map}, then seaches","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"     * through {@code patientList} to find the corresponding {@code Patient} and add it","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"     * to the {@code Map}.","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"    public AppointmentDisplay mapToDisplayAppointment(Map\u003cUUID, Patient\u003e patientHashMap,","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"            Map\u003cUUID, Doctor\u003e doctorHashMap, Appointment appt) {","lastModifiedDate":"2021-03-30"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"        // mutates hashmap","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        assert patientHashMap.containsKey(appt.getPatientUuid())","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"                : \"patientHashMap should always contain the appointment\u0027s patient UUID\";","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"        assert doctorHashMap.containsKey(appt.getDoctorUuid())","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"                : \"doctorHashMap should always contain the appointment\u0027s doctor UUID\";","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        return new AppointmentDisplay(patientHashMap.get(appt.getPatientUuid()),","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"                doctorHashMap.get(appt.getDoctorUuid()), appt.getTimeslot(), appt.getTags());","lastModifiedDate":"2021-03-30"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2021-03-10"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointmentDisplay\u003e {","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"        protected void updateItem(AppointmentDisplay appointment, boolean empty) {","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"onnwards"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"                setText(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"            } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"onnwards":131}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import javafx.event.EventHandler;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import seedu.address.storage.InputCommandStorage;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"     * Handles the Enter, Up, and Down Key button pressed event.","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"        handleToggleInput();","lastModifiedDate":"2021-03-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2021-03-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-03-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2021-03-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2021-03-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2021-03-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2021-03-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-31"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"    }","lastModifiedDate":"2021-03-31"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"    private void handleToggleInput() {","lastModifiedDate":"2021-03-31"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"        commandTextField.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"            @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"            public void handle(KeyEvent ke) {","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"                KeyCode keyboardEvent \u003d ke.getCode();","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"                if (keyboardEvent \u003d\u003d KeyCode.UP) {","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"                    commandTextField.setText(InputCommandStorage.retrieveInput(true));","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"                }","lastModifiedDate":"2021-03-31"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"                if (keyboardEvent \u003d\u003d KeyCode.DOWN) {","lastModifiedDate":"2021-03-31"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"                    commandTextField.setText(InputCommandStorage.retrieveInput(false));","lastModifiedDate":"2021-03-30"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"                }","lastModifiedDate":"2021-03-30"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"                ke.consume();","lastModifiedDate":"2021-03-30"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"            }","lastModifiedDate":"2021-03-30"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"        });","lastModifiedDate":"2021-03-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"kwmiw":25,"-":84}},{"path":"src/main/java/seedu/address/ui/DoctorCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class DoctorCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"DoctorListCard.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    // TODO create doctor class and convert person class to doctor class","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public final Doctor doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorCard(Doctor doctor, int displayedIndex) {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        this.doctor \u003d doctor;","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        name.setText(doctor.getName().fullName);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        doctor.getTags().stream()","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                .forEach(tag -\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                    Label label \u003d new Label(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                    // dummy Text object to do width calculation","lastModifiedDate":"2021-04-07"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                    Text text \u003d new Text(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                    if (text.getLayoutBounds().getWidth() \u003e 250) {","lastModifiedDate":"2021-04-07"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                        label.setPrefWidth(250);","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                    }","lastModifiedDate":"2021-04-07"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                    tags.getChildren().add(label);","lastModifiedDate":"2021-04-07"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                });","lastModifiedDate":"2021-04-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        if (!(other instanceof DoctorCard)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"        DoctorCard card \u003d (DoctorCard) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"                \u0026\u0026 doctor.equals(card.doctor);","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":5,"onnwards":17,"-":56}},{"path":"src/main/java/seedu/address/ui/DoctorListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class DoctorListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"DoctorListPanel.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DoctorListPanel.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private ListView\u003cDoctor\u003e doctorListView;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorListPanel(ObservableList\u003cDoctor\u003e doctorList) {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        doctorListView.setItems(doctorList);","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        doctorListView.setCellFactory(listView -\u003e new DoctorListViewCell());","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    class DoctorListViewCell extends ListCell\u003cDoctor\u003e {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        // TODO create doctor class and convert person class to doctor class","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        protected void updateItem(Doctor doctor, boolean empty) {","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            super.updateItem(doctor, empty);","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"            if (empty || doctor \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                setText(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"                setGraphic(new DoctorCard(doctor, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":5,"onnwards":45}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103-w17-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        LOGGER.fine(\"Showing help page about the application.\");","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"onnwards":3,"-":99}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    private DoctorListPanel doctorListPanel;","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    private StackPane doctorListPanelPlaceholder;","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    private StackPane patientStatusBarPlaceholder;","lastModifiedDate":"2021-03-30"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    private StackPane doctorStatusBarPlaceholder;","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    private StackPane appointmentStatusBarPlaceholder;","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"        doctorListPanel \u003d new DoctorListPanel(logic.getFilteredDoctorList());","lastModifiedDate":"2021-03-30"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"        doctorListPanelPlaceholder.getChildren().add(doctorListPanel.getRoot());","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredPatientList(),","lastModifiedDate":"2021-03-26"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"                logic.getFilteredDoctorList(), logic.getFilteredAppointmentList());","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"        StatusBarFooter patientStatusBarFooter \u003d new StatusBarFooter(logic.getPatientRecordsFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"        patientStatusBarPlaceholder.getChildren().add(patientStatusBarFooter.getRoot());","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"        StatusBarFooter doctorStatusBarFooter \u003d new StatusBarFooter(logic.getDoctorRecordsFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"        doctorStatusBarPlaceholder.getChildren().add(doctorStatusBarFooter.getRoot());","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"onnwards"},"content":"        StatusBarFooter appointmentStatusBarFooter \u003d new StatusBarFooter(logic.getAppointmentScheduleFilePath());","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"onnwards"},"content":"        appointmentStatusBarPlaceholder.getChildren().add(appointmentStatusBarFooter.getRoot());","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"    public AppointmentListPanel getAppointmentListPanel() {","lastModifiedDate":"2021-03-10"},{"lineNumber":194,"author":{"gitId":"onnwards"},"content":"        return appointmentListPanel;","lastModifiedDate":"2021-03-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"onnwards":35,"-":188}},{"path":"src/main/java/seedu/address/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.scene.text.Text;","lastModifiedDate":"2021-04-07"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    // TODO create patient class and convert person class to patient class","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public final Patient patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    private HBox cardPane;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    private Label name;","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    private Label id;","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    private Label phone;","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    private Label address;","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    private Label email;","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    private FlowPane tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to display.","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        phone.setText(patient.getPhone().value);","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        address.setText(patient.getAddress().value);","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        email.setText(patient.getEmail().value);","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        patient.getTags().stream()","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                .forEach(tag -\u003e {","lastModifiedDate":"2021-04-07"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                    Label label \u003d new Label(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                    // dummy Text object to do width calculation","lastModifiedDate":"2021-04-07"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                    Text text \u003d new Text(tag.tagName);","lastModifiedDate":"2021-04-07"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                    if (text.getLayoutBounds().getWidth() \u003e 250) {","lastModifiedDate":"2021-04-07"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                        label.setPrefWidth(250);","lastModifiedDate":"2021-04-07"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                    }","lastModifiedDate":"2021-04-07"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                    tags.getChildren().add(label);","lastModifiedDate":"2021-04-07"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                });","lastModifiedDate":"2021-04-07"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        // short circuit if same object","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        // instanceof handles nulls","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"        if (!(other instanceof PatientCard)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        // state check","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        PatientCard card \u003d (PatientCard) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"                \u0026\u0026 patient.equals(card.patient);","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":5,"onnwards":82}},{"path":"src/main/java/seedu/address/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.ui;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    @FXML","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        super(FXML);","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        // TODO create patient class and convert person class to patient class","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"                setGraphic(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                setText(null);","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":8,"onnwards":41}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        LOGGER.info(\"Starting UI...\");","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            LOGGER.severe(StringUtil.getDetails(e));","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        LOGGER.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"onnwards":4,"-":85}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        \u003cLabel fx:id\u003d\"patientName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"      \u003cLabel fx:id\u003d\"doctorName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$doctorName\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"      \u003cLabel fx:id\u003d\"timeslot\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeslot\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"onnwards":3,"-":32}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"  \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"onnwards":1,"-":7}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":".person-label {","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":".split-pane:vertical .split-pane-divider {","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2017-03-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2017-03-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":325,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":350,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":353,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":355,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"onnwards":10,"-":352}},{"path":"src/main/resources/view/DoctorListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"75\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"onnwards":33}},{"path":"src/main/resources/view/DoctorListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"  \u003cListView fx:id\u003d\"doctorListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"onnwards":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"         title\u003d\"App-Ointment\" minWidth\u003d\"775\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"      \u003cVBox minHeight\u003d\"346.0\" minWidth\u003d\"775.0\" prefWidth\u003d\"925\"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"          \u003cMenuBar fx:id\u003d\"menuBar\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"          \u003cSplitPane dividerPositions\u003d\"0.3\" orientation\u003d\"HORIZONTAL\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"              \u003cSplitPane dividerPositions\u003d\"0.4\" orientation\u003d\"VERTICAL\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                \u003cVBox fx:id\u003d\"doctorList\" minWidth\u003d\"300\" prefWidth\u003d\"350\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"                  \u003cStackPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"                      \u003cLabel styleClass\u003d\"person-label\" text\u003d\"Doctors\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                  \u003c/StackPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                  \u003cStackPane fx:id\u003d\"doctorListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                \u003cVBox fx:id\u003d\"patientList\" minWidth\u003d\"300\" prefWidth\u003d\"350\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                  \u003cStackPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                    \u003cchildren\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                      \u003cLabel styleClass\u003d\"person-label\" text\u003d\"Patients\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                    \u003c/children\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                  \u003c/StackPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                  \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"              \u003c/SplitPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"              \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"450\" prefWidth\u003d\"550\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"                \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"          \u003c/SplitPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"            \u003cVBox VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"              \u003cchildren\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"                \u003cStackPane fx:id\u003d\"patientStatusBarPlaceholder\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"                \u003cStackPane fx:id\u003d\"doctorStatusBarPlaceholder\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"                \u003cStackPane fx:id\u003d\"appointmentStatusBarPlaceholder\" /\u003e","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"              \u003c/children\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"        \u003c/children\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"onnwards":55,"-":48}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"onnwards":4,"-":32}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"onnwards":8}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2017-06-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2021-04-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"onnwards":1,"-":8}},{"path":"src/test/data/JsonPatientRecordsStorageTest/invalidAndValidPatientRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":1,"-":12}},{"path":"src/test/data/JsonPatientRecordsStorageTest/invalidPatientRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":1,"-":7}},{"path":"src/test/data/JsonSerializableDoctorRecordsTest/duplicateDoctorRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"{","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"  \"doctors\": [ {","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"97f83c85-67ba-44e6-8161-b3e82e13ec6e\",","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Alice\",","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"97f83c85-67ba-44e6-8161-b3e82e13ec6e\",","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Alice\",","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    \"address\" : \"4th street\"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"  } ]","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"onnwards":11}},{"path":"src/test/data/JsonSerializableDoctorRecordsTest/invalidDoctorRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"{","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"  \"doctors\": [ {","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"    \"nameFieldMissing\": \"Unused\"","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"  } ]","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"onnwards":5}},{"path":"src/test/data/JsonSerializableDoctorRecordsTest/typicalDoctorRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"{","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"  \"_comment\": \"AddressBook save file which contains the same Doctor values as in TypicalDoctors#getTypicalDoctorRecords()\",","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"  \"doctors\" : [ {","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"e238301a-934c-4730-91f5-da2f55af44ff\",","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Meredith Grey\",","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ \"GreysAnatomy\" ]","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"4e4163f3-82ca-4811-aaf0-31e896229672\",","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Who\",","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ \"DoctorWho\", \"TimeLord\" ]","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"e90635ae-2c07-40fc-96be-4f5019095936\",","lastModifiedDate":"2021-03-30"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Strange\",","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"0b56a520-f0db-4a3a-b560-3aab72a9e10c\",","lastModifiedDate":"2021-03-30"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Jekyll\",","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ \"AndMrHyde\" ]","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"e6b1f1d6-c85d-4baf-b07f-f5a2876e4d75\",","lastModifiedDate":"2021-03-30"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Murphy\",","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"  }, {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"40c9902a-110a-44c1-a064-a5ef5e8c0117\",","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Dr Drake Ramoray\",","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"  } ]","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"onnwards":28}},{"path":"src/test/data/JsonSerializablePatientRecordsTest/duplicatePatientRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"    \"uuid\": \"64ed5bc0-42bb-4e20-ac70-7d1e6683685b\",","lastModifiedDate":"2021-03-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    \"uuid\": \"64ed5bc0-42bb-4e20-ac70-7d1e6683685b\",","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":2,"-":13}},{"path":"src/test/data/JsonSerializablePatientRecordsTest/invalidPatientRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"  \"patients\": [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\",","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":1,"-":7}},{"path":"src/test/data/JsonSerializablePatientRecordsTest/typicalPatientRecords.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"  \"_comment\": \"AddressBook save file which contains the same Patient values as in TypicalPatients#getTypicalPatientRecords()\",","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"  \"patients\" : [ {","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"64ed5bc0-42bb-4e20-ac70-7d1e6683685b\",","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\",","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\",","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\",","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"3fcc89d1-3d68-4a7d-a1f5-17ac202eb83f\",","lastModifiedDate":"2021-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\",","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\",","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\",","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"89c57cca-54e1-49ca-8b6c-ff0c7a632d20\",","lastModifiedDate":"2021-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\",","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"5f71a395-f7a3-460f-b358-937808b8a6dd\",","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    \"name\" : \"Daniel Wellington\",","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\",","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"60fe72ad-7d3c-450b-8eb7-16f0d6c78a3c\",","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\",","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\",","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\",","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"d90780b1-0f2c-479f-8b81-d46497e2966d\",","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\",","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\",","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\",","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    \"uuid\" : \"9703d0d9-54a9-462f-937b-8db0bfc74682\",","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\",","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\",","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\",","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\",","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":1,"onnwards":9,"-":43}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \",","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"  \"patientRecordsFilePath\" : \"PatientRecords.json\",","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"  \"appointmentScheduleFilePath\" : \"AppointmentSchedule.json\"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Jacob-Pang":2,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,","lastModifiedDate":"2016-09-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },","lastModifiedDate":"2017-02-25"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"  \"patientRecordsFilePath\" : \"PatientRecords.json\",","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"  \"doctorRecordsFilePath\" : \"DoctorRecords.json\",","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"  \"appointmentScheduleFilePath\" : \"AppointmentSchedule.json\"","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Jacob-Pang":2,"onnwards":1,"-":10}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.AMY;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.ListPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonAppointmentScheduleStorage;","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonDoctorRecordsStorage;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonPatientRecordsStorage;","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        JsonPatientRecordsStorage patientRecordsStorage \u003d new JsonPatientRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"PatientRecords.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        JsonDoctorRecordsStorage doctorRecordsStorage \u003d new JsonDoctorRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"DoctorRecords.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"AppointmentSchedule.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        StorageManager storage \u003d new StorageManager(patientRecordsStorage, doctorRecordsStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentScheduleStorage, userPrefsStorage);","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"pngsebastian"},"content":"        String deletePatientCommand \u003d \"delete-patient 9\";","lastModifiedDate":"2021-03-15"},{"lineNumber":73,"author":{"gitId":"pngsebastian"},"content":"        assertCommandException(deletePatientCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"        String listPatientCommand \u003d ListPatientCommand.COMMAND_WORD;","lastModifiedDate":"2021-03-16"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(listPatientCommand, ListPatientCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2021-03-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        // Setup LogicManager with JsonPatientRecordsIoExceptionThrowingStub","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        JsonPatientRecordsStorage patientRecordsStorage \u003d new JsonPatientRecordsIoExceptionThrowingStub(","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"ioExceptionPatientRecords.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        JsonDoctorRecordsStorage doctorRecordsStorage \u003d new JsonDoctorRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"ioExceptionDoctorRecords.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"ioExceptionAppointmentSchedule.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"                temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        StorageManager storage \u003d new StorageManager(patientRecordsStorage, doctorRecordsStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentScheduleStorage, userPrefsStorage);","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        String addCommand \u003d AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-03-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"            new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"            new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"            new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"    private static class JsonPatientRecordsIoExceptionThrowingStub extends JsonPatientRecordsStorage {","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"        private JsonPatientRecordsIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"        public void saveAddressBook(ReadOnlyAddressBook\u003cPatient\u003e patientRecords, Path filePath) throws IOException {","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Jacob-Pang":45,"onnwards":5,"pngsebastian":2,"-":133}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import java.util.Map;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.AppointmentContainsKeywordsPredicate;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.PatientMap;","lastModifiedDate":"2021-04-06"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.SamePersonPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    public static final String VALID_UUID_AMY \u003d \"564ae8c3-d0e6-4597-93ae-fe88c21a819f\";","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    public static final String VALID_UUID_BOB \u003d \"8e80ae4c-6435-408e-918c-3d73bc3df1e4\";","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String VALID_NAME_DR_LEONARD \u003d \"Dr Leonard Hofstadter\";","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String VALID_NAME_DR_SHELDON \u003d \"Dr Sheldon Cooper\";","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String VALID_TAG_SHORT \u003d \"short\";","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String VALID_TAG_TALL \u003d \"tall\";","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    public static final EditPatientCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_DR_LEONARD;","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public static final EditDoctorCommand.EditDoctorDescriptor DESC_DR_SHELDON;","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"                .withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"        DESC_DR_LEONARD \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_LEONARD)","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"                .withTags(VALID_TAG_SHORT).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        DESC_DR_SHELDON \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_SHELDON)","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"                .withTags(VALID_TAG_TALL).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e expectedPatientRecords \u003d new AddressBook\u003c\u003e(actualModel.getPatientRecords());","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e expectedFilteredPatientList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cDoctor\u003e expectedDoctorRecords \u003d new AddressBook\u003c\u003e(actualModel.getDoctorRecords());","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cDoctor\u003e expectedFilteredDoctorList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDoctorList());","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(expectedPatientRecords, actualModel.getPatientRecords());","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(expectedFilteredPatientList, actualModel.getFilteredPatientList());","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(expectedDoctorRecords, actualModel.getDoctorRecords());","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(expectedFilteredDoctorList, actualModel.getFilteredDoctorList());","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"     * Updates {@code model}\u0027s filtered patient list to show only the patient at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code model}\u0027s patient records.","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(new SamePersonPredicate(patient));","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"     * Updates {@code model}\u0027s filtered doctor list to show only the doctor at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code model}\u0027s doctor records.","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"    public static void showDoctorAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDoctorList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctor \u003d model.getFilteredDoctorList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredDoctorList(new SamePersonPredicate(doctor));","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(1, model.getFilteredDoctorList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":172,"author":{"gitId":"onnwards"},"content":"     * Updates {@code model}\u0027s filtered list to show only the appointment at the given {@code targetIndex} in the","lastModifiedDate":"2021-03-18"},{"lineNumber":173,"author":{"gitId":"onnwards"},"content":"     * {@code model}\u0027s appointment schedule.","lastModifiedDate":"2021-03-16"},{"lineNumber":174,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":175,"author":{"gitId":"onnwards"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2021-03-16"},{"lineNumber":176,"author":{"gitId":"onnwards"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-03-16"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"        Appointment appointment \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2021-03-16"},{"lineNumber":179,"author":{"gitId":"onnwards"},"content":"        Map\u003cUUID, Patient\u003e patientHashMap \u003d PatientMap.getPatientMap();","lastModifiedDate":"2021-04-07"},{"lineNumber":180,"author":{"gitId":"onnwards"},"content":"        PatientMap.updatePatientHashMap(model.getPatientRecords().getPersonList());","lastModifiedDate":"2021-04-06"},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":182,"author":{"gitId":"onnwards"},"content":"        UUID patientUuid \u003d appointment.getPatientUuid();","lastModifiedDate":"2021-03-28"},{"lineNumber":183,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":184,"author":{"gitId":"onnwards"},"content":"        final String patientName \u003d patientHashMap.get(patientUuid).getName().fullName;","lastModifiedDate":"2021-03-28"},{"lineNumber":185,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"        model.updateFilteredAppointmentList(","lastModifiedDate":"2021-03-16"},{"lineNumber":187,"author":{"gitId":"onnwards"},"content":"                new AppointmentContainsKeywordsPredicate(","lastModifiedDate":"2021-03-18"},{"lineNumber":188,"author":{"gitId":"onnwards"},"content":"                        Arrays.asList(patientName),","lastModifiedDate":"2021-03-28"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"                        new ArrayList\u003c\u003e(),","lastModifiedDate":"2021-03-18"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"                        new ArrayList\u003c\u003e(),","lastModifiedDate":"2021-03-18"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"                        new ArrayList\u003c\u003e()));","lastModifiedDate":"2021-03-18"},{"lineNumber":192,"author":{"gitId":"onnwards"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2021-03-16"},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Jacob-Pang":44,"onnwards":35,"-":115}},{"path":"src/test/java/seedu/address/logic/commands/appointment/ClearAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"public class ClearAppointmentCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public void execute_emptyAppointmentSchedule_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ClearAppointmentCommand(), model,","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"                ClearAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    public void execute_nonEmptyAppointmentSchedule_success() {","lastModifiedDate":"2021-03-16"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setAppointmentSchedule(new AppointmentSchedule());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ClearAppointmentCommand(), model,","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"                ClearAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Jacob-Pang":7,"onnwards":31}},{"path":"src/test/java/seedu/address/logic/commands/appointment/ListAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.appointment;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-16"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;","lastModifiedDate":"2021-03-16"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-16"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-16"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-16"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-16"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-16"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"/**","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListAppointmentCommand.","lastModifiedDate":"2021-03-16"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" */","lastModifiedDate":"2021-03-16"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"public class ListAppointmentCommandTest {","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private Model model;","lastModifiedDate":"2021-03-16"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-16"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel \u003d new ModelManager(model.getPatientRecords(), model.getDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                model.getAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-16"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ListAppointmentCommand(), model,","lastModifiedDate":"2021-03-16"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-16"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-03-16"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ListAppointmentCommand(), model,","lastModifiedDate":"2021-03-16"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                ListAppointmentCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-16"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-16"}],"authorContributionMap":{"Jacob-Pang":6,"onnwards":39}},{"path":"src/test/java/seedu/address/logic/commands/doctor/AddDoctorCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * Contains integration tests (interaction with the Model) for {@code AddDoctorCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class AddDoctorCommandIntegrationTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_newDoctor_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientRecords(), model.getDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                model.getAppointmentSchedule(), model.getUserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.addDoctor(validDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(new AddDoctorCommand(validDoctor), model,","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                String.format(AddDoctorCommand.MESSAGE_SUCCESS, validDoctor), expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicateDoctor_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctorInList \u003d model.getDoctorRecords().getPersonList().get(0);","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(new AddDoctorCommand(doctorInList), model,","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":51,"onnwards":1}},{"path":"src/test/java/seedu/address/logic/commands/doctor/AddDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelStub;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"public class AddDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    public void constructor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddDoctorCommand(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_doctorAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStubAcceptingDoctorAdded modelStub \u003d new ModelStubAcceptingDoctorAdded();","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        CommandResult commandResult \u003d new AddDoctorCommand(validDoctor).execute(modelStub);","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(String.format(AddDoctorCommand.MESSAGE_SUCCESS, validDoctor),","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Arrays.asList(validDoctor), modelStub.doctorsAdded);","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicateDoctor_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        AddDoctorCommand addCommand \u003d new AddDoctorCommand(validDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStub modelStub \u003d new ModelStubWithDoctor(validDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(CommandException.class, AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR, () -\u003e addCommand","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                .execute(modelStub));","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor alice \u003d new DoctorBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor bob \u003d new DoctorBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        AddDoctorCommand addAliceCommand \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        AddDoctorCommand addBobCommand \u003d new AddDoctorCommand(bob);","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        AddDoctorCommand addAliceCommandCopy \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    private class ModelStubWithDoctor extends ModelStub {","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        private final Doctor doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStubWithDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"            this.doctor \u003d doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"            return this.doctor.isSamePerson(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"     * A Model stub that always accept the doctor being added.","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    private class ModelStubAcceptingDoctorAdded extends ModelStub {","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"            return doctorsAdded.stream().anyMatch(doctor::isSamePerson);","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"        public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"            return doctorsAdded.stream().anyMatch(doctor -\u003e doctor.getUuid() \u003d\u003d uuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-30"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        public ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"            return new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":118,"onnwards":6}},{"path":"src/test/java/seedu/address/logic/commands/doctor/ClearDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-30"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.testutil.TypicalAppObjects.getEmptyAppointmentSchedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-30"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-30"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-30"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"import seedu.address.logic.commands.patient.ClearPatientCommand;","lastModifiedDate":"2021-03-30"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"public class ClearDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_emptyDoctorRecords_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(new ClearDoctorCommand(), model, ClearDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"    public void execute_emptyAppointmentScheduleNonEmptyDoctorRecords_success() {","lastModifiedDate":"2021-03-30"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"                getEmptyAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"                getEmptyAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-30"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"        expectedModel.setPatientRecords(new AddressBook\u003c\u003e());","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"        assertCommandSuccess(new ClearPatientCommand(), model, ClearPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"    @Test","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"    public void execute_nonEmptyAppointmentScheduleNonEmptyDoctorRecords_failure() {","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"        Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"        assertCommandFailure(new ClearPatientCommand(), model, MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED);","lastModifiedDate":"2021-03-30"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":28,"pngsebastian":20}},{"path":"src/test/java/seedu/address/logic/commands/doctor/DeleteDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"public class DeleteDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    // empty appointment schedule to prevent conflict during delete operations","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    private final Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            new AppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(outOfBoundIndex, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(deleteDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctorToDelete \u003d model.getFilteredDoctorList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_DOCTOR_SUCCESS, doctorToDelete);","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.deleteDoctor(doctorToDelete);","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        showNoDoctors(expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(deleteDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDoctorRecords().getPersonList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteDoctorCommand \u003d new DeleteDoctorCommand(outOfBoundIndex, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(deleteDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteFirstCommand \u003d new DeleteDoctorCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":97,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteSecondCommand \u003d new DeleteDoctorCommand(INDEX_SECOND_IN_LIST, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"pngsebastian"},"content":"        DeleteDoctorCommand deleteFirstCommandCopy \u003d new DeleteDoctorCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-30"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    private void showNoDoctors(Model model) {","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredDoctorList(p -\u003e false);","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(model.getFilteredDoctorList().isEmpty());","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":117,"pngsebastian":7}},{"path":"src/test/java/seedu/address/logic/commands/doctor/EditDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_DR_LEONARD;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_DR_SHELDON;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DR_SHELDON;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TALL;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand.EditDoctorDescriptor;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"public class EditDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(editedDoctor).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST, descriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(editDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        Index indexLastDoctor \u003d Index.fromOneBased(model.getFilteredDoctorList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor lastDoctor \u003d model.getFilteredDoctorList().get(indexLastDoctor.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        DoctorBuilder doctorInList \u003d new DoctorBuilder(lastDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor editedDoctor \u003d doctorInList.withName(VALID_NAME_DR_SHELDON).withTags(VALID_TAG_TALL).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_SHELDON)","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"                .withTags(VALID_TAG_TALL).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(indexLastDoctor, descriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(editDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setDoctor(lastDoctor, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"                new EditDoctorDescriptor());","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor editedDoctor \u003d model.getFilteredDoctorList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(editDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctorInFilteredList \u003d model.getFilteredDoctorList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor editedDoctor \u003d new DoctorBuilder(doctorInFilteredList).withName(VALID_NAME_DR_SHELDON).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_SHELDON).build());","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(editDoctorCommand.MESSAGE_EDIT_DOCTOR_SUCCESS, editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setDoctor(model.getFilteredDoctorList().get(0), editedDoctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(editDoctorCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicateDoctorUnfilteredList_failure() {","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor firstPerson \u003d model.getFilteredDoctorList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_SECOND_IN_LIST, descriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editDoctorCommand, model, editDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicateDotorFilteredList_failure() {","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"        Doctor doctorInList \u003d model.getDoctorRecords().getPersonList().get(INDEX_SECOND_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"                new EditDoctorDescriptorBuilder(doctorInList).build());","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editDoctorCommand, model, editDoctorCommand.MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDoctorList().size() + 1);","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor descriptor \u003d new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_SHELDON).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-29"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2021-03-29"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"     * but smaller than size of address book","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDoctorRecords().getPersonList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand editDoctorCommand \u003d new EditDoctorCommand(outOfBoundIndex,","lastModifiedDate":"2021-03-29"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"                new EditDoctorDescriptorBuilder().withName(VALID_NAME_DR_SHELDON).build());","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editDoctorCommand, model, Messages.MESSAGE_INVALID_DOCTOR_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"        final EditDoctorCommand standardCommand \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST, DESC_DR_LEONARD);","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor copyDescriptor \u003d new EditDoctorDescriptor(DESC_DR_LEONARD);","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorCommand commandWithSameValues \u003d new EditDoctorCommand(INDEX_FIRST_IN_LIST, copyDescriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(standardCommand.equals(new ClearDoctorCommand()));","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(standardCommand.equals(new EditDoctorCommand(INDEX_SECOND_IN_LIST, DESC_DR_LEONARD)));","lastModifiedDate":"2021-03-29"},{"lineNumber":193,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(standardCommand.equals(new EditDoctorCommand(INDEX_FIRST_IN_LIST, DESC_DR_SHELDON)));","lastModifiedDate":"2021-03-29"},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":198}},{"path":"src/test/java/seedu/address/logic/commands/doctor/EditDoctorDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_DR_LEONARD;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_DR_SHELDON;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DR_SHELDON;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TALL;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand.EditDoctorDescriptor;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditDoctorDescriptorBuilder;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class EditDoctorDescriptorTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor descriptorWithSameValues \u003d new EditDoctorDescriptor(DESC_DR_LEONARD);","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(DESC_DR_LEONARD.equals(descriptorWithSameValues));","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(DESC_DR_LEONARD.equals(DESC_DR_LEONARD));","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(DESC_DR_LEONARD.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(DESC_DR_LEONARD.equals(5));","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(DESC_DR_LEONARD.equals(DESC_DR_SHELDON));","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        EditDoctorDescriptor editedLeonard \u003d new EditDoctorDescriptorBuilder(DESC_DR_LEONARD)","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"                .withName(VALID_NAME_DR_SHELDON).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(DESC_DR_LEONARD.equals(editedLeonard));","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        editedLeonard \u003d new EditDoctorDescriptorBuilder(DESC_DR_LEONARD).withTags(VALID_TAG_TALL).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(DESC_DR_LEONARD.equals(editedLeonard));","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":44}},{"path":"src/test/java/seedu/address/logic/commands/doctor/FindDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DOCTORS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.DR_GREY;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.DR_STRANGE;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.DR_WHO;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":" * Contains integration tests (interaction with the Model) for {@code FindDoctorCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"public class FindDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"            getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    private Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        new AddressBook\u003c\u003e(getTypicalPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        new AddressBook\u003c\u003e(getTypicalDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        new AppointmentSchedule(getTypicalAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        new UserPrefs()","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    );","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        FindDoctorCommand findFirstCommand \u003d new FindDoctorCommand(firstPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        FindDoctorCommand findSecondCommand \u003d new FindDoctorCommand(secondPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        FindDoctorCommand findFirstCommandCopy \u003d new FindDoctorCommand(firstPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_zeroKeywords_noDoctorFound() {","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DOCTORS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        FindDoctorCommand command \u003d new FindDoctorCommand(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredDoctorList());","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_multipleKeywords_multipleDoctorsFound() {","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_DOCTORS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Grey Who Strange\");","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        FindDoctorCommand command \u003d new FindDoctorCommand(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.updateFilteredDoctorList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Arrays.asList(DR_GREY, DR_WHO, DR_STRANGE), model.getFilteredDoctorList());","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":93,"onnwards":1}},{"path":"src/test/java/seedu/address/logic/commands/doctor/ListDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showDoctorAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"public class ListDoctorCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private Model expectedModel;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    @BeforeEach","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public void setUp() {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        showDoctorAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(new ListDoctorCommand(), model, ListDoctorCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":50}},{"path":"src/test/java/seedu/address/logic/commands/patient/AddPatientCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"public class AddPatientCommandIntegrationTest {","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(model.getPatientRecords(), model.getDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                model.getAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandSuccess(new AddPatientCommand(validPatient), model,","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient), expectedModel);","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patientInList \u003d model.getPatientRecords().getPersonList().get(0);","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(new AddPatientCommand(patientInList), model,","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Jacob-Pang":18,"onnwards":4,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/patient/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ModelStub;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPatient),","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        AddPatientCommand addCommand \u003d new AddPatientCommand(validPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                .execute(modelStub));","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        private final Patient patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"            return this.patient.isSamePerson(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"        public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"            return patientsAdded.stream().anyMatch(patient -\u003e patient.getUuid() \u003d\u003d uuid);","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"            requireNonNull(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2021-03-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        public ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords() {","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"            return new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"Jacob-Pang":44,"onnwards":8,"-":72}},{"path":"src/test/java/seedu/address/logic/commands/patient/ClearPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED;","lastModifiedDate":"2021-03-30"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2021-03-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import static seedu.address.testutil.TypicalAppObjects.getEmptyAppointmentSchedule;","lastModifiedDate":"2021-03-26"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"public class ClearPatientCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_emptyPatientRecords_success() {","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ClearPatientCommand(), model, ClearPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"    public void execute_emptyAppointmentScheduleNonEmptyPatientRecords_success() {","lastModifiedDate":"2021-03-30"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"                getEmptyAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"                getEmptyAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setPatientRecords(new AddressBook\u003c\u003e());","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ClearPatientCommand(), model, ClearPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"    public void execute_nonEmptyAppointmentScheduleNonEmptyPatientRecords_failure() {","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"        assertCommandFailure(new ClearPatientCommand(), model, MESSAGE_CLEAR_APPOINTMENTS_BEFORE_PATIENTS_REQUIRED);","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"Jacob-Pang":6,"onnwards":9,"pngsebastian":10,"-":22}},{"path":"src/test/java/seedu/address/logic/commands/patient/DeletePatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"public class DeletePatientCommandTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    // empty appointment schedule to prevent conflict in delete operations","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            new AppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        Patient personToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"pngsebastian"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_PATIENT_SUCCESS, personToDelete);","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.deletePatient(personToDelete);","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"pngsebastian"},"content":"        assertCommandSuccess(deletePatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientRecords().getPersonList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deletePatientCommand \u003d new DeletePatientCommand(outOfBoundIndex, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"pngsebastian"},"content":"        assertCommandFailure(deletePatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deleteFirstCommand \u003d new DeletePatientCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deleteSecondCommand \u003d new DeletePatientCommand(INDEX_SECOND_IN_LIST, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand deleteFirstCommandCopy \u003d new DeletePatientCommand(INDEX_FIRST_IN_LIST, false);","lastModifiedDate":"2021-03-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Jacob-Pang":33,"onnwards":4,"pngsebastian":14,"-":74}},{"path":"src/test/java/seedu/address/logic/commands/patient/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"icytornado"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"            getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST, descriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"icytornado"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        PatientBuilder patientInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedPatient \u003d patientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(indexLastPatient, descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"icytornado"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"                new EditPatientDescriptor());","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"icytornado"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2021-03-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"icytornado"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    public void execute_duplicatePatientUnfilteredList_failure() {","lastModifiedDate":"2021-03-20"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        Patient firstPerson \u003d model.getFilteredPatientList().get(INDEX_FIRST_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_SECOND_IN_LIST, descriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patientInList \u003d model.getPatientRecords().getPersonList().get(INDEX_SECOND_IN_LIST.getZeroBased());","lastModifiedDate":"2021-03-20"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST,","lastModifiedDate":"2021-03-18"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"                new EditPatientDescriptorBuilder(patientInList).build());","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2021-03-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":153,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"icytornado"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPatientRecords().getPersonList().size());","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":169,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex,","lastModifiedDate":"2021-03-13"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":172,"author":{"gitId":"icytornado"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":"        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST, DESC_AMY);","lastModifiedDate":"2021-03-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_IN_LIST, copyDescriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"        assertFalse(standardCommand.equals(new ClearPatientCommand()));","lastModifiedDate":"2021-03-15"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":194,"author":{"gitId":"onnwards"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_IN_LIST, DESC_AMY)));","lastModifiedDate":"2021-03-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":197,"author":{"gitId":"onnwards"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_IN_LIST, DESC_BOB)));","lastModifiedDate":"2021-03-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"Jacob-Pang":73,"onnwards":14,"-":104,"icytornado":9}},{"path":"src/test/java/seedu/address/logic/commands/patient/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Jacob-Pang":8,"onnwards":1,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/patient/FindPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.CARL;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.ELLE;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.FIONA;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.parser.patient.FindPatientCommand;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPatientCommand}.","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"public class FindPatientCommandTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    private Model expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        new AddressBook\u003c\u003e(getTypicalPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        new AddressBook\u003c\u003e(getTypicalDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        new AppointmentSchedule(getTypicalAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        new UserPrefs()","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    );","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        FindPatientCommand findFirstCommand \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        FindPatientCommand findSecondCommand \u003d new FindPatientCommand(secondPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        FindPatientCommand findFirstCommandCopy \u003d new FindPatientCommand(firstPredicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        FindPatientCommand command \u003d new FindPatientCommand(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":33,"-":62}},{"path":"src/test/java/seedu/address/logic/commands/patient/ListPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.commands.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalAppointmentSchedule;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalDoctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPatientCommand.","lastModifiedDate":"2021-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"public class ListPatientCommandTest {","lastModifiedDate":"2021-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(getTypicalPatientRecords(), getTypicalDoctorRecords(),","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                getTypicalAppointmentSchedule(), new UserPrefs());","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getPatientRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook\u003c\u003e(model.getDoctorRecords()),","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                new AppointmentSchedule(model.getAppointmentSchedule()),","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs(model.getUserPrefs())","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        showPatientAtIndex(model, INDEX_FIRST_IN_LIST);","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        assertCommandSuccess(new ListPatientCommand(), model, ListPatientCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2021-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jacob-Pang":15,"onnwards":7,"-":28}},{"path":"src/test/java/seedu/address/logic/parser/FindPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2021-03-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2021-03-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.FindPatientCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.FindPatientCommandParser;","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2021-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"public class FindPatientCommandParserTest {","lastModifiedDate":"2021-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    private FindPatientCommandParser parser \u003d new FindPatientCommandParser();","lastModifiedDate":"2021-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2021-03-17"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-17"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"            FindPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-17"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    public void parse_validArgs_returnsFindPatientCommand() {","lastModifiedDate":"2021-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2021-03-17"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        FindPatientCommand expectedFindCommand \u003d","lastModifiedDate":"2021-03-17"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"                new FindPatientCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2021-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2021-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2021-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-03-17"}],"authorContributionMap":{"kwmiw":7,"onnwards":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        assertEquals(INDEX_FIRST_IN_LIST, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        assertEquals(INDEX_FIRST_IN_LIST, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"onnwards":3,"-":193}},{"path":"src/test/java/seedu/address/logic/parser/UserInputParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.ClearPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.DeletePatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.ListPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.parser.patient.FindPatientCommand;","lastModifiedDate":"2021-03-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientUtil;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"public class UserInputParserTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    private final UserInputParser parser \u003d new UserInputParser();","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PatientUtil.getAddCommand(patient));","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(new AddPatientCommand(patient), command);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        assertTrue(parser.parseCommand(ClearPatientCommand.COMMAND_WORD) instanceof ClearPatientCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        assertTrue(parser.parseCommand(ClearPatientCommand.COMMAND_WORD + \" 3\") instanceof ClearPatientCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"        DeletePatientCommand command \u003d (DeletePatientCommand) parser.parseCommand(","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                DeletePatientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_IN_LIST.getOneBased());","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"        assertEquals(new DeletePatientCommand(INDEX_FIRST_IN_LIST, false), command);","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(patient).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"                + INDEX_FIRST_IN_LIST.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        assertEquals(new EditPatientCommand(INDEX_FIRST_IN_LIST, descriptor), command);","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"        FindPatientCommand command \u003d (FindPatientCommand) parser.parseCommand(","lastModifiedDate":"2021-03-17"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"                FindPatientCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2021-03-17"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"        assertEquals(new FindPatientCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2021-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD) instanceof ListPatientCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        assertTrue(parser.parseCommand(ListPatientCommand.COMMAND_WORD + \" 3\") instanceof ListPatientCommand);","lastModifiedDate":"2021-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"Jacob-Pang":13,"kwmiw":3,"onnwards":13,"pngsebastian":2,"-":69,"icytornado":1}},{"path":"src/test/java/seedu/address/logic/parser/patient/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.AMY;","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.BOB;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddPatientCommand(expectedPatientMultipleTags));","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Jacob-Pang":15,"onnwards":5,"-":121}},{"path":"src/test/java/seedu/address/logic/parser/patient/DeletePatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.DeletePatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"public class DeletePatientCommandParserTest {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"    private DeletePatientCommandParser parser \u003d new DeletePatientCommandParser();","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"        assertParseSuccess(parser, \"1\", new DeletePatientCommand(INDEX_FIRST_IN_LIST, false));","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2021-03-15"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"onnwards":3,"pngsebastian":5,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/patient/EditPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.logic.parser.patient;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"icytornado"},"content":"public class EditPatientCommandParserTest {","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"icytornado"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"icytornado"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"icytornado"},"content":"        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_SECOND_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_THIRD_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":140,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"icytornado"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"icytornado"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":158,"author":{"gitId":"icytornado"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"icytornado"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_FIRST_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":189,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"icytornado"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"        Index targetIndex \u003d INDEX_THIRD_IN_LIST;","lastModifiedDate":"2021-03-18"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":207,"author":{"gitId":"icytornado"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2021-03-13"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"Jacob-Pang":13,"onnwards":11,"-":172,"icytornado":15}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.ALICE;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    private final AddressBook\u003cPatient\u003e patientAddressBook \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Collections.emptyList(), patientAddressBook.getPersonList());","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientAddressBook.resetData(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e newData \u003d getTypicalPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        patientAddressBook.resetData(newData);","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(newData, patientAddressBook);","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public void resetData_withDuplicatePatients_throwsDuplicatePersonException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBookStub\u003cPatient\u003e newData \u003d new AddressBookStub\u003c\u003e(newPatients);","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e patientAddressBook.resetData(newData));","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e patientAddressBook.hasPerson(null));","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    public void hasPerson_patientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(patientAddressBook.hasPerson(ALICE));","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    public void hasPerson_patientInAddressBook_returnsTrue() {","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        patientAddressBook.addPerson(ALICE);","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(patientAddressBook.hasPerson(ALICE));","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public void hasPerson_patientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        patientAddressBook.addPerson(ALICE);","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(patientAddressBook.hasPerson(editedAlice));","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e patientAddressBook.getPersonList().remove(0));","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    private static class AddressBookStub\u003cT extends Person\u003e implements ReadOnlyAddressBook\u003cT\u003e {","lastModifiedDate":"2021-03-21"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        private final ObservableList\u003cT\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBookStub(Collection\u003cT\u003e persons) {","lastModifiedDate":"2021-03-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        public ObservableList\u003cT\u003e getPersonList() {","lastModifiedDate":"2021-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Jacob-Pang":29,"onnwards":1,"-":74}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.ALICE;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.BENSON;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.DR_GREY;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.DR_WHO;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        assertEquals(new AddressBook\u003cPatient\u003e(), new AddressBook\u003cPatient\u003e(modelManager.getPatientRecords()));","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        assertEquals(new AddressBook\u003cDoctor\u003e(), new AddressBook\u003cDoctor\u003e(modelManager.getDoctorRecords()));","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(new AppointmentSchedule(), new AppointmentSchedule(modelManager.getAppointmentSchedule()));","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setPatientRecordsFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setPatientRecordsFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatientRecordsFilePath(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath_validPath_setsPatientRecordsFilePath() {","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager.setPatientRecordsFilePath(path);","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(path, modelManager.getPatientRecordsFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    public void hasPerson_personNotInPatientRecords_returnsFalse() {","lastModifiedDate":"2021-03-21"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    public void hasPerson_personInPatientRecords_returnsTrue() {","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"    public void getFilteredDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDoctorList().remove(0));","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentSchedule appointmentSchedule \u003d new AppointmentScheduleBuilder().build();","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        AddressBook\u003cPatient\u003e patientRecords \u003d new AddressBookBuilder\u003cPatient\u003e()","lastModifiedDate":"2021-03-26"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"                .withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e differentPatientRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-21"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        AddressBook\u003cDoctor\u003e doctorRecords \u003d new AddressBookBuilder\u003cDoctor\u003e()","lastModifiedDate":"2021-03-30"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"                .withPerson(DR_GREY).withPerson(DR_WHO).build();","lastModifiedDate":"2021-03-30"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cDoctor\u003e differentDoctorRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        differentUserPrefs.setPatientRecordsFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager \u003d new ModelManager(patientRecords, doctorRecords, appointmentSchedule, userPrefs);","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"            new AddressBook\u003c\u003e(patientRecords),","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"            new AddressBook\u003c\u003e(doctorRecords),","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"            new AppointmentSchedule(appointmentSchedule),","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs(userPrefs)","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        );","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"        // different patient records -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentPatientRecords, doctorRecords,","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentSchedule, userPrefs)));","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"        // different doctor records -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientRecords, differentDoctorRecords,","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentSchedule, userPrefs)));","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(patientRecords, doctorRecords,","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentSchedule, differentUserPrefs)));","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2021-03-20"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2021-03-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Jacob-Pang":50,"onnwards":10,"-":101}},{"path":"src/test/java/seedu/address/model/ModelStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * A default model stub that have all of the methods failing.","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class ModelStub implements Model {","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath(Path patientRecordsFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public void addPatient(Patient person) {","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecords(ReadOnlyAddressBook\u003cPatient\u003e newData) {","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cPatient\u003e getPatientRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"    public boolean hasConflictingUuid(UUID uuid) {","lastModifiedDate":"2021-03-29"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-30"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2021-03-29"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2021-03-29"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredPatientList(Predicate\u003c? super Patient\u003e predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PatientRecords \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getDoctorRecordsFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctorRecordsFilePath(Path doctorRecordsFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctorRecords(ReadOnlyAddressBook\u003cDoctor\u003e newData) {","lastModifiedDate":"2021-03-29"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAddressBook\u003cDoctor\u003e getDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasDoctor(Doctor dcotor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"    public void deleteDoctor(Doctor target) {","lastModifiedDate":"2021-03-29"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredDoctorList(Predicate\u003c? super Doctor\u003e predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-29"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {","lastModifiedDate":"2021-03-29"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {","lastModifiedDate":"2021-03-29"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentSchedule(ReadOnlyAppointmentSchedule newData) {","lastModifiedDate":"2021-03-29"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAppointmentSchedule getAppointmentSchedule() {","lastModifiedDate":"2021-03-29"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasPatientInAppointmentSchedule(Patient patient) {","lastModifiedDate":"2021-03-29"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasDoctorInAppointmentSchedule(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflictingAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflictingAppointmentExcludingTarget(Appointment target, Appointment appointment) {","lastModifiedDate":"2021-03-29"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"    public void deletePatientAppointments(UUID patientUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":192,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":194,"author":{"gitId":"pngsebastian"},"content":"    @Override","lastModifiedDate":"2021-03-30"},{"lineNumber":195,"author":{"gitId":"onnwards"},"content":"    public void deleteDoctorAppointments(UUID doctorUuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":196,"author":{"gitId":"pngsebastian"},"content":"        throw new AssertionError(\"This method should not be called\");","lastModifiedDate":"2021-03-30"},{"lineNumber":197,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":198,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":199,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":200,"author":{"gitId":"Jacob-Pang"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2021-03-29"},{"lineNumber":201,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":202,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":203,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":204,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":205,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2021-03-29"},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":209,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":214,"author":{"gitId":"Jacob-Pang"},"content":"    @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":215,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"        throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":201,"onnwards":13,"pngsebastian":4}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public void setPatientRecordsFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPatientRecordsFilePath(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"Jacob-Pang":2,"-":19}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"Jacob-Pang":8,"-":67}},{"path":"src/test/java/seedu/address/model/person/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.ALICE;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.BOB;","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"public class PatientTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        Person person \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    public void isSamePatient() {","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        Person editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        editedBob \u003d new PatientBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        Person aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Jacob-Pang":14,"onnwards":2,"-":75}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.ALICE;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.BOB;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private final UniquePersonList\u003cPerson\u003e uniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList\u003cPerson\u003e) null));","lastModifiedDate":"2021-03-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"        UniquePersonList\u003cPerson\u003e expectedUniquePersonList \u003d new UniquePersonList\u003c\u003e();","lastModifiedDate":"2021-03-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Jacob-Pang":3,"onnwards":10,"-":157}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.BENSON;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private static final String INVALID_UUID \u003d \"invalidUUID\";","lastModifiedDate":"2021-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    private static final String VALID_UUID \u003d BENSON.getUuid().toString();","lastModifiedDate":"2021-03-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(BENSON, patient.toModelType());","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    public void toModelType_invalidUuid_throwsIllegalValueException() {","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"                INVALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        String expectedMessage \u003d JsonAdaptedPatient.UUID_MESSAGE_CONSTRAINTS;","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    public void toModelType_nullUuid_throwsIllegalValueException() {","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            null, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName());","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, INVALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, null,","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"            VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"            INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"            VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"            VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"            null, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"            VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"            VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"            VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"            VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, null,","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"                VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"                INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"                null, VALID_TAGS);","lastModifiedDate":"2021-03-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(","lastModifiedDate":"2021-03-26"},{"lineNumber":149,"author":{"gitId":"onnwards"},"content":"                VALID_UUID, VALID_NAME,","lastModifiedDate":"2021-03-26"},{"lineNumber":150,"author":{"gitId":"onnwards"},"content":"                VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2021-03-26"},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"                VALID_ADDRESS, invalidTags);","lastModifiedDate":"2021-03-26"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, patient::toModelType);","lastModifiedDate":"2021-03-20"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":12,"onnwards":58,"-":85}},{"path":"src/test/java/seedu/address/storage/JsonPatientRecordsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.ALICE;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.HOON;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.TypicalAppObjects.IDA;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonPatientRecordsStorageTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPatientRecordsStorageTest\");","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public void readPatientRecords_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e readPatientRecords(null));","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003cPatient\u003e\u003e readPatientRecords(String filePath) throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        return new JsonPatientRecordsStorage(Paths.get(filePath)).readAddressBook(","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(readPatientRecords(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPatientRecords(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    public void readPatientRecords_invalidPatientRecords_throwDataConversionException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPatientRecords(\"invalidPatientRecords.json\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    public void readPatientRecords_invalidAndValidPatientRecords_throwDataConversionException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(DataConversionException.class, () -\u003e readPatientRecords(","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"                \"invalidAndValidPatientRecords.json\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    public void readAndSavePatientRecords_allInOrder_success() throws Exception {","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        Path filePath \u003d testFolder.resolve(\"TempPatientRecords.json\");","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e original \u003d getTypicalPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        JsonPatientRecordsStorage jsonPatientRecordsStorage \u003d new JsonPatientRecordsStorage(filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        jsonPatientRecordsStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAddressBook\u003cPatient\u003e readBack \u003d jsonPatientRecordsStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(original, new AddressBook\u003c\u003e(readBack));","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        jsonPatientRecordsStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        readBack \u003d jsonPatientRecordsStorage.readAddressBook(filePath).get();","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(original, new AddressBook\u003c\u003e(readBack));","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        jsonPatientRecordsStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        readBack \u003d jsonPatientRecordsStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(original, new AddressBook\u003c\u003e(readBack));","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    public void savePatientRecords_nullPatientRecords_throwsNullPointerException() {","lastModifiedDate":"2021-03-21"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePatientRecords(null, \"SomeFile.json\"));","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    private void savePatientRecords(ReadOnlyAddressBook\u003cPatient\u003e patientRecords, String filePath) {","lastModifiedDate":"2021-03-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            new JsonPatientRecordsStorage(Paths.get(filePath))","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"                    .saveAddressBook(patientRecords, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2021-03-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    public void savePatientRecords_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(NullPointerException.class, () -\u003e savePatientRecords(new AddressBook\u003c\u003e(), null));","lastModifiedDate":"2021-03-20"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":36,"onnwards":3,"-":74}},{"path":"src/test/java/seedu/address/storage/JsonSerializableDoctorRecordsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.testutil.TypicalAppObjects;","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"public class JsonSerializableDoctorRecordsTest {","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\",","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"            \"JsonSerializableDoctorRecordsTest\");","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    private static final Path TYPICAL_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDoctorRecords.json\");","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private static final Path INVALID_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDoctorRecords.json\");","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private static final Path DUPLICATE_DOCTORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateDoctorRecords.json\");","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public void toModelType_typicalDoctorsFile_success() throws Exception {","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        JsonSerializableDoctorRecords dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DOCTORS_FILE,","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"                JsonSerializableDoctorRecords.class).get();","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        AddressBook\u003cDoctor\u003e addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        AddressBook\u003cDoctor\u003e typicalDoctorRecords \u003d TypicalAppObjects.getTypicalDoctorRecords();","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        assertEquals(addressBookFromFile, typicalDoctorRecords);","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    public void toModelType_invalidDoctorsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        JsonSerializableDoctorRecords dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DOCTORS_FILE,","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                JsonSerializableDoctorRecords.class).get();","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    @Test","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    public void toModelType_duplicateDoctors_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        JsonSerializableDoctorRecords dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DOCTORS_FILE,","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                JsonSerializableDoctorRecords.class).get();","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableDoctorRecords.MESSAGE_DUPLICATE_DOCTOR,","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"onnwards":49}},{"path":"src/test/java/seedu/address/storage/JsonSerializablePatientRecordsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import seedu.address.testutil.TypicalAppObjects;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonSerializablePatientRecordsTest {","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\",","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"            \"JsonSerializablePatientRecordsTest\");","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientRecords.json\");","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Path INVALID_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientRecords.json\");","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Path DUPLICATE_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientRecords.json\");","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public void toModelType_typicalPatientsFile_success() throws Exception {","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"                JsonSerializablePatientRecords.class).get();","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e typicalPatientRecords \u003d TypicalAppObjects.getTypicalPatientRecords();","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(addressBookFromFile, typicalPatientRecords);","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public void toModelType_invalidPatientsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_FILE,","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"                JsonSerializablePatientRecords.class).get();","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2021-03-21"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        JsonSerializablePatientRecords dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENTS_FILE,","lastModifiedDate":"2021-03-21"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"                JsonSerializablePatientRecords.class).get();","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(IllegalValueException.class, JsonSerializablePatientRecords.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"Jacob-Pang":20,"onnwards":1,"-":28}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setPatientRecordsFilePath(Paths.get(\"PatientRecords.json\"));","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"Jacob-Pang":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.testutil.TypicalAppObjects.getTypicalPatientRecords;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        JsonPatientRecordsStorage patientRecordsStorage \u003d new JsonPatientRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                getTempFilePath(\"PatientRecords\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        JsonDoctorRecordsStorage doctorRecordsStorage \u003d new JsonDoctorRecordsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"                getTempFilePath(\"DoctorRecords\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage(","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                getTempFilePath(\"AppointmentSchedule\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                getTempFilePath(\"UserPrefs\"));","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        storageManager \u003d new StorageManager(patientRecordsStorage, doctorRecordsStorage,","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"                appointmentScheduleStorage, userPrefsStorage);","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public void patientRecordsReadSave() throws Exception {","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e original \u003d getTypicalPatientRecords();","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        storageManager.savePatientRecords(original);","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAddressBook\u003cPatient\u003e retrieved \u003d storageManager.readPatientRecords().get();","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(original, new AddressBook\u003c\u003e(retrieved));","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    public void getPatientRecordsFilePath() {","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        assertNotNull(storageManager.getPatientRecordsFilePath());","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":20,"-":57}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class AddressBookBuilder\u003cT extends Person\u003e {","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    private AddressBook\u003cT\u003e addressBook;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        addressBook \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBookBuilder(AddressBook\u003cT\u003e addressBook) {","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBookBuilder\u003cT\u003e withPerson(T person) {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public AddressBook\u003cT\u003e build() {","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":6,"-":28}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Patient DEFAULT_PATIENT \u003d new PatientBuilder().build();","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Doctor DEFAULT_DOCTOR \u003d new DoctorBuilder().build();","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Timeslot DEFAULT_TIMESLOT \u003d new TimeslotBuilder().build();","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private UUID patientUuid;","lastModifiedDate":"2021-03-26"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private UUID doctorUuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private Timeslot timeslot;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        patientUuid \u003d new PatientBuilder(DEFAULT_PATIENT).build().getUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        doctorUuid \u003d new DoctorBuilder(DEFAULT_DOCTOR).build().getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new TimeslotBuilder(DEFAULT_TIMESLOT).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        patientUuid \u003d appointmentToCopy.getPatientUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        doctorUuid \u003d appointmentToCopy.getDoctorUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new TimeslotBuilder(appointmentToCopy.getTimeslot()).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e(appointmentToCopy.getTags());","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code patient} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withPatient(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        this.patientUuid \u003d new PatientBuilder(patient).build().getUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code doctor} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withDoctor(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        this.doctorUuid \u003d new DoctorBuilder(doctor).build().getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code timeslot} of the {@code Appointment} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withTimeslot(Timeslot timeslot) {","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d new TimeslotBuilder(timeslot).build();","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withTags(String ... tags) {","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    public Appointment build() {","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        return new Appointment(patientUuid, doctorUuid, timeslot, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":75,"onnwards":10}},{"path":"src/test/java/seedu/address/testutil/AppointmentScheduleBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building AppointmentSchedule objects.","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" *     {@code AppointmentSchedule as \u003d new AppointmentScheduleBuilder().withAppointment(appointment).build();}","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentScheduleBuilder {","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    private AppointmentSchedule appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder() {","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder(AppointmentSchedule appointmentSchedule) {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule \u003d appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds a new {@code Appointment} to the {@code AppointmentSchedule} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.addAppointment(appointment);","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule build() {","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":34}},{"path":"src/test/java/seedu/address/testutil/DoctorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-30"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"public class DoctorBuilder {","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    public static final String DEFAULT_NAME \u003d \"Dr Amy\";","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    private UUID uuid;","lastModifiedDate":"2021-03-30"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    private Name name;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code DoctorBuilder} with the default details.","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorBuilder() {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        uuid \u003d UUID.randomUUID();","lastModifiedDate":"2021-03-30"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * Initializes the DoctorBuilder with the data of {@code doctorToCopy}.","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorBuilder(Doctor doctorToCopy) {","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        uuid \u003d doctorToCopy.getUuid();","lastModifiedDate":"2021-03-30"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        name \u003d doctorToCopy.getName();","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e(doctorToCopy.getTags());","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-30"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     * Sets the {@code UUID} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-30"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public DoctorBuilder withUuid(String uuid) {","lastModifiedDate":"2021-03-30"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        this.uuid \u003d UUID.fromString(uuid);","lastModifiedDate":"2021-03-30"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        return this;","lastModifiedDate":"2021-03-30"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-30"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-30"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     * Sets the {@code Name} of the {@code Doctor} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorBuilder withName(String name) {","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Doctor} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    public DoctorBuilder withTags(String ... tags) {","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    public Doctor build() {","lastModifiedDate":"2021-03-29"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        return new Doctor(uuid, name, tags);","lastModifiedDate":"2021-03-30"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":47,"onnwards":17}},{"path":"src/test/java/seedu/address/testutil/EditDoctorDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-29"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;","lastModifiedDate":"2021-03-29"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-29"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-29"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.doctor.EditDoctorCommand.EditDoctorDescriptor;","lastModifiedDate":"2021-03-29"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2021-03-29"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2021-03-29"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":" * A utility class to help with building EditDoctorDescriptor objects.","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class EditDoctorDescriptorBuilder {","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private EditDoctorDescriptor descriptor;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptorBuilder() {","lastModifiedDate":"2021-03-29"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditDoctorDescriptor();","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptorBuilder(EditDoctorDescriptor descriptor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        this.descriptor \u003d new EditDoctorDescriptor(descriptor);","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * Returns an {@code EditDoctorDescriptor} with fields containing {@code doctor}\u0027s details","lastModifiedDate":"2021-03-29"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptorBuilder(Doctor doctor) {","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditDoctorDescriptor();","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setName(doctor.getName());","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setTags(doctor.getTags());","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * Sets the {@code Name} of the {@code EditDoctorDescriptor} that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditDoctorDescriptor}","lastModifiedDate":"2021-03-29"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     * that we are building.","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-03-29"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2021-03-29"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2021-03-29"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public EditDoctorDescriptor build() {","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return descriptor;","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"Jacob-Pang":53,"onnwards":4}},{"path":"src/test/java/seedu/address/testutil/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building EditPatientDescriptor objects.","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    private EditPatientDescriptor descriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2021-03-20"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        this.descriptor \u003d new EditPatientDescriptor(descriptor);","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     * Returns an {@code EditPatientDescriptor} with fields containing {@code patient}\u0027s details","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setPhone(patient.getPhone());","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setEmail(patient.getEmail());","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setAddress(patient.getAddress());","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        descriptor.setTags(patient.getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Jacob-Pang":27,"onnwards":1,"-":59}},{"path":"src/test/java/seedu/address/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.util.UUID;","lastModifiedDate":"2021-03-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"public class PatientBuilder {","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    private UUID uuid;","lastModifiedDate":"2021-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder() {","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        uuid \u003d UUID.randomUUID();","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        uuid \u003d patientToCopy.getUuid();","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        email \u003d patientToCopy.getEmail();","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        address \u003d patientToCopy.getAddress();","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e(patientToCopy.getTags());","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"     * Sets the {@code UUid} of the {@code Patient} that we are building.","lastModifiedDate":"2021-03-30"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    public PatientBuilder withUuid(String uuid) {","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        this.uuid \u003d UUID.fromString(uuid);","lastModifiedDate":"2021-03-26"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"        return this;","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Patient} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder withTags(String ... tags) {","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Address} of the {@code Patient} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code Email} of the {@code Patient} that we are building.","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    public Patient build() {","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"        return new Patient(uuid, name, phone, email, address, tags);","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Jacob-Pang":23,"onnwards":13,"-":72}},{"path":"src/test/java/seedu/address/testutil/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import seedu.address.logic.commands.patient.AddPatientCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.commands.patient.EditPatientCommand.EditPatientDescriptor;","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"public class PatientUtil {","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    public static String getAddCommand(Patient person) {","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(person);","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        patient.getTags().stream().forEach(","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details.","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"Jacob-Pang":13,"onnwards":1,"-":48}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        return Index.fromOneBased(model.getFilteredDoctorList().size() / 2);","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        return Index.fromOneBased(model.getFilteredDoctorList().size());","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getFilteredDoctorList().get(index.getZeroBased());","lastModifiedDate":"2021-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Jacob-Pang":3,"-":52}},{"path":"src/test/java/seedu/address/testutil/TimeslotBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building Timeslot objects.","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class TimeslotBuilder {","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"            .ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    public static final LocalDateTime DEFAULT_START \u003d LocalDateTime.parse(\"2021-01-01 00:00\",","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"            DATE_TIME_FORMATTER);","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static final LocalDateTime DEFAULT_END \u003d LocalDateTime.parse(\"2021-01-02 00:00\",","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"            DATE_TIME_FORMATTER);","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime start;","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime end;","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code TimeslotBuilder} with the default details.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder() {","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d DEFAULT_START;","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d DEFAULT_END;","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     * Initializes the TimeslotBuilder with the data of {@code timeslotToCopy}.","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder(Timeslot timeslotToCopy) {","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d timeslotToCopy.getStart();","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d timeslotToCopy.getEnd();","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code start} of the {@code Timeslot} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder withStart(LocalDateTime start) {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code end} of the {@code Timeslot} that we are building.","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder withEnd(LocalDateTime end) {","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return this;","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot build() {","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return new Timeslot(start, end);","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"Jacob-Pang":58}},{"path":"src/test/java/seedu/address/testutil/TypicalAppObjects.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;","lastModifiedDate":"2021-03-26"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_BOB;","lastModifiedDate":"2021-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import java.time.Duration;","lastModifiedDate":"2021-03-16"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.AppointmentSchedule;","lastModifiedDate":"2021-03-16"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2021-03-16"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"import seedu.address.model.appointment.Timeslot;","lastModifiedDate":"2021-03-16"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":" * A utility class containing a list of {@code Patient}, {@code Doctor},","lastModifiedDate":"2021-03-16"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":" * and {@code Timeslot}, and {@code Appointment} objects to be used in tests.","lastModifiedDate":"2021-03-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"public class TypicalAppObjects {","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    public static final Patient ALICE \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"64ed5bc0-42bb-4e20-ac70-7d1e6683685b\")","lastModifiedDate":"2021-03-26"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"            .withName(\"Alice Pauline\")","lastModifiedDate":"2021-03-26"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")","lastModifiedDate":"2021-03-26"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2021-03-26"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    public static final Patient BENSON \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"3fcc89d1-3d68-4a7d-a1f5-17ac202eb83f\")","lastModifiedDate":"2021-03-26"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"            .withName(\"Benson Meier\")","lastModifiedDate":"2021-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2021-03-26"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2021-03-26"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"    public static final Patient CARL \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"89c57cca-54e1-49ca-8b6c-ff0c7a632d20\")","lastModifiedDate":"2021-03-26"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            .withName(\"Carl Kurz\")","lastModifiedDate":"2021-03-26"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2021-03-26"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"wall street\")","lastModifiedDate":"2021-03-26"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"5f71a395-f7a3-460f-b358-937808b8a6dd\")","lastModifiedDate":"2021-03-26"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"            .withName(\"Daniel Wellington\")","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2021-03-26"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"10th street\")","lastModifiedDate":"2021-03-26"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2021-03-26"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    public static final Patient ELLE \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"60fe72ad-7d3c-450b-8eb7-16f0d6c78a3c\")","lastModifiedDate":"2021-03-26"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"            .withName(\"Elle Meyer\")","lastModifiedDate":"2021-03-26"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2021-03-26"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"michegan ave\")","lastModifiedDate":"2021-03-26"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    public static final Patient FIONA \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"d90780b1-0f2c-479f-8b81-d46497e2966d\")","lastModifiedDate":"2021-03-26"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"            .withName(\"Fiona Kunz\")","lastModifiedDate":"2021-03-26"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2021-03-26"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"little tokyo\")","lastModifiedDate":"2021-03-26"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"9703d0d9-54a9-462f-937b-8db0bfc74682\")","lastModifiedDate":"2021-03-26"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"            .withName(\"George Best\")","lastModifiedDate":"2021-03-26"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2021-03-26"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"4th street\")","lastModifiedDate":"2021-03-26"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"    public static final Patient HOON \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"b4cba9bd-70ff-4456-a185-ebd2f3ebe984\")","lastModifiedDate":"2021-03-26"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"            .withName(\"Hoon Meier\")","lastModifiedDate":"2021-03-26"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2021-03-26"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"stefan@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"little india\")","lastModifiedDate":"2021-03-26"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"    public static final Patient IDA \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"8171dffb-6c5a-466f-b53f-f3399ff2c033\")","lastModifiedDate":"2021-03-26"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"            .withName(\"Ida Mueller\")","lastModifiedDate":"2021-03-26"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2021-03-26"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"            .withEmail(\"hans@example.com\")","lastModifiedDate":"2021-03-26"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"            .withAddress(\"chicago ave\")","lastModifiedDate":"2021-03-26"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"    public static final Patient AMY \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"            .withUuid(VALID_UUID_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"            .withName(VALID_NAME_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"            .withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2021-03-26"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"            .withTags(VALID_TAG_FRIEND)","lastModifiedDate":"2021-03-26"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-26"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    public static final Patient BOB \u003d new PatientBuilder()","lastModifiedDate":"2021-03-26"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"            .withUuid(VALID_UUID_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"            .withName(VALID_NAME_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"            .withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2021-03-26"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2021-03-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"    // Manually added - Doctor details","lastModifiedDate":"2021-03-16"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_GREY \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"e238301a-934c-4730-91f5-da2f55af44ff\")","lastModifiedDate":"2021-03-30"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Meredith Grey\")","lastModifiedDate":"2021-03-30"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"            .withTags(\"GreysAnatomy\")","lastModifiedDate":"2021-03-30"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_WHO \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"4e4163f3-82ca-4811-aaf0-31e896229672\")","lastModifiedDate":"2021-03-30"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Who\")","lastModifiedDate":"2021-03-30"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"            .withTags(\"DoctorWho\", \"TimeLord\")","lastModifiedDate":"2021-03-30"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_STRANGE \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"e90635ae-2c07-40fc-96be-4f5019095936\")","lastModifiedDate":"2021-03-30"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Strange\")","lastModifiedDate":"2021-03-30"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_JEKYLL \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"0b56a520-f0db-4a3a-b560-3aab72a9e10c\")","lastModifiedDate":"2021-03-30"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Jekyll\")","lastModifiedDate":"2021-03-30"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"            .withTags(\"AndMrHyde\")","lastModifiedDate":"2021-03-30"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_MURPHY \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":145,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"e6b1f1d6-c85d-4baf-b07f-f5a2876e4d75\")","lastModifiedDate":"2021-03-30"},{"lineNumber":146,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Murphy\")","lastModifiedDate":"2021-03-30"},{"lineNumber":147,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"    public static final Doctor DR_DRAKE \u003d new DoctorBuilder()","lastModifiedDate":"2021-03-30"},{"lineNumber":149,"author":{"gitId":"onnwards"},"content":"            .withUuid(\"40c9902a-110a-44c1-a064-a5ef5e8c0117\")","lastModifiedDate":"2021-03-30"},{"lineNumber":150,"author":{"gitId":"onnwards"},"content":"            .withName(\"Dr Drake Ramoray\")","lastModifiedDate":"2021-03-30"},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"            .build();","lastModifiedDate":"2021-03-30"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":153,"author":{"gitId":"onnwards"},"content":"    // Manually added - Timeslot details","lastModifiedDate":"2021-03-16"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"    public static final Duration APPOINTMENT_DURATION \u003d Duration.ofHours(1);","lastModifiedDate":"2021-03-16"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_8AM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":156,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 8, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":157,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_9AM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 9, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":159,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_10AM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 10, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":161,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_11AM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":162,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 11, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":163,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_12PM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 12, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_1PM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":166,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 13, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":167,"author":{"gitId":"onnwards"},"content":"    public static final Timeslot TIMESLOT_1HOUR_2PM \u003d new Timeslot(","lastModifiedDate":"2021-03-16"},{"lineNumber":168,"author":{"gitId":"onnwards"},"content":"            LocalDateTime.of(2021, 1, 1, 14, 0, 0), APPOINTMENT_DURATION);","lastModifiedDate":"2021-03-16"},{"lineNumber":169,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":170,"author":{"gitId":"pngsebastian"},"content":"    // Alice should not have an appointment for DeletePatientCommandTest to test","lastModifiedDate":"2021-03-26"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment BENSON_DR_GREY \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(BENSON).withDoctor(DR_GREY).withTimeslot(TIMESLOT_1HOUR_9AM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment CARL_DR_WHO \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(CARL).withDoctor(DR_WHO).withTimeslot(TIMESLOT_1HOUR_10AM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment DANIEL_DR_STRANGE \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(DANIEL).withDoctor(DR_STRANGE).withTimeslot(TIMESLOT_1HOUR_11AM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment ELLE_DR_JEKYLL \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(ELLE).withDoctor(DR_JEKYLL).withTimeslot(TIMESLOT_1HOUR_12PM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment FIONA_DR_MURPHY \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(FIONA).withDoctor(DR_MURPHY).withTimeslot(TIMESLOT_1HOUR_1PM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Appointment GEORGE_DR_DRAKE \u003d new AppointmentBuilder()","lastModifiedDate":"2021-03-29"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"            .withPatient(GEORGE).withDoctor(DR_DRAKE).withTimeslot(TIMESLOT_1HOUR_2PM).build();","lastModifiedDate":"2021-03-29"},{"lineNumber":183,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":184,"author":{"gitId":"onnwards"},"content":"    private TypicalAppObjects() {} // prevents instantiation","lastModifiedDate":"2021-03-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an {@code AddressBook} with all the typical patients.","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":"    public static AddressBook\u003cPatient\u003e getTypicalPatientRecords() {","lastModifiedDate":"2021-03-20"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cPatient\u003e patientRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-21"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2021-03-20"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords.addPerson(patient);","lastModifiedDate":"2021-03-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecords;","lastModifiedDate":"2021-03-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2021-03-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":200,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":201,"author":{"gitId":"pngsebastian"},"content":"    public static AppointmentSchedule getEmptyAppointmentSchedule() {","lastModifiedDate":"2021-03-26"},{"lineNumber":202,"author":{"gitId":"pngsebastian"},"content":"        AppointmentSchedule as \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-26"},{"lineNumber":203,"author":{"gitId":"pngsebastian"},"content":"        return as;","lastModifiedDate":"2021-03-26"},{"lineNumber":204,"author":{"gitId":"pngsebastian"},"content":"    }","lastModifiedDate":"2021-03-26"},{"lineNumber":205,"author":{"gitId":"pngsebastian"},"content":"","lastModifiedDate":"2021-03-26"},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":207,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an {@code AddressBook} with all the typical patients.","lastModifiedDate":"2021-03-29"},{"lineNumber":208,"author":{"gitId":"Jacob-Pang"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":209,"author":{"gitId":"Jacob-Pang"},"content":"    public static AddressBook\u003cDoctor\u003e getTypicalDoctorRecords() {","lastModifiedDate":"2021-03-29"},{"lineNumber":210,"author":{"gitId":"Jacob-Pang"},"content":"        AddressBook\u003cDoctor\u003e doctorRecords \u003d new AddressBook\u003c\u003e();","lastModifiedDate":"2021-03-29"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"        for (Doctor doctor : getTypicalDoctors()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"            doctorRecords.addPerson(doctor);","lastModifiedDate":"2021-03-29"},{"lineNumber":213,"author":{"gitId":"Jacob-Pang"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":214,"author":{"gitId":"Jacob-Pang"},"content":"        return doctorRecords;","lastModifiedDate":"2021-03-29"},{"lineNumber":215,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"    public static List\u003cDoctor\u003e getTypicalDoctors() {","lastModifiedDate":"2021-03-29"},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DR_GREY, DR_WHO, DR_STRANGE, DR_JEKYLL, DR_MURPHY, DR_DRAKE));","lastModifiedDate":"2021-03-29"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":220,"author":{"gitId":"Jacob-Pang"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":221,"author":{"gitId":"onnwards"},"content":"    /**","lastModifiedDate":"2021-03-16"},{"lineNumber":222,"author":{"gitId":"onnwards"},"content":"     * Returns an {@code AppointmentSchedule} with all the typical appointments.","lastModifiedDate":"2021-03-16"},{"lineNumber":223,"author":{"gitId":"onnwards"},"content":"     */","lastModifiedDate":"2021-03-16"},{"lineNumber":224,"author":{"gitId":"onnwards"},"content":"    public static AppointmentSchedule getTypicalAppointmentSchedule() {","lastModifiedDate":"2021-03-16"},{"lineNumber":225,"author":{"gitId":"onnwards"},"content":"        AppointmentSchedule as \u003d new AppointmentSchedule();","lastModifiedDate":"2021-03-16"},{"lineNumber":226,"author":{"gitId":"Jacob-Pang"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2021-03-29"},{"lineNumber":227,"author":{"gitId":"Jacob-Pang"},"content":"            as.addAppointment(appointment);","lastModifiedDate":"2021-03-29"},{"lineNumber":228,"author":{"gitId":"onnwards"},"content":"        }","lastModifiedDate":"2021-03-16"},{"lineNumber":229,"author":{"gitId":"onnwards"},"content":"        return as;","lastModifiedDate":"2021-03-16"},{"lineNumber":230,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":231,"author":{"gitId":"onnwards"},"content":"","lastModifiedDate":"2021-03-16"},{"lineNumber":232,"author":{"gitId":"onnwards"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2021-03-16"},{"lineNumber":233,"author":{"gitId":"Jacob-Pang"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BENSON_DR_GREY, CARL_DR_WHO, DANIEL_DR_STRANGE, ELLE_DR_JEKYLL,","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"Jacob-Pang"},"content":"                FIONA_DR_MURPHY, GEORGE_DR_DRAKE));","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"onnwards"},"content":"    }","lastModifiedDate":"2021-03-16"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Jacob-Pang":40,"onnwards":149,"pngsebastian":6,"-":41}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    public static final Index INDEX_FIRST_IN_LIST \u003d Index.fromOneBased(1);","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    public static final Index INDEX_SECOND_IN_LIST \u003d Index.fromOneBased(2);","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    public static final Index INDEX_THIRD_IN_LIST \u003d Index.fromOneBased(3);","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"onnwards":3,"-":9}}]
