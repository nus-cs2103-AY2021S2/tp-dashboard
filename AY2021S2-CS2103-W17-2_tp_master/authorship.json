[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"* This is a software engineering course project to create App-Ointment, an appointment management software for Receptionists of Medical Clinics."},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"onnwards":4,"-":3}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for a modified version of the module\u0027s code standard at"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that there are no tab characters in the file. --\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"LineLength\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a line is too long. --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003cmodule name\u003d\"TreeWalker\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c!-- Required to allow exceptions in code style --\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    IMPORT CHECKS"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."},{"lineNumber":52,"author":{"gitId":"-"},"content":"    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      1. STATIC: static imports"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      3. SPECIAL_IMPORTS: defined as org imports"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      4. THIRD_PARTY_PACKAGE: defined as com imports"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"customImportOrderRules\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for redundant import statements."},{"lineNumber":67,"author":{"gitId":"-"},"content":"    An import statement is redundant if:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      * It is a duplicate of another import. This is, when a class is imported more than once."},{"lineNumber":69,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."},{"lineNumber":70,"author":{"gitId":"-"},"content":"      * The class non-statically imported is from the same package as the current package."},{"lineNumber":71,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RedundantImport\"/\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for unused import statements."},{"lineNumber":75,"author":{"gitId":"-"},"content":"    An import statement is unused if:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      It\u0027s not referenced in the file."},{"lineNumber":77,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UnusedImports\"/\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    NAMING CHECKS"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"PackageName\"\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TypeName\"\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ConstantName\"\u003e"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"      \u003c!-- Validates static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"true\"/\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      \u003cmessage key\u003d\"name.invalidPattern\""},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant).\"/\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"StaticVariableName\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MemberName\"\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \u003c!-- Validates non-static members against the supplied expression. --\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MethodName\"\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParameterName\"\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LocalVariableName\"\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    LENGTH and CODING CHECKS"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that array type declarations follow Java Style"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      Java style: public static void main(String[] args) // Allowed"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      C style:    public static void main(String args[]) // Not allowed"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LeftCurly\"\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RightCurly\"\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      the same line. e.g., the following example is fine:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      \u003cpre\u003e"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          ..."},{"lineNumber":173,"author":{"gitId":"-"},"content":"        } else"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      \u003c!-- This next example is not fine:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      \u003cpre\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"          ..."},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        else"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      \u003c/pre\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    \u003c!-- Checks for braces around loop blocks --\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NeedBraces\"\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c!--"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (true) return 1; // Not allowed"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"      if (true) { return 1; } // Not allowed"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"      else if {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return 1; // else if should always be multi line"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"      if (true)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return 1; // Not allowed"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"UpperEll\" /\u003e"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FallThrough\"\u003e"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \u003c!-- Warn about falling through to the next case statement.  Similar to"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      some other variants which we don\u0027t publicized to promote consistency)."},{"lineNumber":217,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"reliefPattern\""},{"lineNumber":219,"author":{"gitId":"-"},"content":"       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that Class variables should never be declared public. --\u003e"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    ORDER CHECKS"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."},{"lineNumber":236,"author":{"gitId":"-"},"content":"         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    \u003c!-- Checks if the Class and Interface declarations is organized in this order"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."},{"lineNumber":242,"author":{"gitId":"-"},"content":"      2. Instance variables. Order: public, protected, package level (no access modifier), private."},{"lineNumber":243,"author":{"gitId":"-"},"content":"      3. Constructors"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      4. Methods"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ModifierOrder\"\u003e"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"},{"lineNumber":250,"author":{"gitId":"-"},"content":"           8.4.3.  The prescribed order is:"},{"lineNumber":251,"author":{"gitId":"-"},"content":"           public, protected, private, abstract, static, final, transient, volatile,"},{"lineNumber":252,"author":{"gitId":"-"},"content":"           synchronized, native, strictfp"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        --\u003e"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    WHITESPACE CHECKS"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that various tokens are surrounded by whitespace."},{"lineNumber":267,"author":{"gitId":"-"},"content":"           This includes most binary operators and keywords followed"},{"lineNumber":268,"author":{"gitId":"-"},"content":"           by regular or curly braces."},{"lineNumber":269,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"},{"lineNumber":278,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        UNARY_PLUS\"/\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    \u003c!-- No trailing whitespace --\u003e"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Regexp\"\u003e"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"},{"lineNumber":305,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."},{"lineNumber":310,"author":{"gitId":"-"},"content":"           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","},{"lineNumber":311,"author":{"gitId":"-"},"content":"           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","},{"lineNumber":312,"author":{"gitId":"-"},"content":"           \"\u0026\" when used in a generic upper or lower bounds constraints,"},{"lineNumber":313,"author":{"gitId":"-"},"content":"             e.g. \u003cT extends Foo \u0026 Bar\u003e"},{"lineNumber":314,"author":{"gitId":"-"},"content":"           \"::\" when used as a reference to a method or constructor without arguments."},{"lineNumber":315,"author":{"gitId":"-"},"content":"             e.g. String::compareToIgnoreCase"},{"lineNumber":316,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"OperatorWrap\"\u003e"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."},{"lineNumber":323,"author":{"gitId":"-"},"content":"           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."},{"lineNumber":324,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"},{"lineNumber":332,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"},{"lineNumber":336,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"Indentation\"\u003e"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"},{"lineNumber":346,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"ParenPad\"\u003e"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."},{"lineNumber":357,"author":{"gitId":"-"},"content":"         a \u003d 1; // Allowed"},{"lineNumber":358,"author":{"gitId":"-"},"content":"         a  \u003d 1; // Not allowed (more than one space before \u003d)"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      \u003c!-- Validate whitespace surrounding comments as well."},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"           a \u003d 1; // Allowed (single space before start of comment)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"           a \u003d 1; /* Allowed (single space before start of comment) */"},{"lineNumber":365,"author":{"gitId":"-"},"content":"           /* Allowed (single space after end of comment) */ a \u003d 1;"},{"lineNumber":366,"author":{"gitId":"-"},"content":"           a \u003d 1;  // Not allowed (more than one space before start of comment)"},{"lineNumber":367,"author":{"gitId":"-"},"content":"           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"},{"lineNumber":368,"author":{"gitId":"-"},"content":"           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."},{"lineNumber":371,"author":{"gitId":"-"},"content":"      --\u003e"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"    \u003c!--"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    JAVADOC CHECKS"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    --\u003e"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocType\"\u003e"},{"lineNumber":381,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"JavadocMethod\"\u003e"},{"lineNumber":386,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"},{"lineNumber":397,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"},{"lineNumber":399,"author":{"gitId":"-"},"content":"      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    \u003c/module\u003e"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"  \u003c/module\u003e"},{"lineNumber":403,"author":{"gitId":"-"},"content":"\u003c/module\u003e"}],"authorContributionMap":{"onnwards":3,"-":400}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"### Onn Wei Sin"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"\u003cimg src\u003d\"images/onnwards.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"[[github](http://github.com/onnwards)]"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"[[portfolio](team/onnwards.md)]"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"* Role: Developer"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"* Responsibilities: Scheduling and Tracking"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities: Code Quality, Testing"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"### Pang Jiarong, Jacob"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"\u003cimg src\u003d\"images/jacob-pang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"[[github](http://github.com/Jacob-Pang)]"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"[[portfolio](team/jacob-pang.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"* Role: Developer"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"* Responsibilities:"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"### Chia Jia-Xi, Kymie"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"\u003cimg src\u003d\"images/kwmiw.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"[[github](http://github.com/kwmiw)]"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"[[portfolio](team/kwmiw.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"* Responsibilities: Integration, Documentation"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"### Png Zheng Jie, Sebastian"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"\u003cimg src\u003d\"images/pngsebastian.png\" width\u003d\"200px\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"[[github](https://github.com/pngsebastian)]"},{"lineNumber":48,"author":{"gitId":"pngsebastian"},"content":"[[portfolio](team/pngsebastian.md)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"* Responsibilities: Documentation"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"### Zhang Peng"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"icytornado"},"content":"\u003cimg src\u003d\"images/icytornado.png\" width\u003d\"200px\"\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"pngsebastian"},"content":"[[github](https://github.com/icytornado)]"},{"lineNumber":59,"author":{"gitId":"icytornado"},"content":"[[portfolio](team/icytornado.md)]"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":62,"author":{"gitId":"icytornado"},"content":"* Responsibilities: Code Quality, Integration"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"* Backup Responsibilities:"}],"authorContributionMap":{"Jacob-Pang":3,"kwmiw":4,"onnwards":17,"pngsebastian":5,"-":31,"icytornado":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/docs/diagrams/) folder."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"**API** : [`Model.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"**API** : [`Storage.java`](https://github.com/AY2021S2-CS2103-W17-2/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"onnwards"},"content":"App-Ointment is intended for Receptionists of Medical Clinics who help schedule appointments, and maintain patient records and accounts."},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"onnwards"},"content":"* has a need to manage a significant number of scheduled appointments"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"onnwards"},"content":"**Value proposition**"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"onnwards"},"content":"- Allows users to track and reschedule appointments for a clinic, reducing no-shows."},{"lineNumber":250,"author":{"gitId":"onnwards"},"content":"- Allow users to verify the patient on arriving at the clinic for the appointment."},{"lineNumber":251,"author":{"gitId":"onnwards"},"content":"- No cross clinic support for clinics within a health group."},{"lineNumber":252,"author":{"gitId":"onnwards"},"content":"- No support for users who want to view their own appointments."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"onnwards"},"content":"### User stories"},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"Jacob-Pang"},"content":"| Priority | As a …​                                      | I want to …​                              | So that I can…​                                                     |"},{"lineNumber":259,"author":{"gitId":"Jacob-Pang"},"content":"| -------- | ------------------------------------------- | ---------------------------------------- | ------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | new user                                    | see usage instructions                   | refer to instructions when I forget how to use the App              |"},{"lineNumber":261,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | add a new appointment                    |                                                                     |"},{"lineNumber":262,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | delete an appointment                    | remove appointments that have expired or on behalf of the patient   |"},{"lineNumber":263,"author":{"gitId":"Jacob-Pang"},"content":"| `* * *`  | user                                        | find an appointment by specific fields   | locate details of relevant appointments without having to go through the entire list |"},{"lineNumber":264,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user                                        | lookup previous records of a patient     | fill in missing information where ommitted by the patient           |"},{"lineNumber":265,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user with many appointments in the schedule | be reminded of overdue appointments      | take the appropriate action to resolve the issues                   |"},{"lineNumber":266,"author":{"gitId":"Jacob-Pang"},"content":"| `* *`    | user with many appointments in the schedule | tag appointments with urgency categories | more urgent appointments can take priority                          |"},{"lineNumber":267,"author":{"gitId":"Jacob-Pang"},"content":"| `*`      | user with many appointments in the schedule | sort appointments by specific fields     | locate a category of appointments easily                            |"},{"lineNumber":268,"author":{"gitId":"Jacob-Pang"},"content":"| `*`      | user with many appointments in the schedule | automatically recommended available timings and doctors for new appointments | create appointments without manually checking availability in the schedule |"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"onnwards"},"content":"(For all use cases below, the **System** is the `App-Ointment` and the **Actor** is the `User`, unless specified otherwise)"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"Jacob-Pang"},"content":"### UC01: Enters a command:"},{"lineNumber":279,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":280,"author":{"gitId":"Jacob-Pang"},"content":"1. User enters a command."},{"lineNumber":281,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment performs the corresponding action."},{"lineNumber":282,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":283,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**"},{"lineNumber":284,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid command from the user."},{"lineNumber":285,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that the command is not recognised.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a2.** App-Ointment executes the `help` command.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 to 1a2 are repeated until command entered is recognised."},{"lineNumber":288,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends."},{"lineNumber":289,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"Jacob-Pang"},"content":"### UC02: Add an appointment"},{"lineNumber":292,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**"},{"lineNumber":293,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `add` command and corresponding subcommands (UC01)\u003c/u\u003e"},{"lineNumber":294,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment adds a new appointment to the appointment schedule."},{"lineNumber":295,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":296,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**    "},{"lineNumber":297,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid subcommand format."},{"lineNumber":298,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors."},{"lineNumber":300,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2."},{"lineNumber":301,"author":{"gitId":"Jacob-Pang"},"content":"    "},{"lineNumber":302,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** App-Ointment detects an existing appointment with the same patient or doctor at an overlapping appointment time."},{"lineNumber":303,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user about the conflicting appointment.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a2.** App-Ointment suggest user to either change existing appointment details through an `edit` command, before adding the new appointment again, or change the new appointment details.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":307,"author":{"gitId":"Jacob-Pang"},"content":"### UC03: List all appointments"},{"lineNumber":308,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**"},{"lineNumber":309,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `list` command (UC01)\u003c/u\u003e"},{"lineNumber":310,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment displays all appointments."},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**"},{"lineNumber":313,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** There are no appointments to display."},{"lineNumber":314,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment informs user that there are no appointments to display.\u003cbr\u003e"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"Jacob-Pang"},"content":"### UC04: Edit an appointment"},{"lineNumber":318,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**"},{"lineNumber":319,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `edit` command and corresponding subcommands (UC01)\u003c/u\u003e"},{"lineNumber":320,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment changes the details of the appointment."},{"lineNumber":321,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":323,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** App-Ointment detects an invalid subcommand format."},{"lineNumber":324,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e"},{"lineNumber":325,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors."},{"lineNumber":326,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2."},{"lineNumber":327,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":328,"author":{"gitId":"Jacob-Pang"},"content":"* **1b.** The currently displayed list of appointments is empty."},{"lineNumber":329,"author":{"gitId":"Jacob-Pang"},"content":"    * **1b1.** App-Ointment prompts user that there are no appointments in the current display.\u003cbr\u003e"},{"lineNumber":330,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends."},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** The index out of the bounds of the displayed list of appointments."},{"lineNumber":333,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of appointments.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 2a1 is repeated until the index entered is correct/free from errors."},{"lineNumber":335,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"Jacob-Pang"},"content":"* **2b.** App-Ointment detects an existing appointment with the same patient or doctor at an overlapping appointment time."},{"lineNumber":338,"author":{"gitId":"Jacob-Pang"},"content":"    * **2b1.** App-Ointment warns user about the conflicting appointment.\u003cbr\u003e"},{"lineNumber":339,"author":{"gitId":"Jacob-Pang"},"content":"    * **2b2.** App-Ointment suggest user to either change the other existing appointment details through a separate `edit` command, before editing the current appointment again, or change the edit details of the current appointment.\u003cbr\u003e"},{"lineNumber":340,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends."},{"lineNumber":341,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":342,"author":{"gitId":"Jacob-Pang"},"content":"### UC05: Find appointments by search fields"},{"lineNumber":343,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**"},{"lineNumber":344,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `find` command and corresponding subcommands (UC01)\u003c/u\u003e"},{"lineNumber":345,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment changes the displayed list of appointments to fit."},{"lineNumber":346,"author":{"gitId":"Jacob-Pang"},"content":"    "},{"lineNumber":347,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**"},{"lineNumber":348,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** System detects an invalid subcommand format."},{"lineNumber":349,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that syntax is incorrect and displays the expected format.\u003cbr\u003e"},{"lineNumber":350,"author":{"gitId":"Jacob-Pang"},"content":"    Steps 1a1 is repeated until the subcommand entered is correct/free from errors."},{"lineNumber":351,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2."},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** There are no appointments to display."},{"lineNumber":354,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment informs user that there are no appointments to display.\u003cbr\u003e"},{"lineNumber":355,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends."},{"lineNumber":356,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":357,"author":{"gitId":"Jacob-Pang"},"content":"### UC06: Delete an appointment"},{"lineNumber":358,"author":{"gitId":"Jacob-Pang"},"content":"**MSS**"},{"lineNumber":359,"author":{"gitId":"Jacob-Pang"},"content":"1. User \u003cu\u003eenters the `delete` command and corresponding subcommands (UC01)\u003c/u\u003e"},{"lineNumber":360,"author":{"gitId":"Jacob-Pang"},"content":"2. App-Ointment removes the appointment from the appointment schedule"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"Jacob-Pang"},"content":"**Extensions**"},{"lineNumber":363,"author":{"gitId":"Jacob-Pang"},"content":"* **1a.** The currently displayed list of appointments is empty."},{"lineNumber":364,"author":{"gitId":"Jacob-Pang"},"content":"    * **1a1.** App-Ointment prompts user that there are no appointments in the current display.\u003cbr\u003e"},{"lineNumber":365,"author":{"gitId":"Jacob-Pang"},"content":"    Use case ends."},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"Jacob-Pang"},"content":"* **2a.** The index out of the bounds of the displayed list of appointments."},{"lineNumber":368,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a1.** App-Ointment warns user that the index is out of bounds and displays the bounds of the displayed list of appointments.\u003cbr\u003e"},{"lineNumber":369,"author":{"gitId":"Jacob-Pang"},"content":"    * **2a2.** User enters a valid index\u003cbr\u003e"},{"lineNumber":370,"author":{"gitId":"Jacob-Pang"},"content":"    Use case resumes from step 2."},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":375,"author":{"gitId":"onnwards"},"content":"_Non-functional requirements specify the constraints under which App-Ointment is developed and operated._"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"onnwards"},"content":"#### Constraints:"},{"lineNumber":378,"author":{"gitId":"onnwards"},"content":"* The system should be backward compatible with data produced by earlier versions of the system."},{"lineNumber":379,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":380,"author":{"gitId":"onnwards"},"content":"#### Technical requirements:"},{"lineNumber":381,"author":{"gitId":"onnwards"},"content":"* Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"onnwards"},"content":"#### Performance requirements:"},{"lineNumber":384,"author":{"gitId":"onnwards"},"content":"* Should be able to hold up to 1000 appointments without a noticeable sluggishness in performance for typical usage."},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"onnwards"},"content":"#### Quality requirements:"},{"lineNumber":387,"author":{"gitId":"onnwards"},"content":"* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"onnwards"},"content":"#### Notes about project scope:"},{"lineNumber":390,"author":{"gitId":"onnwards"},"content":"* The App-Ointment data file is private and local to the user."},{"lineNumber":391,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"onnwards"},"content":"* **System**: The App-Ointment App"},{"lineNumber":396,"author":{"gitId":"onnwards"},"content":"* **User**: The Receptionist, not the patient or doctor"},{"lineNumber":397,"author":{"gitId":"onnwards"},"content":"* **Appointment Schedule**: The list of appointments maintained in the App-Ointment, arranged by appointment datetime."},{"lineNumber":398,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"onnwards"},"content":"*{More to be added}*"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":409,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":426,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":437,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":440,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":443,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"Jacob-Pang":93,"onnwards":33,"-":327}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"App-Ointment is a desktop app for for managing and scheduling patient appointments, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, App-Ointment can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"1. Download the latest `App-Ointment.jar` from [here](https://github.com/AY2021S2-CS2103-W17-2/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your App-Ointment App."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"   * **`list`** : [Coming Soon]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"   * **`add`** `n/John Doe dr/Grey d/2021-01-01 1200 t/brain surgery p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : [Coming Soon]"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"   * **`delete`** `3` : [Coming Soon]"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"   * **`clear`** : [Coming Soon]"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"### Adding an appointment: `add`"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"Adds an appointment to the schedule.\u003cbr\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"Format: `add n/PATIENT dr/DOCTOR d/DATETIME [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"* Raises an exception if there are conflicts in schedule for the patient and the doctor.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"* Automatically fills empty optional fields if there is a previous record of the patient.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: \u003cb\u003eTip:\u003c/b\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"* The appointment can have any number of tags (including 0). It is recommended to use the tags to define the purpose of the appointment.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e\u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"* `add n/John Doe dr/Grey d/2021-01-01 1200 t/brain surgery p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"* `add n/Betsy Crowe dr/Who d/2021-01-01 1800 t/drug screening e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"### Listing all appointments : `list`"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"Changes the displayed appointment list to show all appointments in the appointment schedule.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"### Editing an appointment : `edit`"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"Edits an existing appointment in the schedule.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"Format: `edit INDEX [n/PATIENT] [dr/DOCTOR] [d/DATETIME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"* Edits the appointment at the specified INDEX. The index refers to the index number shown in the displayed appointment schedule list. The index must be a \u003cstrong\u003epositive integer\u003c/strong\u003e 1, 2, 3, …​\u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"* At least one of the optional fields must be provided.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"* Existing values will be updated to the input values.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"* You can remove all the person’s tags by typing t/ without specifying any tags after it.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"* Raises an exception if there are conflicts in the new schedule for the patient and the doctor.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"* `edit 1 dr/Who d/2021-01-01 1200` Edits the assigned doctor and appointment datetime under the 1st appointment to dr.Who and 01 Jan 2021 12pm respectively."},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"* `edit 2 n/Betsy Crower t/` Edits the name of patient under the 2nd appointment to be Betsy Crower and clears all existing tags."},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"### Locating appointments by fields : `find`"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"[Coming Soon]"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"Format: `find [n/PATIENT KEYWORDS] [dr/DOCTOR_KEYWORDS] [d/DATETIME] [p/PHONE] [e/EMAIL] [a/ADDRESS_KEYWORDS] [t/TAG KEYWORDS]`"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"* At least one of the optional fields must be provided.\u003cbr\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`\u003cbr\u003e"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"* Only full words will be matched. e.g. `han` will not match `Hans`\u003cbr\u003e"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"* Search fields require at least one keyword to be matched in the field description for the search condition of that field to be satisfied. e.g. `find n/Hans Bo` will match both patients `Hans Gruber` and `Bo Young`."},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"* Certain fields such as datetime, phone number and email do not support a search by keywords and require a match with the entire field description for the search condition to be satisfied."},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"* Where multiple search fields are specified, the search is conditioned on the satisfaction of \u003cstrong\u003eall\u003c/strong\u003e of the search fields\u0027 subconditions. e.g. `find n/Hans Bo dr/Grey` will match appointments that satisfy both:"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"  - Grey in the assigned doctor\u0027s name; and"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"  - Either Hans or Bo in the patient\u0027s name."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"* `find n/john alex` returns appointments with patients `john`, `John`, `John Doe`, `alex`, `Alex` and `Alex Anderson`."},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"* `find dr/Grey Who t/brain surgery` returns appointments with doctors `grey` or `who` and are tagged as `brain surgery`."},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":150,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"### Deleting an appointment : `delete`"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"Deletes the specified appointment from the schedule."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"* Deletes the appointment at the specified INDEX."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"* The index refers to the index number shown in the displayed appointment list."},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"* The index must be a \u003cstrong\u003epositive integer\u003c/strong\u003e 1, 2, 3, …​"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"* `list` followed by `delete 2` deletes the 2nd appointment in the entire appointment schedule."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"* `find Betsy` followed by `delete 1 ` deletes the 1st appointment in the results of the `find` command."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"App-Ointment data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"App-Ointment data are saved as a JSON file `[JAR file location]/data/PatientAddressBook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"onnwards"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: \u003cb\u003eCaution:\u003c/b\u003e"},{"lineNumber":185,"author":{"gitId":"onnwards"},"content":"If your changes to the data file makes its format invalid, App-Ointment will discard all data and start with an empty data file at the next run."},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"\u003c/div\u003e\u003cbr\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous App-Ointment home folder."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":198,"author":{"gitId":"onnwards"},"content":"[Coming Soon]"},{"lineNumber":199,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":200,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":201,"author":{"gitId":"onnwards"},"content":"**Add** | `add n/PATIENT dr/DOCTOR d/DATETIME [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003ee.g., `add n/John Doe dr/Grey d/2021-01-01 1200 t/brain surgery p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":202,"author":{"gitId":"onnwards"},"content":"**Delete** | `delete INDEX`\u003cbr\u003ee.g., `delete 2`"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"**Edit** | `edit INDEX [n/PATIENT] [dr/DOCTOR] [d/DATETIME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003ee.g., `edit 1 dr/Who d/2021-01-01 1200`"},{"lineNumber":204,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":205,"author":{"gitId":"onnwards"},"content":"**find** | [Coming Soon]"}],"authorContributionMap":{"Jacob-Pang":58,"onnwards":27,"-":120}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"title: App-Ointment"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103-W17-2/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"[![codecov](https://codecov.io/gh/ay2021s2-cs2103-w17-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/ay2021s2-cs2103-w17-2/tp)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"**App-Ointment is a appointment management software for Receptionists of Medical Clinics** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"* If you are interested in using App-Ointment, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":15,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"onnwards":6,"-":14}},{"path":"docs/team/icytornado.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"icytornado"},"content":"---"},{"lineNumber":2,"author":{"gitId":"icytornado"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"icytornado"},"content":"title: Zhang Peng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"icytornado"},"content":"---"},{"lineNumber":5,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":6,"author":{"gitId":"icytornado"},"content":"## Project: App-Ointment"},{"lineNumber":7,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":8,"author":{"gitId":"icytornado"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":10,"author":{"gitId":"icytornado"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":12,"author":{"gitId":"icytornado"},"content":"* **Code contributed**:"},{"lineNumber":13,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":14,"author":{"gitId":"icytornado"},"content":"* **Project management**:"},{"lineNumber":15,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":16,"author":{"gitId":"icytornado"},"content":"* **Documentation**:"},{"lineNumber":17,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":18,"author":{"gitId":"icytornado"},"content":"* **Community**:"},{"lineNumber":19,"author":{"gitId":"icytornado"},"content":""},{"lineNumber":20,"author":{"gitId":"icytornado"},"content":"* **Tools**:"}],"authorContributionMap":{"icytornado":20}},{"path":"docs/team/jacob-pang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"title: Jacob Pang\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"## Project: App-Ointment"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"* **Code contributed**:"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"* **Project management**:"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"* **Documentation**:"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"* **Community**:"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"* **Tools**:"}],"authorContributionMap":{"Jacob-Pang":20}},{"path":"docs/team/onnwards.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"---"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"title: Onn Wei Sin\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"---"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"## Project: App-Ointment"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"* **Code contributed**: [RepoSense](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003donnwards\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByAuthors\u0026breakdown\u003dfalse)"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"* **Project management**:"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"* **Documentation**:"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"* **Community**:"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"* **Tools**:"}],"authorContributionMap":{"onnwards":20}},{"path":"docs/team/pngsebastian.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"---"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"title: Png Zheng Jie, Sebastian\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"---"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"## Project: App-Ointment"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"App-Ointment is a patient appointment management software adapted from AddressBook - Level 3, which is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"* **Code contributed**:"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"* **Project management**:"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"* **Documentation**:"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"* **Community**:"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"* **Tools**:"}],"authorContributionMap":{"pngsebastian":20}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"Jacob-Pang"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/PatientAddressBook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"Jacob-Pang":1,"-":393}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.AppointmentScheduleStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonAppointmentScheduleStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage("},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"                userPrefs.getAppointmentScheduleFilePath());"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        storage \u003d new StorageManager(appointmentScheduleStorage, addressBookStorage, userPrefsStorage);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        return new ModelManager(initAppointmentSchedule(), initPatientRecords(), userPrefs);"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    private ReadOnlyAddressBook initPatientRecords() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAddressBook patientRecords;"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        // non-existent patient records with start with sample address book for now."},{"lineNumber":92,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                logger.info(\"Patient data file not found. Will be starting with a sample Patient AddressBook\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"            logger.warning(\"Patient data file not in the correct format. Will be starting with an empty\""},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" Patient AddressBook\");"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"            logger.warning(\"Problem while reading from the patient data file. Will be starting with an empty\""},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" Patient AddressBook\");"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"            patientRecords \u003d new AddressBook();"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        return patientRecords;"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    private ReadOnlyAppointmentSchedule initAppointmentSchedule () {"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cReadOnlyAppointmentSchedule\u003e appointmentScheduleOptional;"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        ReadOnlyAppointmentSchedule appointmentSchedule;"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        // On exception or non existent data file, initialize with empty Appointment Schedule"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentScheduleOptional \u003d storage.readAppointmentSchedule();"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"            if (!appointmentScheduleOptional.isPresent()) {"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"                logger.info(\"Appointment data file not found. Will be starting with an empty AppointmentSchedule\");"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule \u003d appointmentScheduleOptional.orElseGet(AppointmentSchedule::new);"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"            logger.warning(\"Appointment data file not in the correct format. Will be starting with an empty\""},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" AppointmentSchedule\");"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"            logger.warning(\"Problem while reading from the patient data file. Will be starting with an empty\""},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"                    + \" AppointmentSchedule\");"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule \u003d new AppointmentSchedule();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":192,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"        logger.info(\"Starting App-Ointment \" + MainApp.VERSION);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping App-Ointment ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":52,"-":172}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the AppointmentSchedule"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"     * @see seedu.address.model.Model#getAppointmentSchedule()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAppointmentSchedule getAppointmentSchedule();"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 appointment schedule file path."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":24,"-":46}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.logic.parser.UserInputParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    private final UserInputParser userInputParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        userInputParser \u003d new UserInputParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command Execution \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        Command command \u003d userInputParser.parseCommand(commandText);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"            storage.saveAppointmentSchedule(model.getAppointmentSchedule());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAppointmentSchedule getAppointmentSchedule() {"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getAppointmentSchedule();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        return model.getAppointmentScheduleFilePath();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":29,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/UserInputParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"public class UserInputParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":1,"-":75}},{"path":"src/main/java/seedu/address/model/AppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.NonConflictingAppointmentList;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":" * Wraps all data at the appointment-schedule level"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":" * Conflicting appointments are not allowed"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentSchedule implements ReadOnlyAppointmentSchedule {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private final NonConflictingAppointmentList appointments;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        appointments \u003d new NonConflictingAppointmentList();"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule() {}"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates an AppointmentSchedule using the Appointments in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule(ReadOnlyAppointmentSchedule toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the contents of the appointment list with {@code appointments}."},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointments} must not contain conflicting appointments."},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * Resets the existing data of this {@code AppointmentSchedule} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public void resetData(ReadOnlyAppointmentSchedule newData) {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        setAppointments(newData.getAppointmentList());"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    //// appointment-level operations"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     * in the appointment schedule."},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.contains(appointment);"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment has a conflict with {@code appointment} exists"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     * in the appointment schedule."},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment appointment) {"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.hasConflict(appointment);"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds an appointment to the address book."},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must not have conflicts with the existing appointments in the"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"     * appointment schedule"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    public void addAppointment(Appointment toAdd) {"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.add(toAdd);"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the AppointmentSchedule."},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment {@code editedAppointment} must not have conflicts with any existing"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     * appointments in the appointment schedule."},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.setAppointment(target, editedAppointment);"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"     * Removes {@code toRemove} from this {@code AppointmentSchedule}."},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code toRemove} must exist in the appointment schedule."},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    public void removeAppointment(Appointment toRemove) {"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.remove(toRemove);"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    //// util methods"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.asUnmodifiableObservableList().size() + \" appointments\";"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        // TODO: refine later"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.asUnmodifiableObservableList();"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof AppointmentSchedule // instanceof handles nulls"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 appointments.equals(((AppointmentSchedule) other).appointments));"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        return appointments.hashCode();"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":133}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the user prefs\u0027 appointment schedule file path."},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the user prefs\u0027 appointment schedule file path."},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath);"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces appointment schedule book data with the data in {@code addressBook}."},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule);"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns the AppointmentSchedule */"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    ReadOnlyAppointmentSchedule getAppointmentSchedule();"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if an appointment that conflicts with {@code appointment} exists in the appointment schedule."},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"    boolean hasConflictingAppointment(Appointment appointment);"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"     * Deletes the given appointment."},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must exist in the appointment schedule."},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"    void deleteAppointment(Appointment target);"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds the given appointment."},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointment} must not be in conflict with existing appointments in the appointment schedule."},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"    void addAppointment(Appointment appointment);"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}."},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the appointment schedule."},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"     * The {@code editedAppointment} must not be in conflict with another appointment in the appointment schedule"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":55,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private final AppointmentSchedule appointmentSchedule;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public ModelManager(ReadOnlyAppointmentSchedule appointmentSchedule, ReadOnlyAddressBook addressBook,"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                        ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(appointmentSchedule, addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        logger.fine(\"Initializing with appointment schedule: \" + appointmentSchedule"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"                + \", address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule \u003d new AppointmentSchedule(appointmentSchedule);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.appointmentSchedule.getAppointmentList());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        this(new AppointmentSchedule(), new AddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        return userPrefs.getAppointmentScheduleFilePath();"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentScheduleFilePath);"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setAppointmentScheduleFilePath(appointmentScheduleFilePath);"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) {"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule.resetData(appointmentSchedule);"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"    public ReadOnlyAppointmentSchedule getAppointmentSchedule() {"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflictingAppointment(Appointment appointment) {"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointment);"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule.hasConflict(appointment);"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"    public void deleteAppointment(Appointment target) {"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.removeAppointment(target);"},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"    public void addAppointment(Appointment appointment) {"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.addAppointment(appointment);"},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedAppointment);"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.setAppointment(target, editedAppointment);"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code versionedAppointmentSchedule}"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":193,"author":{"gitId":"Jacob-Pang"},"content":"        return filteredAppointments;"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(predicate);"},{"lineNumber":199,"author":{"gitId":"Jacob-Pang"},"content":"        filteredAppointments.setPredicate(predicate);"},{"lineNumber":200,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule.equals(other.appointmentSchedule)"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 addressBook.equals(other.addressBook)"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":78,"-":143}},{"path":"src/main/java/seedu/address/model/ReadOnlyAppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public interface ReadOnlyAppointmentSchedule {"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"     * This list will not contain any conflicting appointments."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":12}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"PatientAddressBook.json\");"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    private Path appointmentScheduleFilePath \u003d Paths.get(\"data\", \"AppointmentSchedule.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleFilePath;"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentScheduleFilePath);"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentScheduleFilePath \u003d appointmentScheduleFilePath;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":11,"-":88}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" * Represents an appointment in the appointment schedule"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" * Guarantees: field values are validated, immutable."},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * TODO: convert doctor into Person field."},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"public class Appointment implements Comparable\u003cAppointment\u003e {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    // Data fields"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private final Person patient;"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private final String doctor;"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private final Timeslot timeslot;"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public Appointment(Person patient, String doctor, Timeslot timeslot, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(patient, doctor, timeslot, tags);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        this.patient \u003d patient;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctor \u003d doctor;"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        this.tags.addAll(tags);"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    //// Accessors"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    public Person getPatient() {"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        return patient;"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    public String getDoctor() {"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        return doctor;"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot getTimeslot() {"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot;"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getAppointmentStart() {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot.getStart();"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getAppointmentEnd() {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return timeslot.getEnd();"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"     * if modification is attempted."},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    //// Boolean checks"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * Defines the default sorting criterion by Appointment datetime."},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    public int compareTo(Appointment otherAppointment) {"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        return getTimeslot().compareTo(otherAppointment.getTimeslot());"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns whether there is a scheduling conflict between this appointment and the other."},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment toCheck) {"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        return (patient.equals(toCheck.getPatient())"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"                || doctor.equals(toCheck.getDoctor()))"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 getTimeslot().hasOverlap(toCheck.getTimeslot());"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean isDue() {"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        return getAppointmentStart().isBefore(LocalDateTime.now());"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasExpired() {"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        return getAppointmentEnd().isBefore(LocalDateTime.now());"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if both appointments have the same data fields."},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"            return true;"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        return otherAppointment.getPatient().equals(getPatient())"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherAppointment.getDoctor().equals(getDoctor())"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherAppointment.getTimeslot().equals(getTimeslot())"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherAppointment.getTags().equals(getTags());"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(patient, doctor, timeslot, tags);"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(\"Patient: \")"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getPatient().toString())"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Doctor: \")"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getDoctor().toString())"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\"; Timeslot: \")"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getTimeslot().toString());"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"            tags.forEach(builder::append);"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"        return builder.toString();"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":135}},{"path":"src/main/java/seedu/address/model/appointment/NonConflictingAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.AppointmentConflictException;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" * A list of appointments that enforces non-conflict between its elements, does not allow nulls and orders the"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" * elements by their sorting criterion using {@code Appointment#compareTo(Appointment)}."},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * Appointments are considered non-conflicting by comparing using {@code Appointment#hasConflict(Appointment)}. \u0027"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * As such, adding and updating of appointments uses Appointment#hasConflict(Appointment) so as to ensure that the"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" * appointment being added or updated does not conflict with any existing appointments in the"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" * NonConflictingAppointmentList."},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":" * Removal of an appointment uses Appointment#equals(Object) so as to ensure that the appointment with exactly the"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":" * same fields will be removed."},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":" *"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":" * Supports a minimal set of list operations."},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":" *"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"public class NonConflictingAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    //// accessors"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toCheck);"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.stream().anyMatch(toCheck::equals);"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the list contains appointments that are in conflict with {@code toCheck}"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasConflict(Appointment toCheck) {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toCheck);"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.stream().anyMatch(toCheck::hasConflict);"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if {@code persons} contains non-conflicting appointments."},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    private boolean appointmentsAreNotInConflict(List\u003cAppointment\u003e appointments) {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                if (appointments.get(i).hasConflict(appointments.get(j))) {"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"                    return false;"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        return true;"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        return internalUnmodifiableList;"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"    //// mutators: incorporates sorting"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds an appointment to the list."},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must not have conflicts with existing appointments in the list"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public void add(Appointment toAdd) {"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toAdd);"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        if (hasConflict(toAdd)) {"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.add(toAdd);"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code target} must exist in the list."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment {@code editedPerson} must not have conflicts with existing appointments"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"     * in the list."},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(target, editedAppointment);"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        if (hasConflict(editedAppointment)) {"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.set(index, editedAppointment);"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"     * Removes the equivalent appointment from the list."},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"     * The appointment must exist in the list."},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"    public void remove(Appointment toRemove) {"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(toRemove);"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(NonConflictingAppointmentList replacement) {"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(replacement);"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"     * Replaces the contents of this list with {@code appointments}."},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"     * {@code appointments} must not contain conflicting appointments"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        if (!appointmentsAreNotInConflict(appointments)) {"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AppointmentConflictException();"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        internalList.setAll(appointments);"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"        FXCollections.sort(internalList);"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"    //// overriding methods"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"                || (other instanceof NonConflictingAppointmentList // instanceof handles nulls"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 internalList.equals(((NonConflictingAppointmentList) other).internalList));"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.hashCode();"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"        return internalList.iterator();"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":160}},{"path":"src/main/java/seedu/address/model/appointment/Timeslot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":" * Represents the timeslot allocated to an appointment."},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"public class Timeslot implements Comparable\u003cTimeslot\u003e {"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Timeslot end date and time must be strictly \""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            + \"after the start date and time\";"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public final LocalDateTime start;"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public final LocalDateTime end;"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructor based on specified start and end dateTime."},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * The end dateTime must be strictly larger than the start dateTime."},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws NegativeOrZeroDurationException"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot(LocalDateTime start, LocalDateTime end) throws NegativeOrZeroDurationException {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(start, end);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        if (start.compareTo(end) \u003e 0) {"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            throw new NegativeOrZeroDurationException();"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d end;"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructor based on specified start and duration."},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * The duration must be strictly more than zero seconds."},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws NegativeOrZeroDurationException"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot(LocalDateTime start, Duration duration) throws NegativeOrZeroDurationException {"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        requireAllNonNull(start, duration);"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        if (duration.isNegative() || duration.isZero()) {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"            throw new NegativeOrZeroDurationException();"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d start.plus(duration);"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    //// Accessors"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getStart() {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return start;"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"    public LocalDateTime getEnd() {"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        return end;"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    //// Boolean Checks"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the dateTime {@code toCheck} lies within the timeslot period."},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean isBetween(LocalDateTime toCheck) {"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        return (toCheck.isBefore(getEnd()) || toCheck.isEqual(getEnd()))"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 (toCheck.isAfter(getStart()) || toCheck.isEqual(getStart()));"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if the timeslot {@code otherTimeslot} chronologically overlaps"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     * with this timeslot."},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasOverlap(Timeslot otherTimeslot) {"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        return isBetween(otherTimeslot.getStart()) || isBetween(otherTimeslot.getEnd());"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    public int compareTo(Timeslot otherTimeslot) {"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        int compareStart \u003d getStart().compareTo(otherTimeslot.getStart());"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        if (compareStart \u003d\u003d 0) {"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"            return getEnd().compareTo(otherTimeslot.getEnd());"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        return compareStart;"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns true if both timeslots represent the same period."},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"            return true;"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        if (!(other instanceof Timeslot)) {"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"            return false;"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"        Timeslot otherTimeslot \u003d (Timeslot) other;"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"        return otherTimeslot.getStart().equals(getStart())"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"                \u0026\u0026 otherTimeslot.getEnd().equals(getEnd());"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        return Objects.hash(start, end);"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"        builder.append(\"From \")"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getStart().toString())"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"                .append(\" To \")"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"                .append(getEnd().toString());"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        return builder.toString();"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":124}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentConflictException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation will result in conflicting appointments."},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * @see Appointment#hasConflict(Appointment)"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentConflictException extends RuntimeException {"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentConflictException() {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        super(\"Operation would result in conflicting appointments\");"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":14}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation is unable to find the specified appointment."},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":7}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/NegativeOrZeroDurationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":" * Signals that the operation will result in a negative or zero duration for an appointment."},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"public class NegativeOrZeroDurationException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"    public NegativeOrZeroDurationException() {"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"        super(\"Operation would result in an appointment with negative or zero duration\");"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":11}},{"path":"src/main/java/seedu/address/storage/AppointmentScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":" * Represents a storage for {@link seedu.address.model.AppointmentSchedule}."},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"public interface AppointmentScheduleStorage {"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    Path getAppointmentScheduleFilePath();"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns AppointmentSchedule data as a {@link ReadOnlyAppointmentSchedule}."},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     * @see #getAppointmentScheduleFilePath()"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath) throws DataConversionException,"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            IOException;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     * Saves the given {@link ReadOnlyAppointmentSchedule} to the storage."},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     * @param appointmentSchedule cannot be null."},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException;"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * @see #saveAppointmentSchedule(ReadOnlyAppointmentSchedule)"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" * Jackson-friendly version of {@link Appointment}."},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedAppointment {"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private final JsonAdaptedPerson patient;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private final String doctor;"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private final JsonAdaptedTimeslot timeslot;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details."},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"patient\") JsonAdaptedPerson patient,"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"                                  @JsonProperty(\"doctor\") String doctor,"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                                  @JsonProperty(\"timeslot\") JsonAdaptedTimeslot timeslot,"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        this.patient \u003d patient;"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctor \u003d doctor;"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d timeslot;"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedAppointment(Appointment source) {"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        patient \u003d new JsonAdaptedPerson(source.getPatient());"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        doctor \u003d source.getDoctor();"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new JsonAdaptedTimeslot(source.getTimeslot());"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        final List\u003cTag\u003e appointmentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentTags.add(tag.toModelType());"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        if (patient \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"patient\"));"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        final Person modelPatient \u003d patient.toModelType();"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        if (doctor \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"doctor\"));"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        final String modelDoctor \u003d doctor;"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        if (timeslot \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"                    Timeslot.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        final Timeslot modelTimeslot \u003d timeslot.toModelType();"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(appointmentTags);"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        return new Appointment(modelPatient, modelDoctor, modelTimeslot, modelTags);"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":92}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTimeslot.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.exceptions.NegativeOrZeroDurationException;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * Jackson-friendly version of {@link Timeslot}."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAdaptedTimeslot {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private final String start;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    private final String end;"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonAdaptedTimeslot} with the given {@code start} and {@code end}."},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedTimeslot(@JsonProperty(\"start\") String start, @JsonProperty(\"end\") String end) {"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d end;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code Timeslot} into this class for Jackson use."},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAdaptedTimeslot(Timeslot source) {"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d source.getStart().toString();"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d source.getEnd().toString();"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonValue"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    public String getStart() {"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        return start;"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonValue"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public String getEnd() {"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        return end;"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this Jackson-friendly adapted timeslot object into the model\u0027s {@code Timeslot} object."},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if the end dateTime is equal to or before the start dateTime"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * raises a {@code NegativeOrZeroDurationException}."},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            return new Timeslot(LocalDateTime.parse(start), LocalDateTime.parse(end));"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (NegativeOrZeroDurationException e) {"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            throw new IllegalValueException(Timeslot.MESSAGE_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":61}},{"path":"src/main/java/seedu/address/storage/JsonAppointmentScheduleStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * A class to access AppointmentSchedule data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonAppointmentScheduleStorage implements AppointmentScheduleStorage {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAppointmentScheduleStorage.class);"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonAppointmentScheduleStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return readAppointmentSchedule(filePath);"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #readAppointmentSchedule()}."},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        Optional\u003cJsonSerializableAppointmentSchedule\u003e jsonAppointmentSchedule \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                filePath, JsonSerializableAppointmentSchedule.class);"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        if (!jsonAppointmentSchedule.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            return Optional.of(jsonAppointmentSchedule.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException {"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        saveAppointmentSchedule(appointmentSchedule, filePath);"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * Similar to {@link #saveAppointmentSchedule(ReadOnlyAppointmentSchedule)}."},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath) throws"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"            IOException {"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(appointmentSchedule);"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAppointmentSchedule(appointmentSchedule), filePath);"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":82}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAppointmentSchedule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * An Immutable AppointmentSchedule that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@JsonRootName(value \u003d \"appointmentSchedule\")"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class JsonSerializableAppointmentSchedule {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String MESSAGE_CONFLICTING_APPOINTMENTS \u003d \"Appointments list contains conflicts.\";"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"     * Constructs a {@code JsonSerializableAppointmentSchedule} with the given appointments."},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    @JsonCreator"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializableAppointmentSchedule("},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointments.addAll(appointments);"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts a given {@code ReadOnlyAppointmentSchedule} into this class for Jackson use."},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAppointmentSchedule}."},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public JsonSerializableAppointmentSchedule(ReadOnlyAppointmentSchedule source) {"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     * Converts this appointment schedule into the model\u0027s {@code AppointmentSchedule} object."},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentSchedule appointmentSchedule \u003d new AppointmentSchedule();"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            if (appointmentSchedule.hasConflict(appointment)) {"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                throw new IllegalValueException(MESSAGE_CONFLICTING_APPOINTMENTS);"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            appointmentSchedule.addAppointment(appointment);"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":62}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, AppointmentScheduleStorage {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException;"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":7,"-":31}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private AppointmentScheduleStorage appointmentScheduleStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public StorageManager(AppointmentScheduleStorage appointmentScheduleStorage,"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                          AddressBookStorage addressBookStorage,"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentScheduleStorage \u003d appointmentScheduleStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"    public Path getAppointmentScheduleFilePath() {"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleStorage.getAppointmentScheduleFilePath();"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule() throws DataConversionException, IOException {"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        return readAppointmentSchedule(appointmentScheduleStorage.getAppointmentScheduleFilePath());"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"    public Optional\u003cReadOnlyAppointmentSchedule\u003e readAppointmentSchedule(Path filePath)"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentScheduleStorage.readAppointmentSchedule(filePath);"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule) throws IOException {"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        saveAppointmentSchedule(appointmentSchedule, appointmentScheduleStorage.getAppointmentScheduleFilePath());"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"    public void saveAppointmentSchedule(ReadOnlyAppointmentSchedule appointmentSchedule, Path filePath)"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"            throws IOException {"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentScheduleStorage.saveAppointmentSchedule(appointmentSchedule, filePath);"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":37,"-":78}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"  \"addressBookFilePath\" : \"PatientAddressBook.json\","},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"  \"appointmentScheduleFilePath\" : \"AppointmentSchedule.json\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":2,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"  \"addressBookFilePath\" : \"PatientAddressBook.json\","},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"  \"appointmentScheduleFilePath\" : \"AppointmentSchedule.json\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":2,"-":10}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.storage.JsonAppointmentScheduleStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                new JsonAppointmentScheduleStorage(temporaryFolder.resolve(\"PatientAddressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"PatientAddressBook.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        StorageManager storage \u003d new StorageManager(appointmentScheduleStorage, addressBookStorage, userPrefsStorage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"                new JsonAppointmentScheduleStorage(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"        StorageManager storage \u003d new StorageManager(appointmentScheduleStorage, addressBookStorage, userPrefsStorage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), model.getAddressBook(),"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":11,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(model.getAppointmentSchedule(), model.getAddressBook(),"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":6,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.ReadOnlyAppointmentSchedule;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentSchedule \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        public Path getAppointmentScheduleFilePath() {"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":"        public void setAppointmentScheduleFilePath(Path appointmentScheduleFilePath) {"},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":"        public void setAppointmentSchedule(ReadOnlyAppointmentSchedule newData) {"},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"        public ReadOnlyAppointmentSchedule getAppointmentSchedule() {"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"        public boolean hasConflictingAppointment(Appointment appointment) {"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"        public void deleteAppointment(Appointment target) {"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":200,"author":{"gitId":"Jacob-Pang"},"content":"        @Override"},{"lineNumber":201,"author":{"gitId":"Jacob-Pang"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":202,"author":{"gitId":"Jacob-Pang"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":203,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":54,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        Model model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":5,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), model.getAddressBook(),"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), model.getAddressBook(),"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":8,"-":106}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(),"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(),"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(),"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"        Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(),"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"                new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":14,"-":168}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private Model model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    private Model expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            new UserPrefs());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":5,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        model \u003d new ModelManager(new AppointmentScheduleBuilder().build(), getTypicalAddressBook(),"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        expectedModel \u003d new ModelManager(new AppointmentScheduleBuilder().build(), model.getAddressBook(),"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":5,"-":37}},{"path":"src/test/java/seedu/address/logic/parser/UserInputParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"public class UserInputParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    private final UserInputParser parser \u003d new UserInputParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":2,"-":99}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.testutil.AppointmentScheduleBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(new AppointmentSchedule(), new AppointmentSchedule(modelManager.getAppointmentSchedule()));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"        AppointmentSchedule appointmentSchedule \u003d new AppointmentScheduleBuilder().build();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"        modelManager \u003d new ModelManager(appointmentSchedule, addressBook, userPrefs);"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(appointmentSchedule, addressBook, userPrefs);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(appointmentSchedule, differentAddressBook, userPrefs)));"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(appointmentSchedule, addressBook, userPrefs)));"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"        assertFalse(modelManager.equals(new ModelManager(appointmentSchedule, addressBook, differentUserPrefs)));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":8,"-":127}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"PatientAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        JsonAppointmentScheduleStorage appointmentScheduleStorage \u003d new JsonAppointmentScheduleStorage("},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"                getTempFilePath(\"ab\"));"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        storageManager \u003d new StorageManager(appointmentScheduleStorage, addressBookStorage, userPrefsStorage);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":45,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":59,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":4,"-":67}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentBuilder {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Person DEFAULT_PATIENT \u003d new PersonBuilder().build();"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public static final String DEFAULT_DOCTOR \u003d \"Dr. Grey\";"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public static final Timeslot DEFAULT_TIMESLOT \u003d new TimeslotBuilder().build();"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private Person patient;"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private String doctor;"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private Timeslot timeslot;"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code AppointmentBuilder} with the default details."},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder() {"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        patient \u003d new PersonBuilder(DEFAULT_PATIENT).build();"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        doctor \u003d DEFAULT_DOCTOR;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new TimeslotBuilder(DEFAULT_TIMESLOT).build();"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        patient \u003d new PersonBuilder(appointmentToCopy.getPatient()).build();"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        doctor \u003d appointmentToCopy.getDoctor();"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        timeslot \u003d new TimeslotBuilder(appointmentToCopy.getTimeslot()).build();"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        tags \u003d new HashSet\u003c\u003e(appointmentToCopy.getTags());"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code patient} of the {@code Appointment} that we are building."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withPatient(Person patient) {"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        this.patient \u003d new PersonBuilder(patient).build();"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code doctor} of the {@code Appointment} that we are building."},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withDoctor(String doctor) {"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        this.doctor \u003d doctor;"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code timeslot} of the {@code Appointment} that we are building."},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withTimeslot(Timeslot timeslot) {"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        this.timeslot \u003d new TimeslotBuilder(timeslot).build();"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentBuilder withTags(String ... tags) {"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"    public Appointment build() {"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        return new Appointment(patient, doctor, timeslot, tags);"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":83}},{"path":"src/test/java/seedu/address/testutil/AppointmentScheduleBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.AppointmentSchedule;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building AppointmentSchedule objects."},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" *     {@code AppointmentSchedule as \u003d new AppointmentScheduleBuilder().withAppointment(appointment).build();}"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class AppointmentScheduleBuilder {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    private AppointmentSchedule appointmentSchedule;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder() {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule \u003d new AppointmentSchedule();"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder(AppointmentSchedule appointmentSchedule) {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        this.appointmentSchedule \u003d appointmentSchedule;"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     * Adds a new {@code Appointment} to the {@code AppointmentSchedule} that we are building."},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentScheduleBuilder withAppointment(Appointment appointment) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        appointmentSchedule.addAppointment(appointment);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public AppointmentSchedule build() {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        return appointmentSchedule;"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":34}},{"path":"src/test/java/seedu/address/testutil/TimeslotBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import seedu.address.model.appointment.Timeslot;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * A utility class to help with building Timeslot objects."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class TimeslotBuilder {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"            .ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    public static final LocalDateTime DEFAULT_START \u003d LocalDateTime.parse(\"2021-01-01 00:00\","},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"            DATE_TIME_FORMATTER);"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static final LocalDateTime DEFAULT_END \u003d LocalDateTime.parse(\"2021-01-02 00:00\","},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"            DATE_TIME_FORMATTER);"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime start;"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime end;"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * Creates a {@code TimeslotBuilder} with the default details."},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder() {"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d DEFAULT_START;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d DEFAULT_END;"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     * Initializes the TimeslotBuilder with the data of {@code timeslotToCopy}."},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder(Timeslot timeslotToCopy) {"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        start \u003d timeslotToCopy.getStart();"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        end \u003d timeslotToCopy.getEnd();"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code start} of the {@code Timeslot} that we are building."},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder withStart(LocalDateTime start) {"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        this.start \u003d start;"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * Sets the {@code end} of the {@code Timeslot} that we are building."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    public TimeslotBuilder withEnd(LocalDateTime end) {"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        this.end \u003d end;"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public Timeslot build() {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        return new Timeslot(start, end);"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":58}}]
