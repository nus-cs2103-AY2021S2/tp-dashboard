[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# FriendDex"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"* For the detailed documentation of this project, see the **[FriendDex Product Website](https://ay2021s2-cs2103t-w14-1.github.io/tp/)**."},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"ivantjh":3,"-":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"### Muhammad Assyarul Ariffin Bin Omar"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"\u003cimg src\u003d\"images/assyarul.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"[[github](https://github.com/assyarul)]"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"* Role: Developer"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"### Lin Lue"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"\u003cimg src\u003d\"images/lue97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"[[github](https://github.com/lue97)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"### Chester How"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"\u003cimg src\u003d\"images/chesterhow.png\" width\u003d\"200px\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":"[[homepage](https://chester.how)]"},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"[[github](https://github.com/chesterhow)]"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":"* Responsibilities: UI + Integration"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"### Tan Jun Han Ivan"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"\u003cimg src\u003d\"images/ivantjh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"[[github](https://github.com/ivantjh)]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer"}],"authorContributionMap":{"Assyarul":3,"lue97":2,"ivantjh":4,"-":27,"chesterhow":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"Assyarul"},"content":"* is a young programmer studying in NUS Computer Science"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions  "},{"lineNumber":241,"author":{"gitId":"Assyarul"},"content":"* has difficulty maintaining personal relationships"},{"lineNumber":242,"author":{"gitId":"Assyarul"},"content":"* cannot recall previous conversations with others"},{"lineNumber":243,"author":{"gitId":"Assyarul"},"content":"* is a goal-driven individual and seeks new challenges."},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"Assyarul"},"content":"**Value proposition**:"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"Assyarul"},"content":"* makes relationship management easier for the user"},{"lineNumber":248,"author":{"gitId":"Assyarul"},"content":"    * keeps track of personal relationship with users\u0027 friends"},{"lineNumber":249,"author":{"gitId":"Assyarul"},"content":"* manages relationship faster than a mouse-driven app."},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"Assyarul"},"content":"| Category            | As a/an...         | I can...                                                                               | So that...                                                          |"},{"lineNumber":254,"author":{"gitId":"Assyarul"},"content":"|---------------------|--------------------|----------------------------------------------------------------------------------------|---------------------------------------------------------------------|"},{"lineNumber":255,"author":{"gitId":"Assyarul"},"content":"| Birthdays           | Forgetful User     | Add a birthday to a contact                                                            | I can remember when that person\u0027s birthday is                       |"},{"lineNumber":256,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":257,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Forgetful User     | Tags to identify people with the same name                                             | I can easily differentiate between friends who has the same name.   |"},{"lineNumber":258,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Orderly User       | Create new friend groups                                                               | Customize my own categories of friends                              |"},{"lineNumber":259,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Orderly User       | Group my contacts by categories                                                        | I easily check contacts in a certain category                       |"},{"lineNumber":260,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":261,"author":{"gitId":"Assyarul"},"content":"| Friend details      | Forgetful User     | Track how much debt is owed by/to the person                                           | I can get my money back or pay the money back.                      |"},{"lineNumber":262,"author":{"gitId":"Assyarul"},"content":"|                     | User               | Store dietary habits/allergies on the contact                                          | I don\u0027t accidentally kill him when buying food for him              |"},{"lineNumber":263,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":264,"author":{"gitId":"Assyarul"},"content":"| Customized UI       | User               | Choose between light/dark mode for the app                                             | It fits the aesthetics of my comptuer                               |"},{"lineNumber":265,"author":{"gitId":"Assyarul"},"content":"| Customized UI       | Artsy User         | Customize the way the application looks                                                | It matches the aesthetics of my computer                            |"},{"lineNumber":266,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":267,"author":{"gitId":"Assyarul"},"content":"| User Guide          | New User           | Easily access the user guide                                                           | I can understand how the app works easily                           |"},{"lineNumber":268,"author":{"gitId":"Assyarul"},"content":"| User Guide          | New User           | Search for frequently asked question in the application                                | I can find help easily                                              |"},{"lineNumber":269,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":270,"author":{"gitId":"Assyarul"},"content":"| Reminders           | Forgetful User     | Add reminders for special dates                                                        | I can remember my anniversary                                       |"},{"lineNumber":271,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":272,"author":{"gitId":"Assyarul"},"content":"| Notes               | Forgetful User     | Takes notes on specific user                                                           | I can remember certain things                                       |"},{"lineNumber":273,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":274,"author":{"gitId":"Assyarul"},"content":"| Calendar            | Visual User        | Have a calendar view of birthdays for the month                                        | I can plan my timetable ahead                                       |"},{"lineNumber":275,"author":{"gitId":"Assyarul"},"content":"| Calendar            | New User           | See who are the friends I have not met in a long time                                  | I am reminded to meet them soon                                     |"},{"lineNumber":276,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":277,"author":{"gitId":"Assyarul"},"content":"| UX                  | Expert User        | Perform most tasks with a single command                                               | I can save time                                                     |"},{"lineNumber":278,"author":{"gitId":"Assyarul"},"content":"| UX                  | Non-Technical User | Have the option to use the mouse                                                       | I will not be overwhelmed by the CLI                                |"},{"lineNumber":279,"author":{"gitId":"Assyarul"},"content":"| UX                  | New User           | Easily undo previous commands                                                          | I do not have to be afraid of making mistakes                       |"},{"lineNumber":280,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":281,"author":{"gitId":"Assyarul"},"content":"| Storage/backup/data | Tech-Savvy User    | Export/import information from the application                                         | I can back up the data                                              |"},{"lineNumber":282,"author":{"gitId":"Assyarul"},"content":"|                     | Tech-Savvy User    | Detect conflicts when importing information                                            | I can detect if there are any changes to the after exporting        |"},{"lineNumber":283,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":284,"author":{"gitId":"Assyarul"},"content":"| Search              | Forgetful User     | See suggested commands as i type in the command bar                                    | I do not have to memorise all commands                              |"},{"lineNumber":285,"author":{"gitId":"Assyarul"},"content":"| Search              | Tech-Savvy User    | Search for contacts via regex                                                          | I can find contacts easily                                          |"},{"lineNumber":286,"author":{"gitId":"Assyarul"},"content":"| Search              | User               | Search for my contacts by name                                                         | I can find contacts easily                                          |"},{"lineNumber":287,"author":{"gitId":"Assyarul"},"content":"| Search              | Intermediate User  | Sort search result on different things                                                 | I can find whatever I\u0027m looking for easily                          |"},{"lineNumber":288,"author":{"gitId":"Assyarul"},"content":"| Search              | Experienced User   | Write SQL like statements to search for things                                         | I can have full control over search                                 |"},{"lineNumber":289,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":290,"author":{"gitId":"Assyarul"},"content":"| Profile             | Forgetful User     | Add a profile picture to the contact                                                   | I can remember how they look like                                   |"},{"lineNumber":291,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":292,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Good friend        | Set a desired frequency for meeting each contact                                       | I am reminded to meet my friends either weekly, monthly, yearly etc |"},{"lineNumber":293,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Forgetful friend   | Be reminded of who i should meet soon                                                  |                                                                     |"},{"lineNumber":294,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Friend             | See upcoming dates (birthdays/special dates/due-to-meet)                               |                                                                     |"},{"lineNumber":295,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":296,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See upcoming birthdays at a glance                                                     | I know what to expect in the week to come                           |"},{"lineNumber":297,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See upcoming events at a glance                                                        |                                                                     |"},{"lineNumber":298,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See goals that will reach deadline                                                     |                                                                     |"},{"lineNumber":299,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | Friend             | See which friends I have to meet soon                                                  |                                                                     |"},{"lineNumber":300,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":301,"author":{"gitId":"Assyarul"},"content":"| Friendship Journal  | User               | Record brief summary of last meeting with the other person (include last meeting date) | I know why we last met.                                             |"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"Assyarul"},"content":"(For all use cases below, the **System** is the `FriendDex` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"Assyarul"},"content":"**Use case: Add profile picture to person**"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"Assyarul"},"content":"1.  User requests to list persons."},{"lineNumber":312,"author":{"gitId":"Assyarul"},"content":"2.  FriendDex shows a list of persons."},{"lineNumber":313,"author":{"gitId":"Assyarul"},"content":"3.  User requests to add a picture to a person in the list."},{"lineNumber":314,"author":{"gitId":"Assyarul"},"content":"4.  FriendDex attaches a picture to the person."},{"lineNumber":315,"author":{"gitId":"-"},"content":"    "},{"lineNumber":316,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"Assyarul"},"content":"* 3a. User supplies an invalid file location to FriendDex"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message of the error."},{"lineNumber":327,"author":{"gitId":"-"},"content":"      "},{"lineNumber":328,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":329,"author":{"gitId":"-"},"content":"    "},{"lineNumber":330,"author":{"gitId":"Assyarul"},"content":"* 3b. User supplies a valid file location but wrong file format"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"Assyarul"},"content":"    * 3b1. FriendDex shows an error message of the error."},{"lineNumber":333,"author":{"gitId":"-"},"content":"      "},{"lineNumber":334,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"Assyarul"},"content":"**Use case: Add birthday to a person**"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"Assyarul"},"content":"1.  User requests to list persons"},{"lineNumber":341,"author":{"gitId":"Assyarul"},"content":"2.  FriendDex shows a list of persons"},{"lineNumber":342,"author":{"gitId":"Assyarul"},"content":"3.  User requests to add a birthday to a specific person in the list"},{"lineNumber":343,"author":{"gitId":"Assyarul"},"content":"4.  FriendDex stores the birthday information for the person"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    "},{"lineNumber":345,"author":{"gitId":"Assyarul"},"content":"    Use case ends"},{"lineNumber":346,"author":{"gitId":"Assyarul"},"content":"    "},{"lineNumber":347,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"Assyarul"},"content":"* 2a. The list is empty"},{"lineNumber":350,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":351,"author":{"gitId":"Assyarul"},"content":"  Use case ends"},{"lineNumber":352,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":353,"author":{"gitId":"Assyarul"},"content":"* 3a. The given date is invalid"},{"lineNumber":354,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":355,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message, and the accepted date format(s)"},{"lineNumber":356,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":357,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"Assyarul"},"content":"**Use case: Create a friend group**"},{"lineNumber":360,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":361,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":362,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":363,"author":{"gitId":"Assyarul"},"content":"1.  User requests to list persons"},{"lineNumber":364,"author":{"gitId":"Assyarul"},"content":"2.  FriendDex shows a list of persons"},{"lineNumber":365,"author":{"gitId":"Assyarul"},"content":"3.  User requests to add a group of friends to a new friend group."},{"lineNumber":366,"author":{"gitId":"Assyarul"},"content":"4.  FriendDex creates the friend group and adds the group of friends to the friend group."},{"lineNumber":367,"author":{"gitId":"Assyarul"},"content":"    "},{"lineNumber":368,"author":{"gitId":"Assyarul"},"content":"    Use case ends"},{"lineNumber":369,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":370,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":371,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":372,"author":{"gitId":"Assyarul"},"content":"* 3a. The friend group is already existing."},{"lineNumber":373,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":374,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex will add the indicated group to the existing group."},{"lineNumber":375,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":376,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":377,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":378,"author":{"gitId":"Assyarul"},"content":"* 4a. Some indicated users already exist in the friend group"},{"lineNumber":379,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":380,"author":{"gitId":"Assyarul"},"content":"    * 4a1. FriendDex will indicate the contacts that already exist in the friend group."},{"lineNumber":381,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":382,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":383,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":384,"author":{"gitId":"Assyarul"},"content":"**Use case: Edit a person**"},{"lineNumber":385,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":386,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":387,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":388,"author":{"gitId":"Assyarul"},"content":"1.  User requests to list persons."},{"lineNumber":389,"author":{"gitId":"Assyarul"},"content":"2.  FriendDex shows a list of persons."},{"lineNumber":390,"author":{"gitId":"Assyarul"},"content":"3.  User requests to edit a specific person in the list."},{"lineNumber":391,"author":{"gitId":"Assyarul"},"content":"4.  FriendDex stores the edited information."},{"lineNumber":392,"author":{"gitId":"Assyarul"},"content":"    "},{"lineNumber":393,"author":{"gitId":"Assyarul"},"content":"    Use case ends"},{"lineNumber":394,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":395,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"Assyarul"},"content":"* 2a. The list is empty."},{"lineNumber":398,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":399,"author":{"gitId":"Assyarul"},"content":"  Use case ends"},{"lineNumber":400,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":401,"author":{"gitId":"Assyarul"},"content":"* 3a. The new details supplied contain formatting errors."},{"lineNumber":402,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":403,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message and displays the correct format for the command."},{"lineNumber":404,"author":{"gitId":"Assyarul"},"content":"      "},{"lineNumber":405,"author":{"gitId":"Assyarul"},"content":"        Use case ends"},{"lineNumber":406,"author":{"gitId":"Assyarul"},"content":"    "},{"lineNumber":407,"author":{"gitId":"Assyarul"},"content":"* 3b. A supplied Date field is in an invalid format."},{"lineNumber":408,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":409,"author":{"gitId":"Assyarul"},"content":"    * 3b1. FriendDex shows an error message and displays the accepted date formats."},{"lineNumber":410,"author":{"gitId":"Assyarul"},"content":"        "},{"lineNumber":411,"author":{"gitId":"Assyarul"},"content":"        Use case ends"},{"lineNumber":412,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":413,"author":{"gitId":"Assyarul"},"content":"### Non-Functional Requirements"},{"lineNumber":414,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":415,"author":{"gitId":"Assyarul"},"content":"1.  Should work on any mainstream OS as long as it has Java 11 or above installed."},{"lineNumber":416,"author":{"gitId":"Assyarul"},"content":"2.  The application should be able to support up to 1000 contacts."},{"lineNumber":417,"author":{"gitId":"Assyarul"},"content":"3.  The system should respond within two seconds."},{"lineNumber":418,"author":{"gitId":"Assyarul"},"content":"4.  The application should be portable (The user should be able to copy content over to another computer using some storage medium and still be able to work)."},{"lineNumber":419,"author":{"gitId":"Assyarul"},"content":"5.  Should work on most mainstream keyboards (works without numpad/touchbar etc)."},{"lineNumber":420,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":421,"author":{"gitId":"Assyarul"},"content":"### Glossary"},{"lineNumber":422,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"Assyarul"},"content":"-------------------------------------------------------------------------------------"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":431,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":448,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":459,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":462,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":465,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"Assyarul":148,"-":327}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"FriendDex is a **relationship management tool for CLI enthusiasts** looking to enhance their social life while not compromising on getting things done quickly. Managing your relationship goals should not be any more tedious than coding."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"2. Download the latest `frienddex.jar` from [here](https://github.com/AY2021S2-CS2103T-W14-1/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your FriendDex."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the FriendDex."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"6. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"### Creating a friend group: `group`"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"Creates a new friend group to FriendDex with a specified name and adds all the people at the specified"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"indexes to the group."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"Format: `group n/GROUP_NAME p/[INDEX...]`"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"Examples:"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"* `group n/Close Friends  p/1 2 3 4 5`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":"Adds a person to FriendDex."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/19-01-98`"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"ivantjh"},"content":"### Adding a profile picture: `picture`"},{"lineNumber":100,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":101,"author":{"gitId":"ivantjh"},"content":"Adds a profile picture to an existing person in FriendDex."},{"lineNumber":102,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":103,"author":{"gitId":"ivantjh"},"content":"Format: `picture INDEX FILE_PATH`"},{"lineNumber":104,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":105,"author":{"gitId":"lue97"},"content":"* The image of the person should be at `FILE_PATH`."},{"lineNumber":106,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":107,"author":{"gitId":"ivantjh"},"content":"Examples:"},{"lineNumber":108,"author":{"gitId":"ivantjh"},"content":"* `picture 1 /Users/john/Desktop/jake.png`"},{"lineNumber":109,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"ivantjh"},"content":"Shows a list of all persons in FriendDex."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"ivantjh"},"content":"Edits an existing person in FriendDex."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":125,"author":{"gitId":"lue97"},"content":"* When editing tags, the existing tags of the person will be removed i.e. adding of tags is not cumulative."},{"lineNumber":126,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":130,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":131,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"ivantjh"},"content":"### Recording a meeting: `meeting`"},{"lineNumber":134,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":135,"author":{"gitId":"ivantjh"},"content":"Records a meeting with an existing person in FriendDex."},{"lineNumber":136,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":137,"author":{"gitId":"ivantjh"},"content":"Format: `meeting INDEX d/DATETIME desc/DESCRIPTION`"},{"lineNumber":138,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":139,"author":{"gitId":"ivantjh"},"content":"Examples:"},{"lineNumber":140,"author":{"gitId":"ivantjh"},"content":"* `meeting 1 d/16-02-2021 1130 desc/We had lunch together!`"},{"lineNumber":141,"author":{"gitId":"ivantjh"},"content":"* `meeting 2 d/17-02-2021 1930 desc/We went to see the sunset!`"},{"lineNumber":142,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":143,"author":{"gitId":"chesterhow"},"content":"### Save a special date: `date`"},{"lineNumber":144,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":145,"author":{"gitId":"chesterhow"},"content":"Save a special date for an existing person in FriendDex."},{"lineNumber":146,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":147,"author":{"gitId":"chesterhow"},"content":"Format: `date 1 d/DATE t/TITLE`"},{"lineNumber":148,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":149,"author":{"gitId":"chesterhow"},"content":"Examples:"},{"lineNumber":150,"author":{"gitId":"chesterhow"},"content":"* `date 1 d/16-02-2021 t/Anniversary`"},{"lineNumber":151,"author":{"gitId":"chesterhow"},"content":"* `date 2 d/17-02-2021 t/Dog\u0027s birthday`"},{"lineNumber":152,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"lue97"},"content":"Format: `find KEYWORD [MORE_KEYWORDS] [p/]`"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"lue97"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":164,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":165,"author":{"gitId":"lue97"},"content":"* If the `p/` flag is set, then the argument(s) `KEYWORD [MORE KEYWORDS]` shall be treated as a regular expression."},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":171,"author":{"gitId":"lue97"},"content":"* `find ^a.*h$ p/` returns `Alex Yeoh`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"ivantjh"},"content":"Deletes the specified person from FriendDex."},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":180,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":181,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":184,"author":{"gitId":"ivantjh"},"content":"* `list` followed by `delete 2` deletes the 2nd person in FriendDex."},{"lineNumber":185,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"ivantjh"},"content":"Clears all entries from FriendDex."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"lue97"},"content":"### Styling the application : `theme`"},{"lineNumber":200,"author":{"gitId":"lue97"},"content":""},{"lineNumber":201,"author":{"gitId":"lue97"},"content":"Format `theme THEME_PATH`"},{"lineNumber":202,"author":{"gitId":"lue97"},"content":""},{"lineNumber":203,"author":{"gitId":"lue97"},"content":"* Applies the theme specified in `THEME_PATH`."},{"lineNumber":204,"author":{"gitId":"lue97"},"content":"* The current applied theme will be saved and applied on subsequent sessions."},{"lineNumber":205,"author":{"gitId":"lue97"},"content":""},{"lineNumber":206,"author":{"gitId":"lue97"},"content":"Example:"},{"lineNumber":207,"author":{"gitId":"lue97"},"content":"* `theme theme/solarized.dark.json` applies the theme `solarized.dark.json` located at `./theme/`."},{"lineNumber":208,"author":{"gitId":"lue97"},"content":""},{"lineNumber":209,"author":{"gitId":"lue97"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":210,"author":{"gitId":"lue97"},"content":"If the theme supplied is not found or unreadable, then the default theme will be applied."},{"lineNumber":211,"author":{"gitId":"lue97"},"content":"\u003c/div\u003e"},{"lineNumber":212,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":213,"author":{"gitId":"lue97"},"content":"See also:"},{"lineNumber":214,"author":{"gitId":"lue97"},"content":"* [Theme](#theme)"},{"lineNumber":215,"author":{"gitId":"lue97"},"content":""},{"lineNumber":216,"author":{"gitId":"lue97"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":217,"author":{"gitId":"lue97"},"content":""},{"lineNumber":218,"author":{"gitId":"chesterhow"},"content":"## Dashboard"},{"lineNumber":219,"author":{"gitId":"chesterhow"},"content":"### Upcoming Events"},{"lineNumber":220,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":221,"author":{"gitId":"chesterhow"},"content":"FriendDex displays your upcoming events on the right panel, such as upcoming birthdays and special dates."},{"lineNumber":222,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":223,"author":{"gitId":"chesterhow"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":224,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":225,"author":{"gitId":"chesterhow"},"content":"## Data Storage"},{"lineNumber":226,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"chesterhow"},"content":"FriendDex data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"ivantjh"},"content":"FriendDex data is saved as a JSON file `[JAR file location]/data/frienddex.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":235,"author":{"gitId":"ivantjh"},"content":"If your changes to the data file makes its format invalid, FriendDex will discard all data and start with an empty data file at the next run."},{"lineNumber":236,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"lue97"},"content":"## Theme"},{"lineNumber":239,"author":{"gitId":"lue97"},"content":"### Theme format"},{"lineNumber":240,"author":{"gitId":"lue97"},"content":""},{"lineNumber":241,"author":{"gitId":"lue97"},"content":"A valid theme is a JSON object containing the following fields:"},{"lineNumber":242,"author":{"gitId":"lue97"},"content":"| Name         | Type         | Description                                                                                                                                                             |"},{"lineNumber":243,"author":{"gitId":"lue97"},"content":"|--------------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|"},{"lineNumber":244,"author":{"gitId":"lue97"},"content":"| `foreground` | `String`     | The foreground color of the application in valid hex color string                                                                                                       |"},{"lineNumber":245,"author":{"gitId":"lue97"},"content":"| `background` | `String`     | The background color of the application in valid hex color string                                                                                                       |"},{"lineNumber":246,"author":{"gitId":"lue97"},"content":"| `color`      | `String[16]` | Colors 0 to 15 of the application in valid hex color strings. Refer to [XTerm colors](https://invisible-island.net/xterm/manpage/xterm.html#h3-VT100-Widget-Resources). |"},{"lineNumber":247,"author":{"gitId":"lue97"},"content":""},{"lineNumber":248,"author":{"gitId":"lue97"},"content":"A sample theme (Monokai Dark)"},{"lineNumber":249,"author":{"gitId":"lue97"},"content":"```"},{"lineNumber":250,"author":{"gitId":"lue97"},"content":"{"},{"lineNumber":251,"author":{"gitId":"lue97"},"content":"  \"color\": ["},{"lineNumber":252,"author":{"gitId":"lue97"},"content":"    \"#272822\","},{"lineNumber":253,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":254,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":255,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":256,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":257,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":258,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":259,"author":{"gitId":"lue97"},"content":"    \"#f8f8f2\","},{"lineNumber":260,"author":{"gitId":"lue97"},"content":"    \"#75715e\","},{"lineNumber":261,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":262,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":263,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":264,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":265,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":266,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":267,"author":{"gitId":"lue97"},"content":"    \"#f9f8f5\""},{"lineNumber":268,"author":{"gitId":"lue97"},"content":"  ],"},{"lineNumber":269,"author":{"gitId":"lue97"},"content":"  \"foreground\": \"#f8f8f2\","},{"lineNumber":270,"author":{"gitId":"lue97"},"content":"  \"background\": \"#272822\""},{"lineNumber":271,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":272,"author":{"gitId":"lue97"},"content":"```"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":279,"author":{"gitId":"ivantjh"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FriendDex home folder."},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":286,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":287,"author":{"gitId":"Assyarul"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​` \u003cbr\u003e e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":288,"author":{"gitId":"Assyarul"},"content":"**Group** | `group n/GROUP_NAME p/[INDEX...]` \u003cbr\u003e e.g. `group n/Close Friends p/1 2 3 4`"},{"lineNumber":289,"author":{"gitId":"ivantjh"},"content":"**Add Profile Picture** | `picture INDEX FILE_PATH` \u003cbr\u003e e.g. `picture 1 /Users/john/Desktop/jake.png`"},{"lineNumber":290,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":291,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":292,"author":{"gitId":"Assyarul"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`\u003cbr\u003e e.g.`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":293,"author":{"gitId":"ivantjh"},"content":"**Add a meeting** | `add-meeting INDEX d/DATE t/TIME desc/DESCRIPTION` \u003cbr\u003e e.g. `add-meeting 2 d/17-02-2021 t/1930 desc/We went to see the sunset!`"},{"lineNumber":294,"author":{"gitId":"ivantjh"},"content":"**Remove a meeting** | `rm-meeting INDEX sn/MEETING_INDEX` \u003cbr\u003e e.g. `rm-meeting 2 sn/1` "},{"lineNumber":295,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":296,"author":{"gitId":"lue97"},"content":"**Theme** | `theme THEME_PATH`\u003cbr\u003e e.g., `theme theme/solarized.dark.json`"},{"lineNumber":297,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":298,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"lue97":63,"Assyarul":15,"ivantjh":39,"-":161,"chesterhow":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"title: FriendDex"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"**FriendDex is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"* If you are interested in using FriendDex, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"* If you are interested about developing FriendDex, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"ivantjh":5,"-":12}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_INVALID_ARGUMENT_FORMAT \u003d \"Invalid argument format! \\n%1$s\";"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! \\n%1$s\";"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid time format! \\n%1$s\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":1,"ivantjh":2,"-":12}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"public class DateUtil {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DATE_PARSER;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DEFAULT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    private static final String[] patterns;"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    private static final String[] examples;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    static {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        patterns \u003d new String[]{\"dd-MM-yyyy\"};"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        examples \u003d new String[]{\"12-12-2020\"};"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        Arrays.stream(patterns).map(DateTimeFormatter::ofPattern).forEach(builder::appendOptional);"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        DATE_PARSER \u003d builder.toFormatter();"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"     * Takes a string and parses it into a LocalDate"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"     * @param string the string to convert"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"     * @return a LocalDate that was created from the string"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"    public static LocalDate fromDateInput(String string) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"        LocalDate date;"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"            date \u003d DATE_PARSER.parse(string, LocalDate::from);"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        } catch (DateTimeParseException dte) {"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"            String errorMsg \u003d \"Format given should be one of \" + String.join(\", \", patterns) + \"\\n\""},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"                    + \"Some examples are \" + String.join(\", \", examples);"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATE_FORMAT, errorMsg));"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"        return date;"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"    public static String toUi(LocalDate localDate) {"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        return DEFAULT_FORMATTER.format(localDate);"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":56}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath                   cannot be null."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":98,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":108,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e      The generic type to create an instance of"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":4,"-":142}},{"path":"src/main/java/seedu/address/commons/util/TimeUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIME_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"public class TimeUtil {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter TIME_PARSER;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DEFAULT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    private static final String[] patterns;"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    private static final String[] examples;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    static {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        patterns \u003d new String[]{\"HHmm\"};"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        examples \u003d new String[]{\"1200\"};"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        Arrays.stream(patterns).map(DateTimeFormatter::ofPattern).forEach(builder::appendOptional);"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        TIME_PARSER \u003d builder.toFormatter();"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"     * Takes a string and parses it into a LocalTime"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"     * @param string the string to convert"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"     * @return a LocalTime that was created from the string"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    public static LocalTime fromTimeInput(String string) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        LocalTime time;"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"            time \u003d TIME_PARSER.parse(string, LocalTime::from);"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"        } catch (DateTimeParseException dte) {"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"            String errorMsg \u003d \"Format given should be one of \" + String.join(\", \", patterns) + \"\\n\""},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"                    + \"Some examples are \" + String.join(\", \", examples);"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_TIME_FORMAT, errorMsg));"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        return time;"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public static String toUi(LocalTime localTime) {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        return DEFAULT_FORMATTER.format(localTime);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":55}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.InputParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    private final InputParser inputParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"        inputParser \u003d new InputParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        Command command \u003d inputParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":4,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/AddMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"public class AddMeetingCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    public static final String COMMAND_WORD \u003d \"add-meeting\";"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records a meeting of the person identified \""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"            + \"by the index number used in the last person listing. \\n\""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_TIME + \"TIME \""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DATE + \"12-12-2021 \""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_TIME + \"1240 \""},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DESCRIPTION + \"We went to the beach!\";"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_ADD_MEETING_SUCCESS \u003d \"Added meeting for %1$s\";"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"    private final Meeting meeting;"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     * @param index of the person in the filtered person list to add the meeting to"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     * @param meeting the meeting to add"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    public AddMeetingCommand(Index index, Meeting meeting) {"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        requireAllNonNull(index, meeting);"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        this.meeting \u003d meeting;"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"        Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        Person editedPerson \u003d createEditedPerson(person, meeting);"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"        model.setPerson(person, editedPerson);"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_MEETING_SUCCESS, editedPerson.getName()));"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"    private static Person createEditedPerson(Person personToEdit, Meeting meeting) {"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"        List\u003cMeeting\u003e meetingsToEdit \u003d new ArrayList\u003c\u003e(personToEdit.getMeetings());"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"        meetingsToEdit.add(meeting);"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":74,"author":{"gitId":"ivantjh"},"content":"                personToEdit.getAddress(), personToEdit.getTags(), meetingsToEdit);"},{"lineNumber":75,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":77,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":80,"author":{"gitId":"ivantjh"},"content":"            return true;"},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":"        if (!(other instanceof AddMeetingCommand)) {"},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":"            return false;"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":"        AddMeetingCommand e \u003d (AddMeetingCommand) other;"},{"lineNumber":88,"author":{"gitId":"ivantjh"},"content":"        return index.equals(e.index) \u0026\u0026 meeting.equals(e.meeting);"},{"lineNumber":89,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":90}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"ivantjh"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":103,"author":{"gitId":"ivantjh"},"content":"                updatedTags, personToEdit.getMeetings());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":140,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":190,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":191,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":2,"-":225}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATTERN;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_INVALID_REGEX \u003d \"Regex supplied is invalid\";"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS] \""},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"            + \"[\" + PREFIX_PATTERN + \"]\\n\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":9,"-":39}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, Collections.emptyList());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":3,"-":49}},{"path":"src/main/java/seedu/address/logic/parser/AddMeetingParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.AddMeetingCommand;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"public class AddMeetingParser implements Parser\u003cAddMeetingCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMeetingCommand"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"     * and returns an AddMeetingCommand object for execution."},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    public AddMeetingCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_DESCRIPTION);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"                    AddMeetingCommand.MESSAGE_USAGE), pe);"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TIME, PREFIX_DESCRIPTION)) {"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        LocalDate date \u003d DateUtil.fromDateInput(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        LocalTime time \u003d TimeUtil.fromTimeInput(argMultimap.getValue(PREFIX_TIME).get());"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        return new AddMeetingCommand(index, new Meeting(date, time, description));"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":51}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    public static final Prefix PREFIX_PATTERN \u003d new Prefix(\"p/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    // Meetings"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":1,"ivantjh":4,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ARGUMENT_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_REGEX;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATTERN;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.NameContainsPatternPredicate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATTERN);"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"        String searchString \u003d argMultiMap.getPreamble();"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"        if (argMultiMap.getValue(PREFIX_PATTERN).isPresent()) {"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"                Pattern pattern \u003d Pattern.compile(searchString, Pattern.CASE_INSENSITIVE);"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"                return new FindCommand(new NameContainsPatternPredicate(pattern));"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"            } catch (PatternSyntaxException pe) {"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"                throw new ParseException("},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"                        String.format(MESSAGE_INVALID_ARGUMENT_FORMAT, MESSAGE_INVALID_REGEX));"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"        if (searchString.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"        String[] nameKeywords \u003d searchString.split(\"\\\\s+\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":21,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/InputParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.AddMeetingCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"public class InputParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":"        case AddMeetingCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"            return new AddMeetingParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":5,"-":75}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":126,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"ivantjh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":128,"author":{"gitId":"ivantjh"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":129,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"ivantjh"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":131,"author":{"gitId":"ivantjh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":132,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":9,"-":124}},{"path":"src/main/java/seedu/address/model/person/Meeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"public class Meeting {"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    private final LocalDate date;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    private final LocalTime time;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private final String description;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * The constructor for a Meeting."},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    public Meeting(LocalDate date, LocalTime time, String description) {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"        requireAllNonNull(date, time, description);"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    public LocalDate getDate() {"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        return date;"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"    public LocalTime getTime() {"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        return time;"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    public String getDescription() {"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        return description;"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"    public String toUi() {"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"%s %s %s\\n\", DateUtil.toUi(date), TimeUtil.toUi(time), description);"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"            return true;"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        if (!(other instanceof Meeting)) {"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        Meeting otherMeeting \u003d (Meeting) other;"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        return otherMeeting.getDate().equals(getDate())"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherMeeting.getTime().equals(getTime())"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherMeeting.getDescription().equals(getDescription());"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        return Objects.hash(date, time, description);"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"        builder.append(getDate())"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"                .append(\"; \")"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"                .append(getTime())"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"                .append(\"; \")"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"                .append(getDescription());"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"        return builder.toString();"},{"lineNumber":74,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":75}},{"path":"src/main/java/seedu/address/model/person/NameContainsPatternPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":""},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches the pattern given."},{"lineNumber":9,"author":{"gitId":"lue97"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"public class NameContainsPatternPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"    private final Pattern pattern;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    public NameContainsPatternPredicate(Pattern pattern) {"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"        this.pattern \u003d pattern;"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    public boolean test(Person person) {"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"        return pattern.matcher(person.getName().toString()).find();"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":""},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"            return true;"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"        NameContainsPatternPredicate patternPredicate \u003d (NameContainsPatternPredicate) other;"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"        return pattern.toString().equals(patternPredicate.pattern.toString());"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":""},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"        return Objects.hash(pattern);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":38}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    private final List\u003cMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cMeeting\u003e meetings) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        this.meetings.addAll(meetings);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"    public List\u003cMeeting\u003e getMeetings() {"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        return Collections.unmodifiableList(meetings);"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":104,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":105,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherPerson.getMeetings().equals(getMeetings());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":131,"author":{"gitId":"ivantjh"},"content":"        List\u003cMeeting\u003e meetings \u003d getMeetings();"},{"lineNumber":132,"author":{"gitId":"ivantjh"},"content":"        if (!meetings.isEmpty()) {"},{"lineNumber":133,"author":{"gitId":"ivantjh"},"content":"            String meetingsStr \u003d meetings"},{"lineNumber":134,"author":{"gitId":"ivantjh"},"content":"                    .stream()"},{"lineNumber":135,"author":{"gitId":"ivantjh"},"content":"                    .map(Meeting::toString)"},{"lineNumber":136,"author":{"gitId":"ivantjh"},"content":"                    .collect(Collectors.joining(\", \"));"},{"lineNumber":137,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":138,"author":{"gitId":"ivantjh"},"content":"            builder.append(\"; Meetings: \");"},{"lineNumber":139,"author":{"gitId":"ivantjh"},"content":"            builder.append(meetingsStr);"},{"lineNumber":140,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":24,"-":121}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"friends\"), getMeetingList()),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"colleagues\", \"friends\"), getMeetingList()),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"neighbours\"), getMeetingList()),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"family\"), getMeetingList()),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"classmates\"), getMeetingList()),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"                getTagSet(\"colleagues\"), getMeetingList())"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"    public static List\u003cMeeting\u003e getMeetingList() {"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"        return Collections.emptyList();"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":13,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedMeeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"public class JsonAdaptedMeeting {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    private final LocalDate date;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    private final LocalTime time;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private final String description;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given meeting details."},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    @JsonCreator"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    public JsonAdaptedMeeting(@JsonProperty(\"date\") LocalDate date, @JsonProperty(\"time\") LocalTime time,"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"            @JsonProperty(\"description\") String description) {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        this.description \u003d description;"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"     * Converts a given {@code Meeting} into this class for Jackson use."},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"    public JsonAdaptedMeeting(Meeting source) {"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        date \u003d source.getDate();"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        time \u003d source.getTime();"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        description \u003d source.getDescription();"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    public Meeting toModelType() {"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        return new Meeting(date, time, description);"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":40}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"            @JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        if (meetings !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"            this.meetings.addAll(meetings);"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"        meetings.addAll(source.getMeetings().stream()"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"                .map(JsonAdaptedMeeting::new)"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"ivantjh"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"ivantjh"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":112,"author":{"gitId":"ivantjh"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":113,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":115,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":116,"author":{"gitId":"ivantjh"},"content":"        final List\u003cMeeting\u003e modelMeetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitId":"ivantjh"},"content":"        for (JsonAdaptedMeeting meeting : meetings) {"},{"lineNumber":118,"author":{"gitId":"ivantjh"},"content":"            modelMeetings.add(meeting.toModelType());"},{"lineNumber":119,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":121,"author":{"gitId":"ivantjh"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelMeetings);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":22,"-":102}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    private FlowPane meetings;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        // Temporary UI to test meetings"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"        person.getMeetings().forEach(meeting -\u003e meetings.getChildren().add(new Label(meeting.toUi())));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":5,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"      \u003cFlowPane fx:id\u003d\"meetings\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"ivantjh":4,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.NameContainsPatternPredicate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":""},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"        expectedFindCommand \u003d new FindCommand(new NameContainsPatternPredicate(Pattern.compile(\"abc\")));"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"        assertParseSuccess(parser, \"abc p/\", expectedFindCommand);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":""},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"        expectedFindCommand \u003d new FindCommand(new NameContainsPatternPredicate(Pattern.compile(\".*\")));"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"        assertParseSuccess(parser, \".* p/\", expectedFindCommand);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":8,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/InputParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"public class InputParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    private final InputParser parser \u003d new InputParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":2,"-":99}},{"path":"src/test/java/seedu/address/model/person/NameContainsPatternPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":""},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":""},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"public class NameContainsPatternPredicateTest {"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    public final Pattern subStringPattern \u003d Pattern.compile(\"et\");"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    public final Pattern matchAllPattern \u003d Pattern.compile(\".*\");"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    public final Pattern startsWithAPattern \u003d Pattern.compile(\"^a\");"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    public final Pattern endsWithAPattern \u003d Pattern.compile(\"a$\");"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    public final Pattern startsAndEndWithAPattern \u003d Pattern.compile(\"^a.*a$\");"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":""},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    private String[] nameArray \u003d new String[] {"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"        \"alpha beta charlie\","},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"        \"beta charlie\","},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        \"delta charlie alpha\","},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        \"beta beta beta\","},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"        \"alpha alpha charlie delta\","},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        \"alpha  alpha    charlie delta\""},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":""},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    private List\u003cString\u003e nameList \u003d Arrays.stream(nameArray).collect(Collectors.toList());"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":""},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    public List\u003cString\u003e filterList(List\u003cString\u003e nameList, Pattern pattern) {"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"        return nameList.stream()"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"                .map(name -\u003e new PersonBuilder().withName(name).build())"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"                .filter(new NameContainsPatternPredicate(pattern))"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"                .map(person -\u003e person.getName().toString())"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":""},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"    public void test_nameContainsPattern_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        List\u003cString\u003e correctList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":""},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha beta charlie\");"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta charlie\");"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta beta beta\");"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, subStringPattern));"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":""},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"        assertEquals(nameList, filterList(nameList, matchAllPattern));"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":""},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha beta charlie\");"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, startsWithAPattern));"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":""},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        correctList.add(\"delta charlie alpha\");"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta beta beta\");"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, endsWithAPattern));"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":""},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, startsAndEndWithAPattern));"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":71}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    private static final List\u003cJsonAdaptedMeeting\u003e VALID_MEETINGS \u003d BENSON.getMeetings().stream()"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"            .map(JsonAdaptedMeeting::new)"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":95,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":103,"author":{"gitId":"ivantjh"},"content":"                VALID_TAGS, VALID_MEETINGS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":112,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":113,"author":{"gitId":"ivantjh"},"content":"                invalidTags, VALID_MEETINGS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":21,"-":96}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Meeting;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"    private List\u003cMeeting\u003e meetings;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"        meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"        meetings \u003d new ArrayList\u003c\u003e(personToCopy.getMeetings());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":100,"author":{"gitId":"ivantjh"},"content":"        return new Person(name, phone, email, address, tags, Collections.emptyList());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":8,"-":95}}]
