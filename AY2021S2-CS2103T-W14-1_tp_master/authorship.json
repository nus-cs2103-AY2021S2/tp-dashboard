[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# FriendDex"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"* For the detailed documentation of this project, see the **[FriendDex Product Website](https://ay2021s2-cs2103t-w14-1.github.io/tp/)**."},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"ivantjh":3,"-":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"### Muhammad Assyarul Ariffin Bin Omar"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"\u003cimg src\u003d\"images/assyarul.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"[[github](https://github.com/assyarul)]"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"* Role: Developer"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"### Lin Lue"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"\u003cimg src\u003d\"images/lue97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"[[github](https://github.com/lue97)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"### Chester How"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"\u003cimg src\u003d\"images/chesterhow.png\" width\u003d\"200px\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":"[[homepage](https://chester.how)]"},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"[[github](https://github.com/chesterhow)]"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":"* Responsibilities: UI + Integration"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"### Tan Jun Han Ivan"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"\u003cimg src\u003d\"images/ivantjh.png\" width\u003d\"200px\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"[[github](https://github.com/ivantjh)]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer"}],"authorContributionMap":{"Assyarul":3,"lue97":2,"ivantjh":4,"-":27,"chesterhow":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":"layout: page title: Developer Guide"},{"lineNumber":3,"author":{"gitId":"-"},"content":"---"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"* Table of Contents {:toc}"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"lue97"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"diagrams."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"**`Main`** has two classes"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java)"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"is responsible for,"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"  API `interface` mentioned in the previous point."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"the command `delete 1`."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":75,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":", `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"lue97"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are"},{"lineNumber":81,"author":{"gitId":"lue97"},"content":"in the `src/main/resources/view` folder. For example, the layout of"},{"lineNumber":82,"author":{"gitId":"lue97"},"content":"the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java)"},{"lineNumber":83,"author":{"gitId":"lue97"},"content":"is specified"},{"lineNumber":84,"author":{"gitId":"lue97"},"content":"in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":89,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":96,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":102,"author":{"gitId":"lue97"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying"},{"lineNumber":103,"author":{"gitId":"lue97"},"content":"   help to the user."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"lue97"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API"},{"lineNumber":106,"author":{"gitId":"lue97"},"content":"call."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"lue97"},"content":"**"},{"lineNumber":118,"author":{"gitId":"lue97"},"content":"API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":123,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":124,"author":{"gitId":"lue97"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"},{"lineNumber":125,"author":{"gitId":"lue97"},"content":"  the UI automatically updates when the data in the list change."},{"lineNumber":126,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"lue97"},"content":"**"},{"lineNumber":138,"author":{"gitId":"lue97"},"content":"API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":141,"author":{"gitId":"lue97"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"lue97"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo"},{"lineNumber":160,"author":{"gitId":"lue97"},"content":"history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the"},{"lineNumber":161,"author":{"gitId":"lue97"},"content":"following operations:"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"lue97"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":164,"author":{"gitId":"lue97"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":165,"author":{"gitId":"lue97"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"lue97"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()`"},{"lineNumber":168,"author":{"gitId":"lue97"},"content":"and `Model#redoAddressBook()` respectively."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"lue97"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the"},{"lineNumber":173,"author":{"gitId":"lue97"},"content":"initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"lue97"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command"},{"lineNumber":178,"author":{"gitId":"lue97"},"content":"calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes"},{"lineNumber":179,"author":{"gitId":"lue97"},"content":"to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book"},{"lineNumber":180,"author":{"gitId":"lue97"},"content":"state."},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"lue97"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`"},{"lineNumber":185,"author":{"gitId":"lue97"},"content":", causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"lue97"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing"},{"lineNumber":194,"author":{"gitId":"lue97"},"content":"the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer`"},{"lineNumber":195,"author":{"gitId":"lue97"},"content":"once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":200,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"lue97"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once"},{"lineNumber":213,"author":{"gitId":"lue97"},"content":"to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"lue97"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such"},{"lineNumber":220,"author":{"gitId":"lue97"},"content":"as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`."},{"lineNumber":221,"author":{"gitId":"lue97"},"content":"Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"lue97"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not"},{"lineNumber":226,"author":{"gitId":"lue97"},"content":"pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be"},{"lineNumber":227,"author":{"gitId":"lue97"},"content":"purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern"},{"lineNumber":228,"author":{"gitId":"lue97"},"content":"desktop applications follow."},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":241,"author":{"gitId":"-"},"content":"    * Pros: Easy to implement."},{"lineNumber":242,"author":{"gitId":"-"},"content":"    * Cons: May have performance issues in terms of memory usage."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"lue97"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":245,"author":{"gitId":"-"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":246,"author":{"gitId":"-"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"Assyarul"},"content":"* is a young programmer studying in NUS Computer Science"},{"lineNumber":274,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":275,"author":{"gitId":"Assyarul"},"content":"* has difficulty maintaining personal relationships"},{"lineNumber":276,"author":{"gitId":"Assyarul"},"content":"* cannot recall previous conversations with others"},{"lineNumber":277,"author":{"gitId":"Assyarul"},"content":"* is a goal-driven individual and seeks new challenges."},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"Assyarul"},"content":"**Value proposition**:"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"Assyarul"},"content":"* makes relationship management easier for the user"},{"lineNumber":282,"author":{"gitId":"Assyarul"},"content":"    * keeps track of personal relationship with users\u0027 friends"},{"lineNumber":283,"author":{"gitId":"Assyarul"},"content":"* manages relationship faster than a mouse-driven app."},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"Assyarul"},"content":"| Category            | As a/an...         | I can...                                                                               | So that...                                                          |"},{"lineNumber":288,"author":{"gitId":"Assyarul"},"content":"|---------------------|--------------------|----------------------------------------------------------------------------------------|---------------------------------------------------------------------|"},{"lineNumber":289,"author":{"gitId":"Assyarul"},"content":"| Birthdays           | Forgetful User     | Add a birthday to a contact                                                            | I can remember when that person\u0027s birthday is                       |"},{"lineNumber":290,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":291,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Forgetful User     | Tags to identify people with the same name                                             | I can easily differentiate between friends who has the same name.   |"},{"lineNumber":292,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Orderly User       | Create new friend groups                                                               | Customize my own categories of friends                              |"},{"lineNumber":293,"author":{"gitId":"Assyarul"},"content":"| Grouping/tagging    | Orderly User       | Group my contacts by categories                                                        | I easily check contacts in a certain category                       |"},{"lineNumber":294,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":295,"author":{"gitId":"Assyarul"},"content":"| Friend details      | Forgetful User     | Track how much debt is owed by/to the person                                           | I can get my money back or pay the money back.                      |"},{"lineNumber":296,"author":{"gitId":"Assyarul"},"content":"|                     | User               | Store dietary habits/allergies on the contact                                          | I don\u0027t accidentally kill him when buying food for him              |"},{"lineNumber":297,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":298,"author":{"gitId":"Assyarul"},"content":"| Customized UI       | User               | Choose between light/dark mode for the app                                             | It fits the aesthetics of my comptuer                               |"},{"lineNumber":299,"author":{"gitId":"Assyarul"},"content":"| Customized UI       | Artsy User         | Customize the way the application looks                                                | It matches the aesthetics of my computer                            |"},{"lineNumber":300,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":301,"author":{"gitId":"Assyarul"},"content":"| User Guide          | New User           | Easily access the user guide                                                           | I can understand how the app works easily                           |"},{"lineNumber":302,"author":{"gitId":"Assyarul"},"content":"| User Guide          | New User           | Search for frequently asked question in the application                                | I can find help easily                                              |"},{"lineNumber":303,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":304,"author":{"gitId":"Assyarul"},"content":"| Reminders           | Forgetful User     | Add reminders for special dates                                                        | I can remember my anniversary                                       |"},{"lineNumber":305,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":306,"author":{"gitId":"Assyarul"},"content":"| Notes               | Forgetful User     | Takes notes on specific user                                                           | I can remember certain things                                       |"},{"lineNumber":307,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":308,"author":{"gitId":"Assyarul"},"content":"| Calendar            | Visual User        | Have a calendar view of birthdays for the month                                        | I can plan my timetable ahead                                       |"},{"lineNumber":309,"author":{"gitId":"Assyarul"},"content":"| Calendar            | New User           | See who are the friends I have not met in a long time                                  | I am reminded to meet them soon                                     |"},{"lineNumber":310,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":311,"author":{"gitId":"Assyarul"},"content":"| UX                  | Expert User        | Perform most tasks with a single command                                               | I can save time                                                     |"},{"lineNumber":312,"author":{"gitId":"Assyarul"},"content":"| UX                  | Non-Technical User | Have the option to use the mouse                                                       | I will not be overwhelmed by the CLI                                |"},{"lineNumber":313,"author":{"gitId":"Assyarul"},"content":"| UX                  | New User           | Easily undo previous commands                                                          | I do not have to be afraid of making mistakes                       |"},{"lineNumber":314,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":315,"author":{"gitId":"Assyarul"},"content":"| Storage/backup/data | Tech-Savvy User    | Export/import information from the application                                         | I can back up the data                                              |"},{"lineNumber":316,"author":{"gitId":"Assyarul"},"content":"|                     | Tech-Savvy User    | Detect conflicts when importing information                                            | I can detect if there are any changes to the after exporting        |"},{"lineNumber":317,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":318,"author":{"gitId":"Assyarul"},"content":"| Search              | Forgetful User     | See suggested commands as i type in the command bar                                    | I do not have to memorise all commands                              |"},{"lineNumber":319,"author":{"gitId":"Assyarul"},"content":"| Search              | Tech-Savvy User    | Search for contacts via regex                                                          | I can find contacts easily                                          |"},{"lineNumber":320,"author":{"gitId":"Assyarul"},"content":"| Search              | User               | Search for my contacts by name                                                         | I can find contacts easily                                          |"},{"lineNumber":321,"author":{"gitId":"Assyarul"},"content":"| Search              | Intermediate User  | Sort search result on different things                                                 | I can find whatever I\u0027m looking for easily                          |"},{"lineNumber":322,"author":{"gitId":"Assyarul"},"content":"| Search              | Experienced User   | Write SQL like statements to search for things                                         | I can have full control over search                                 |"},{"lineNumber":323,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":324,"author":{"gitId":"Assyarul"},"content":"| Profile             | Forgetful User     | Add a profile picture to the contact                                                   | I can remember how they look like                                   |"},{"lineNumber":325,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":326,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Good friend        | Set a desired frequency for meeting each contact                                       | I am reminded to meet my friends either weekly, monthly, yearly etc |"},{"lineNumber":327,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Forgetful friend   | Be reminded of who i should meet soon                                                  |                                                                     |"},{"lineNumber":328,"author":{"gitId":"Assyarul"},"content":"| Relationship management   | Friend             | See upcoming dates (birthdays/special dates/due-to-meet)                               |                                                                     |"},{"lineNumber":329,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":330,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See upcoming birthdays at a glance                                                     | I know what to expect in the week to come                           |"},{"lineNumber":331,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See upcoming events at a glance                                                        |                                                                     |"},{"lineNumber":332,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | User               | See goals that will reach deadline                                                     |                                                                     |"},{"lineNumber":333,"author":{"gitId":"Assyarul"},"content":"| Dashboard           | Friend             | See which friends I have to meet soon                                                  |                                                                     |"},{"lineNumber":334,"author":{"gitId":"Assyarul"},"content":"|                     |                    |                                                                                        |                                                                     |"},{"lineNumber":335,"author":{"gitId":"Assyarul"},"content":"| Friendship Journal  | User               | Record brief summary of last meeting with the other person (include last meeting date) | I know why we last met.                                             |"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"Assyarul"},"content":"(For all use cases below, the **System** is the `FriendDex` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"Assyarul"},"content":"**Use case: Add profile picture to person**"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"Assyarul"},"content":"1. User requests to list persons."},{"lineNumber":346,"author":{"gitId":"Assyarul"},"content":"2. FriendDex shows a list of persons."},{"lineNumber":347,"author":{"gitId":"Assyarul"},"content":"3. User requests to add a picture to a person in the list."},{"lineNumber":348,"author":{"gitId":"Assyarul"},"content":"4. FriendDex attaches a picture to the person."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"Assyarul"},"content":"* 3a. User supplies an invalid file location to FriendDex"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message of the error."},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"Assyarul"},"content":"* 3b. User supplies a valid file location but wrong file format"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"Assyarul"},"content":"    * 3b1. FriendDex shows an error message of the error."},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"Assyarul"},"content":"      Use case resumes at step 2."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"Assyarul"},"content":"**Use case: Add birthday to a person**"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"Assyarul"},"content":"1. User requests to list persons"},{"lineNumber":375,"author":{"gitId":"Assyarul"},"content":"2. FriendDex shows a list of persons"},{"lineNumber":376,"author":{"gitId":"Assyarul"},"content":"3. User requests to add a birthday to a specific person in the list"},{"lineNumber":377,"author":{"gitId":"Assyarul"},"content":"4. FriendDex stores the birthday information for the person"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"Assyarul"},"content":"   Use case ends"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":382,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":383,"author":{"gitId":"Assyarul"},"content":"* 2a. The list is empty"},{"lineNumber":384,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":385,"author":{"gitId":"Assyarul"},"content":"  Use case ends"},{"lineNumber":386,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":387,"author":{"gitId":"Assyarul"},"content":"* 3a. The given date is invalid"},{"lineNumber":388,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":389,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message, and the accepted date format(s)"},{"lineNumber":390,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":391,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":392,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":393,"author":{"gitId":"Assyarul"},"content":"**Use case: Create a friend group**"},{"lineNumber":394,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":395,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":396,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":397,"author":{"gitId":"Assyarul"},"content":"1. User requests to list persons"},{"lineNumber":398,"author":{"gitId":"Assyarul"},"content":"2. FriendDex shows a list of persons"},{"lineNumber":399,"author":{"gitId":"Assyarul"},"content":"3. User requests to add a group of friends to a new friend group."},{"lineNumber":400,"author":{"gitId":"Assyarul"},"content":"4. FriendDex creates the friend group and adds the group of friends to the friend group."},{"lineNumber":401,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":402,"author":{"gitId":"Assyarul"},"content":"   Use case ends"},{"lineNumber":403,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":404,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":405,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":406,"author":{"gitId":"Assyarul"},"content":"* 3a. The friend group is already existing."},{"lineNumber":407,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":408,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex will add the indicated group to the existing group."},{"lineNumber":409,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":410,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":411,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":412,"author":{"gitId":"Assyarul"},"content":"* 4a. Some indicated users already exist in the friend group"},{"lineNumber":413,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":414,"author":{"gitId":"Assyarul"},"content":"    * 4a1. FriendDex will indicate the contacts that already exist in the friend group."},{"lineNumber":415,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":416,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":417,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":418,"author":{"gitId":"Assyarul"},"content":"**Use case: Edit a person**"},{"lineNumber":419,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":420,"author":{"gitId":"Assyarul"},"content":"**MSS**"},{"lineNumber":421,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":422,"author":{"gitId":"Assyarul"},"content":"1. User requests to list persons."},{"lineNumber":423,"author":{"gitId":"Assyarul"},"content":"2. FriendDex shows a list of persons."},{"lineNumber":424,"author":{"gitId":"Assyarul"},"content":"3. User requests to edit a specific person in the list."},{"lineNumber":425,"author":{"gitId":"Assyarul"},"content":"4. FriendDex stores the edited information."},{"lineNumber":426,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":427,"author":{"gitId":"Assyarul"},"content":"   Use case ends"},{"lineNumber":428,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":429,"author":{"gitId":"Assyarul"},"content":"**Extensions**"},{"lineNumber":430,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":431,"author":{"gitId":"Assyarul"},"content":"* 2a. The list is empty."},{"lineNumber":432,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":433,"author":{"gitId":"Assyarul"},"content":"  Use case ends"},{"lineNumber":434,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":435,"author":{"gitId":"Assyarul"},"content":"* 3a. The new details supplied contain formatting errors."},{"lineNumber":436,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":437,"author":{"gitId":"Assyarul"},"content":"    * 3a1. FriendDex shows an error message and displays the correct format for the command."},{"lineNumber":438,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":439,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":440,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":441,"author":{"gitId":"Assyarul"},"content":"* 3b. A supplied Date field is in an invalid format."},{"lineNumber":442,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":443,"author":{"gitId":"Assyarul"},"content":"    * 3b1. FriendDex shows an error message and displays the accepted date formats."},{"lineNumber":444,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":445,"author":{"gitId":"Assyarul"},"content":"      Use case ends"},{"lineNumber":446,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":447,"author":{"gitId":"Assyarul"},"content":"### Non-Functional Requirements"},{"lineNumber":448,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":449,"author":{"gitId":"Assyarul"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed."},{"lineNumber":450,"author":{"gitId":"Assyarul"},"content":"2. The application should be able to support up to 1000 contacts."},{"lineNumber":451,"author":{"gitId":"Assyarul"},"content":"3. The system should respond within two seconds."},{"lineNumber":452,"author":{"gitId":"lue97"},"content":"4. The application should be portable (The user should be able to copy content over to another computer using some"},{"lineNumber":453,"author":{"gitId":"lue97"},"content":"   storage medium and still be able to work)."},{"lineNumber":454,"author":{"gitId":"Assyarul"},"content":"5. Should work on most mainstream keyboards (works without numpad/touchbar etc)."},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"Assyarul"},"content":"-------------------------------------------------------------------------------------"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":467,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"lue97"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be"},{"lineNumber":478,"author":{"gitId":"lue97"},"content":"       optimum."},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":485,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":496,"author":{"gitId":"lue97"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message."},{"lineNumber":497,"author":{"gitId":"lue97"},"content":"       Timestamp in the status bar is updated."},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":500,"author":{"gitId":"-"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":503,"author":{"gitId":"-"},"content":"       Expected: Similar to previous."},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"lue97":73,"Assyarul":148,"-":292}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"FriendDex is a **relationship management tool for CLI enthusiasts** looking to enhance their social life while not compromising on getting things done quickly. Managing your relationship goals should not be any more tedious than coding."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"2. Download the latest `frienddex.jar` from [here](https://github.com/AY2021S2-CS2103T-W14-1/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your FriendDex."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the FriendDex."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"6. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"### Creating a friend group: `group`"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"Creates a new friend group to FriendDex with a specified name and adds all the people at the specified"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"indexes to the group."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"Format: `group n/GROUP_NAME p/[INDEX...]`"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"Examples:"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"* `group n/Close Friends  p/1 2 3 4 5`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":"Adds a person to FriendDex."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/19-01-98`"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"ivantjh"},"content":"### Adding a profile picture: `picture`"},{"lineNumber":100,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":101,"author":{"gitId":"ivantjh"},"content":"Adds a profile picture to an existing person in FriendDex."},{"lineNumber":102,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":103,"author":{"gitId":"ivantjh"},"content":"Format: `picture INDEX FILE_PATH`"},{"lineNumber":104,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":105,"author":{"gitId":"lue97"},"content":"* The image of the person should be at `FILE_PATH`."},{"lineNumber":106,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":107,"author":{"gitId":"ivantjh"},"content":"Examples:"},{"lineNumber":108,"author":{"gitId":"ivantjh"},"content":"* `picture 1 /Users/john/Desktop/jake.png`"},{"lineNumber":109,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"ivantjh"},"content":"Shows a list of all persons in FriendDex."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"ivantjh"},"content":"Edits an existing person in FriendDex."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":125,"author":{"gitId":"lue97"},"content":"* When editing tags, the existing tags of the person will be removed i.e. adding of tags is not cumulative."},{"lineNumber":126,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":130,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":131,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"ivantjh"},"content":"### Recording a meeting: `meeting`"},{"lineNumber":134,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":135,"author":{"gitId":"ivantjh"},"content":"Records a meeting with an existing person in FriendDex."},{"lineNumber":136,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":137,"author":{"gitId":"ivantjh"},"content":"Format: `meeting INDEX d/DATETIME desc/DESCRIPTION`"},{"lineNumber":138,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":139,"author":{"gitId":"ivantjh"},"content":"Examples:"},{"lineNumber":140,"author":{"gitId":"ivantjh"},"content":"* `meeting 1 d/16-02-2021 1130 desc/We had lunch together!`"},{"lineNumber":141,"author":{"gitId":"ivantjh"},"content":"* `meeting 2 d/17-02-2021 1930 desc/We went to see the sunset!`"},{"lineNumber":142,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":143,"author":{"gitId":"chesterhow"},"content":"### Save a special date: `date`"},{"lineNumber":144,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":145,"author":{"gitId":"chesterhow"},"content":"Save a special date for an existing person in FriendDex."},{"lineNumber":146,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":147,"author":{"gitId":"chesterhow"},"content":"Format: `date 1 d/DATE t/TITLE`"},{"lineNumber":148,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":149,"author":{"gitId":"chesterhow"},"content":"Examples:"},{"lineNumber":150,"author":{"gitId":"chesterhow"},"content":"* `date 1 d/16-02-2021 t/Anniversary`"},{"lineNumber":151,"author":{"gitId":"chesterhow"},"content":"* `date 2 d/17-02-2021 t/Dog\u0027s birthday`"},{"lineNumber":152,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"lue97"},"content":"Format: `find KEYWORD [MORE_KEYWORDS] [p/]`"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"lue97"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":164,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":165,"author":{"gitId":"lue97"},"content":"* If the `p/` flag is set, then the argument(s) `KEYWORD [MORE KEYWORDS]` shall be treated as a regular expression."},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":171,"author":{"gitId":"lue97"},"content":"* `find ^a.*h$ p/` returns `Alex Yeoh`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"ivantjh"},"content":"Deletes the specified person from FriendDex."},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":180,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":181,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":184,"author":{"gitId":"ivantjh"},"content":"* `list` followed by `delete 2` deletes the 2nd person in FriendDex."},{"lineNumber":185,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"ivantjh"},"content":"Clears all entries from FriendDex."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"lue97"},"content":"### Styling the application : `theme`"},{"lineNumber":200,"author":{"gitId":"lue97"},"content":""},{"lineNumber":201,"author":{"gitId":"lue97"},"content":"Format `theme THEME_PATH`"},{"lineNumber":202,"author":{"gitId":"lue97"},"content":""},{"lineNumber":203,"author":{"gitId":"lue97"},"content":"* Applies the theme specified in `THEME_PATH`."},{"lineNumber":204,"author":{"gitId":"lue97"},"content":"* The current applied theme will be saved and applied on subsequent sessions."},{"lineNumber":205,"author":{"gitId":"lue97"},"content":""},{"lineNumber":206,"author":{"gitId":"lue97"},"content":"Example:"},{"lineNumber":207,"author":{"gitId":"lue97"},"content":"* `theme theme/solarized.dark.json` applies the theme `solarized.dark.json` located at `./theme/`."},{"lineNumber":208,"author":{"gitId":"lue97"},"content":""},{"lineNumber":209,"author":{"gitId":"lue97"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":210,"author":{"gitId":"lue97"},"content":"If the theme supplied is not found or unreadable, then the default theme will be applied."},{"lineNumber":211,"author":{"gitId":"lue97"},"content":"\u003c/div\u003e"},{"lineNumber":212,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":213,"author":{"gitId":"lue97"},"content":"See also:"},{"lineNumber":214,"author":{"gitId":"lue97"},"content":"* [Theme](#theme)"},{"lineNumber":215,"author":{"gitId":"lue97"},"content":""},{"lineNumber":216,"author":{"gitId":"lue97"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":217,"author":{"gitId":"lue97"},"content":""},{"lineNumber":218,"author":{"gitId":"chesterhow"},"content":"## Dashboard"},{"lineNumber":219,"author":{"gitId":"chesterhow"},"content":"### Upcoming Events"},{"lineNumber":220,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":221,"author":{"gitId":"chesterhow"},"content":"FriendDex displays your upcoming events on the right panel, such as upcoming birthdays and special dates."},{"lineNumber":222,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":223,"author":{"gitId":"chesterhow"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":224,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":225,"author":{"gitId":"chesterhow"},"content":"## Data Storage"},{"lineNumber":226,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"chesterhow"},"content":"FriendDex data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"ivantjh"},"content":"FriendDex data is saved as a JSON file `[JAR file location]/data/frienddex.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":235,"author":{"gitId":"ivantjh"},"content":"If your changes to the data file makes its format invalid, FriendDex will discard all data and start with an empty data file at the next run."},{"lineNumber":236,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"lue97"},"content":"## Theme"},{"lineNumber":239,"author":{"gitId":"lue97"},"content":"### Theme format"},{"lineNumber":240,"author":{"gitId":"lue97"},"content":""},{"lineNumber":241,"author":{"gitId":"lue97"},"content":"A valid theme is a JSON object containing the following fields:"},{"lineNumber":242,"author":{"gitId":"lue97"},"content":"| Name         | Type         | Description                                                                                                                                                             |"},{"lineNumber":243,"author":{"gitId":"lue97"},"content":"|--------------|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|"},{"lineNumber":244,"author":{"gitId":"lue97"},"content":"| `foreground` | `String`     | The foreground color of the application in valid hex color string                                                                                                       |"},{"lineNumber":245,"author":{"gitId":"lue97"},"content":"| `background` | `String`     | The background color of the application in valid hex color string                                                                                                       |"},{"lineNumber":246,"author":{"gitId":"lue97"},"content":"| `color`      | `String[16]` | Colors 0 to 15 of the application in valid hex color strings. Refer to [XTerm colors](https://invisible-island.net/xterm/manpage/xterm.html#h3-VT100-Widget-Resources). |"},{"lineNumber":247,"author":{"gitId":"lue97"},"content":""},{"lineNumber":248,"author":{"gitId":"lue97"},"content":"A sample theme (Monokai Dark)"},{"lineNumber":249,"author":{"gitId":"lue97"},"content":"```"},{"lineNumber":250,"author":{"gitId":"lue97"},"content":"{"},{"lineNumber":251,"author":{"gitId":"lue97"},"content":"  \"color\": ["},{"lineNumber":252,"author":{"gitId":"lue97"},"content":"    \"#272822\","},{"lineNumber":253,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":254,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":255,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":256,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":257,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":258,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":259,"author":{"gitId":"lue97"},"content":"    \"#f8f8f2\","},{"lineNumber":260,"author":{"gitId":"lue97"},"content":"    \"#75715e\","},{"lineNumber":261,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":262,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":263,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":264,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":265,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":266,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":267,"author":{"gitId":"lue97"},"content":"    \"#f9f8f5\""},{"lineNumber":268,"author":{"gitId":"lue97"},"content":"  ],"},{"lineNumber":269,"author":{"gitId":"lue97"},"content":"  \"foreground\": \"#f8f8f2\","},{"lineNumber":270,"author":{"gitId":"lue97"},"content":"  \"background\": \"#272822\""},{"lineNumber":271,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":272,"author":{"gitId":"lue97"},"content":"```"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":279,"author":{"gitId":"ivantjh"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous FriendDex home folder."},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":286,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":287,"author":{"gitId":"Assyarul"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [b/BIRTHDAY] [t/TAG]…​` \u003cbr\u003e e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":288,"author":{"gitId":"Assyarul"},"content":"**Group** | `group n/GROUP_NAME p/[INDEX...]` \u003cbr\u003e e.g. `group n/Close Friends p/1 2 3 4`"},{"lineNumber":289,"author":{"gitId":"ivantjh"},"content":"**Add Profile Picture** | `picture INDEX FILE_PATH` \u003cbr\u003e e.g. `picture 1 /Users/john/Desktop/jake.png`"},{"lineNumber":290,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":291,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":292,"author":{"gitId":"Assyarul"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]…​`\u003cbr\u003e e.g.`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":293,"author":{"gitId":"ivantjh"},"content":"**Add a meeting** | `add-meeting INDEX d/DATE t/TIME desc/DESCRIPTION` \u003cbr\u003e e.g. `add-meeting 2 d/17-02-2021 t/1930 desc/We went to see the sunset!`"},{"lineNumber":294,"author":{"gitId":"ivantjh"},"content":"**Remove a meeting** | `rm-meeting INDEX sn/MEETING_INDEX` \u003cbr\u003e e.g. `rm-meeting 2 sn/1`"},{"lineNumber":295,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":296,"author":{"gitId":"lue97"},"content":"**Theme** | `theme THEME_PATH`\u003cbr\u003e e.g., `theme theme/solarized.dark.json`"},{"lineNumber":297,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":298,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"lue97":63,"Assyarul":15,"ivantjh":39,"-":161,"chesterhow":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"title: FriendDex"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"**FriendDex is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"* If you are interested in using FriendDex, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"* If you are interested about developing FriendDex, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"ivantjh":5,"-":12}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.Theme;"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.ThemeFactory;"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.ThemeManager;"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.exceptions.InvalidThemeException;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":42,"author":{"gitId":"-"},"content":" */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"lue97"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":75,"author":{"gitId":"lue97"},"content":""},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"        initTheme();"},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":""},{"lineNumber":79,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"lue97"},"content":"     * Initializes the content of ThemeManager with the theme in the GuiSetting of model."},{"lineNumber":81,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"lue97"},"content":"    private void initTheme() {"},{"lineNumber":83,"author":{"gitId":"lue97"},"content":"        ThemeManager.init();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (model.getGuiSettings().getThemePath() \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitId":"lue97"},"content":"            logger.info(\"No theme specified. Applying default theme ...\");"},{"lineNumber":86,"author":{"gitId":"lue97"},"content":"            ThemeManager.setTheme(ThemeFactory.getDefaultTheme(), null);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":88,"author":{"gitId":"lue97"},"content":"            logger.info(\"Loading theme\" + model.getGuiSettings().getThemePath() + \" ...\");"},{"lineNumber":89,"author":{"gitId":"lue97"},"content":"            try {"},{"lineNumber":90,"author":{"gitId":"lue97"},"content":"                Theme theme \u003d ThemeFactory.load(Paths.get(model.getGuiSettings().getThemePath()));"},{"lineNumber":91,"author":{"gitId":"lue97"},"content":"                ThemeManager.setTheme(theme, model.getGuiSettings().getThemePath());"},{"lineNumber":92,"author":{"gitId":"lue97"},"content":"                return;"},{"lineNumber":93,"author":{"gitId":"lue97"},"content":"            } catch (DataConversionException | InvalidThemeException exception) {"},{"lineNumber":94,"author":{"gitId":"lue97"},"content":"                logger.warning(\"Invalid \" + model.getGuiSettings().getThemePath() + \" theme supplied\");"},{"lineNumber":95,"author":{"gitId":"lue97"},"content":"            } catch (FileNotFoundException fileNotFoundException) {"},{"lineNumber":96,"author":{"gitId":"lue97"},"content":"                logger.warning(\"Theme \" + model.getGuiSettings().getThemePath() + \" not found\");"},{"lineNumber":97,"author":{"gitId":"lue97"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"lue97"},"content":"            ThemeManager.setTheme(ThemeFactory.getDefaultTheme(), model.getGuiSettings().getThemePath());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":182,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":30,"-":184}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_INVALID_ARGUMENT_FORMAT \u003d \"Invalid argument format! \\n%1$s\";"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! \\n%1$s\";"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid time format! \\n%1$s\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":1,"ivantjh":2,"-":12}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"public class DateUtil {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DATE_PARSER;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DEFAULT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    private static final String[] patterns;"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    private static final String[] examples;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    static {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        patterns \u003d new String[]{\"dd-MM-yyyy\"};"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        examples \u003d new String[]{\"12-12-2020\"};"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        Arrays.stream(patterns).map(DateTimeFormatter::ofPattern).forEach(builder::appendOptional);"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        DATE_PARSER \u003d builder.toFormatter();"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_CONSTRAINT \u003d MESSAGE_INVALID_DATE_FORMAT + \"Format given should be one of \""},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        + String.join(\", \", patterns) + \"\\n\""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        + \"Some examples are \" + String.join(\", \", examples);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"     * Takes a string and parses it into a LocalDate"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"     * @param string the string to convert"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"     * @return a LocalDate that was created from the string"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"    public static LocalDate fromDateInput(String string) throws ParseException {"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        LocalDate date;"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"            date \u003d DATE_PARSER.parse(string, LocalDate::from);"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        } catch (DateTimeParseException dte) {"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"            throw new ParseException(MESSAGE_CONSTRAINT);"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        return date;"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"    public static String toString(LocalDate localDate, DateTimeFormatter dateFormatter) {"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        return dateFormatter.format(localDate);"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"    public static String toUi(LocalDate localDate) {"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"        return DEFAULT_FORMATTER.format(localDate);"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"Assyarul":9,"ivantjh":52}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath                   cannot be null."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":98,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":108,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e      The generic type to create an instance of"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":4,"-":142}},{"path":"src/main/java/seedu/address/commons/util/TimeUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TIME_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"public class TimeUtil {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter TIME_PARSER;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private static final DateTimeFormatter DEFAULT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    private static final String[] patterns;"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    private static final String[] examples;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    static {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        patterns \u003d new String[]{\"HHmm\"};"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        examples \u003d new String[]{\"1200\"};"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        Arrays.stream(patterns).map(DateTimeFormatter::ofPattern).forEach(builder::appendOptional);"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        TIME_PARSER \u003d builder.toFormatter();"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"     * Takes a string and parses it into a LocalTime"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"     * @param string the string to convert"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"     * @return a LocalTime that was created from the string"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    public static LocalTime fromTimeInput(String string) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        LocalTime time;"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"            time \u003d TIME_PARSER.parse(string, LocalTime::from);"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"        } catch (DateTimeParseException dte) {"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"            String errorMsg \u003d \"Format given should be one of \" + String.join(\", \", patterns) + \"\\n\""},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"                    + \"Some examples are \" + String.join(\", \", examples);"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_TIME_FORMAT, errorMsg));"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        return time;"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public static String toUi(LocalTime localTime) {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        return DEFAULT_FORMATTER.format(localTime);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":55}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.InputParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    private final InputParser inputParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"        inputParser \u003d new InputParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        Command command \u003d inputParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":4,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"            + PREFIX_BIRTHDAY + \"BIRTHDAY \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/AddGroupCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONS;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"public class AddGroupCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    public static final String COMMAND_WORD \u003d \"add-group\";"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the group of the specified name with the\""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"            + \"specified persons indicated by the index numbers used in the last person listing. If group exists,\""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"            + \"add people into group if they are not in it.  \\n\""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"GROUP_NAME (must be alphanumeric only) \""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"            + PREFIX_PERSONS + \"[INDEX]\\n\""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"            + PREFIX_NAME + \"Close Friends\" + \" \""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"            + PREFIX_PERSONS + \"1 2 3 4\";"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_ADD_GROUP_SUCCESS \u003d \"Added/Added into group %1$s\";"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    private final List\u003cIndex\u003e indexes;"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    private final Name groupName;"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"     * @param indexes of the person in the filtered person list to add to the group"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * @param groupName the group Name being added/adding persons into"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    public AddGroupCommand(List\u003cIndex\u003e indexes, Name groupName) {"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        requireAllNonNull(indexes, groupName);"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        this.indexes \u003d indexes;"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        HashMap\u003cName, Group\u003e groupMap \u003d new HashMap\u003c\u003e(model.getGroupMap());"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d groupMap.getOrDefault(groupName, new Group(groupName));"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        Set\u003cPerson\u003e newPersonSet \u003d new HashSet\u003c\u003e(group.getPersons());"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        boolean isNewGroup \u003d !model.hasGroup(group);"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        if (indexes.stream().anyMatch(index-\u003eindex.getZeroBased() \u003e\u003d lastShownList.size())) {"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        for (Index index: indexes) {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"            Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"            newPersonSet.add(person);"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"        group.setPersons(newPersonSet);"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"        if (isNewGroup) {"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"            model.addGroup(group);"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"            model.setGroup(groupName, group);"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_GROUP_SUCCESS, groupName));"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"        if (!(other instanceof AddGroupCommand)) {"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"        AddGroupCommand e \u003d (AddGroupCommand) other;"},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"        return indexes.equals(e.indexes) \u0026\u0026 groupName.equals(e.groupName);"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"}"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":""}],"authorContributionMap":{"Assyarul":94}},{"path":"src/main/java/seedu/address/logic/commands/AddMeetingCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"public class AddMeetingCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    public static final String COMMAND_WORD \u003d \"add-meeting\";"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records a meeting of the person identified \""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"            + \"by the index number used in the last person listing. \\n\""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_TIME + \"TIME \""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \\n\""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DATE + \"12-12-2021 \""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_TIME + \"1240 \""},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"            + PREFIX_DESCRIPTION + \"We went to the beach!\";"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    public static final String MESSAGE_ADD_MEETING_SUCCESS \u003d \"Added meeting for %1$s\";"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"    private final Event meeting;"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     * @param index of the person in the filtered person list to add the meeting to"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     * @param meeting the meeting to add"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"    public AddMeetingCommand(Index index, Event meeting) {"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        requireAllNonNull(index, meeting);"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        this.meeting \u003d meeting;"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"        Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        Person editedPerson \u003d createEditedPerson(person, meeting);"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"        model.setPerson(person, editedPerson);"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_MEETING_SUCCESS, editedPerson.getName()));"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":68,"author":{"gitId":"chesterhow"},"content":"    private static Person createEditedPerson(Person personToEdit, Event meeting) {"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":70,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e meetingsToEdit \u003d new ArrayList\u003c\u003e(personToEdit.getMeetings());"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"        meetingsToEdit.add(meeting);"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"        return new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"                personToEdit.getAddress(), personToEdit.getBirthday(), personToEdit.getTags(), personToEdit.getDates(),"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"                meetingsToEdit);"},{"lineNumber":76,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitId":"ivantjh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"            return true;"},{"lineNumber":82,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":"        if (!(other instanceof AddMeetingCommand)) {"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"            return false;"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":88,"author":{"gitId":"ivantjh"},"content":"        AddMeetingCommand e \u003d (AddMeetingCommand) other;"},{"lineNumber":89,"author":{"gitId":"ivantjh"},"content":"        return index.equals(e.index) \u0026\u0026 meeting.equals(e.meeting);"},{"lineNumber":90,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"ivantjh":84,"chesterhow":5}},{"path":"src/main/java/seedu/address/logic/commands/DateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chesterhow"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":3,"author":{"gitId":"chesterhow"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":9,"author":{"gitId":"chesterhow"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"chesterhow"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":12,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"chesterhow"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":17,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":19,"author":{"gitId":"chesterhow"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"chesterhow"},"content":" * Adds a special date to an existing person in the FriendDex."},{"lineNumber":21,"author":{"gitId":"chesterhow"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chesterhow"},"content":"public class DateCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":24,"author":{"gitId":"chesterhow"},"content":"    public static final String COMMAND_WORD \u003d \"date\";"},{"lineNumber":25,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Save a special date for the person identified \""},{"lineNumber":27,"author":{"gitId":"chesterhow"},"content":"            + \"by the index number used in the displayed person list.\\n\""},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":29,"author":{"gitId":"chesterhow"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \\n\""},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":"            + PREFIX_DATE + \"12-12-2021 \""},{"lineNumber":33,"author":{"gitId":"chesterhow"},"content":"            + PREFIX_DESCRIPTION + \"Wedding Anniversary\";"},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"    public static final String MESSAGE_ADD_DATE_SUCCESS \u003d \"Added date for %1$s\";"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":37,"author":{"gitId":"chesterhow"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"    private final Event event;"},{"lineNumber":39,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":40,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"     * @param index of the person in the filtered person list to add date to"},{"lineNumber":42,"author":{"gitId":"chesterhow"},"content":"     * @param event details of the date to add"},{"lineNumber":43,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"    public DateCommand(Index index, Event event) {"},{"lineNumber":45,"author":{"gitId":"chesterhow"},"content":"        requireAllNonNull(index, event);"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":47,"author":{"gitId":"chesterhow"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitId":"chesterhow"},"content":"        this.event \u003d event;"},{"lineNumber":49,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":51,"author":{"gitId":"chesterhow"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"chesterhow"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"chesterhow"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"chesterhow"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":56,"author":{"gitId":"chesterhow"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitId":"chesterhow"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":60,"author":{"gitId":"chesterhow"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":61,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e dates \u003d new ArrayList\u003c\u003e(personToEdit.getDates());"},{"lineNumber":62,"author":{"gitId":"chesterhow"},"content":"        dates.add(event);"},{"lineNumber":63,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":64,"author":{"gitId":"chesterhow"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"                personToEdit.getAddress(), personToEdit.getBirthday(), personToEdit.getTags(), dates,"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"                personToEdit.getMeetings());"},{"lineNumber":67,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":68,"author":{"gitId":"chesterhow"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":69,"author":{"gitId":"chesterhow"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":70,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":71,"author":{"gitId":"chesterhow"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_DATE_SUCCESS, editedPerson.getName()));"},{"lineNumber":72,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":74,"author":{"gitId":"chesterhow"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"chesterhow"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitId":"chesterhow"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"chesterhow"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":80,"author":{"gitId":"chesterhow"},"content":"        if (!(other instanceof DateCommand)) {"},{"lineNumber":81,"author":{"gitId":"chesterhow"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":84,"author":{"gitId":"chesterhow"},"content":"        DateCommand e \u003d (DateCommand) other;"},{"lineNumber":85,"author":{"gitId":"chesterhow"},"content":"        return index.equals(e.index) \u0026\u0026 event.equals(e.event);"},{"lineNumber":86,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"chesterhow"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"chesterhow":85}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"        Birthday updatedBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":106,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e updatedDates \u003d personToEdit.getDates();"},{"lineNumber":107,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e updatedMeetings \u003d personToEdit.getMeetings();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedBirthday, updatedTags,"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"                updatedDates, updatedMeetings);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":141,"author":{"gitId":"Assyarul"},"content":"        private Birthday birthday;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":148,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":149,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":155,"author":{"gitId":"Assyarul"},"content":"            setBirthday(toCopy.birthday);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":163,"author":{"gitId":"Assyarul"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address,"},{"lineNumber":164,"author":{"gitId":"Assyarul"},"content":"                    birthday, tags);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"Assyarul"},"content":"        public void setBirthday(Birthday birthday) {"},{"lineNumber":200,"author":{"gitId":"Assyarul"},"content":"            this.birthday \u003d birthday;"},{"lineNumber":201,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":203,"author":{"gitId":"Assyarul"},"content":"        public Optional\u003cBirthday\u003e getBirthday() {"},{"lineNumber":204,"author":{"gitId":"Assyarul"},"content":"            return Optional.ofNullable(birthday);"},{"lineNumber":205,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":210,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":216,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":218,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":219,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":243,"author":{"gitId":"Assyarul"},"content":"                    \u0026\u0026 getBirthday().equals(e.getBirthday())"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":19,"-":225,"chesterhow":3}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATTERN;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_INVALID_REGEX \u003d \"Regex supplied is invalid\";"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS] \""},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"            + \"[\" + PREFIX_PATTERN + \"]\\n\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    public FindCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":9,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":""},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.ThemeFactory;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.ThemeManager;"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.exceptions.InvalidThemeException;"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":""},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Selects and apply a theme to the application. \""},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"        + \"Parameters: THEME_FILE\";"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme %1$s applied\";"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Invalid theme %1$s given\";"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File %1$s not found\";"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":""},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"    private final Path themePath;"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":""},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"     * Creates a ThemeCommand to apply the theme located at specified {@code path}"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"     * @param themePathStr The path to the theme to be applied."},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"    public ThemeCommand(String themePathStr) {"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"        requireNonNull(themePathStr);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"        this.themePath \u003d Paths.get(themePathStr);"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":""},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"        String feedback \u003d String.format(MESSAGE_SUCCESS, this.themePath.toString());"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"            ThemeManager.setTheme(ThemeFactory.load(themePath), this.themePath.toString());"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"            ThemeManager.applyThemeToScene();"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"        } catch (DataConversionException | InvalidThemeException exception) {"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"            feedback \u003d String.format(MESSAGE_INVALID_THEME, this.themePath.toString());"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"        } catch (FileNotFoundException fileNotFoundException) {"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"            feedback \u003d String.format(MESSAGE_FILE_NOT_FOUND, this.themePath.toString());"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"        return new CommandResult(feedback);"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":""},{"lineNumber":55,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"    public boolean equals(Object o) {"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":""},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"        ThemeCommand that \u003d (ThemeCommand) o;"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":""},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"        return Objects.equals(themePath, that.themePath);"},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":""},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"        return themePath !\u003d null ? themePath.hashCode() : 0;"},{"lineNumber":72,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":73}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"                        PREFIX_BIRTHDAY, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        Person person \u003d new Person(name, phone, email, address, birthday, tagList, Collections.emptyList(),"},{"lineNumber":53,"author":{"gitId":"chesterhow"},"content":"                Collections.emptyList());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":6,"ivantjh":2,"-":47,"chesterhow":1}},{"path":"src/main/java/seedu/address/logic/parser/AddGroupParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSONS;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"public class AddGroupParser implements Parser\u003cAddGroupCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * and returns an AddGroupCommand object for execution."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    public AddGroupCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PERSONS);"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        List\u003cIndex\u003e indexes;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        Name name;"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PERSONS)) {"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            indexes \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_PERSONS).get());"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        } catch (ParseException pe) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"                    AddGroupCommand.MESSAGE_USAGE), pe);"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        return new AddGroupCommand(indexes, name);"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":43}},{"path":"src/main/java/seedu/address/logic/parser/AddMeetingParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.AddMeetingCommand;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"public class AddMeetingParser implements Parser\u003cAddMeetingCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMeetingCommand"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"     * and returns an AddMeetingCommand object for execution."},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    public AddMeetingCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_DESCRIPTION);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"                    AddMeetingCommand.MESSAGE_USAGE), pe);"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TIME, PREFIX_DESCRIPTION)) {"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMeetingCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        LocalDate date \u003d DateUtil.fromDateInput(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        LocalTime time \u003d TimeUtil.fromTimeInput(argMultimap.getValue(PREFIX_TIME).get());"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"chesterhow"},"content":"        return new AddMeetingCommand(index, new Event(date, time, description));"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":49,"chesterhow":2}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    public static final Prefix PREFIX_PATTERN \u003d new Prefix(\"p/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    // Meetings"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    //Groups"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public static final Prefix PREFIX_PERSONS \u003d new Prefix(\"p/\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":4,"lue97":1,"ivantjh":4,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chesterhow"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":3,"author":{"gitId":"chesterhow"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"},{"lineNumber":8,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":9,"author":{"gitId":"chesterhow"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":11,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":13,"author":{"gitId":"chesterhow"},"content":"import seedu.address.logic.commands.DateCommand;"},{"lineNumber":14,"author":{"gitId":"chesterhow"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":17,"author":{"gitId":"chesterhow"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chesterhow"},"content":" * Parses input arguments and creates a new DateCommand object"},{"lineNumber":19,"author":{"gitId":"chesterhow"},"content":" */"},{"lineNumber":20,"author":{"gitId":"chesterhow"},"content":"public class DateCommandParser implements Parser\u003cDateCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":22,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chesterhow"},"content":"     * Parses the given {@code String} of arguments in the context of the DateCommand"},{"lineNumber":24,"author":{"gitId":"chesterhow"},"content":"     * and returns a DateCommand object for execution"},{"lineNumber":25,"author":{"gitId":"chesterhow"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chesterhow"},"content":"    public DateCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitId":"chesterhow"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DESCRIPTION);"},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitId":"chesterhow"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DateCommand.MESSAGE_USAGE), pe);"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":40,"author":{"gitId":"chesterhow"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_DESCRIPTION)) {"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DateCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"        LocalDate date \u003d DateUtil.fromDateInput(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":45,"author":{"gitId":"chesterhow"},"content":"        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":47,"author":{"gitId":"chesterhow"},"content":"        return new DateCommand(index, new Event(date, description));"},{"lineNumber":48,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chesterhow"},"content":"}"}],"authorContributionMap":{"chesterhow":49}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"                        PREFIX_BIRTHDAY, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"            editPersonDescriptor.setBirthday(ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY).get()));"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":6,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ARGUMENT_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_REGEX;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATTERN;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import java.util.regex.PatternSyntaxException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.NameContainsPatternPredicate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PATTERN);"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"        String searchString \u003d argMultiMap.getPreamble();"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"        if (argMultiMap.getValue(PREFIX_PATTERN).isPresent()) {"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"                Pattern pattern \u003d Pattern.compile(searchString, Pattern.CASE_INSENSITIVE);"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"                return new FindCommand(new NameContainsPatternPredicate(pattern));"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"            } catch (PatternSyntaxException pe) {"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"                throw new ParseException("},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"                        String.format(MESSAGE_INVALID_ARGUMENT_FORMAT, MESSAGE_INVALID_REGEX));"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"        if (searchString.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"        String[] nameKeywords \u003d searchString.split(\"\\\\s+\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":21,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/InputParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import seedu.address.logic.commands.AddMeetingCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitId":"chesterhow"},"content":"import seedu.address.logic.commands.DateCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"public class InputParser {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"chesterhow"},"content":"        case DateCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"chesterhow"},"content":"            return new DateCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"lue97"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitId":"lue97"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitId":"lue97"},"content":""},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"        case AddGroupCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"            return new AddGroupParser().parse(arguments);"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":"        case AddMeetingCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"            return new AddMeetingParser().parse(arguments);"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":4,"lue97":4,"ivantjh":5,"-":75,"chesterhow":4}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"     * Parses a {@code String birthday} into a {@code Birthday}."},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"     * @throws ParseException if the given {@code birthday} is invalid."},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"    public static Birthday parseBirthday(String birthday) throws ParseException {"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(birthday);"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        LocalDate birthdayDate \u003d DateUtil.fromDateInput(trimmedBirthday);"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"        return new Birthday(birthdayDate);"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":144,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"ivantjh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":146,"author":{"gitId":"ivantjh"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":147,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"ivantjh"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":149,"author":{"gitId":"ivantjh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":150,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":152,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"Assyarul"},"content":"     * Parses a {@code String indexes} into a {@code List\u003cIndex\u003e}."},{"lineNumber":154,"author":{"gitId":"Assyarul"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":155,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"Assyarul"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":157,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"Assyarul"},"content":"    public static List\u003cIndex\u003e parseIndexes(String indexes) throws ParseException {"},{"lineNumber":159,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(indexes);"},{"lineNumber":160,"author":{"gitId":"Assyarul"},"content":"        String[] indexStringArray \u003d indexes.trim().split(\" \");"},{"lineNumber":161,"author":{"gitId":"Assyarul"},"content":"        List\u003cIndex\u003e indexArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":162,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":163,"author":{"gitId":"Assyarul"},"content":"        for (String s: indexStringArray) {"},{"lineNumber":164,"author":{"gitId":"Assyarul"},"content":"            indexArray.add(parseIndex(s));"},{"lineNumber":165,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"Assyarul"},"content":"        return indexArray;"},{"lineNumber":167,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":35,"ivantjh":9,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":""},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"            throw new ParseException("},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE)"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"            );"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":""},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"        return new ThemeCommand(nameKeywords[0]);"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":21}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.GroupHashMap;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    private final GroupHashMap groups;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        groups \u003d new GroupHashMap();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"     * Replaces the contents of the group list with {@code groups}."},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"    public void setGroups(HashMap\u003cName, Group\u003e groups) {"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"        this.groups.setGroups(groups);"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        setGroups(new HashMap\u003c\u003e(newData.getGroupMap()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":"    //// group-level operations"},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"     * Returns true if a group with the same identity as {@code group} exists in the address book."},{"lineNumber":117,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Assyarul"},"content":"    public boolean hasGroup(Group group) {"},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(group);"},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"        return groups.contains(group);"},{"lineNumber":121,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":"     * Adds a group to the address book."},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"     * The group must not already exist in the address book."},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"    public void addGroup(Group g) {"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"        groups.add(g);"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":131,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Assyarul"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":133,"author":{"gitId":"Assyarul"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":134,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"Assyarul"},"content":"    public void removeGroup(Group key) {"},{"lineNumber":136,"author":{"gitId":"Assyarul"},"content":"        groups.remove(key);"},{"lineNumber":137,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":139,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"Assyarul"},"content":"     * Replaces the group for {@code groupName} in the map with {@code editedGroup}."},{"lineNumber":141,"author":{"gitId":"Assyarul"},"content":"     * {@code groupName} must exist in the group map."},{"lineNumber":142,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"Assyarul"},"content":"    public void setGroup(Name groupName, Group editedGroup) {"},{"lineNumber":144,"author":{"gitId":"Assyarul"},"content":"        requireAllNonNull(groupName, editedGroup);"},{"lineNumber":145,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":146,"author":{"gitId":"Assyarul"},"content":"        groups.setGroup(groupName, editedGroup);"},{"lineNumber":147,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"Assyarul"},"content":"    public ObservableMap\u003cName, Group\u003e getGroupMap() {"},{"lineNumber":163,"author":{"gitId":"Assyarul"},"content":"        return groups.asUnmodifiableObservableMap();"},{"lineNumber":164,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":170,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons)"},{"lineNumber":171,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 groups.equals(((AddressBook) other).groups));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":59,"-":119}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"     * Adds the given group."},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"     * {@code group} must not already exist in the address book."},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"    void addGroup(Group group);"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"     * Returns true if a person with the same identity as {@code group} exists in the address book."},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"    boolean hasGroup(Group group);"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"     * Deletes the given group."},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"     * The group must exist in the address book."},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"    void deleteGroup(Group target);"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"     * Replaces the group for {@code groupName} in the map with {@code editedGroup}."},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"     * {@code groupName} must exist in the group map."},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"    void setGroup(Name groupName, Group editedGroup);"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":"    /** Returns an unmodifiable view of the filtered group list */"},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"    ObservableMap\u003cName, Group\u003e getGroupMap();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":29,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    private final ObservableMap\u003cName, Group\u003e groupMap;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        groupMap \u003d this.addressBook.getGroupMap();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"        return userPrefs;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"lue97"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":88,"author":{"gitId":"lue97"},"content":"        return addressBook;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"lue97"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":93,"author":{"gitId":"lue97"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"    public void addGroup(Group group) {"},{"lineNumber":121,"author":{"gitId":"Assyarul"},"content":"        addressBook.addGroup(group);"},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":"        updateFilteredPersonList(x -\u003e group.getPersons().contains(x));"},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"    public boolean hasGroup(Group group) {"},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(group);"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"        return addressBook.hasGroup(group);"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":131,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"Assyarul"},"content":"    public void deleteGroup(Group target) {"},{"lineNumber":133,"author":{"gitId":"Assyarul"},"content":"        addressBook.removeGroup(target);"},{"lineNumber":134,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":136,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"Assyarul"},"content":"    public void setGroup(Name groupName, Group editedGroup) {"},{"lineNumber":138,"author":{"gitId":"Assyarul"},"content":"        addressBook.setGroup(groupName, editedGroup);"},{"lineNumber":139,"author":{"gitId":"Assyarul"},"content":"        updateFilteredPersonList(x -\u003e editedGroup.getPersons().contains(x));"},{"lineNumber":140,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"Assyarul"},"content":"     * Returns an unmodifiable view of the list of {@code Group} backed by the internal list of"},{"lineNumber":155,"author":{"gitId":"Assyarul"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":156,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"Assyarul"},"content":"    public ObservableMap\u003cName, Group\u003e getGroupMap() {"},{"lineNumber":159,"author":{"gitId":"Assyarul"},"content":"        return groupMap;"},{"lineNumber":160,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":184,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":185,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 groupMap.equals(other.groupMap);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":39,"lue97":9,"-":140}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * Returns an unmodifiable view of the groups list."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * This list will not contain any duplicate groups."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    ObservableMap\u003cName, Group\u003e getGroupMap();"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":9,"-":17}},{"path":"src/main/java/seedu/address/model/group/Group.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":" * Represents a Group in FriendDex."},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"public class Group {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    private Name groupName;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    private Set\u003cPerson\u003e persons;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code Group}."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     *  @param name A valid name."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     * @param persons A set of person."},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    public Group(Name name, Set\u003cPerson\u003e persons) {"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        requireAllNonNull(name, persons);"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        this.groupName \u003d name;"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        this.persons \u003d persons;"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code Group} with an empty set of Persons."},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     * @param name A valid name."},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    public Group(Name name) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(name);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        this.groupName \u003d name;"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        this.persons \u003d new HashSet\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        return groupName;"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    public Set\u003cPerson\u003e getPersons() {"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        return persons;"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"    public void addPerson(Person p) {"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        persons.add(p);"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    public void setPersons(Set\u003cPerson\u003e editedPersonSet) {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        persons \u003d editedPersonSet;"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        return groupName.toString();"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"     * Returns true if both groups have the same name."},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"     * This defines a weaker notion of equality between two groups."},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    public boolean isSameGroup(Group otherGroup) {"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        if (otherGroup \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        return otherGroup !\u003d null"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 otherGroup.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"     * Returns true if both groups have field values."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"     * This defines a stronger notion of equality between two groups."},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"        if (!(other instanceof Group)) {"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"            return false;"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"        Group otherGroup \u003d (Group) other;"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"        return otherGroup.getName().equals(getName())"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 otherGroup.getPersons().equals(getPersons());"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        return Objects.hash(groupName, persons);"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":100}},{"path":"src/main/java/seedu/address/model/group/GroupHashMap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":" * A HashMap mapping groupName to Group."},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":" * Supports a minimal set of list operations."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":" *"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":" * @see Group#isSameGroup(Group)"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"public class GroupHashMap {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    private final ObservableMap\u003cName, Group\u003e internalMap \u003d FXCollections.observableHashMap();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     * Returns true if the map contains an equivalent group as the given argument."},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(toCheck);"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        return internalMap.containsKey(toCheck.getName());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     * Adds a group to the hashmap."},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     * The group must not already exist in the hashmap."},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    public void add(Group toAdd) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(toAdd);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        if (contains(toAdd)) {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        internalMap.put(toAdd.getName(), toAdd);"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"     * Removes the equivalent group from the list."},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"     * The group must exist in the list."},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    public void remove(Group toRemove) {"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(toRemove);"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        internalMap.remove(toRemove.getName());"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"     * Replaces the group for {@code groupName} in the map with {@code editedGroup}."},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"     * {@code groupName} must exist in the hashmap."},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"    public void setGroup(Name groupName, Group editedGroup) {"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"        requireAllNonNull(groupName, editedGroup);"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d internalMap.get(groupName);"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        if (group \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"        internalMap.replace(groupName, editedGroup);"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"     * Replaces the contents of this list with {@code persons}."},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"    public void setGroups(HashMap\u003cName, Group\u003e groupHashMap) {"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"        requireAllNonNull(groupHashMap);"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"        internalMap.clear();"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"        internalMap.putAll(groupHashMap);"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"    public ObservableMap\u003cName, Group\u003e asUnmodifiableObservableMap() {"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        return FXCollections.unmodifiableObservableMap(internalMap);"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"                || (other instanceof GroupHashMap // instanceof handles nulls"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 internalMap.equals(((GroupHashMap) other).internalMap));"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"    public int hashCode() {"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"        return internalMap.hashCode();"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":99}},{"path":"src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public class DuplicateGroupException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    public DuplicateGroupException() {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":11}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class GroupNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"Assyarul":6}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"public class Birthday {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"            seedu.address.commons.util.DateUtil.MESSAGE_CONSTRAINT;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    public static final DateTimeFormatter BIRTHDAY_INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    public final LocalDate birthday;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code Birthday}."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * This constructor is mainly for testing purposes"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     * @param birthday A non-empty birthday"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    public Birthday(LocalDate birthday) {"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(birthday);"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code Birthday}."},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     * This constructor is mainly for testing purposes"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     * @param birthday A non-empty birthday"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    public Birthday(String birthday) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(birthday);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        checkArgument(isValidBirthday(birthday), MESSAGE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"            this.birthday \u003d DateUtil.fromDateInput(birthday);"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        } catch (ParseException e) {"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"     * Returns true if a given string is a valid birthday."},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    public static boolean isValidBirthday(String test) {"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"            DateUtil.fromDateInput(test);"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"            return true;"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        } catch (ParseException e) {"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"        return DateUtil.toString(birthday, BIRTHDAY_INPUT_FORMAT);"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"    public String toUi() {"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        return DateUtil.toUi(birthday);"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 birthday.equals(((Birthday) other).birthday)); // state check"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"        return birthday.hashCode();"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"}"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":""}],"authorContributionMap":{"Assyarul":80}},{"path":"src/main/java/seedu/address/model/person/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chesterhow"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":3,"author":{"gitId":"chesterhow"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":5,"author":{"gitId":"chesterhow"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"chesterhow"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"chesterhow"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":9,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":10,"author":{"gitId":"chesterhow"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":11,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":12,"author":{"gitId":"chesterhow"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"chesterhow"},"content":" * Represents a Date event for a Person in the FriendDex."},{"lineNumber":14,"author":{"gitId":"chesterhow"},"content":" */"},{"lineNumber":15,"author":{"gitId":"chesterhow"},"content":"public class Event {"},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"    private final LocalDate date;"},{"lineNumber":17,"author":{"gitId":"chesterhow"},"content":"    private final LocalTime time;"},{"lineNumber":18,"author":{"gitId":"chesterhow"},"content":"    private final String description;"},{"lineNumber":19,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":20,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chesterhow"},"content":"     * Constructs a {@code Event}"},{"lineNumber":22,"author":{"gitId":"chesterhow"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"chesterhow"},"content":"     * @param date A valid date."},{"lineNumber":24,"author":{"gitId":"chesterhow"},"content":"     * @param description A description of the event."},{"lineNumber":25,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"    public Event(LocalDate date, String description) {"},{"lineNumber":27,"author":{"gitId":"chesterhow"},"content":"        requireAllNonNull(date, description);"},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"        this.date \u003d date;"},{"lineNumber":29,"author":{"gitId":"chesterhow"},"content":"        this.time \u003d null;"},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":"        this.description \u003d description;"},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":33,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":"     * Constructs a {@code Event}"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":"     * @param date A valid date."},{"lineNumber":37,"author":{"gitId":"chesterhow"},"content":"     * @param time A valid time."},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"     * @param description A description of the event."},{"lineNumber":39,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"chesterhow"},"content":"    public Event(LocalDate date, LocalTime time, String description) {"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"        requireAllNonNull(date, time, description);"},{"lineNumber":42,"author":{"gitId":"chesterhow"},"content":"        this.date \u003d date;"},{"lineNumber":43,"author":{"gitId":"chesterhow"},"content":"        this.time \u003d time;"},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"        this.description \u003d description;"},{"lineNumber":45,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":47,"author":{"gitId":"chesterhow"},"content":"    public LocalDate getDate() {"},{"lineNumber":48,"author":{"gitId":"chesterhow"},"content":"        return date;"},{"lineNumber":49,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":51,"author":{"gitId":"chesterhow"},"content":"    public LocalTime getTime() {"},{"lineNumber":52,"author":{"gitId":"chesterhow"},"content":"        return time;"},{"lineNumber":53,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":55,"author":{"gitId":"chesterhow"},"content":"    public String getDescription() {"},{"lineNumber":56,"author":{"gitId":"chesterhow"},"content":"        return description;"},{"lineNumber":57,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":59,"author":{"gitId":"chesterhow"},"content":"    public boolean hasTime() {"},{"lineNumber":60,"author":{"gitId":"chesterhow"},"content":"        return time !\u003d null;"},{"lineNumber":61,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":63,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chesterhow"},"content":"     * Returns the string to be displayed on the UI"},{"lineNumber":65,"author":{"gitId":"chesterhow"},"content":"     * @return String to be displayed on the UI"},{"lineNumber":66,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"chesterhow"},"content":"    public String toUi() {"},{"lineNumber":68,"author":{"gitId":"chesterhow"},"content":"        if (hasTime()) {"},{"lineNumber":69,"author":{"gitId":"chesterhow"},"content":"            return String.format(\"%s %s %s\\n\", DateUtil.toUi(date), TimeUtil.toUi(time), description);"},{"lineNumber":70,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"chesterhow"},"content":"        return String.format(\"%s %s\\n\", DateUtil.toUi(date), description);"},{"lineNumber":72,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":74,"author":{"gitId":"chesterhow"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"chesterhow"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitId":"chesterhow"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"chesterhow"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":80,"author":{"gitId":"chesterhow"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":81,"author":{"gitId":"chesterhow"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":84,"author":{"gitId":"chesterhow"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":85,"author":{"gitId":"chesterhow"},"content":"        return otherEvent.getDate().equals(getDate())"},{"lineNumber":86,"author":{"gitId":"chesterhow"},"content":"                \u0026\u0026 otherEvent.getTime().equals(getTime())"},{"lineNumber":87,"author":{"gitId":"chesterhow"},"content":"                \u0026\u0026 otherEvent.getDescription().equals(getDescription());"},{"lineNumber":88,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":90,"author":{"gitId":"chesterhow"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"chesterhow"},"content":"    public int hashCode() {"},{"lineNumber":92,"author":{"gitId":"chesterhow"},"content":"        return Objects.hash(date, time, description);"},{"lineNumber":93,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":95,"author":{"gitId":"chesterhow"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"chesterhow"},"content":"    public String toString() {"},{"lineNumber":97,"author":{"gitId":"chesterhow"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitId":"chesterhow"},"content":"        builder.append(getDate())"},{"lineNumber":99,"author":{"gitId":"chesterhow"},"content":"                .append(\"; \");"},{"lineNumber":100,"author":{"gitId":"chesterhow"},"content":"        if (hasTime()) {"},{"lineNumber":101,"author":{"gitId":"chesterhow"},"content":"            builder.append(getTime())"},{"lineNumber":102,"author":{"gitId":"chesterhow"},"content":"                    .append(\"; \");"},{"lineNumber":103,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"chesterhow"},"content":"        builder.append(getDescription());"},{"lineNumber":105,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":106,"author":{"gitId":"chesterhow"},"content":"        return builder.toString();"},{"lineNumber":107,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"chesterhow"},"content":"}"}],"authorContributionMap":{"chesterhow":108}},{"path":"src/main/java/seedu/address/model/person/NameContainsPatternPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":""},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches the pattern given."},{"lineNumber":9,"author":{"gitId":"lue97"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"public class NameContainsPatternPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"    private final Pattern pattern;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    public NameContainsPatternPredicate(Pattern pattern) {"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"        this.pattern \u003d pattern;"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    public boolean test(Person person) {"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"        return pattern.matcher(person.getName().toString()).find();"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":""},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"            return true;"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        if (other \u003d\u003d null || getClass() !\u003d other.getClass()) {"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"        NameContainsPatternPredicate patternPredicate \u003d (NameContainsPatternPredicate) other;"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"        return pattern.toString().equals(patternPredicate.pattern.toString());"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":""},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"    public int hashCode() {"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"        return Objects.hash(pattern);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":38}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":" * Guarantees: details are present and not null, field values are validated, immutable with the exception of groups."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":" * The groups inside the set groups may change as people are added into these groups."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    private final Birthday birthday;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"    private final List\u003cEvent\u003e dates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":"    private final List\u003cEvent\u003e meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday, Set\u003cTag\u003e tags,"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"                List\u003cEvent\u003e dates, List\u003cEvent\u003e meetings) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":"        this.dates.addAll(dates);"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        this.meetings.addAll(meetings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"    public Birthday getBirthday() {"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        return birthday;"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":79,"author":{"gitId":"chesterhow"},"content":"    public List\u003cEvent\u003e getDates() {"},{"lineNumber":80,"author":{"gitId":"chesterhow"},"content":"        return Collections.unmodifiableList(dates);"},{"lineNumber":81,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":83,"author":{"gitId":"chesterhow"},"content":"    public List\u003cEvent\u003e getMeetings() {"},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":"        return Collections.unmodifiableList(meetings);"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(getBirthday())"},{"lineNumber":120,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":121,"author":{"gitId":"chesterhow"},"content":"                \u0026\u0026 otherPerson.getDates().equals(getDates())"},{"lineNumber":122,"author":{"gitId":"ivantjh"},"content":"                \u0026\u0026 otherPerson.getMeetings().equals(getMeetings());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":140,"author":{"gitId":"Assyarul"},"content":"                .append(getAddress())"},{"lineNumber":141,"author":{"gitId":"Assyarul"},"content":"                .append(\"; Birthday: \")"},{"lineNumber":142,"author":{"gitId":"Assyarul"},"content":"                .append(getBirthday());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":150,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e dates \u003d getDates();"},{"lineNumber":151,"author":{"gitId":"chesterhow"},"content":"        if (!dates.isEmpty()) {"},{"lineNumber":152,"author":{"gitId":"chesterhow"},"content":"            builder.append(\"; Dates: \");"},{"lineNumber":153,"author":{"gitId":"chesterhow"},"content":"            dates.forEach(builder::append);"},{"lineNumber":154,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":156,"author":{"gitId":"chesterhow"},"content":"        List\u003cEvent\u003e meetings \u003d getMeetings();"},{"lineNumber":157,"author":{"gitId":"ivantjh"},"content":"        if (!meetings.isEmpty()) {"},{"lineNumber":158,"author":{"gitId":"ivantjh"},"content":"            String meetingsStr \u003d meetings"},{"lineNumber":159,"author":{"gitId":"ivantjh"},"content":"                    .stream()"},{"lineNumber":160,"author":{"gitId":"chesterhow"},"content":"                    .map(Event::toString)"},{"lineNumber":161,"author":{"gitId":"ivantjh"},"content":"                    .collect(Collectors.joining(\", \"));"},{"lineNumber":162,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":163,"author":{"gitId":"ivantjh"},"content":"            builder.append(\"; Meetings: \");"},{"lineNumber":164,"author":{"gitId":"ivantjh"},"content":"            builder.append(meetingsStr);"},{"lineNumber":165,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":14,"ivantjh":19,"-":118,"chesterhow":18}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"-"},"content":" *"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * Returns true if the list contains an equivalent person with the given name."},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    public boolean contains(Name toCheck) {"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        requireNonNull(toCheck);"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        return internalList.stream().anyMatch(x-\u003ex.getName().equals(toCheck));"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Adds a person to the list."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must exist in the list."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":8,"-":137}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Birthday(\"01-01-1998\"),"},{"lineNumber":29,"author":{"gitId":"chesterhow"},"content":"                    getTagSet(\"friends\"), getDateList(), getMeetingList()),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Birthday(\"01-02-1999\"),"},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":"                    getTagSet(\"colleagues\", \"friends\"), getDateList(), getMeetingList()),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"                    new Birthday(\"03-11-1979\"), getTagSet(\"neighbours\"), getDateList(), getMeetingList()),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Birthday(\"14-12-1998\"),"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"                    getTagSet(\"family\"), getDateList(), getMeetingList()),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Birthday(\"12-12-1995\"),"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"                    getTagSet(\"classmates\"), getDateList(), getMeetingList()),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Birthday(\"05-02-1998\"),"},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"                    getTagSet(\"colleagues\"), getDateList(), getMeetingList())"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    public static Set\u003cPerson\u003e getPersonSet(Person... persons) {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"        return Arrays.stream(persons)"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"    public static Set\u003cGroup\u003e getGroupSet(Group... groups) {"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"        return Arrays.stream(groups)"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":75,"author":{"gitId":"chesterhow"},"content":"    public static List\u003cEvent\u003e getMeetingList() {"},{"lineNumber":76,"author":{"gitId":"ivantjh"},"content":"        return Collections.emptyList();"},{"lineNumber":77,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":79,"author":{"gitId":"chesterhow"},"content":"    public static List\u003cEvent\u003e getDateList() {"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"        return Collections.emptyList();"},{"lineNumber":82,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":19,"ivantjh":8,"-":49,"chesterhow":8}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chesterhow"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":3,"author":{"gitId":"chesterhow"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chesterhow"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":6,"author":{"gitId":"chesterhow"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"chesterhow"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":8,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":9,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":10,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":11,"author":{"gitId":"chesterhow"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chesterhow"},"content":" * Jackson-friendly version of {@link Event}."},{"lineNumber":13,"author":{"gitId":"chesterhow"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chesterhow"},"content":"public class JsonAdaptedEvent {"},{"lineNumber":15,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"    private final LocalDate date;"},{"lineNumber":17,"author":{"gitId":"chesterhow"},"content":"    private final LocalTime time;"},{"lineNumber":18,"author":{"gitId":"chesterhow"},"content":"    private final String description;"},{"lineNumber":19,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":20,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chesterhow"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given {@code date}, {@code time} and {@code description}."},{"lineNumber":22,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chesterhow"},"content":"    @JsonCreator"},{"lineNumber":24,"author":{"gitId":"chesterhow"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"date\") LocalDate date, @JsonProperty(\"time\") LocalTime time,"},{"lineNumber":25,"author":{"gitId":"chesterhow"},"content":"            @JsonProperty(\"description\") String description) {"},{"lineNumber":26,"author":{"gitId":"chesterhow"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"chesterhow"},"content":"        this.time \u003d time;"},{"lineNumber":28,"author":{"gitId":"chesterhow"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":31,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chesterhow"},"content":"     * Converts a given {@code Event} into this class for Jackson use."},{"lineNumber":33,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chesterhow"},"content":"    public JsonAdaptedEvent(Event source) {"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"        date \u003d source.getDate();"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":"        time \u003d source.getTime();"},{"lineNumber":37,"author":{"gitId":"chesterhow"},"content":"        description \u003d source.getDescription();"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":40,"author":{"gitId":"chesterhow"},"content":"    private boolean hasTime() {"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"        return time !\u003d null;"},{"lineNumber":42,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":44,"author":{"gitId":"chesterhow"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"chesterhow"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"chesterhow"},"content":"    public Event toModelType() {"},{"lineNumber":48,"author":{"gitId":"chesterhow"},"content":"        if (hasTime()) {"},{"lineNumber":49,"author":{"gitId":"chesterhow"},"content":"            return new Event(date, time, description);"},{"lineNumber":50,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"chesterhow"},"content":"        return new Event(date, description);"},{"lineNumber":52,"author":{"gitId":"chesterhow"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chesterhow"},"content":"}"}],"authorContributionMap":{"chesterhow":53}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedGroup.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"public class JsonAdaptedGroup {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_INVALID_PERSON \u003d \"Groups list contains non-existing person(s).\";"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    private final String groupName;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    private final List\u003cString\u003e personNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given meeting details."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    public JsonAdaptedGroup(@JsonProperty(\"name\") String groupName,"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"            @JsonProperty(\"persons\")List\u003cString\u003e personNames) {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        if (personNames !\u003d null) {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            personNames.addAll(personNames);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * Converts a given {@code Group} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    public JsonAdaptedGroup(Group source) {"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        groupName \u003d source.getName().fullName;"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        personNames.addAll(source.getPersons().stream()"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"                .map(Person::getName).map(Name::toString)"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"     * Requires list of person to construct group list."},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"     * @param personList actual personList serialised from json file."},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group."},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    public Group toModelType(List\u003cPerson\u003e personList) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        if (groupName \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        if (!Name.isValidName(groupName)) {"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"        final Name modelName \u003d new Name(groupName);"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        final Set\u003cPerson\u003e modelPersonSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        for (String personName : personNames) {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"            if (!Name.isValidName(personName)) {"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"                throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"            Person person;"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"            person \u003d personList.stream().filter(x-\u003ex.getName()"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"                    .toString().equals(personName))"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"                    .findFirst().get();"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"            if (person \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_PERSON);"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"            modelPersonSet.add(person);"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"        return new Group(modelName, modelPersonSet);"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":81}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    private final String birthday;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"    private final List\u003cJsonAdaptedEvent\u003e dates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":"    private final List\u003cJsonAdaptedEvent\u003e meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"            @JsonProperty(\"birthday\") String birthday,"},{"lineNumber":45,"author":{"gitId":"chesterhow"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged, @JsonProperty(\"dates\") List\u003cJsonAdaptedEvent\u003e dates,"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":"            @JsonProperty(\"meetings\") List\u003cJsonAdaptedEvent\u003e meetings) {"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"chesterhow"},"content":"        if (dates !\u003d null) {"},{"lineNumber":57,"author":{"gitId":"chesterhow"},"content":"            this.dates.addAll(dates);"},{"lineNumber":58,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"        if (meetings !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"            this.meetings.addAll(meetings);"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"        birthday \u003d source.getBirthday().toString();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":76,"author":{"gitId":"chesterhow"},"content":"        dates.addAll(source.getDates().stream()"},{"lineNumber":77,"author":{"gitId":"chesterhow"},"content":"                .map(JsonAdaptedEvent::new)"},{"lineNumber":78,"author":{"gitId":"chesterhow"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":"        meetings.addAll(source.getMeetings().stream()"},{"lineNumber":80,"author":{"gitId":"chesterhow"},"content":"                .map(JsonAdaptedEvent::new)"},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":"        if (birthday \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":"                    Birthday.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"        if (!Birthday.isValidBirthday(birthday)) {"},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalValueException(Birthday.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"        final Birthday modelBirthday \u003d new Birthday(birthday);"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":131,"author":{"gitId":"ivantjh"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitId":"ivantjh"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":133,"author":{"gitId":"ivantjh"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":134,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"chesterhow"},"content":"        final List\u003cEvent\u003e modelDates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":138,"author":{"gitId":"chesterhow"},"content":"        for (JsonAdaptedEvent date : dates) {"},{"lineNumber":139,"author":{"gitId":"chesterhow"},"content":"            modelDates.add(date.toModelType());"},{"lineNumber":140,"author":{"gitId":"chesterhow"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"chesterhow"},"content":""},{"lineNumber":142,"author":{"gitId":"chesterhow"},"content":"        final List\u003cEvent\u003e modelMeetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":143,"author":{"gitId":"chesterhow"},"content":"        for (JsonAdaptedEvent meeting : meetings) {"},{"lineNumber":144,"author":{"gitId":"ivantjh"},"content":"            modelMeetings.add(meeting.toModelType());"},{"lineNumber":145,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":147,"author":{"gitId":"Assyarul"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelBirthday,"},{"lineNumber":148,"author":{"gitId":"Assyarul"},"content":"                modelTags, modelDates, modelMeetings);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":17,"ivantjh":12,"-":102,"chesterhow":19}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate group(s).\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    private final List\u003cJsonAdaptedGroup\u003e groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons and groups"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            @JsonProperty(\"groups\") List\u003cJsonAdaptedGroup\u003e groups) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        this.groups.addAll(groups);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        groups.addAll(source.getGroupMap().entrySet().stream().map(x-\u003ex.getValue())"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"                .map(JsonAdaptedGroup::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        for (JsonAdaptedGroup jsonAdaptedGroup : groups) {"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"            Group group \u003d jsonAdaptedGroup.toModelType(addressBook.getPersonList());"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"            if (addressBook.hasGroup(group)) {"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"            addressBook.addGroup(group);"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":20,"-":58}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Scene mainScene;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"lue97"},"content":"    public Scene getMainScene() {"},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"        return this.mainScene;"},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":98,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":108,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":168,"author":{"gitId":"lue97"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), ThemeManager.getThemePath());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":5,"-":199}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    private Label birthday;"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"chesterhow"},"content":"    private FlowPane dates;"},{"lineNumber":47,"author":{"gitId":"chesterhow"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"    private FlowPane meetings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        birthday.setText(person.getBirthday().toUi());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":65,"author":{"gitId":"chesterhow"},"content":"        person.getDates()"},{"lineNumber":66,"author":{"gitId":"chesterhow"},"content":"                .forEach(date -\u003e dates.getChildren().add(new Label(date.toString())));"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"        // Temporary UI to test meetings"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"        person.getMeetings().forEach(meeting -\u003e meetings.getChildren().add(new Label(meeting.toUi())));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":3,"ivantjh":4,"-":77,"chesterhow":4}},{"path":"src/main/java/seedu/address/ui/Theme.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":" * The theme object. Stores the color palette of the application."},{"lineNumber":10,"author":{"gitId":"lue97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Theme implements Serializable {"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    public static final Pattern REGEX_HEX_COLOR \u003d Pattern.compile(\"^#([a-fA-F0-9]{3}|[a-fA-F0-9]{6})$\");"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":""},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"     * The foreground color of the application."},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public final String foreground;"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":""},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"     * The background color of the application."},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public final String background;"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":""},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"     * The 16 \u0027ASCII\u0027 color of the application."},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"     * See \u003ca href\u003d\"https://invisible-island.net/xterm/manpage/xterm.html#h3-VT100-Widget-Resources\"\u003eXTerm Colors\u003c/a\u003e."},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final String[] color;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"     * The default constructor."},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"     * Necessary for deserializing from JSON."},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Theme() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        foreground \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        background \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        color \u003d null;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"     * Constructs a Theme object based on given foreground, background, and colors."},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"     * @param foreground Foreground of the application."},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"     * @param background Background of the application."},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"     * @param color      Colors 0 - 15 of the application."},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Theme(String foreground, String background, String[] color) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.foreground \u003d foreground;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.background \u003d background;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.color \u003d color;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":"     * Checks if the Theme object is a valid theme."},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"     * @return true if theme is valid otherwise false."},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"    public boolean isValid() {"},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        if (this.foreground.isEmpty() || this.background.isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        if (!REGEX_HEX_COLOR.matcher(this.foreground).find()) {"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"        if (!REGEX_HEX_COLOR.matcher(this.background).find()) {"},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"        if (color \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lue97"},"content":"        if (color.length !\u003d 16) {"},{"lineNumber":73,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":74,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"lue97"},"content":"        for (String hex : color) {"},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"            if (!REGEX_HEX_COLOR.matcher(hex).find()) {"},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"                return false;"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"lue97"},"content":"        return true;"},{"lineNumber":81,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"lue97"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean equals(Object o) {"},{"lineNumber":85,"author":{"gitId":"lue97"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":86,"author":{"gitId":"lue97"},"content":"            return true;"},{"lineNumber":87,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"lue97"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":89,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"lue97"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Theme theme \u003d (Theme) o;"},{"lineNumber":93,"author":{"gitId":"lue97"},"content":""},{"lineNumber":94,"author":{"gitId":"lue97"},"content":"        if (!Objects.equals(foreground, theme.foreground)) {"},{"lineNumber":95,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"lue97"},"content":"        if (!Objects.equals(background, theme.background)) {"},{"lineNumber":98,"author":{"gitId":"lue97"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"lue97"},"content":"        return Arrays.equals(color, theme.color);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"lue97"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":77,"-":26}},{"path":"src/main/java/seedu/address/ui/ThemeFactory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.exceptions.InvalidThemeException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ThemeFactory {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    // Properties of the default theme."},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_FOREGROUND \u003d \"#f8f8f2\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_BACKGROUND \u003d \"#272822\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String[] DEFAULT_COLOR;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        DEFAULT_COLOR \u003d new String[] {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"#272822\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f8f8f2\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"#75715e\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f9f8f5\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"     * Loads a theme from a given file path."},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"     * @param path The path of the JSON theme file."},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"     * @return The loaded Theme instance."},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"     * @throws InvalidThemeException   The theme is malformed or is missing certain variables."},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"     * @throws FileNotFoundException   The theme file cannot be located."},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"     * @throws DataConversionException An error occurred when parsing the theme."},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"    public static Theme load(Path path) throws InvalidThemeException, FileNotFoundException, DataConversionException {"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"        Optional\u003cTheme\u003e optionalTheme \u003d JsonUtil.readJsonFile(path, Theme.class);"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"        if (optionalTheme.isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"            throw new FileNotFoundException();"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"        if (!optionalTheme.get().isValid()) {"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"            throw new InvalidThemeException(\"Invalid theme supplied\");"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"            return optionalTheme.get();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"     * Returns the default theme."},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"     * @return The default Theme instance."},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"    public static Theme getDefaultTheme() {"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"        return new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":33,"-":23}},{"path":"src/main/java/seedu/address/ui/ThemeManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"import javafx.scene.Scene;"},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":""},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":" * Class for managing the theme of the application. Stores data on what theme is currently being applied."},{"lineNumber":17,"author":{"gitId":"lue97"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ThemeManager {"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":""},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"     * Template of the css used by the application."},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    private static final String CSS_TEMPLATE;"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"     * Current theme used by the application"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static Theme theme \u003d null;"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"     * Path of the current theme"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"    private static String themePath \u003d null;"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"     * Path of the css file currently in use"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"    private static String cssCacheUri \u003d null;"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"     * The mainScene property from a MainWindow instance."},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"    private static Scene scene \u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"    static {"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"        InputStream templateStream \u003d MainApp.class.getResourceAsStream(\"/view/Template.css\");"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"        CSS_TEMPLATE \u003d new BufferedReader(new InputStreamReader(templateStream))"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"                .lines().collect(Collectors.joining(\"\\n\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"     * Sets the scene for themes to be applied to."},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"     * @param scene The scene for themes to be applied to."},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"    public static void setScene(Scene scene) {"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"        ThemeManager.scene \u003d scene;"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":""},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"     * Gets the theme currently in use by the application."},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"     * @return The theme currently in use by the application."},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"    public static Theme getTheme() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return ThemeManager.theme;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"     * Gets the path of the JSON theme file currently being applied."},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":"     * @return Path of the JSON theme file currently being applied."},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"    public static String getThemePath() {"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"        return themePath;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"lue97"},"content":"     * Initialized the variables in ThemeManager."},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"    public static void init() {"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":"        ThemeManager.theme \u003d ThemeFactory.getDefaultTheme();"},{"lineNumber":79,"author":{"gitId":"lue97"},"content":"        ThemeManager.cssCacheUri \u003d getNewCssCacheUri(ThemeManager.theme);"},{"lineNumber":80,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lue97"},"content":""},{"lineNumber":82,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"lue97"},"content":"     * Sets the current theme of the application."},{"lineNumber":84,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"lue97"},"content":"     * @param newTheme  The new theme to be used."},{"lineNumber":86,"author":{"gitId":"lue97"},"content":"     * @param themePath The path of the new theme to be used."},{"lineNumber":87,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"lue97"},"content":"    public static void setTheme(Theme newTheme, String themePath) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ThemeManager.theme \u003d newTheme;"},{"lineNumber":90,"author":{"gitId":"lue97"},"content":"        ThemeManager.themePath \u003d themePath;"},{"lineNumber":91,"author":{"gitId":"lue97"},"content":"        String newCssCache \u003d getNewCssCacheUri(newTheme);"},{"lineNumber":92,"author":{"gitId":"lue97"},"content":"        if (newCssCache !\u003d null) {"},{"lineNumber":93,"author":{"gitId":"lue97"},"content":"            ThemeManager.cssCacheUri \u003d getNewCssCacheUri(newTheme);"},{"lineNumber":94,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"lue97"},"content":""},{"lineNumber":97,"author":{"gitId":"lue97"},"content":"    public static String getCssCacheUri() {"},{"lineNumber":98,"author":{"gitId":"lue97"},"content":"        return ThemeManager.cssCacheUri;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"lue97"},"content":"     * Applies the current theme to the application."},{"lineNumber":103,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"lue97"},"content":"    public static void applyThemeToScene() {"},{"lineNumber":105,"author":{"gitId":"lue97"},"content":"        ThemeManager.scene.getStylesheets().clear();"},{"lineNumber":106,"author":{"gitId":"lue97"},"content":"        ThemeManager.scene.getStylesheets().add(\"file:///\" + ThemeManager.cssCacheUri);"},{"lineNumber":107,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"lue97"},"content":""},{"lineNumber":109,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"lue97"},"content":"     * Returns the URI of the updated CSS cache."},{"lineNumber":111,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"lue97"},"content":"     * @return URI of the updated CSS cache."},{"lineNumber":113,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"lue97"},"content":"    private static String getNewCssCacheUri(Theme theme) {"},{"lineNumber":115,"author":{"gitId":"lue97"},"content":"        String cssString \u003d generateCssFromTheme(theme);"},{"lineNumber":116,"author":{"gitId":"lue97"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"lue97"},"content":"            return createCssCacheFile(cssString);"},{"lineNumber":118,"author":{"gitId":"lue97"},"content":"        } catch (IOException ioException) {"},{"lineNumber":119,"author":{"gitId":"lue97"},"content":"            return null;"},{"lineNumber":120,"author":{"gitId":"lue97"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"lue97"},"content":""},{"lineNumber":123,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"lue97"},"content":"     * Generates CSS based on theme given."},{"lineNumber":125,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"lue97"},"content":"     * @param theme The theme to be used."},{"lineNumber":127,"author":{"gitId":"lue97"},"content":"     * @return cssTemplate with colors assigned."},{"lineNumber":128,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"lue97"},"content":"    private static String generateCssFromTheme(Theme theme) {"},{"lineNumber":130,"author":{"gitId":"lue97"},"content":"        String cssString \u003d ThemeManager.CSS_TEMPLATE;"},{"lineNumber":131,"author":{"gitId":"lue97"},"content":"        cssString \u003d cssString"},{"lineNumber":132,"author":{"gitId":"lue97"},"content":"                .replaceAll(\"\\\\$foreground\", theme.foreground)"},{"lineNumber":133,"author":{"gitId":"lue97"},"content":"                .replaceAll(\"\\\\$background\", theme.background);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c 16; i++) {"},{"lineNumber":135,"author":{"gitId":"lue97"},"content":"            cssString \u003d cssString"},{"lineNumber":136,"author":{"gitId":"lue97"},"content":"                    .replaceAll(\"\\\\$c\" + Integer.toHexString(i), theme.color[i]);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"lue97"},"content":"        return cssString;"},{"lineNumber":139,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"lue97"},"content":""},{"lineNumber":141,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"lue97"},"content":"     * Creates a temporary file containing the given CSS."},{"lineNumber":143,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"lue97"},"content":"     * @param cssString CSS to be written to the file."},{"lineNumber":145,"author":{"gitId":"lue97"},"content":"     * @return The temp file location."},{"lineNumber":146,"author":{"gitId":"lue97"},"content":"     * @throws IOException The file cannot be created/written to."},{"lineNumber":147,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"lue97"},"content":"    private static String createCssCacheFile(String cssString) throws IOException {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        File temp \u003d File.createTempFile(\"current\", \".tmp\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        temp.deleteOnExit();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        BufferedWriter out \u003d new BufferedWriter(new FileWriter(temp));"},{"lineNumber":152,"author":{"gitId":"lue97"},"content":"        out.write(cssString);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        out.close();"},{"lineNumber":154,"author":{"gitId":"lue97"},"content":"        return temp.getAbsolutePath().replace(File.separator, \"/\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"lue97"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":125,"-":32}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"    private final Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"                                               String contentText) {"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"        alert.getDialogPane().getStylesheets().add(\"file:///\" + ThemeManager.getCssCacheUri());"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        alert.initOwner(owner);"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"        alert.setTitle(title);"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"        alert.setContentText(contentText);"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"        alert.showAndWait();"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":""},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":61,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"            ThemeManager.setScene(mainWindow.getMainScene());"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"            ThemeManager.applyThemeToScene();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":23,"-":68}},{"path":"src/main/java/seedu/address/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"     * Resource folder where FXML files are stored."},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lue97"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public T getRoot() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @param root     Specifies the root of the object hierarchy."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(location);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":16,"-":77}},{"path":"src/main/java/seedu/address/ui/exceptions/InvalidThemeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.ui.exceptions;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"public class InvalidThemeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"    public InvalidThemeException(String message) {"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":""},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":9}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"      \u003cLabel fx:id\u003d\"birthday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthday\" /\u003e"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"      \u003cFlowPane fx:id\u003d\"dates\" /\u003e"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"      \u003cFlowPane fx:id\u003d\"meetings\" /\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Assyarul":1,"ivantjh":4,"-":33,"chesterhow":1}},{"path":"src/main/resources/view/Template.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: $background, 20%;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: $background; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: $background;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: $background;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: $background, 20%;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent transparent;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: derive($background, 20%);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: derive($background, 50%);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"lue97"},"content":"    -fx-background-color: $c5;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: $c5;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: $background;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: $background;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: $background;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 0px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: $background;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: $background;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-foreground-color: $foreground;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-foreground-color: $foreground;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":214,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":215,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":216,"author":{"gitId":"-"},"content":" */"},{"lineNumber":217,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-background-color: $foreground;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-text-fill: $background;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  -fx-background-color: $foreground;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  -fx-text-fill: $background;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-color: $foreground, $foreground;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"}"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"}"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-fill: $foreground;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-background-color: $background;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"}"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    -fx-background-color: $c8;"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":303,"author":{"gitId":"-"},"content":"}"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-text-fill: $cf;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"}"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent $background transparent $background;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-border-color: $background $background $c4 $background;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, $c0, 10, 0, 0, 0);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, $c8, transparent, $c8;"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"}"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-color: $ca;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"}"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":".error {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-text-fill: $c9 !important; /* The error class should always override the default text-fill style 9 */"},{"lineNumber":360,"author":{"gitId":"-"},"content":"}"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":".list-cell:empty {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-background: $background; /* background */"},{"lineNumber":365,"author":{"gitId":"-"},"content":"}"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":".tag-selector {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":369,"author":{"gitId":"-"},"content":"    -fx-border-color: $foreground; /* foreground */"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;"},{"lineNumber":372,"author":{"gitId":"-"},"content":"}"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":".tooltip-text {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    -fx-text-fill: $foreground; /* foreground */"},{"lineNumber":376,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":1,"-":375}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"  } ],"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"  \"groups\": []"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"-":12}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"  } ],"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"  \"groups\": []"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-01-1998\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-01-1998\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"  } ],"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"  \"groups\": []"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":4,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"  } ],"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"  \"groups\": []"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-01-1998\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-02-1998\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-01-1998\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-03-1998\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-04-1998\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"01-05-2000\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"    \"birthday\" : \"15-12-1960\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"  } ],"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"  \"groups\" : [ ]"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":9,"-":45}},{"path":"src/test/data/ThemeTest/default.template.css","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822, 20%;"},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"    background-color: #272822; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":""},{"lineNumber":6,"author":{"gitId":"lue97"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":""},{"lineNumber":20,"author":{"gitId":"lue97"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":""},{"lineNumber":27,"author":{"gitId":"lue97"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":""},{"lineNumber":32,"author":{"gitId":"lue97"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":""},{"lineNumber":36,"author":{"gitId":"lue97"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":""},{"lineNumber":42,"author":{"gitId":"lue97"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"    -fx-base: #272822;"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"    -fx-control-inner-background: #272822;"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":""},{"lineNumber":51,"author":{"gitId":"lue97"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":""},{"lineNumber":55,"author":{"gitId":"lue97"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":""},{"lineNumber":67,"author":{"gitId":"lue97"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":74,"author":{"gitId":"lue97"},"content":""},{"lineNumber":75,"author":{"gitId":"lue97"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":78,"author":{"gitId":"lue97"},"content":""},{"lineNumber":79,"author":{"gitId":"lue97"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822, 20%;"},{"lineNumber":81,"author":{"gitId":"lue97"},"content":"    -fx-border-color: transparent transparent transparent transparent;"},{"lineNumber":82,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":83,"author":{"gitId":"lue97"},"content":""},{"lineNumber":84,"author":{"gitId":"lue97"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"lue97"},"content":"    -fx-border-radius: 0;"},{"lineNumber":86,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 0;"},{"lineNumber":87,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":88,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":89,"author":{"gitId":"lue97"},"content":""},{"lineNumber":90,"author":{"gitId":"lue97"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"lue97"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"lue97"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":94,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":95,"author":{"gitId":"lue97"},"content":""},{"lineNumber":96,"author":{"gitId":"lue97"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"lue97"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"lue97"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"lue97"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":101,"author":{"gitId":"lue97"},"content":""},{"lineNumber":102,"author":{"gitId":"lue97"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"lue97"},"content":"    -fx-background-color: derive(#272822, 20%);"},{"lineNumber":104,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":105,"author":{"gitId":"lue97"},"content":""},{"lineNumber":106,"author":{"gitId":"lue97"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"lue97"},"content":"    -fx-background-color: derive(#272822, 50%);"},{"lineNumber":108,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":109,"author":{"gitId":"lue97"},"content":""},{"lineNumber":110,"author":{"gitId":"lue97"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #ae81ff;"},{"lineNumber":112,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":113,"author":{"gitId":"lue97"},"content":""},{"lineNumber":114,"author":{"gitId":"lue97"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #ae81ff;"},{"lineNumber":116,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":118,"author":{"gitId":"lue97"},"content":""},{"lineNumber":119,"author":{"gitId":"lue97"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":121,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":122,"author":{"gitId":"lue97"},"content":""},{"lineNumber":123,"author":{"gitId":"lue97"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":127,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":128,"author":{"gitId":"lue97"},"content":""},{"lineNumber":129,"author":{"gitId":"lue97"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":133,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":134,"author":{"gitId":"lue97"},"content":""},{"lineNumber":135,"author":{"gitId":"lue97"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"lue97"},"content":"     -fx-background-color: #272822;"},{"lineNumber":137,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":138,"author":{"gitId":"lue97"},"content":""},{"lineNumber":139,"author":{"gitId":"lue97"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"lue97"},"content":"     -fx-background-color: #272822;"},{"lineNumber":141,"author":{"gitId":"lue97"},"content":"     -fx-border-color: #272822;"},{"lineNumber":142,"author":{"gitId":"lue97"},"content":"     -fx-border-top-width: 0px;"},{"lineNumber":143,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":144,"author":{"gitId":"lue97"},"content":""},{"lineNumber":145,"author":{"gitId":"lue97"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":147,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":148,"author":{"gitId":"lue97"},"content":""},{"lineNumber":149,"author":{"gitId":"lue97"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":154,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":155,"author":{"gitId":"lue97"},"content":""},{"lineNumber":156,"author":{"gitId":"lue97"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2 !important;"},{"lineNumber":158,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":159,"author":{"gitId":"lue97"},"content":""},{"lineNumber":160,"author":{"gitId":"lue97"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":163,"author":{"gitId":"lue97"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"lue97"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":166,"author":{"gitId":"lue97"},"content":""},{"lineNumber":167,"author":{"gitId":"lue97"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":169,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #272822;"},{"lineNumber":170,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":172,"author":{"gitId":"lue97"},"content":""},{"lineNumber":173,"author":{"gitId":"lue97"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":175,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":176,"author":{"gitId":"lue97"},"content":""},{"lineNumber":177,"author":{"gitId":"lue97"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":179,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #272822;"},{"lineNumber":180,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":182,"author":{"gitId":"lue97"},"content":""},{"lineNumber":183,"author":{"gitId":"lue97"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":185,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":186,"author":{"gitId":"lue97"},"content":""},{"lineNumber":187,"author":{"gitId":"lue97"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":189,"author":{"gitId":"lue97"},"content":"    -fx-foreground-color: #f8f8f2;"},{"lineNumber":190,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":191,"author":{"gitId":"lue97"},"content":""},{"lineNumber":192,"author":{"gitId":"lue97"},"content":".context-menu .label {"},{"lineNumber":193,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":194,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":195,"author":{"gitId":"lue97"},"content":""},{"lineNumber":196,"author":{"gitId":"lue97"},"content":".menu-bar {"},{"lineNumber":197,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":198,"author":{"gitId":"lue97"},"content":"    -fx-foreground-color: #f8f8f2;"},{"lineNumber":199,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":200,"author":{"gitId":"lue97"},"content":""},{"lineNumber":201,"author":{"gitId":"lue97"},"content":".menu-bar .label {"},{"lineNumber":202,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":203,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":204,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":205,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":206,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":207,"author":{"gitId":"lue97"},"content":""},{"lineNumber":208,"author":{"gitId":"lue97"},"content":".menu .left-container {"},{"lineNumber":209,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":210,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":211,"author":{"gitId":"lue97"},"content":""},{"lineNumber":212,"author":{"gitId":"lue97"},"content":"/*"},{"lineNumber":213,"author":{"gitId":"lue97"},"content":" * Metro style Push Button"},{"lineNumber":214,"author":{"gitId":"lue97"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":215,"author":{"gitId":"lue97"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":216,"author":{"gitId":"lue97"},"content":" */"},{"lineNumber":217,"author":{"gitId":"lue97"},"content":".button {"},{"lineNumber":218,"author":{"gitId":"lue97"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":219,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":220,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 2;"},{"lineNumber":221,"author":{"gitId":"lue97"},"content":"    -fx-background-radius: 0;"},{"lineNumber":222,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":223,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":224,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":225,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":226,"author":{"gitId":"lue97"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":227,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":228,"author":{"gitId":"lue97"},"content":""},{"lineNumber":229,"author":{"gitId":"lue97"},"content":".button:hover {"},{"lineNumber":230,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #f8f8f2;"},{"lineNumber":231,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #272822;"},{"lineNumber":232,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":233,"author":{"gitId":"lue97"},"content":""},{"lineNumber":234,"author":{"gitId":"lue97"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":235,"author":{"gitId":"lue97"},"content":"  -fx-background-color: #f8f8f2;"},{"lineNumber":236,"author":{"gitId":"lue97"},"content":"  -fx-text-fill: #272822;"},{"lineNumber":237,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":238,"author":{"gitId":"lue97"},"content":""},{"lineNumber":239,"author":{"gitId":"lue97"},"content":".button:focused {"},{"lineNumber":240,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #f8f8f2, #f8f8f2;"},{"lineNumber":241,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":242,"author":{"gitId":"lue97"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":243,"author":{"gitId":"lue97"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":244,"author":{"gitId":"lue97"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":245,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":246,"author":{"gitId":"lue97"},"content":""},{"lineNumber":247,"author":{"gitId":"lue97"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":248,"author":{"gitId":"lue97"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":249,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":250,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":251,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":252,"author":{"gitId":"lue97"},"content":""},{"lineNumber":253,"author":{"gitId":"lue97"},"content":".button:default {"},{"lineNumber":254,"author":{"gitId":"lue97"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":255,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":256,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":257,"author":{"gitId":"lue97"},"content":""},{"lineNumber":258,"author":{"gitId":"lue97"},"content":".button:default:hover {"},{"lineNumber":259,"author":{"gitId":"lue97"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":260,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":261,"author":{"gitId":"lue97"},"content":""},{"lineNumber":262,"author":{"gitId":"lue97"},"content":".dialog-pane {"},{"lineNumber":263,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":264,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":265,"author":{"gitId":"lue97"},"content":""},{"lineNumber":266,"author":{"gitId":"lue97"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":267,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":268,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":269,"author":{"gitId":"lue97"},"content":""},{"lineNumber":270,"author":{"gitId":"lue97"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":271,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 14px;"},{"lineNumber":272,"author":{"gitId":"lue97"},"content":"    -fx-font-weight: bold;"},{"lineNumber":273,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":274,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":275,"author":{"gitId":"lue97"},"content":""},{"lineNumber":276,"author":{"gitId":"lue97"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":277,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":278,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":279,"author":{"gitId":"lue97"},"content":""},{"lineNumber":280,"author":{"gitId":"lue97"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":281,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 18px;"},{"lineNumber":282,"author":{"gitId":"lue97"},"content":"    -fx-font-style: italic;"},{"lineNumber":283,"author":{"gitId":"lue97"},"content":"    -fx-fill: #f8f8f2;"},{"lineNumber":284,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":285,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":286,"author":{"gitId":"lue97"},"content":""},{"lineNumber":287,"author":{"gitId":"lue97"},"content":".scroll-bar {"},{"lineNumber":288,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #272822;"},{"lineNumber":289,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":290,"author":{"gitId":"lue97"},"content":""},{"lineNumber":291,"author":{"gitId":"lue97"},"content":".scroll-bar .thumb {"},{"lineNumber":292,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #75715e;"},{"lineNumber":293,"author":{"gitId":"lue97"},"content":"    -fx-background-insets: 3;"},{"lineNumber":294,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":295,"author":{"gitId":"lue97"},"content":""},{"lineNumber":296,"author":{"gitId":"lue97"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":297,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent;"},{"lineNumber":298,"author":{"gitId":"lue97"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":299,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":300,"author":{"gitId":"lue97"},"content":""},{"lineNumber":301,"author":{"gitId":"lue97"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":302,"author":{"gitId":"lue97"},"content":"    -fx-shape: \" \";"},{"lineNumber":303,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":304,"author":{"gitId":"lue97"},"content":""},{"lineNumber":305,"author":{"gitId":"lue97"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":306,"author":{"gitId":"lue97"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":307,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":308,"author":{"gitId":"lue97"},"content":""},{"lineNumber":309,"author":{"gitId":"lue97"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":310,"author":{"gitId":"lue97"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":311,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":312,"author":{"gitId":"lue97"},"content":""},{"lineNumber":313,"author":{"gitId":"lue97"},"content":"#cardPane {"},{"lineNumber":314,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent;"},{"lineNumber":315,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1;"},{"lineNumber":316,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":317,"author":{"gitId":"lue97"},"content":""},{"lineNumber":318,"author":{"gitId":"lue97"},"content":"#commandTypeLabel {"},{"lineNumber":319,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 11px;"},{"lineNumber":320,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f9f8f5;"},{"lineNumber":321,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":322,"author":{"gitId":"lue97"},"content":""},{"lineNumber":323,"author":{"gitId":"lue97"},"content":"#commandTextField {"},{"lineNumber":324,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent #272822 transparent #272822;"},{"lineNumber":325,"author":{"gitId":"lue97"},"content":"    -fx-background-insets: 0;"},{"lineNumber":326,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #272822 #272822 #66d9ef #272822;"},{"lineNumber":327,"author":{"gitId":"lue97"},"content":"    -fx-border-insets: 0;"},{"lineNumber":328,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1;"},{"lineNumber":329,"author":{"gitId":"lue97"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":330,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":331,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":332,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":333,"author":{"gitId":"lue97"},"content":""},{"lineNumber":334,"author":{"gitId":"lue97"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":335,"author":{"gitId":"lue97"},"content":"    -fx-effect: innershadow(gaussian, #272822, 10, 0, 0, 0);"},{"lineNumber":336,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":337,"author":{"gitId":"lue97"},"content":""},{"lineNumber":338,"author":{"gitId":"lue97"},"content":"#resultDisplay .content {"},{"lineNumber":339,"author":{"gitId":"lue97"},"content":"    -fx-background-color: transparent, #75715e, transparent, #75715e;"},{"lineNumber":340,"author":{"gitId":"lue97"},"content":"    -fx-background-radius: 0;"},{"lineNumber":341,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":342,"author":{"gitId":"lue97"},"content":""},{"lineNumber":343,"author":{"gitId":"lue97"},"content":"#tags {"},{"lineNumber":344,"author":{"gitId":"lue97"},"content":"    -fx-hgap: 7;"},{"lineNumber":345,"author":{"gitId":"lue97"},"content":"    -fx-vgap: 3;"},{"lineNumber":346,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":347,"author":{"gitId":"lue97"},"content":""},{"lineNumber":348,"author":{"gitId":"lue97"},"content":"#tags .label {"},{"lineNumber":349,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2;"},{"lineNumber":350,"author":{"gitId":"lue97"},"content":"    -fx-background-color: #a6e22e;"},{"lineNumber":351,"author":{"gitId":"lue97"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":352,"author":{"gitId":"lue97"},"content":"    -fx-border-radius: 2;"},{"lineNumber":353,"author":{"gitId":"lue97"},"content":"    -fx-background-radius: 2;"},{"lineNumber":354,"author":{"gitId":"lue97"},"content":"    -fx-font-size: 11;"},{"lineNumber":355,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":356,"author":{"gitId":"lue97"},"content":""},{"lineNumber":357,"author":{"gitId":"lue97"},"content":""},{"lineNumber":358,"author":{"gitId":"lue97"},"content":".error {"},{"lineNumber":359,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f92672 !important; /* The error class should always override the default text-fill style 9 */"},{"lineNumber":360,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":361,"author":{"gitId":"lue97"},"content":""},{"lineNumber":362,"author":{"gitId":"lue97"},"content":".list-cell:empty {"},{"lineNumber":363,"author":{"gitId":"lue97"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":364,"author":{"gitId":"lue97"},"content":"    -fx-background: #272822; /* background */"},{"lineNumber":365,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":366,"author":{"gitId":"lue97"},"content":""},{"lineNumber":367,"author":{"gitId":"lue97"},"content":".tag-selector {"},{"lineNumber":368,"author":{"gitId":"lue97"},"content":"    -fx-border-width: 1;"},{"lineNumber":369,"author":{"gitId":"lue97"},"content":"    -fx-border-color: #f8f8f2; /* foreground */"},{"lineNumber":370,"author":{"gitId":"lue97"},"content":"    -fx-border-radius: 3;"},{"lineNumber":371,"author":{"gitId":"lue97"},"content":"    -fx-background-radius: 3;"},{"lineNumber":372,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":373,"author":{"gitId":"lue97"},"content":""},{"lineNumber":374,"author":{"gitId":"lue97"},"content":".tooltip-text {"},{"lineNumber":375,"author":{"gitId":"lue97"},"content":"    -fx-text-fill: #f8f8f2; /* foreground */"},{"lineNumber":376,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":376}},{"path":"src/test/data/ThemeTest/invalid.theme.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"{"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":"  \"name\": \"\","},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"  \"author\": \"\","},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"  \"color\": ["},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"    \"#272822\","},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    \"#f8f8f2\","},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    \"#75715e\","},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    \"#ae81f\","},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    \"#f9f8f5\""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"  ],"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"  \"foreground\": \"#f8f8f2\","},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"  \"background\": \"#272822\""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":""}],"authorContributionMap":{"lue97":25}},{"path":"src/test/data/ThemeTest/malformed.theme.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"{"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":"  \"name\": \"\","},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"  \"author\": \"\","},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"  \"color\": ["},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"    \"#272822\","},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    \"#f8f8f2\","},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    \"#75715e\","},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    \"#f9f8f5\""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"  \"foreground\": \"#f8f8f2\","},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"  \"background\": \"#272822\""},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":""}],"authorContributionMap":{"lue97":24}},{"path":"src/test/data/ThemeTest/valid.theme.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"{"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":"  \"name\": \"\","},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"  \"author\": \"\","},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"  \"color\": ["},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"    \"#272822\","},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    \"#f8f8f2\","},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    \"#75715e\","},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    \"#f92672\","},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    \"#a6e22e\","},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"    \"#f4bf75\","},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    \"#66d9ef\","},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    \"#ae81ff\","},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    \"#a1efe4\","},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    \"#f9f8f5\""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"  ],"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"  \"foreground\": \"#f8f8f2\","},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"  \"background\": \"#272822\""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"}"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":""}],"authorContributionMap":{"lue97":25}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":2,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"Assyarul"},"content":"        public void addGroup(Group group) {"},{"lineNumber":146,"author":{"gitId":"Assyarul"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":149,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"Assyarul"},"content":"        public boolean hasGroup(Group group) {"},{"lineNumber":151,"author":{"gitId":"Assyarul"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":154,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"Assyarul"},"content":"        public void deleteGroup(Group target) {"},{"lineNumber":156,"author":{"gitId":"Assyarul"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":159,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"Assyarul"},"content":"        public void setGroup(Name groupName, Group editedGroup) {"},{"lineNumber":161,"author":{"gitId":"Assyarul"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"Assyarul"},"content":"        public ObservableMap\u003cName, Group\u003e getGroupMap() {"},{"lineNumber":171,"author":{"gitId":"Assyarul"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":28,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":" * {@code AddGroupCommand}."},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"public class AddGroupCommandTest {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddGroupCommand(null, null));"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    public void execute_validIndexesUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        List\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        Person person1 \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d new GroupBuilder().withPersons(person1).build();"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(indexes, group.getName());"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        String expectedMessage \u003d String.format(AddGroupCommand.MESSAGE_ADD_GROUP_SUCCESS, group.getName());"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        expectedModel.addGroup(group);"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        assertCommandSuccess(addGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        List\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        indexes.add(outOfBoundIndex);"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(indexes, group.getName());"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        assertCommandFailure(addGroupCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":66}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"01-01-2000\";"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"05-05-1980\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"abc\"; // not proper format"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":112,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":6,"-":127}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"                + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"                 + BIRTHDAY_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"        // missing address prefix"},{"lineNumber":111,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":112,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB, expectedMessage);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"                + VALID_BIRTHDAY_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":131,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":135,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":137,"author":{"gitId":"Assyarul"},"content":"        // invalid birthday"},{"lineNumber":138,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitId":"Assyarul"},"content":"                + INVALID_BIRTHDAY_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Birthday.MESSAGE_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":143,"author":{"gitId":"Assyarul"},"content":"                + BIRTHDAY_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":35,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"public class AddGroupCommandParserTest {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    private AddGroupParser parser \u003d new AddGroupParser();"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public void parse_fieldsMissing_failure() {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        //missing persons"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        String invalidCommand \u003d \" n/ Close Friends\";"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        //missing name"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        invalidCommand \u003d \" p/ 1 2 3 4\";"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    public void parse_indexFieldEmpty_failure() {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        String invalidCommand \u003d \" n/ Close Friends p/ \";"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, invalidCommand, expectedMessage);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        List\u003cIndex\u003e expectedIndexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        expectedIndexes.add(Index.fromOneBased(1));"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        expectedIndexes.add(Index.fromOneBased(2));"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"        expectedIndexes.add(Index.fromOneBased(3));"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        Name expectedName \u003d new Name(\"Close Friends\");"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        String validCommand \u003d \" n/ Close Friends p/ 1 2 3\";"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        assertParseSuccess(parser, validCommand, new AddGroupCommand(expectedIndexes, expectedName));"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":53}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC, Birthday.MESSAGE_CONSTRAINTS); // invalid bday"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + BIRTHDAY_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":132,"author":{"gitId":"Assyarul"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":135,"author":{"gitId":"Assyarul"},"content":"                .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).build();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"Assyarul"},"content":"        // birthday"},{"lineNumber":169,"author":{"gitId":"Assyarul"},"content":"        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"},{"lineNumber":170,"author":{"gitId":"Assyarul"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"},{"lineNumber":171,"author":{"gitId":"Assyarul"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitId":"Assyarul"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":186,"author":{"gitId":"Assyarul"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":190,"author":{"gitId":"Assyarul"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).build();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":207,"author":{"gitId":"Assyarul"},"content":"                + PHONE_DESC_BOB + BIRTHDAY_DESC_BOB;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":209,"author":{"gitId":"Assyarul"},"content":"                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB).build();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":21,"-":203}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"import seedu.address.model.person.NameContainsPatternPredicate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":""},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"        expectedFindCommand \u003d new FindCommand(new NameContainsPatternPredicate(Pattern.compile(\"abc\")));"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"        assertParseSuccess(parser, \"abc p/\", expectedFindCommand);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":""},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"        expectedFindCommand \u003d new FindCommand(new NameContainsPatternPredicate(Pattern.compile(\".*\")));"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"        assertParseSuccess(parser, \".* p/\", expectedFindCommand);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":8,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/InputParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"public class InputParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    private final InputParser parser \u003d new InputParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":2,"-":99}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableMap;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson((Person) null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"        private final ObservableMap\u003cName, Group\u003e groups \u003d FXCollections.observableMap(new HashMap\u003c\u003e());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"        public ObservableMap\u003cName, Group\u003e getGroupMap() {"},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":"            return groups;"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":11,"-":101}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4, \"theme/mocha.dark.json\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"        GuiSettings guiSettings \u003d new GuiSettings("},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"                1, 2, 3, 4, \"theme/mocha.dark.json\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":3,"-":130}},{"path":"src/test/java/seedu/address/model/group/GroupHashMapTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"public class GroupHashMapTest {"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    private final GroupHashMap groupMap \u003d new GroupHashMap();"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private final Group group \u003d new GroupBuilder().build();"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    public void contains_nullGroup_throwsNullPointerException() {"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e groupMap.contains(null));"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public void contains_groupNotInMap_returnsFalse() {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        assertFalse(groupMap.contains(group));"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    public void contains_groupInMap_returnsTrue() {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        groupMap.add(group);"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        assertTrue(groupMap.contains(group));"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    public void contains_groupWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        groupMap.add(group);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        Group editedGroup \u003d new GroupBuilder().withPersons(ALICE).build();"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        assertTrue(groupMap.contains(editedGroup));"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    public void add_duplicateGroup_throwsDuplicateGroupException() {"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        groupMap.add(group);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        assertThrows(DuplicateGroupException.class, () -\u003e groupMap.add(group));"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":46}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"public class GroupTest {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    private Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    private final Name name \u003d new Name(\"test\");"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    private final Name diffName \u003d new Name(\"Test\");"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public void constructor_nullGroupName_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Group(null, personSet));"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    public void constructor_nullPersonSet_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Group(name, null));"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    public void isSameGroup() {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        Set\u003cPerson\u003e diffPersonSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        diffPersonSet.add(ALICE);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d new Group(name, personSet);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        Group diffGroup \u003d new Group(diffName, personSet);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        assertTrue(group.isSameGroup(group));"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        assertFalse(group.isSameGroup(null));"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        assertFalse(group.isSameGroup(diffGroup)); //different group name"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        diffGroup \u003d new Group(name, diffPersonSet);"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        assertTrue(group.isSameGroup(diffGroup)); //different group person sets."},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    public void equals() {"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        Set\u003cPerson\u003e diffPersonSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        diffPersonSet.add(ALICE);"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        Group group \u003d new Group(name, personSet);"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        Group diffGroup \u003d new Group(diffName, personSet);"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        assertTrue(group.equals(group));"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        assertFalse(group.equals(null));"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        assertFalse(group.equals(diffGroup)); //different group name"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        diffGroup \u003d new Group(name, diffPersonSet);"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        assertFalse(group.equals(diffGroup)); //different group person sets."},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":62}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class BirthdayTest {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthday((LocalDate) null));"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidAddress));"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    public void isValidBirthday() {"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        // null address"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        // invalid birthday"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        assertFalse(Birthday.isValidBirthday(\"99-99-9999\"));"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        // valid birthday"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        assertTrue(Birthday.isValidBirthday(\"01-01-1998\"));"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        assertTrue(Birthday.isValidBirthday(\"03-02-1998\"));"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        assertTrue(Birthday.isValidBirthday(\"02-01-2000\"));"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":39}},{"path":"src/test/java/seedu/address/model/person/NameContainsPatternPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":""},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":""},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":""},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"public class NameContainsPatternPredicateTest {"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":""},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    public final Pattern subStringPattern \u003d Pattern.compile(\"et\");"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    public final Pattern matchAllPattern \u003d Pattern.compile(\".*\");"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    public final Pattern startsWithAPattern \u003d Pattern.compile(\"^a\");"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    public final Pattern endsWithAPattern \u003d Pattern.compile(\"a$\");"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    public final Pattern startsAndEndWithAPattern \u003d Pattern.compile(\"^a.*a$\");"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":""},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"    private String[] nameArray \u003d new String[] {"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"        \"alpha beta charlie\","},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"        \"beta charlie\","},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        \"delta charlie alpha\","},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        \"beta beta beta\","},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"        \"alpha alpha charlie delta\","},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        \"alpha  alpha    charlie delta\""},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":""},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    private List\u003cString\u003e nameList \u003d Arrays.stream(nameArray).collect(Collectors.toList());"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":""},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    public List\u003cString\u003e filterList(List\u003cString\u003e nameList, Pattern pattern) {"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"        return nameList.stream()"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"                .map(name -\u003e new PersonBuilder().withName(name).build())"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"                .filter(new NameContainsPatternPredicate(pattern))"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"                .map(person -\u003e person.getName().toString())"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":""},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"    public void test_nameContainsPattern_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        List\u003cString\u003e correctList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":""},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha beta charlie\");"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta charlie\");"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta beta beta\");"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, subStringPattern));"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":""},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"        assertEquals(nameList, filterList(nameList, matchAllPattern));"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":""},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha beta charlie\");"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, startsWithAPattern));"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":""},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        correctList.add(\"delta charlie alpha\");"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"        correctList.add(\"beta beta beta\");"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, endsWithAPattern));"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"        correctList.clear();"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":""},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha alpha charlie delta\");"},{"lineNumber":68,"author":{"gitId":"lue97"},"content":"        correctList.add(\"alpha  alpha    charlie delta\");"},{"lineNumber":69,"author":{"gitId":"lue97"},"content":"        assertEquals(correctList, filterList(nameList, startsAndEndWithAPattern));"},{"lineNumber":70,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":71}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains((Person) null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":1,"-":169}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"abc\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    private static final String VALID_BIRTHDAY \u003d BENSON.getBirthday().toString();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitId":"chesterhow"},"content":"    private static final List\u003cJsonAdaptedEvent\u003e VALID_DATES \u003d BENSON.getDates().stream()"},{"lineNumber":38,"author":{"gitId":"chesterhow"},"content":"            .map(JsonAdaptedEvent::new)"},{"lineNumber":39,"author":{"gitId":"chesterhow"},"content":"            .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitId":"chesterhow"},"content":"    private static final List\u003cJsonAdaptedEvent\u003e VALID_MEETINGS \u003d BENSON.getMeetings().stream()"},{"lineNumber":41,"author":{"gitId":"chesterhow"},"content":"            .map(JsonAdaptedEvent::new)"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"            .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"    public void toModelType_invalidBirthday_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":118,"author":{"gitId":"Assyarul"},"content":"                INVALID_BIRTHDAY, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"        String expectedMessage \u003d Birthday.MESSAGE_CONSTRAINTS;"},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":121,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":"    public void toModelType_nullBirthday_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"                null, VALID_TAGS, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthday.class.getSimpleName());"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":135,"author":{"gitId":"ivantjh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":136,"author":{"gitId":"Assyarul"},"content":"                VALID_BIRTHDAY, invalidTags, VALID_DATES, VALID_MEETINGS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":33,"ivantjh":6,"-":96,"chesterhow":5}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"lue97"},"content":"        userPrefs.setGuiSettings(new GuiSettings("},{"lineNumber":76,"author":{"gitId":"lue97"},"content":"                1000, 500, 300, 100, null));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":107,"author":{"gitId":"lue97"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2, \"theme/mocha.dark.json\"));"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":118,"author":{"gitId":"lue97"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5, \"theme/mocha.dark.json\"));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":4,"-":120}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6, \"theme/mocha.dark.json\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lue97":1,"-":67}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        descriptor.setBirthday(person.getBirthday());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"     * Sets the {@code @birthday} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"    public EditPersonDescriptorBuilder withBirthday(String birthday) {"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"        descriptor.setBirthday(new Birthday(birthday));"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":12,"-":87}},{"path":"src/test/java/seedu/address/testutil/GroupBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class GroupBuilder {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public static final String DEFAULT_NAME \u003d \"Close Friends\";"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public static final Set\u003cPerson\u003e DEFAULT_SET \u003d new HashSet\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private Name name;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    private Set\u003cPerson\u003e persons;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * Creates a {@code GroupBuilder} with the default details."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public GroupBuilder() {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        persons \u003d DEFAULT_SET;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Creates a {@code GroupBuilder} with the data of {@code groupToCopy}."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    public GroupBuilder(Group groupToCopy) {"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        name \u003d groupToCopy.getName();"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        persons \u003d new HashSet\u003c\u003e(groupToCopy.getPersons());"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     * Sets the {@code Name} of the {@code Group} that we are building."},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    public GroupBuilder withName(String name) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        return this;"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"     * Parses the {@code persons} into a {@code Set\u003cPerson\u003e} and set it to the {@code Group} that we are building."},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    public GroupBuilder withPersons(Person ... persons) {"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        this.persons \u003d SampleDataUtil.getPersonSet(persons);"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"    public Group build() {"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        return new Group(name, persons);"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":54}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"chesterhow"},"content":"import seedu.address.model.person.Event;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    public static final String DEFAULT_BIRTHDAY \u003d \"02-03-1995\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    private Birthday birthday;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitId":"chesterhow"},"content":"    private List\u003cEvent\u003e dates;"},{"lineNumber":36,"author":{"gitId":"chesterhow"},"content":"    private List\u003cEvent\u003e meetings;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        birthday \u003d new Birthday(DEFAULT_BIRTHDAY);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"chesterhow"},"content":"        dates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        meetings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"        birthday \u003d personToCopy.getBirthday();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":62,"author":{"gitId":"chesterhow"},"content":"        dates \u003d new ArrayList\u003c\u003e(personToCopy.getDates());"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"        meetings \u003d new ArrayList\u003c\u003e(personToCopy.getMeetings());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"     * Sets the {@code Birthday} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"    public PersonBuilder withBirthday(String birthday) {"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"        this.birthday \u003d new Birthday(birthday);"},{"lineNumber":111,"author":{"gitId":"Assyarul"},"content":"        return this;"},{"lineNumber":112,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"        return new Person(name, phone, email, address, birthday, tags, dates, meetings);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":15,"ivantjh":4,"-":95,"chesterhow":5}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        sb.append(PREFIX_BIRTHDAY + person.getBirthday().toString() + \" \");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":40,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        descriptor.getBirthday().ifPresent(birthday -\u003e sb.append(PREFIX_BIRTHDAY).append(birthday.toString())"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"                .append(\" \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":4,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"            .withPhone(\"94351253\").withBirthday(\"01-01-1998\")"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBirthday(\"01-02-1998\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"01-01-1998\").build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            .withBirthday(\"01-03-1998\").withTags(\"friends\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"01-04-1998\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"01-05-2000\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"15-12-1960\").build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withBirthday(\"01-01-1980\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withBirthday(\"01-02-1981\").build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"            .withBirthday(VALID_BIRTHDAY_AMY).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":17,"-":63}},{"path":"src/test/java/seedu/address/ui/ThemeFactoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":""},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":""},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"import seedu.address.ui.exceptions.InvalidThemeException;"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":""},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"public class ThemeFactoryTest {"},{"lineNumber":17,"author":{"gitId":"lue97"},"content":""},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"    private static final Path VALID_PATH \u003d Paths.get(\"src/test/data/ThemeTest/valid.theme.json\");"},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    private static final Path NOT_EXIST_PATH \u003d Paths.get(\"abc\");"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    private static final Path INVALID_CONTENT_PATH \u003d Paths.get(\"src/test/data/ThemeTest/invalid.content.txt\");"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    private static final Path INVALID_THEME_PATH \u003d Paths.get(\"src/test/data/ThemeTest/invalid.theme.json\");"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"    private static final Path INVALID_JSON_PATH \u003d Paths.get(\"src/test/data/ThemeTest/malformed.theme.json\");"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"    private static final String DEFAULT_FOREGROUND \u003d \"#f8f8f2\";"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"    private static final String DEFAULT_BACKGROUND \u003d \"#272822\";"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"    private static final String[] DEFAULT_COLOR \u003d new String[] {"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        \"#272822\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f8f8f2\","},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        \"#75715e\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f9f8f5\""},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":32,"author":{"gitId":"lue97"},"content":""},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"    private static final Theme DEFAULT_THEME \u003d ThemeFactory.getDefaultTheme();"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    private static final Theme t1 \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR);"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":""},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"    public void themeFactory_defaultThemeEquals_success() {"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"        assertEquals(t1, DEFAULT_THEME);"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":""},{"lineNumber":41,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"    public void themeFactory_loadValidTheme_success() {"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"        Theme t \u003d assertDoesNotThrow(() -\u003e ThemeFactory.load(VALID_PATH));"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        assertEquals(ThemeFactory.getDefaultTheme(), t);"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":""},{"lineNumber":47,"author":{"gitId":"lue97"},"content":"    @Test void themeFactory_loadInvalidTheme_failure() {"},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"        assertThrows(FileNotFoundException.class, () -\u003e ThemeFactory.load(NOT_EXIST_PATH),"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"                new FileNotFoundException().toString());"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":""},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"        assertThrows(InvalidThemeException.class, () -\u003e ThemeFactory.load(INVALID_THEME_PATH),"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":"                new InvalidThemeException(\"Invalid theme supplied\").toString());"},{"lineNumber":53,"author":{"gitId":"lue97"},"content":""},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"        assertThrows(DataConversionException.class, () -\u003e ThemeFactory.load(INVALID_JSON_PATH));"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":""},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"        assertThrows(DataConversionException.class, () -\u003e ThemeFactory.load(INVALID_CONTENT_PATH));"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"lue97"},"content":""},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":59}},{"path":"src/test/java/seedu/address/ui/ThemeManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":""},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"lue97"},"content":""},{"lineNumber":9,"author":{"gitId":"lue97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"lue97"},"content":""},{"lineNumber":11,"author":{"gitId":"lue97"},"content":"public class ThemeManagerTest {"},{"lineNumber":12,"author":{"gitId":"lue97"},"content":""},{"lineNumber":13,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    public void themeManager_init_success() {"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"        ThemeManager.init();"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"        assertEquals(ThemeManager.getTheme(), ThemeFactory.getDefaultTheme());"},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lue97"},"content":""},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"    public void themeManager_setTheme_success() {"},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"        ThemeManager.setTheme("},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"                ThemeFactory.getDefaultTheme(), \"src/test/data/ThemeTest/valid.theme.json\");"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"        String defaultCss \u003d assertDoesNotThrow(() -\u003e Files"},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"                .readString(Path.of(\"src/test/data/ThemeTest/default.template.css\")));"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"        assertEquals(ThemeFactory.getDefaultTheme(), ThemeManager.getTheme());"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        assertEquals(\"src/test/data/ThemeTest/valid.theme.json\", ThemeManager.getThemePath());"},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        String cssCache \u003d assertDoesNotThrow(() -\u003e Files.readString(Path.of(ThemeManager.getCssCacheUri())));"},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"        assertEquals(defaultCss.replaceAll(\"\\\\s\", \"\"), cssCache.replaceAll(\"\\\\s\", \"\"));"},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":""},{"lineNumber":31,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":31}},{"path":"src/test/java/seedu/address/ui/ThemeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lue97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"lue97"},"content":""},{"lineNumber":3,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"lue97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"lue97"},"content":""},{"lineNumber":8,"author":{"gitId":"lue97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"lue97"},"content":""},{"lineNumber":10,"author":{"gitId":"lue97"},"content":"public class ThemeTest {"},{"lineNumber":11,"author":{"gitId":"lue97"},"content":""},{"lineNumber":12,"author":{"gitId":"lue97"},"content":"    private static final String INVALID_COLOR \u003d \"#abcdez\";"},{"lineNumber":13,"author":{"gitId":"lue97"},"content":""},{"lineNumber":14,"author":{"gitId":"lue97"},"content":"    private static final String DEFAULT_FOREGROUND \u003d \"#f8f8f2\";"},{"lineNumber":15,"author":{"gitId":"lue97"},"content":"    private static final String DEFAULT_BACKGROUND \u003d \"#272822\";"},{"lineNumber":16,"author":{"gitId":"lue97"},"content":"    private static final String[] DEFAULT_COLOR \u003d new String[] {"},{"lineNumber":17,"author":{"gitId":"lue97"},"content":"        \"#272822\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":18,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f8f8f2\","},{"lineNumber":19,"author":{"gitId":"lue97"},"content":"        \"#75715e\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":20,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f9f8f5\""},{"lineNumber":21,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":22,"author":{"gitId":"lue97"},"content":"    private static final String[] DEFAULT_COLOR_INVALID_LENGTH \u003d new String[] {"},{"lineNumber":23,"author":{"gitId":"lue97"},"content":"        \"#272822\", \"#f92672\", \"#a6e22e\", \"#f4bf75\""},{"lineNumber":24,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":25,"author":{"gitId":"lue97"},"content":"    private static final String[] DEFAULT_COLOR_INVALID_COLOR \u003d new String[] {"},{"lineNumber":26,"author":{"gitId":"lue97"},"content":"        \"#272822\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":27,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", \"#f8f8f2\","},{"lineNumber":28,"author":{"gitId":"lue97"},"content":"        \"#75715e\", \"#f92672\", \"#a6e22e\", \"#f4bf75\","},{"lineNumber":29,"author":{"gitId":"lue97"},"content":"        \"#66d9ef\", \"#ae81ff\", \"#a1efe4\", INVALID_COLOR"},{"lineNumber":30,"author":{"gitId":"lue97"},"content":"    };"},{"lineNumber":31,"author":{"gitId":"lue97"},"content":""},{"lineNumber":32,"author":{"gitId":"lue97"},"content":"    private final Theme t1 \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR);"},{"lineNumber":33,"author":{"gitId":"lue97"},"content":"    private final Theme t2 \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR);"},{"lineNumber":34,"author":{"gitId":"lue97"},"content":"    private final Theme t3 \u003d new Theme(\"#FFFFFF\", DEFAULT_BACKGROUND, DEFAULT_COLOR);"},{"lineNumber":35,"author":{"gitId":"lue97"},"content":"    private final Theme invalidLength \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR_INVALID_LENGTH);"},{"lineNumber":36,"author":{"gitId":"lue97"},"content":"    private final Theme invalidForeground \u003d new Theme(INVALID_COLOR, DEFAULT_BACKGROUND, DEFAULT_COLOR_INVALID_COLOR);"},{"lineNumber":37,"author":{"gitId":"lue97"},"content":"    private final Theme invalidBackground \u003d new Theme(DEFAULT_FOREGROUND, INVALID_COLOR, DEFAULT_COLOR_INVALID_COLOR);"},{"lineNumber":38,"author":{"gitId":"lue97"},"content":"    private final Theme emptyColor \u003d new Theme(\"\", \"\", DEFAULT_COLOR);"},{"lineNumber":39,"author":{"gitId":"lue97"},"content":"    private final Theme invalidColor \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, DEFAULT_COLOR_INVALID_COLOR);"},{"lineNumber":40,"author":{"gitId":"lue97"},"content":"    private final Theme nullColor \u003d new Theme(DEFAULT_FOREGROUND, DEFAULT_BACKGROUND, null);"},{"lineNumber":41,"author":{"gitId":"lue97"},"content":""},{"lineNumber":42,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"lue97"},"content":"    public void theme_equalTheme_success() {"},{"lineNumber":44,"author":{"gitId":"lue97"},"content":"        assertEquals(t1, t1);"},{"lineNumber":45,"author":{"gitId":"lue97"},"content":"        assertEquals(t1, t2);"},{"lineNumber":46,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lue97"},"content":""},{"lineNumber":48,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"lue97"},"content":"    public void theme_equalTheme_failure() {"},{"lineNumber":50,"author":{"gitId":"lue97"},"content":"        assertNotEquals(t1, t3);"},{"lineNumber":51,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"lue97"},"content":""},{"lineNumber":53,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"lue97"},"content":"    public void theme_validTheme_success() {"},{"lineNumber":55,"author":{"gitId":"lue97"},"content":"        assertTrue(t1.isValid());"},{"lineNumber":56,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"lue97"},"content":""},{"lineNumber":58,"author":{"gitId":"lue97"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"lue97"},"content":"    public void theme_invalidTheme_failure() {"},{"lineNumber":60,"author":{"gitId":"lue97"},"content":"        assertFalse(invalidColor.isValid());"},{"lineNumber":61,"author":{"gitId":"lue97"},"content":"        assertFalse(invalidLength.isValid());"},{"lineNumber":62,"author":{"gitId":"lue97"},"content":"        assertFalse(invalidForeground.isValid());"},{"lineNumber":63,"author":{"gitId":"lue97"},"content":"        assertFalse(invalidBackground.isValid());"},{"lineNumber":64,"author":{"gitId":"lue97"},"content":"        assertFalse(emptyColor.isValid());"},{"lineNumber":65,"author":{"gitId":"lue97"},"content":"        assertFalse(nullColor.isValid());"},{"lineNumber":66,"author":{"gitId":"lue97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"lue97"},"content":"}"}],"authorContributionMap":{"lue97":67}}]
