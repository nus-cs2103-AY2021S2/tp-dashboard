[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# PocketEstate"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"w-yuchen"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T13-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T13-4/tp/actions/workflows/gradle.yml)"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price, location and housing type, that may otherwise be difficult to manage. "},{"lineNumber":7,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":8,"author":{"gitId":"w-yuchen"},"content":"## User guide"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"For more information on how to use PocketEstate, please refer to our [User Guide](https://ay2021s2-cs2103t-t13-4.github.io/tp/UserGuide.html)."},{"lineNumber":10,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":11,"author":{"gitId":"w-yuchen"},"content":"## Developer Guide"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"For more information on the development of PocketEstate, please refer to our [Developer Guide](https://ay2021s2-cs2103t-t13-4.github.io/tp/DeveloperGuide.html)."},{"lineNumber":13,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":14,"author":{"gitId":"w-yuchen"},"content":"## About Us"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"We are a team of 5 from the School of Computing, National University of Singapore. For more information, please refer to [About Us](https://ay2021s2-cs2103t-t13-4.github.io/tp/AboutUs.html)."},{"lineNumber":16,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":17,"author":{"gitId":"w-yuchen"},"content":"## Acknowledgement"},{"lineNumber":18,"author":{"gitId":"w-yuchen"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"-":5,"w-yuchen":10,"w2vgd":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"w-yuchen"},"content":"### Wang Yuchen"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"w-yuchen"},"content":"\u003cimg src\u003d\"images/w-yuchen.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"w-yuchen"},"content":"[[github](http://github.com/w-yuchen)]"},{"lineNumber":17,"author":{"gitId":"w-yuchen"},"content":"[[portfolio](team/w-yuchen.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"* Role: Developer"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"* Responsibilities: Documentation, Testing"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"candyhy"},"content":"### Yeoh Hsin Ying Candice"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"candyhy"},"content":"\u003cimg src\u003d\"images/candyhy.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"candyhy"},"content":"[[github](http://github.com/candyhy)]"},{"lineNumber":27,"author":{"gitId":"candyhy"},"content":"[[portfolio](team/candyhy.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"candyhy"},"content":"* Responsibilities: Scheduling and tracking"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"### Tan Jun Wei"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"\u003cimg src\u003d\"images/w2vgd.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"[[github](http://github.com/w2vgd)]"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"[[portfolio](team/w2vgd.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"* Role: Team Lead, Developer"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"* Responsibilities: Deliverables and deadlines"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"dvdweien"},"content":"### David Au Wei En"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"dvdweien"},"content":"\u003cimg src\u003d\"images/dvdweien.png\" width\u003d\"200px\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"dvdweien"},"content":"[[github](http://github.com/dvdweien)]"},{"lineNumber":48,"author":{"gitId":"dvdweien"},"content":"[[portfolio](team/dvdweien.md)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"dvdweien"},"content":"* Responsibilities: Integration"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Cp-John"},"content":"### Cao Peng"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"Cp-John"},"content":"\u003cimg src\u003d\"images/cp-john.png\" width\u003d\"200px\"\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"Cp-John"},"content":"[[github](http://github.com/cp-john)]"},{"lineNumber":58,"author":{"gitId":"Cp-John"},"content":"[[portfolio](team/cp-john.md)]"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":61,"author":{"gitId":"Cp-John"},"content":"* Responsibilities: Code Quality"}],"authorContributionMap":{"dvdweien":5,"Cp-John":5,"candyhy":5,"-":34,"w-yuchen":4,"w2vgd":8}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"w2vgd"},"content":"* property agent who has a need to manage a significant number of properties and appointments"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"w-yuchen"},"content":"**Value proposition**: PocketEstate enables easy organization of mass clientele property information through sorting of information by price, location and housing type, that may otherwise be difficult to manage."},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                                                            | So that I can…​                                                                |"},{"lineNumber":253,"author":{"gitId":"w2vgd"},"content":"| -------- | ------------------------------------------ | -------------------------------------------------------------------------- | --------------------------------------------------------------------------------- |"},{"lineNumber":254,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions                                                     | refer to instructions when I forget how to use the App                            |"},{"lineNumber":255,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | be able to add a property                                                  | keep track of my clients\u0027 properties                                              |"},{"lineNumber":256,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | be able to add an appointment                                              | keep track of my upcoming schedule                                                |"},{"lineNumber":257,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | list all properties on sale                                                | know the number of properties that I have to sell                                 |"},{"lineNumber":258,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | list all properties on sale                                                | know which properties I have to sell                                              |"},{"lineNumber":259,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | view the client asking price of a property                                 | keep the price in mind when negotiating with the buyer                            |"},{"lineNumber":260,"author":{"gitId":"w-yuchen"},"content":"| `* * *`  | user                                       | view the properties in the order of nearest deadline                       | prioritize selling properties with a more urgent deadline                         |"},{"lineNumber":261,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | potential user exploring the app           | see the app populated with sample data                                     | easily see how the app looks like when it is in use                               |"},{"lineNumber":262,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | careless user                              | be able to categorize housing information based on predefined tags         | prevent typos while keying in information and avoid storing the wrong information |"},{"lineNumber":263,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | user                                       | update the status of property listings(completed, Option, Sale Agreement)  | follow up with clients on time                                                    |"},{"lineNumber":264,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | user                                       | edit the deadline of the property listing                                  | extend the time period for selling the property                                   |"},{"lineNumber":265,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | user                                       | edit the name of the property listing                                      | change the name of the property when I have made a mistake                        |"},{"lineNumber":266,"author":{"gitId":"w-yuchen"},"content":"| `* *`    | user                                       | edit the address of the property listing                                   | change the address of the property when I have made a mistake                     |"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"w-yuchen"},"content":"(For all use cases below, the **System** is the `PocketEsate` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC01 - Add a property**"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"w-yuchen"},"content":"1. User request to add a property"},{"lineNumber":279,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows an updated list of properties"},{"lineNumber":280,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":281,"author":{"gitId":"w-yuchen"},"content":"   Use case ends."},{"lineNumber":282,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":283,"author":{"gitId":"w-yuchen"},"content":"**Extensions**"},{"lineNumber":284,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":285,"author":{"gitId":"w-yuchen"},"content":"* 1a. The property to be added has missing required fields."},{"lineNumber":286,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":287,"author":{"gitId":"w-yuchen"},"content":"    * 1a1. PocketEstate shows an error message."},{"lineNumber":288,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":289,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":290,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":291,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":292,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC02 - Add an appointment**"},{"lineNumber":293,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":294,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":295,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":296,"author":{"gitId":"w-yuchen"},"content":"1. User request to add an appointment"},{"lineNumber":297,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows an updated list of appointments"},{"lineNumber":298,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":299,"author":{"gitId":"w-yuchen"},"content":"   Use case ends."},{"lineNumber":300,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":301,"author":{"gitId":"w-yuchen"},"content":"**Extensions**"},{"lineNumber":302,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":303,"author":{"gitId":"w-yuchen"},"content":"* 1a. The appointment to be added has missing required fields."},{"lineNumber":304,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":305,"author":{"gitId":"w-yuchen"},"content":"    * 1a1. PocketEstate shows an error message."},{"lineNumber":306,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":307,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":308,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":309,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC03 - Listing all properties and appointments**"},{"lineNumber":310,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":311,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":312,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":313,"author":{"gitId":"w-yuchen"},"content":"1. User requests to list all properties and appointments."},{"lineNumber":314,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows the entire list of properties and appointments."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"w-yuchen"},"content":"* 3a. List command used has unrecognized fields."},{"lineNumber":321,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":322,"author":{"gitId":"w-yuchen"},"content":"    * 3a1. PocketEstate shows an error message."},{"lineNumber":323,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":324,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":325,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":326,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC04 - Edit a property**"},{"lineNumber":327,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":328,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":329,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":330,"author":{"gitId":"w-yuchen"},"content":"1. User request to edit a property"},{"lineNumber":331,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows an updated list of properties"},{"lineNumber":332,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":333,"author":{"gitId":"w-yuchen"},"content":"   Use case ends."},{"lineNumber":334,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":335,"author":{"gitId":"w-yuchen"},"content":"**Extensions**"},{"lineNumber":336,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":337,"author":{"gitId":"w-yuchen"},"content":"* 1a. The property to be edited has unrecognized fields."},{"lineNumber":338,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":339,"author":{"gitId":"w-yuchen"},"content":"    * 1a1. PocketEstate shows an error message with the unrecognized fields."},{"lineNumber":340,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":341,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":342,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":343,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":344,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC05 - Edit an appointment**"},{"lineNumber":345,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":346,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":347,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":348,"author":{"gitId":"w-yuchen"},"content":"1. User request to edit an appointment"},{"lineNumber":349,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows an updated list of appointments"},{"lineNumber":350,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":351,"author":{"gitId":"w-yuchen"},"content":"   Use case ends."},{"lineNumber":352,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":353,"author":{"gitId":"w-yuchen"},"content":"**Extensions**"},{"lineNumber":354,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":355,"author":{"gitId":"w-yuchen"},"content":"* 1a. The appointment to be edited has unrecognized fields."},{"lineNumber":356,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":357,"author":{"gitId":"w-yuchen"},"content":"    * 1a1. PocketEstate shows an error message with the unrecognized fields."},{"lineNumber":358,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":359,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":360,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":361,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC06 - Update status of a property**"},{"lineNumber":362,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":363,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":364,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":365,"author":{"gitId":"w-yuchen"},"content":"1. User request to update status of a property"},{"lineNumber":366,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows an updated list of properties"},{"lineNumber":367,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":368,"author":{"gitId":"w-yuchen"},"content":"   Use case ends."},{"lineNumber":369,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":370,"author":{"gitId":"w-yuchen"},"content":"**Extensions**"},{"lineNumber":371,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":372,"author":{"gitId":"w-yuchen"},"content":"* 1a. The property to be updated has incorrect fields."},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"w-yuchen"},"content":"    * 1a1. PocketEstate shows an error message."},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"w-yuchen"},"content":"      Use case ends."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC07 - Searching for property**"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":381,"author":{"gitId":"w-yuchen"},"content":"1. User requests to search for properties of a certain type."},{"lineNumber":382,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows a list of properties that are of that type."},{"lineNumber":383,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":384,"author":{"gitId":"w-yuchen"},"content":"    Use case ends."},{"lineNumber":385,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":386,"author":{"gitId":"w-yuchen"},"content":"**Use case: UC08 - Searching for appointment**"},{"lineNumber":387,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":388,"author":{"gitId":"w-yuchen"},"content":"**MSS**"},{"lineNumber":389,"author":{"gitId":"w-yuchen"},"content":"1. User requests to search for appointments with a certain person."},{"lineNumber":390,"author":{"gitId":"w-yuchen"},"content":"2. PocketEstate shows a list of all appointments with that person."},{"lineNumber":391,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":392,"author":{"gitId":"w-yuchen"},"content":"    Use case ends."},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":399,"author":{"gitId":"w-yuchen"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster by using commands over the mouse."},{"lineNumber":400,"author":{"gitId":"w-yuchen"},"content":"3. Should be able to hold up to 500 properties and 500 appointments concurrently without a noticeable sluggishness in performance for typical usage."},{"lineNumber":401,"author":{"gitId":"w-yuchen"},"content":"4. The app should respond within two seconds after each user command."},{"lineNumber":402,"author":{"gitId":"w-yuchen"},"content":"5. The GUI of the app should clearly differentiate the different property types (HDB ![hdb_icon](images/hdb_16.png), Condo ![condo_icon](images/condo_16.png), Landed ![landed_icon](images/landed_16.png), etc.) of each property in the list."},{"lineNumber":403,"author":{"gitId":"w-yuchen"},"content":"6. The app should be able to run without internet connection."},{"lineNumber":404,"author":{"gitId":"w-yuchen"},"content":"7. The app should be resizable and can be enlarged to the maximum window width."},{"lineNumber":405,"author":{"gitId":"w-yuchen"},"content":"8. There should be sample data in the app when the user opens the app for the first time."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":412,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":413,"author":{"gitId":"w-yuchen"},"content":"* **Property**: A property listing with mandatory attributes: Name, Property type, Address, Postal code and Deadline,"},{"lineNumber":414,"author":{"gitId":"w-yuchen"},"content":"    optional attributes: Client name, Client contact, Client email, Client asking price, Remarks"},{"lineNumber":415,"author":{"gitId":"w-yuchen"},"content":"* **Appointment**: An appointment listing with mandatory attributes: Name, Remarks, Date,  optional attribute: Time"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":441,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":452,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":455,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":458,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"-":335,"w2vgd":2,"w-yuchen":131}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"PocketEstate enables easy organization of mass clientele property information through sorting of information by price, location and housing type, that may otherwise be difficult to manage."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"1. Download the latest `pocketestate.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your PocketEstate."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"candyhy"},"content":"   * **`list`** : Lists all properties and appointments in the app."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"   * **`add property`**`n/Mayfair t/Condo a/1 Jurong East Street 32 p/609477 d/31-12-2021` : Adds a property with the corresponding information to the PocketEstate app."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"   * **`delete property`**`2` : Deletes the 2nd property shown in the current list of properties."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"  e.g. in `add property n/NAME`, `NAME` is a parameter which can be used as `add property n/Mayfair`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"  e.g `add appointment n/NAME r/REMARKS d/DATE [t/TIME]` can be used as `add appointment n/Meet John r/At M Hotel d/17-2-2021` or as `add appointment n/Meet John r/At M Hotel d/17-2-2021 t/2040`."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"  e.g. if the command specifies `n/NAME r/REMARKS`, `r/REMARKS n/NAME` is also acceptable."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"  e.g. if you specify `n/John n/Alice`, only `n/Alice` will be taken."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"w-yuchen"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"### Adding a property: `add property`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"Adds a property to the app."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"Format: `add property n/NAME t/PROPERTY_TYPE a/ADDRESS p/POSTAL_CODE d/DEADLINE [r/REMARKS] [cn/CLIENT_NAME] [cc/CLIENT_CONTACT_NUMBER] [ce/CLIENT_EMAIL] [ca/CLIENT_ASKING_PRICE]​`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"Examples:"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"* `add property n/Mayfair t/Condo a/1 Jurong East Street 32 p/609477 d/31-12-2021`"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"* `add property n/Mayfair t/Condo a/1 Jurong East Street 32 p/609477 d/31-12-2021 r/Urgent to sell cn/Alice cc/91234567 ce/alice@gmail.com ca/$800,000`"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"### Adding an appointment: `add appointment`"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"Adds an appointment to the app."},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"Format: `add appointment n/NAME r/REMARKS d/DATE [t/TIME]​`"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"* `add appointment n/Meet Alex r/At M Hotel d/17-2-2021`"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"* `add appointment n/Meet Alex r/At M Hotel d/17-2-2021 t/1500`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"candyhy"},"content":"### Listing all properties and appointments : `list`"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"candyhy"},"content":"Shows a list of all properties and appointments in the app."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"Cp-John"},"content":"### Sorting : `sort`"},{"lineNumber":99,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":100,"author":{"gitId":"Cp-John"},"content":"Sorts and shows a list of properties or appointments that is sorted according to the comparator provided."},{"lineNumber":101,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":102,"author":{"gitId":"Cp-John"},"content":"Formats:"},{"lineNumber":103,"author":{"gitId":"Cp-John"},"content":"* `sort appointment [asc or desc] \u003cdeadline or task type\u003e`"},{"lineNumber":104,"author":{"gitId":"Cp-John"},"content":"* `sort property [asc or desc] \u003cprice or location or housing type\u003e`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"Cp-John"},"content":"Description:"},{"lineNumber":107,"author":{"gitId":"Cp-John"},"content":"* Sorts appointment or property by the specified sorting key in ascending or descending order."},{"lineNumber":108,"author":{"gitId":"Cp-John"},"content":"* The default order is `asc` if the order field is not specified."},{"lineNumber":109,"author":{"gitId":"Cp-John"},"content":"* The sorting key field must be specified."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Cp-John"},"content":"Examples:"},{"lineNumber":112,"author":{"gitId":"Cp-John"},"content":"*  `sort appointment asc deadline` Sorts `appointment` by `deadline` in ascending order."},{"lineNumber":113,"author":{"gitId":"Cp-John"},"content":"*  `sort property desc price` Sorts `property` by `price` in descending order."},{"lineNumber":114,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"### Editing a property : `edit property`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"dvdweien"},"content":"Overwrites the information of the property according to the flags provided."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"dvdweien"},"content":"Formats: `edit property INDEX [n/NAME] [t/PROPERTY_TYPE] [a/ADDRESS] [p/POSTAL_CODE] [d/DEADLINE] [r/REMARKS] [cn/CLIENT_NAME] [cc/CLIENT_CONTACT_NUMBER] [ce/CLIENT_EMAIL] [ca/CLIENT_ASKING_PRICE]`"},{"lineNumber":120,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":121,"author":{"gitId":"dvdweien"},"content":"Description:"},{"lineNumber":122,"author":{"gitId":"dvdweien"},"content":"* Edits the entry at the specified `INDEX`. The index refers to the index number shown in the displayed list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"dvdweien"},"content":"*  `edit property 1 r/Urgent to sell cn/Alice` Edits the remark and client name of the 1st property to be `Urgent to sell` and `Alice` respectively."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"dvdweien"},"content":"### Editing an appointment : `edit appointment`"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"dvdweien"},"content":"Overwrites the information of the appointment according to the flags provided."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"dvdweien"},"content":"Formats: `edit appointment INDEX [n/NAME] [r/REMARKS] [d/DATE] [t/TIME]`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"dvdweien"},"content":"Description:"},{"lineNumber":136,"author":{"gitId":"dvdweien"},"content":"* Edits the entry at the specified `INDEX`. The index refers to the index number shown in the displayed list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":137,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":138,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":141,"author":{"gitId":"dvdweien"},"content":"*  `edit appointment 3 d/2021-03-28 r/at M hotel` Edits the date and remark of the 3rd appointment to be `2021-03-28` and `at M hotel` respectively."},{"lineNumber":142,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":143,"author":{"gitId":"dvdweien"},"content":"### Updating the status of a property : `update`"},{"lineNumber":144,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":145,"author":{"gitId":"dvdweien"},"content":"Updates the status of a property from Option to Purchase, to Sales and Purchase Agreement to Completion"},{"lineNumber":146,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":147,"author":{"gitId":"dvdweien"},"content":"Formats:"},{"lineNumber":148,"author":{"gitId":"dvdweien"},"content":"* `update INDEX new AMOUNT`"},{"lineNumber":149,"author":{"gitId":"dvdweien"},"content":"* `update INDEX [proceed][cancel]`"},{"lineNumber":150,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":151,"author":{"gitId":"dvdweien"},"content":"Description:"},{"lineNumber":152,"author":{"gitId":"dvdweien"},"content":"* Edits the property at the specified `INDEX`. The index refers to the index number shown in the displayed list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":153,"author":{"gitId":"dvdweien"},"content":"* The `new` keyword can only be used on a property without an existing status"},{"lineNumber":154,"author":{"gitId":"dvdweien"},"content":"* `proceed` or `cancel` can only be used on a property with an existing status"},{"lineNumber":155,"author":{"gitId":"dvdweien"},"content":"* `proceed` would move the status on to the next one. e.g. Option to Sales Agreement or Sales Agreement to Completion"},{"lineNumber":156,"author":{"gitId":"dvdweien"},"content":"* `cancel` would remove the status of the property"},{"lineNumber":157,"author":{"gitId":"dvdweien"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":158,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":159,"author":{"gitId":"dvdweien"},"content":"Examples:"},{"lineNumber":160,"author":{"gitId":"dvdweien"},"content":"*  `update 1 new 600000` Creates a new status with amount 600000 for the 1st property."},{"lineNumber":161,"author":{"gitId":"dvdweien"},"content":"*  `update 3 proceed` Moves the status of the 3rd property to next one."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"Cp-John"},"content":"### Removing an entry : `delete`"},{"lineNumber":164,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":165,"author":{"gitId":"Cp-John"},"content":"Deletes the specified property or appointment from the app."},{"lineNumber":166,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":167,"author":{"gitId":"Cp-John"},"content":"Formats:"},{"lineNumber":168,"author":{"gitId":"Cp-John"},"content":"* `delete appointment INDEX`"},{"lineNumber":169,"author":{"gitId":"Cp-John"},"content":"* `delete property INDEX`"},{"lineNumber":170,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":171,"author":{"gitId":"Cp-John"},"content":"Description:"},{"lineNumber":172,"author":{"gitId":"w-yuchen"},"content":"* Deletes the appointment or property at the specified `INDEX`. The index refers to the index number shown in the displayed list. The index **must be a positive integer** 1, 2, 3, …"},{"lineNumber":173,"author":{"gitId":"Cp-John"},"content":"* The field INDEX must be provided."},{"lineNumber":174,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":175,"author":{"gitId":"Cp-John"},"content":"Examples:"},{"lineNumber":176,"author":{"gitId":"Cp-John"},"content":"*  `delete appointment 7` Deletes the `appointment` at index `7`."},{"lineNumber":177,"author":{"gitId":"Cp-John"},"content":"*  `delete property 7` Deletes the `property` at index `7`."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"w-yuchen"},"content":"### Filtering: `find`"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":181,"author":{"gitId":"w-yuchen"},"content":"Finds properties or appointments that matches the criterion provided."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"w-yuchen"},"content":"Formats:"},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"* `find appointment [keywords] [option...]`"},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":"* `find property [keywords] [option...]`"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"Description:"},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"* There can be 0 or more keywords and 0 or more options, but keywords and options cannot be both empty."},{"lineNumber":189,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":190,"author":{"gitId":"w-yuchen"},"content":"Options:"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"* `r/[REMARKS]`"},{"lineNumber":192,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":193,"author":{"gitId":"w-yuchen"},"content":"Search for properties or appointments whose remarks field contain patterns specified in `[REMARKS]`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"w2vgd"},"content":"* `pm/[PRICE]`"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"w-yuchen"},"content":"Search for properties with prices more than `[PRICE]`, ignored if used with appointment"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"w2vgd"},"content":"* `pl/[PRICE]`"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"Search for properties with prices less than `[PRICE]`, ignored if used with appointment"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":"* `find property \"jurong west\"`"},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"* `find appointment \"fri\" r/\"come in afternoon\"`"},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"* `find property pm/500000`"},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":"* `find property \"bishan\" \"north\" \"mrt\" r/\"recently renovated\"`"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"w2vgd"},"content":"Clears all properties or appointments from the app."},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"w2vgd"},"content":"Formats:"},{"lineNumber":214,"author":{"gitId":"w2vgd"},"content":"* `clear property`"},{"lineNumber":215,"author":{"gitId":"w2vgd"},"content":"* `clear appointment`"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"w2vgd"},"content":"PocketEstate data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"w2vgd"},"content":"PocketEstate data are saved as a JSON file `[JAR file location]/data/pocketestate.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":232,"author":{"gitId":"w2vgd"},"content":"If your changes to the data file makes its format invalid, PocketEstate will discard all data and start with an empty data file at the next run."},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":244,"author":{"gitId":"w2vgd"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous PocketEstate home folder."},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":251,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":252,"author":{"gitId":"w2vgd"},"content":"**Add property** | `add property n/NAME t/PROPERTY_TYPE a/ADDRESS p/POSTAL_CODE d/DEADLINE [r/REMARKS] [cn/CLIENT_NAME] [cc/CLIENT_CONTACT_NUMBER] [ce/CLIENT_EMAIL] [ca/CLIENT_ASKING_PRICE]` \u003cbr\u003e e.g., `add property n/Mayfair t/Condo a/1 Jurong East Street 32 p/609477 d/31-12-2021 r/Urgent to sell cn/Alice cc/91234567 ce/alice@gmail.com ca/$800,000`"},{"lineNumber":253,"author":{"gitId":"w2vgd"},"content":"**Add appointment** | `add appointment n/NAME r/REMARKS d/DATE [t/TIME]` \u003cbr\u003e e.g., `add appointment n/Meet Alex r/At M Hotel d/17-2-2021 t/1500`"},{"lineNumber":254,"author":{"gitId":"w2vgd"},"content":"**Clear** | `clear property` \u003cbr\u003e `clear appointment`"},{"lineNumber":255,"author":{"gitId":"dvdweien"},"content":"**Edit property** | `edit property INDEX [n/NAME] [t/PROPERTY_TYPE] [a/ADDRESS] [p/POSTAL_CODE] [d/DEADLINE] [r/REMARKS] [cn/CLIENT_NAME] [cc/CLIENT_CONTACT_NUMBER] [ce/CLIENT_EMAIL] [ca/CLIENT_ASKING_PRICE]`\u003cbr\u003e e.g.,`edit property 1 r/Urgent to sell cn/Alice`"},{"lineNumber":256,"author":{"gitId":"dvdweien"},"content":"**Edit appointment** | `edit appointment INDEX [n/NAME] [r/REMARKS] [d/DATE] [t/TIME]`\u003cbr\u003e e.g.,`edit appointment 3 d/2021-03-28 r/at M hotel`"},{"lineNumber":257,"author":{"gitId":"dvdweien"},"content":"**Add new status** | `update INDEX new AMOUNT`\u003cbr\u003e e.g.,`update 1 new 600000`"},{"lineNumber":258,"author":{"gitId":"w2vgd"},"content":"**Update status** | `update INDEX [proceed][cancel]`\u003cbr\u003e e.g. `update 3 proceed`"},{"lineNumber":259,"author":{"gitId":"w2vgd"},"content":"**Find** | `find appointment [keywords] [option...]` \u003cbr\u003e e.g. `find appointment \"fri\" r/\"come in afternoon\"` \u003cbr\u003e\u003cbr\u003e `find property [keywords] [option...]` \u003cbr\u003e e.g., `find property \"jurong west\"`"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":261,"author":{"gitId":"Cp-John"},"content":"**Sort** | `sort appointment [asc or desc] \u003cdeadline or task type\u003e`\u003cbr\u003e e.g., `sort appointment asc deadline`\u003cbr\u003e\u003cbr\u003e`sort property [asc or desc] \u003cprice or location or housing type\u003e`\u003cbr\u003e e.g., `sort property asc price`"},{"lineNumber":262,"author":{"gitId":"w2vgd"},"content":"**Remove an entry** | `delete appointment INDEX` \u003cbr\u003e e.g. `delete appointment 7` \u003cbr\u003e\u003cbr\u003e `delete property INDEX` \u003cbr\u003e e.g. `delete property 7`"},{"lineNumber":263,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"dvdweien":35,"Cp-John":30,"candyhy":3,"-":134,"w2vgd":51,"w-yuchen":10}},{"path":"docs/team/candyhy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"candyhy"},"content":"---"},{"lineNumber":2,"author":{"gitId":"candyhy"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"candyhy"},"content":"title: Yeoh Hsin Ying Candice\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"candyhy"},"content":"---"},{"lineNumber":5,"author":{"gitId":"candyhy"},"content":""},{"lineNumber":6,"author":{"gitId":"candyhy"},"content":"## Project: PocketEstate"},{"lineNumber":7,"author":{"gitId":"candyhy"},"content":""},{"lineNumber":8,"author":{"gitId":"candyhy"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price,"},{"lineNumber":9,"author":{"gitId":"candyhy"},"content":"location and housing type, that may otherwise be difficult to manage."},{"lineNumber":10,"author":{"gitId":"candyhy"},"content":""},{"lineNumber":11,"author":{"gitId":"candyhy"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"candyhy":11}},{"path":"docs/team/cp-john.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Cp-John"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Cp-John"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Cp-John"},"content":"title: Cao Peng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Cp-John"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":6,"author":{"gitId":"Cp-John"},"content":"## Project: PocketEstate"},{"lineNumber":7,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":8,"author":{"gitId":"Cp-John"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price,"},{"lineNumber":9,"author":{"gitId":"Cp-John"},"content":"location and housing type, that may otherwise be difficult to manage."},{"lineNumber":10,"author":{"gitId":"Cp-John"},"content":""},{"lineNumber":11,"author":{"gitId":"Cp-John"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"Cp-John":11}},{"path":"docs/team/dvdweien.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"dvdweien"},"content":"---"},{"lineNumber":2,"author":{"gitId":"dvdweien"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"dvdweien"},"content":"title: David Au Wei En\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"dvdweien"},"content":"---"},{"lineNumber":5,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":6,"author":{"gitId":"dvdweien"},"content":"## Project: PocketEstate"},{"lineNumber":7,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":8,"author":{"gitId":"dvdweien"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price,"},{"lineNumber":9,"author":{"gitId":"dvdweien"},"content":"location and housing type, that may otherwise be difficult to manage."},{"lineNumber":10,"author":{"gitId":"dvdweien"},"content":""},{"lineNumber":11,"author":{"gitId":"dvdweien"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"dvdweien":11}},{"path":"docs/team/w-yuchen.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"w-yuchen"},"content":"---"},{"lineNumber":2,"author":{"gitId":"w-yuchen"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"w-yuchen"},"content":"title: Wang Yuchen\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"w-yuchen"},"content":"---"},{"lineNumber":5,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":6,"author":{"gitId":"w-yuchen"},"content":"## Project: PocketEstate"},{"lineNumber":7,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":8,"author":{"gitId":"w-yuchen"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price,"},{"lineNumber":9,"author":{"gitId":"w-yuchen"},"content":"location and housing type, that may otherwise be difficult to manage."},{"lineNumber":10,"author":{"gitId":"w-yuchen"},"content":""},{"lineNumber":11,"author":{"gitId":"w-yuchen"},"content":"Given below are my contributions to the project."}],"authorContributionMap":{"w-yuchen":11}},{"path":"docs/team/w2vgd.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"---"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"title: Tan Jun Wei\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"---"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"## Project: PocketEstate"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"PocketEstate enables easy organisation of mass clientele property information through sorting of information by price,"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"location and housing type, that may otherwise be difficult to manage."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""}],"authorContributionMap":{"w2vgd":12}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":" * Adds an appointment to the app."},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"add appointment\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the app. \\n\""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_TIME + \"TIME \\n\""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_NAME + \"Meet Alex \""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_REMARK + \"at M hotel \""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_DATE + \"17-2-2021 \""},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_TIME + \"1500 \";"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the app\";"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    private final Appointment toAdd;"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}."},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(appointment);"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        toAdd \u003d appointment;"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        if (model.hasAppointment(toAdd)) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        model.addAppointment(toAdd);"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":64}},{"path":"src/main/java/seedu/address/logic/commands/AddPropertyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ASKING_PRICE;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_CONTACT;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_EMAIL;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_NAME;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSTAL;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":" * Adds a property to the app."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"public class AddPropertyCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"add property\";"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a property to the app. \\n\""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_TYPE + \"TYPE \""},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_POSTAL + \"POSTAL \""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_DEADLINE + \"DEADLINE \""},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_NAME + \"CLIENT_NAME \""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_CONTACT + \"CLIENT_CONTACT \""},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_EMAIL + \"CLIENT_EMAIL \""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_ASKING_PRICE + \"CLIENT_ASKING_PRICE \\n\""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_NAME + \"Mayfair \""},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_TYPE + \"Condo \""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_ADDRESS + \"1 Jurong East Street 32 \""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_POSTAL + \"609477 \""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_DEADLINE + \"31-12-2021 \""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_REMARK + \"Urgent to sell \""},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_NAME + \"Alice \""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_CONTACT + \"91234567 \""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_EMAIL + \"alice@gmail.com \""},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"            + PREFIX_CLIENT_ASKING_PRICE + \"$800,000\";"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New property added: %1$s\";"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_DUPLICATE_PROPERTY \u003d \"This property already exists in the app\";"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    private final Property toAdd;"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"     * Creates an AddPropertyCommand to add the specified {@code Property}."},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    public AddPropertyCommand(Property property) {"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(property);"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        toAdd \u003d property;"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(model);"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        if (model.hasProperty(toAdd)) {"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PROPERTY);"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        model.addProperty(toAdd);"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"                || (other instanceof AddPropertyCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 toAdd.equals(((AddPropertyCommand) other).toAdd));"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":81}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":190,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":199,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":225,"w2vgd":1}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     * and returns an AddAppointmentCommand object for execution."},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the user input does not conform the expected format."},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REMARK, PREFIX_DATE, PREFIX_TIME);"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_REMARK, PREFIX_DATE)"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        Date date \u003d ParserUtil.parseAppointmentDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        Time time \u003d ParserUtil.parseAppointmentTime(argMultimap.getValue(PREFIX_TIME).orElse(null));"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        Appointment appointment \u003d new Appointment(name, remark, date, time);"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        return new AddAppointmentCommand(appointment);"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":57}},{"path":"src/main/java/seedu/address/logic/parser/AddPropertyCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_ASKING_PRICE;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_CONTACT;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_EMAIL;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_NAME;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSTAL;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddPropertyCommand;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Address;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Deadline;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.PostalCode;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Type;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.AskingPrice;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Client;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Contact;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Email;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":" * Parses input arguments and creates a new AddPropertyCommand object."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"public class AddPropertyCommandParser implements Parser\u003cAddPropertyCommand\u003e {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPropertyCommand"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"     * and returns an AddPropertyCommand object for execution."},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the user input does not conform the expected format."},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    public AddPropertyCommand parse(String args) throws ParseException {"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_ADDRESS, PREFIX_POSTAL,"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"                        PREFIX_DEADLINE, PREFIX_REMARK, PREFIX_CLIENT_NAME, PREFIX_CLIENT_CONTACT,"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"                        PREFIX_CLIENT_EMAIL, PREFIX_CLIENT_ASKING_PRICE);"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE, PREFIX_ADDRESS, PREFIX_POSTAL, PREFIX_DEADLINE)"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPropertyCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        Type type \u003d ParserUtil.parsePropertyType(argMultimap.getValue(PREFIX_TYPE).get());"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        Address address \u003d ParserUtil.parsePropertyAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        PostalCode postal \u003d ParserUtil.parsePropertyPostal(argMultimap.getValue(PREFIX_POSTAL).get());"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        Deadline deadline \u003d ParserUtil.parsePropertyDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(null));"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        Name clientName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CLIENT_NAME).orElse(null));"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        Contact clientContact \u003d"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"                ParserUtil.parseClientContact(argMultimap.getValue(PREFIX_CLIENT_CONTACT).orElse(null));"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        Email clientEmail \u003d ParserUtil.parseClientEmail(argMultimap.getValue(PREFIX_CLIENT_EMAIL).orElse(null));"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        AskingPrice clientAskingPrice \u003d"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"                ParserUtil.parseClientAskingPrice(argMultimap.getValue(PREFIX_CLIENT_ASKING_PRICE).orElse(null));"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        Client client \u003d new Client(clientName, clientContact, clientEmail, clientAskingPrice);"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        Property property \u003d new Property(name, type, address, postal, deadline, remark, client);"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        return new AddPropertyCommand(property);"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":80}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddPropertyCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+(\\\\s(appointment|property))?)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        // To satisfy the condition of \"extraneous parameters will be ignored\" in command format description"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        if (commandWord.startsWith(HelpCommand.COMMAND_WORD)) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"            return new HelpCommand();"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        } else if (commandWord.startsWith(ClearCommand.COMMAND_WORD)) {"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"            return new ClearCommand();"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        } else if (commandWord.startsWith(ListCommand.COMMAND_WORD)) {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"            return new ListCommand();"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        } else if (commandWord.startsWith(ExitCommand.COMMAND_WORD)) {"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"            return new ExitCommand();"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        case AddPropertyCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"            return new AddPropertyCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":61,"w2vgd":20}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    // Prefix definitions for name and remark"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    // Prefix definitions for property attributes"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_POSTAL \u003d new Prefix(\"p/\");"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    // Prefix definitions for client attributes"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_CLIENT_NAME \u003d new Prefix(\"cn/\");"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_CLIENT_CONTACT \u003d new Prefix(\"cc/\");"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_CLIENT_EMAIL \u003d new Prefix(\"ce/\");"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_CLIENT_ASKING_PRICE \u003d new Prefix(\"ca/\");"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    // Prefix definitions for appointment attributes"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    // Placeholder prefixes for Person object below to handle errors"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":13,"w2vgd":19}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Address;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Deadline;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.PostalCode;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Type;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.AskingPrice;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Contact;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Email;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.util.DateTimeFormat;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d  General parser methods for shared classes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"     * @param name The name string to be parsed."},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Name}."},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code name} is invalid."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"     * @param remark The remark string to be parsed."},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Remark}."},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code remark} is invalid."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"    public static Remark parseRemark(String remark) throws ParseException {"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        if (remark \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        if (!Remark.isValidRemark(trimmedRemark)) {"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d  Parser methods for property attributes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String type} into a {@code Type}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"     * @param type The property type string to be parsed."},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Type}."},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code type} is invalid."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"    public static Type parsePropertyType(String type) throws ParseException {"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(type);"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        String trimmedType \u003d type.trim();"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"        if (!Type.isValidType(trimmedType)) {"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"        return new Type(trimmedType);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"     * Parses an {@code String address} into an {@code Address}."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":"     * @param address The property address string to be parsed."},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"     * @return An {@code Address}."},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code address} is invalid."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":"    public static Address parsePropertyAddress(String address) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String postal} into a {@code Postal}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"     * @param postal The property postal string to be parsed."},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Postal}."},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code postal} is invalid."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"    public static PostalCode parsePropertyPostal(String postal) throws ParseException {"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(postal);"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":"        String trimmedPostal \u003d postal.trim();"},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"        if (!PostalCode.isValidPostal(trimmedPostal)) {"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(PostalCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"        return new PostalCode(trimmedPostal);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String deadline} into a {@code Deadline}."},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"     * @param deadline The property deadline string to be parsed."},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Deadline}."},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code deadline} is invalid."},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"    public static Deadline parsePropertyDeadline(String deadline) throws ParseException {"},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(deadline);"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"        String trimmedDeadline \u003d deadline.trim();"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"            return new Deadline(LocalDate.parse(trimmedDeadline, DateTimeFormat.INPUT_DATE_FORMAT));"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d  Parser methods for client attributes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String contact} into a {@code Contact}."},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":"     * @param contact The client contact string to be parsed."},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Contact}."},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code contact} is invalid."},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"    public static Contact parseClientContact(String contact) throws ParseException {"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"        if (contact \u003d\u003d null) {"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"        String trimmedContact \u003d contact.trim();"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"        if (!Contact.isValidContact(trimmedContact)) {"},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Contact.MESSAGE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"        return new Contact(trimmedContact);"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":182,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String email} into a {@code Email}."},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"w2vgd"},"content":"     * @param email The client email string to be parsed."},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Email}."},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code email} is invalid."},{"lineNumber":189,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"w2vgd"},"content":"    public static Email parseClientEmail(String email) throws ParseException {"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":192,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":193,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"w2vgd"},"content":"     * Parses an {@code String askingPrice} into an {@code AskingPrice}."},{"lineNumber":203,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"     * @param askingPrice The client asking price string to be parsed."},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code AskingPrice}."},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code askingPrice} is invalid."},{"lineNumber":208,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"w2vgd"},"content":"    public static AskingPrice parseClientAskingPrice(String askingPrice) throws ParseException {"},{"lineNumber":210,"author":{"gitId":"w2vgd"},"content":"        if (askingPrice \u003d\u003d null) {"},{"lineNumber":211,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":212,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"w2vgd"},"content":"        String trimmedAskingPrice \u003d askingPrice.trim();"},{"lineNumber":214,"author":{"gitId":"w2vgd"},"content":"        if (!AskingPrice.isValidAskingPrice(trimmedAskingPrice)) {"},{"lineNumber":215,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(AskingPrice.MESSAGE_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"w2vgd"},"content":"        return new AskingPrice(trimmedAskingPrice);"},{"lineNumber":218,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":220,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d  Parser methods for appointment attributes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":221,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":222,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":224,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":225,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":226,"author":{"gitId":"w2vgd"},"content":"     * @param date The appointment meeting date string to be parsed."},{"lineNumber":227,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Date}."},{"lineNumber":228,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code date} is invalid."},{"lineNumber":229,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"w2vgd"},"content":"    public static Date parseAppointmentDate(String date) throws ParseException {"},{"lineNumber":231,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(date);"},{"lineNumber":232,"author":{"gitId":"w2vgd"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":233,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":234,"author":{"gitId":"w2vgd"},"content":"            return new Date(LocalDate.parse(trimmedDate, DateTimeFormat.INPUT_DATE_FORMAT));"},{"lineNumber":235,"author":{"gitId":"w2vgd"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":236,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":240,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String time} into a {@code Time}."},{"lineNumber":242,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":243,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"w2vgd"},"content":"     * @param time The appointment meeting time string to be parsed."},{"lineNumber":245,"author":{"gitId":"w2vgd"},"content":"     * @return A {@code Time}."},{"lineNumber":246,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException If the given {@code time} is invalid."},{"lineNumber":247,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"w2vgd"},"content":"    public static Time parseAppointmentTime(String time) throws ParseException {"},{"lineNumber":249,"author":{"gitId":"w2vgd"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":250,"author":{"gitId":"w2vgd"},"content":"            return null;"},{"lineNumber":251,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"w2vgd"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":253,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":254,"author":{"gitId":"w2vgd"},"content":"            return new Time(LocalTime.parse(trimmedTime, DateTimeFormat.INPUT_TIME_FORMAT));"},{"lineNumber":255,"author":{"gitId":"w2vgd"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":256,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Time.MESSAGE_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":260,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":261,"author":{"gitId":"w2vgd"},"content":"    // Placeholders for Person object below to handle errors"},{"lineNumber":262,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":263,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":265,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":266,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":267,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":268,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"w2vgd"},"content":"    public static seedu.address.model.person.Address parseAddress(String address) throws ParseException {"},{"lineNumber":270,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(address);"},{"lineNumber":271,"author":{"gitId":"w2vgd"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":272,"author":{"gitId":"w2vgd"},"content":"        if (!seedu.address.model.person.Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":273,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(seedu.address.model.person.Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":274,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"w2vgd"},"content":"        return new seedu.address.model.person.Address(trimmedAddress);"},{"lineNumber":276,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":278,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":280,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":281,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":282,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":283,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"w2vgd"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":285,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(phone);"},{"lineNumber":286,"author":{"gitId":"w2vgd"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":287,"author":{"gitId":"w2vgd"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":288,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":289,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"w2vgd"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":291,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":293,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":294,"author":{"gitId":"w2vgd"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":295,"author":{"gitId":"w2vgd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":296,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":297,"author":{"gitId":"w2vgd"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":298,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"w2vgd"},"content":"    public static seedu.address.model.person.Email parseEmail(String email) throws ParseException {"},{"lineNumber":300,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(email);"},{"lineNumber":301,"author":{"gitId":"w2vgd"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":302,"author":{"gitId":"w2vgd"},"content":"        if (!seedu.address.model.person.Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":303,"author":{"gitId":"w2vgd"},"content":"            throw new ParseException(seedu.address.model.person.Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":304,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"w2vgd"},"content":"        return new seedu.address.model.person.Email(trimmedEmail);"},{"lineNumber":306,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":310,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":311,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":324,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":325,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":119,"w2vgd":215}},{"path":"src/main/java/seedu/address/model/AppointmentBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Wraps all data at the appointment-book level."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" * Duplicates are not allowed (by .isSameAppointment comparison)."},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"public class AppointmentBook {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final List\u003cAppointment\u003e appointments;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBook() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the app."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * @param appointment The appointment to check."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     * @return True if there is an appointment with the same identity, otherwise false."},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(appointment);"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        return appointments.contains(appointment);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Adds an appointment to the app."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     * The appointment must not already exist in the appointment book."},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     * @param appointment The appointment to be added."},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public void addAppointment(Appointment appointment) {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        appointments.add(appointment);"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":41}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"    // API for PropertyBook"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"    boolean hasProperty(Property property);"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"    void addProperty(Property property);"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"    // API for AppointmentBook"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"    boolean hasAppointment(Appointment appointment);"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"    void addAppointment(Appointment appointment);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":87,"w2vgd":16}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    private final PropertyBook propertyBook;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    private final AppointmentBook appointmentBook;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        propertyBook \u003d new PropertyBook();"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        appointmentBook \u003d new AppointmentBook();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PropertyBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"    public boolean hasProperty(Property property) {"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(property);"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"        return propertyBook.hasProperty(property);"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"    public void addProperty(Property property) {"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        propertyBook.addProperty(property);"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"    public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(appointment);"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"        return appointmentBook.hasAppointment(appointment);"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"    public void addAppointment(Appointment appointment) {"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        appointmentBook.addAppointment(appointment);"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":151,"w2vgd":34}},{"path":"src/main/java/seedu/address/model/PropertyBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Wraps all data at the property-book level."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" * Duplicates are not allowed (by .isSameProperty comparison)."},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"public class PropertyBook {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final List\u003cProperty\u003e properties;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public PropertyBook() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        properties \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a property with the same identity as {@code property} exists in the app."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * @param property The property to check."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     * @return True if there is a property with the same identity, otherwise false."},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public boolean hasProperty(Property property) {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(property);"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        return properties.contains(property);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Adds a property to the app."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     * The property must not already exist in the property book."},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     * @param property The property to be added."},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public void addProperty(Property property) {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        properties.add(property);"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":41}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" * Represents an Appointment in the appointment book."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Guarantees: field values are validated, immutable."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"public class Appointment {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    // Mandatory fields"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private final Name name;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final Remark remarks;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    private final Date date;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    // Optional fields"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    private final Time time;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Constructs an {@code Appointment} without any optional fields."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public Appointment(Name name, Remark remarks, Date date) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        time \u003d null;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * Constructs an {@code Appointment} with all information."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public Appointment(Name name, Remark remarks, Date date, Time time) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        this.date \u003d date;"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        this.time \u003d time;"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    public Name getName() {"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        return name;"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public Remark getRemarks() {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        return remarks;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public Date getDate() {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        return date;"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    public Time getTime() {"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        return time;"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both appointments have the same name and date."},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"     * This defines a weaker notion of equality between two appointments."},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        if (otherAppointment \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        return otherAppointment !\u003d null"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherAppointment.getName().equals(getName())"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherAppointment.getDate().equals(getDate());"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both appointments have the same identity and data fields."},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"     * This defines a stronger notion of equality between two appointments."},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        return otherAppointment.getName().equals(getName())"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherAppointment.getRemarks().equals(getRemarks())"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherAppointment.getDate().equals(getDate());"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"        return Objects.hash(name, remarks, date);"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"        builder.append(getName())"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Remarks: \")"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"                .append(getRemarks())"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Date: \")"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"                .append(getDate());"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"        if (time !\u003d null) {"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"; Time: \").append(getTime());"},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        return builder.toString();"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":112}},{"path":"src/main/java/seedu/address/model/appointment/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.util.DateTimeFormat;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Represents an Appointment\u0027s meeting date."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class Date {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            \"Meeting dates should be valid dates specified in the format DD-MM-YY.\";"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public final LocalDate date;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Date}."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * @param date A valid meeting date."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public Date(LocalDate date) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(date);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        return date.format(DateTimeFormat.OUTPUT_DATE_FORMAT);"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Date)) {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        Date otherDate \u003d (Date) other;"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        return date.equals(otherDate.date);"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        return date.hashCode();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":50}},{"path":"src/main/java/seedu/address/model/appointment/Time.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.util.DateTimeFormat;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Represents an Appointment\u0027s meeting time."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class Time {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            \"Meeting times should be valid times specified in 24-hour clock in the format HHMM\";"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public final LocalTime time;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Time}."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * @param time A valid meeting time."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public Time(LocalTime time) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(time);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.time \u003d time;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        return time.format(DateTimeFormat.OUTPUT_TIME_FORMAT);"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Time)) {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        Time otherTime \u003d (Time) other;"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        return time.equals(otherTime.time);"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        return time.hashCode();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":50}},{"path":"src/main/java/seedu/address/model/name/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.name;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a name."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public final String name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid name, otherwise false."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        return name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Name)) {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        Name otherName \u003d (Name) other;"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        return name.equals(otherName.name);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        return name.hashCode();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"w2vgd":20,"-":44}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().name, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":30,"w2vgd":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":123,"w2vgd":1}},{"path":"src/main/java/seedu/address/model/property/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a Property\u0027s address."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any value, but it should not be blank\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    /*"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    private static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public final String propertyAddress;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Constructs an {@code Address}."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * @param propertyAddress A valid address."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public Address(String propertyAddress) {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(propertyAddress);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidAddress(propertyAddress), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        this.propertyAddress \u003d propertyAddress;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid property address."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid property address, otherwise false."},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        return propertyAddress;"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Address)) {"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        Address otherAddress \u003d (Address) other;"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        return propertyAddress.equals(otherAddress.propertyAddress);"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        return propertyAddress.hashCode();"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":63}},{"path":"src/main/java/seedu/address/model/property/Deadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.util.DateTimeFormat;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Represents a Property\u0027s deadline for selling."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class Deadline {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            \"Deadline dates should be valid dates specified in the format DD-MM-YY.\";"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public final LocalDate deadline;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Deadline}."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * @param deadline A valid deadline date."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public Deadline(LocalDate deadline) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(deadline);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        return deadline.format(DateTimeFormat.OUTPUT_DATE_FORMAT);"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Deadline)) {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        Deadline otherDeadline \u003d (Deadline) other;"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        return deadline.equals(otherDeadline.deadline);"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        return deadline.hashCode();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":50}},{"path":"src/main/java/seedu/address/model/property/PostalCode.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a Property\u0027s postal code."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPostal(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class PostalCode {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"            \"Postal code should contain only numbers, and it should be at least 3 digits long\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public final String postal;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code PostalCode}."},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     * @param postal A valid postal."},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public PostalCode(String postal) {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(postal);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidPostal(postal), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.postal \u003d postal;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid property postal code."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid property postal code, otherwise false."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidPostal(String test) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        return postal;"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof PostalCode)) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        PostalCode otherPostalCode \u003d (PostalCode) other;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        return postal.equals(otherPostalCode.postal);"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        return postal.hashCode();"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":60}},{"path":"src/main/java/seedu/address/model/property/Property.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Client;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Represents a Property in the property book."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Guarantees: field values are validated, immutable."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class Property {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    // Mandatory fields"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final Name name;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    private final Type propertyType;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    private final Address address;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    private final PostalCode postalCode;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    private final Deadline deadline;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    // Optional fields"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    private final Remark remarks;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    private final Client client;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Property} without any optional fields."},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    public Property(Name name, Type propertyType, Address address, PostalCode postalCode, Deadline deadline) {"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        this.propertyType \u003d propertyType;"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        this.address \u003d address;"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        this.postalCode \u003d postalCode;"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d null;"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        this.client \u003d null;"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Property} with remarks but without client\u0027s information."},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    public Property(Name name, Type propertyType, Address address, PostalCode postalCode, Deadline deadline,"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"                    Remark remarks) {"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        this.propertyType \u003d propertyType;"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        this.address \u003d address;"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        this.postalCode \u003d postalCode;"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        this.client \u003d null;"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Property} with client\u0027s information but without remarks."},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    public Property(Name name, Type propertyType, Address address, PostalCode postalCode, Deadline deadline,"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"                    Client client) {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        this.propertyType \u003d propertyType;"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        this.address \u003d address;"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        this.postalCode \u003d postalCode;"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d null;"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        this.client \u003d client;"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Property} with all information."},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"     * Every field must be present and not null."},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    public Property(Name name, Type propertyType, Address address, PostalCode postalCode, Deadline deadline,"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"                    Remark remarks, Client client) {"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        this.propertyType \u003d propertyType;"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        this.address \u003d address;"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"        this.postalCode \u003d postalCode;"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        this.remarks \u003d remarks;"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"        this.client \u003d client;"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    public Name getName() {"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"        return name;"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"    public Type getPropertyType() {"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"        return propertyType;"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"    public Address getAddress() {"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        return address;"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"    public PostalCode getPostalCode() {"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        return postalCode;"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"    public Deadline getDeadline() {"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"        return deadline;"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"    public Remark getRemarks() {"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        return remarks;"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"    public Client getClient() {"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"        return client;"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both properties have the same postal code and same address."},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"     * This defines a weaker notion of equality between two properties."},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":"    public boolean isSameProperty(Property otherProperty) {"},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"        if (otherProperty \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":"        return otherProperty !\u003d null"},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getPostalCode().equals(getPostalCode())"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getAddress().equals(getAddress());"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both properties have the same identity and data fields."},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"     * This defines a stronger notion of equality between two properties."},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Property)) {"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"        Property otherProperty \u003d (Property) other;"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":"        return otherProperty.getName().equals(getName())"},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getPropertyType().equals(getPropertyType())"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getAddress().equals(getAddress())"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getPostalCode().equals(getPostalCode())"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherProperty.getDeadline().equals(getDeadline());"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"        return Objects.hash(name, propertyType, address, postalCode, deadline);"},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        builder.append(name.toString())"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Type: \")"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"                .append(propertyType.toString())"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Address: \")"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":"                .append(address.toString())"},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Postal Code: \")"},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"                .append(postalCode.toString())"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"                .append(\"; Deadline: \")"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":"                .append(deadline.toString());"},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"        if (remarks !\u003d null) {"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"; Remarks: \").append(remarks.toString());"},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":"        if (client !\u003d null) {"},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"; \").append(client.toString());"},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"        return builder.toString();"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":172}},{"path":"src/main/java/seedu/address/model/property/Type.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a Property\u0027s type."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class Type {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"            \"Property types should only be either hdb, condo or landed\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"     * The property types should only be one of three types: hdb, condo, or landed."},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    private static final String VALIDATION_REGEX \u003d \"^(hdb|condo|landed)$\";"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    private final String propertyType;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Type}."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * @param propertyType A valid type."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public Type(String propertyType) {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(propertyType);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidType(propertyType), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        this.propertyType \u003d propertyType;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid property type."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid property type, otherwise false."},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidType(String test) {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        String lowercaseTest \u003d test.toLowerCase();"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        return lowercaseTest.matches(VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        return propertyType;"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Type)) {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        Type otherType \u003d (Type) other;"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        return propertyType.equals(otherType.propertyType);"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        return propertyType.hashCode();"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":64}},{"path":"src/main/java/seedu/address/model/property/client/AskingPrice.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a client\u0027s asking price for a property."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAskingPrice(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class AskingPrice {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Note the following conditions for specifying an asking price:\\n\""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"            + \"1. The dollar sign is optional.\\n\""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"            + \"2. There should not be any leading zeros in the number specified.\\n\""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"            + \"3. The cents part is optional but if specified, it has to be exactly 2 decimal places.\\n\""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            + \"4. Either do not use commas at all or be consistent in the usage of commas throughout, \""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"            + \"where each comma should separate every three digits from the back.\\n\""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"            + \"   E.g.\\n\""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"            + \"   $1000000 or $1,000,000 are valid but $1000,000 or $100,00,00 are not valid.\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * Dollar sign is optional."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     * No leading zeros."},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Either do not specify decimal portion or specify exactly two decimal places."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     * Either no commas at all or consistent usage of commas throughout."},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public static final String VALIDATION_REGEX \u003d \"^\\\\$?([1-9]\\\\d*|0|[1-9]\\\\d{0,2}(,\\\\d{3})*)(\\\\.\\\\d{2})?$\";"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public final String askingPrice;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Constructs an {@code AskingPrice}."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * @param askingPrice A valid asking price."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    public AskingPrice(String askingPrice) {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(askingPrice);"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidAskingPrice(askingPrice), MESSAGE_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        this.askingPrice \u003d askingPrice;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid asking price."},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid asking price, otherwise false."},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidAskingPrice(String test) {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        return askingPrice;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof AskingPrice)) {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        AskingPrice otherAskingPrice \u003d (AskingPrice) other;"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        return askingPrice.equals(otherAskingPrice.askingPrice);"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        return askingPrice.hashCode();"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":71}},{"path":"src/main/java/seedu/address/model/property/client/Client.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Represents the seller of a Property."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" * Guarantees: field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"public class Client {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    private final Name clientName;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private final Contact clientContact;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private final Email clientEmail;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final AskingPrice clientAskingPrice;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Client}."},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public Client(Name clientName, Contact clientContact, Email clientEmail, AskingPrice clientAskingPrice) {"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        this.clientName \u003d clientName;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        this.clientContact \u003d clientContact;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        this.clientEmail \u003d clientEmail;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        this.clientAskingPrice \u003d clientAskingPrice;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public Name getClientName() {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        return clientName;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    public Contact getClientContact() {"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        return clientContact;"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public Email getClientEmail() {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        return clientEmail;"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public AskingPrice getClientAskingPrice() {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        return clientAskingPrice;"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both client have the same name."},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"     * This defines a weaker notion of equality between two clients."},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public boolean isSameClient(Client otherClient) {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        if (otherClient \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        return otherClient !\u003d null"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherClient.getClientName().equals(getClientName());"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     * Returns true if both clients have the same identity and data fields."},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"     * This defines a stronger notion of equality between two clients."},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Client)) {"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"        Client otherClient \u003d (Client) other;"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        return otherClient.getClientName().equals(getClientName())"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherClient.getClientContact().equals(getClientContact())"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherClient.getClientEmail().equals(getClientEmail())"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"                \u0026\u0026 otherClient.getClientAskingPrice().equals(getClientAskingPrice());"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        return Objects.hash(clientName, clientContact, clientEmail, clientAskingPrice);"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        if (clientName !\u003d null) {"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"Client Name: \").append(getClientName());"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        if (clientContact !\u003d null) {"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"            if (builder.length() !\u003d 0) {"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"                builder.append(\"; \");"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"Client Contact: \").append(getClientContact());"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"        if (clientEmail !\u003d null) {"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"            if (builder.length() !\u003d 0) {"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"                builder.append(\"; \");"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"Client Email: \").append(getClientEmail());"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        if (clientAskingPrice !\u003d null) {"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"            if (builder.length() !\u003d 0) {"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"                builder.append(\"; \");"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"            builder.append(\"Client Asking Price: \").append(getClientAskingPrice());"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"        return builder.toString();"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":111}},{"path":"src/main/java/seedu/address/model/property/client/Contact.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a client\u0027s contact number."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidContact(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class Contact {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"            \"Contact numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public final String contact;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Contact}."},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     * @param contact A valid contact number."},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public Contact(String contact) {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(contact);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidContact(contact), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        this.contact \u003d contact;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid contact number."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid contact number, otherwise false."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidContact(String test) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        return contact;"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Contact)) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        Contact otherContact \u003d (Contact) other;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        return contact.equals(otherContact.contact);"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        return contact.hashCode();"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":60}},{"path":"src/main/java/seedu/address/model/property/client/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a client\u0027s email."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    // alphanumeric and special characters"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    public final String email;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * Constructs an {@code Email}."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     * @param email A valid email address."},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public Email(String email) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(email);"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        this.email \u003d email;"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid email address."},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid email address, otherwise false."},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        return email;"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Email)) {"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        Email otherEmail \u003d (Email) other;"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        return email.equals(otherEmail.email);"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        return email.hashCode();"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":73}},{"path":"src/main/java/seedu/address/model/remark/Remark.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.remark;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a remark."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class Remark {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can take any value, but it should not be blank\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    public final String remark;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"     * Constructs a {@code Remark}."},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * @param remark A valid remark."},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public Remark(String remark) {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        requireNonNull(remark);"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        this.remark \u003d remark;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     * @param test The string to test."},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * @return True if the given string is a valid remark, otherwise false."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        return remark;"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        if (!(other instanceof Remark)) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        Remark otherRemark \u003d (Remark) other;"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        return remark.equals(otherRemark.remark);"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        return remark.hashCode();"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":59}},{"path":"src/main/java/seedu/address/model/util/DateTimeFormat.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Specify the date and time formats used as input and output."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class DateTimeFormat {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"     * User input date format, e.g. 23-1-2021."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter INPUT_DATE_FORMAT \u003d"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"            DateTimeFormatter.ofPattern(\"d-M-u\").withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"     * User input time format in 24-hour clock, e.g. 1800."},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter INPUT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HHmm\");"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Output date format, e.g. Jan 23 2021."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM d u\");"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     * Output time format, e.g. 7:33PM."},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter OUTPUT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mma\");"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":30}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":59,"w2vgd":1}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        name \u003d source.getName().name;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":107,"w2vgd":2}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        name.setText(person.getName().name);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":76,"w2vgd":1}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null));"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"                commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(validAppointment);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        ModelStub modelStub \u003d new ModelStubWithAppointment(validAppointment);"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"                AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e addAppointmentCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        Appointment meetAlex \u003d new AppointmentBuilder().withName(\"Meet Alex\").build();"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        Appointment meetBob \u003d new AppointmentBuilder().withName(\"Meet Bob\").build();"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        AddAppointmentCommand addMeetAlexCommand \u003d new AddAppointmentCommand(meetAlex);"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        AddAppointmentCommand addMeetBobCommand \u003d new AddAppointmentCommand(meetBob);"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        assertTrue(addMeetAlexCommand.equals(addMeetAlexCommand));"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        AddAppointmentCommand addMeetAlexCommandCopy \u003d new AddAppointmentCommand(meetAlex);"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        assertTrue(addMeetAlexCommand.equals(addMeetAlexCommandCopy));"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMeetAlexCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMeetAlexCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"        // different appointments -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMeetAlexCommand.equals(addMeetBobCommand));"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"        public boolean hasProperty(Property property) {"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"        public void addProperty(Property property) {"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"     * A Model stub that contains a single appointment."},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"    private class ModelStubWithAppointment extends ModelStub {"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"        private final Appointment appointment;"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":181,"author":{"gitId":"w2vgd"},"content":"        ModelStubWithAppointment(Appointment appointment) {"},{"lineNumber":182,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(appointment);"},{"lineNumber":183,"author":{"gitId":"w2vgd"},"content":"            this.appointment \u003d appointment;"},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":186,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(appointment);"},{"lineNumber":189,"author":{"gitId":"w2vgd"},"content":"            return this.appointment.isSameAppointment(appointment);"},{"lineNumber":190,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":193,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"w2vgd"},"content":"     * A Model stub that always accept the appointment being added."},{"lineNumber":195,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"w2vgd"},"content":"    private class ModelStubAcceptingAppointmentAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitId":"w2vgd"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":199,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"w2vgd"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(appointment);"},{"lineNumber":202,"author":{"gitId":"w2vgd"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::isSameAppointment);"},{"lineNumber":203,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(appointment);"},{"lineNumber":208,"author":{"gitId":"w2vgd"},"content":"            appointmentsAdded.add(appointment);"},{"lineNumber":209,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":211}},{"path":"src/test/java/seedu/address/logic/commands/AddPropertyCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.PropertyBuilder;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"public class AddPropertyCommandTest {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public void constructor_nullProperty_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPropertyCommand(null));"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public void execute_propertyAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        ModelStubAcceptingPropertyAdded modelStub \u003d new ModelStubAcceptingPropertyAdded();"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        Property validProperty \u003d new PropertyBuilder().build();"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        CommandResult commandResult \u003d new AddPropertyCommand(validProperty).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertEquals(String.format(AddPropertyCommand.MESSAGE_SUCCESS, validProperty),"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"                commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertEquals(Arrays.asList(validProperty), modelStub.propertiesAdded);"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public void execute_duplicateProperty_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        Property validProperty \u003d new PropertyBuilder().build();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        AddPropertyCommand addPropertyCommand \u003d new AddPropertyCommand(validProperty);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        ModelStub modelStub \u003d new ModelStubWithProperty(validProperty);"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"                AddPropertyCommand.MESSAGE_DUPLICATE_PROPERTY, () -\u003e addPropertyCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        Property mayfair \u003d new PropertyBuilder().withName(\"Mayfair\").build();"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        Property burghleyDrive \u003d new PropertyBuilder().withName(\"Burghley Drive\").build();"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        AddPropertyCommand addMayfairCommand \u003d new AddPropertyCommand(mayfair);"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        AddPropertyCommand addBurghleyDriveCommand \u003d new AddPropertyCommand(burghleyDrive);"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        assertTrue(addMayfairCommand.equals(addMayfairCommand));"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        AddPropertyCommand addMayfairCommandCopy \u003d new AddPropertyCommand(mayfair);"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        assertTrue(addMayfairCommand.equals(addMayfairCommandCopy));"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMayfairCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMayfairCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"        // different property -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        assertFalse(addMayfairCommand.equals(addBurghleyDriveCommand));"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    private class ModelStub implements Model {"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"        public void addPerson(Person person) {"},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"        public boolean hasProperty(Property property) {"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"        public void addProperty(Property property) {"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"     * A Model stub that contains a single property."},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"    private class ModelStubWithProperty extends ModelStub {"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"        private final Property property;"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":181,"author":{"gitId":"w2vgd"},"content":"        ModelStubWithProperty(Property property) {"},{"lineNumber":182,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(property);"},{"lineNumber":183,"author":{"gitId":"w2vgd"},"content":"            this.property \u003d property;"},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":186,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"        public boolean hasProperty(Property property) {"},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(property);"},{"lineNumber":189,"author":{"gitId":"w2vgd"},"content":"            return this.property.isSameProperty(property);"},{"lineNumber":190,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":193,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"w2vgd"},"content":"     * A Model stub that always accept the property being added."},{"lineNumber":195,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"w2vgd"},"content":"    private class ModelStubAcceptingPropertyAdded extends ModelStub {"},{"lineNumber":197,"author":{"gitId":"w2vgd"},"content":"        final ArrayList\u003cProperty\u003e propertiesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":198,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":199,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"w2vgd"},"content":"        public boolean hasProperty(Property property) {"},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(property);"},{"lineNumber":202,"author":{"gitId":"w2vgd"},"content":"            return propertiesAdded.stream().anyMatch(property::isSameProperty);"},{"lineNumber":203,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"        public void addProperty(Property property) {"},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":"            requireNonNull(property);"},{"lineNumber":208,"author":{"gitId":"w2vgd"},"content":"            propertiesAdded.add(property);"},{"lineNumber":209,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":211}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POSTAL;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    // For testing properties"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_NAME_MAYFAIR \u003d \"Mayfair\";"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_NAME_BURGHLEY_DRIVE \u003d \"Burghley Drive\";"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_TYPE_MAYFAIR \u003d \"Condo\";"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_TYPE_BURGHLEY_DRIVE \u003d \"Landed\";"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_ADDRESS_MAYFAIR \u003d \"1 Jurong East Street 32, #08-111\";"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_ADDRESS_BURGHLEY_DRIVE \u003d \"12 Burghley Drive\";"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_POSTAL_MAYFAIR \u003d \"609477\";"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_POSTAL_BURGHLEY_DRIVE \u003d \"123456\";"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_DEADLINE_MAYFAIR \u003d \"31-12-2021\";"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_DEADLINE_BURGHLEY_DRIVE \u003d \"31-07-2021\";"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public static final String NAME_DESC_MAYFAIR \u003d \" \" + PREFIX_NAME + VALID_NAME_MAYFAIR;"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public static final String NAME_DESC_BURGHLEY_DRIVE \u003d \" \" + PREFIX_NAME + VALID_NAME_BURGHLEY_DRIVE;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public static final String TYPE_DESC_MAYFAIR \u003d \" \" + PREFIX_TYPE + VALID_TYPE_MAYFAIR;"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    public static final String TYPE_DESC_BURGHLEY_DRIVE \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BURGHLEY_DRIVE;"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public static final String ADDRESS_DESC_MAYFAIR \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_MAYFAIR;"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"    public static final String ADDRESS_DESC_BURGHLEY_DRIVE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BURGHLEY_DRIVE;"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    public static final String POSTAL_DESC_MAYFAIR \u003d \" \" + PREFIX_POSTAL + VALID_POSTAL_MAYFAIR;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    public static final String POSTAL_DESC_BURGHLEY_DRIVE \u003d \" \" + PREFIX_POSTAL + VALID_POSTAL_BURGHLEY_DRIVE;"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    public static final String DEADLINE_DESC_MAYFAIR \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_MAYFAIR;"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    public static final String DEADLINE_DESC_BURGHLEY_DRIVE \u003d \" \" + PREFIX_DEADLINE + VALID_DEADLINE_BURGHLEY_DRIVE;"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_NAME_DESC \u003d"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_NAME + \"Mayfair\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_TYPE_DESC \u003d"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_TYPE + \"apartment\"; // \u0027apartment\u0027 is not a valid type"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_ADDRESS_DESC \u003d"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_POSTAL_DESC \u003d"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_POSTAL + \"12a\"; // \u0027a\u0027 not allowed in postal codes"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_DEADLINE_DESC \u003d"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_DEADLINE + \"31-04-2021\"; // 31st April not valid"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"    // For testing appointments"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_NAME_MEET_ALEX \u003d \"Meet Alex\";"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_NAME_MEET_BOB \u003d \"Meet Bob\";"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_REMARK_MEET_ALEX \u003d \"At M Hotel\";"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_REMARK_MEET_BOB \u003d \"At Plaza Sing Starbucks\";"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_DATE_MEET_ALEX \u003d \"25-12-2021\";"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_DATE_MEET_BOB \u003d \"25-02-2021\";"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"    public static final String NAME_DESC_MEET_ALEX \u003d \" \" + PREFIX_NAME + VALID_NAME_MEET_ALEX;"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"    public static final String NAME_DESC_MEET_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_MEET_BOB;"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    public static final String REMARK_DESC_MEET_ALEX \u003d \" \" + PREFIX_REMARK + VALID_REMARK_MEET_ALEX;"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"    public static final String REMARK_DESC_MEET_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_MEET_BOB;"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    public static final String DATE_DESC_MEET_ALEX \u003d \" \" + PREFIX_DATE + VALID_DATE_MEET_ALEX;"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    public static final String DATE_DESC_MEET_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_MEET_BOB;"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_NAME_DESC \u003d"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_NAME + \"Meet Alex\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_REMARK_DESC \u003d"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_REMARK; // empty string not allowed for remark"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_DATE_DESC \u003d"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"            \" \" + PREFIX_DATE + \"31-04-2021\"; // 31st April not valid"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"    // For testing of persons (to be removed)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":169,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"        final String[] splitName \u003d person.getName().name.split(\"\\\\s+\");"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":128,"w2vgd":62}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_MEET_ALEX;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE_DESC;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_NAME_DESC;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_REMARK_DESC;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MEET_ALEX;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_MEET_ALEX;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MEET_ALEX;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MEET_ALEX;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_MEET_ALEX;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalAppointments.MEET_ALEX;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"public class AddAppointmentCommandParserTest {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(MEET_ALEX).build();"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertParseSuccess(parser, NAME_DESC_MEET_ALEX + REMARK_DESC_MEET_ALEX + DATE_DESC_MEET_ALEX,"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"                new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        // missing name prefix"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, VALID_NAME_MEET_ALEX + REMARK_DESC_MEET_ALEX + DATE_DESC_MEET_ALEX,"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"                expectedMessage);"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        // missing remark prefix"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MEET_ALEX + VALID_REMARK_MEET_ALEX + DATE_DESC_MEET_ALEX,"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"                expectedMessage);"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        // missing date prefix"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MEET_ALEX + REMARK_DESC_MEET_ALEX + VALID_DATE_MEET_ALEX,"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"                expectedMessage);"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        // all prefixes missing"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, VALID_NAME_MEET_ALEX + VALID_REMARK_MEET_ALEX + VALID_DATE_MEET_ALEX,"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"                expectedMessage);"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        // invalid name"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_NAME_DESC + REMARK_DESC_MEET_ALEX + DATE_DESC_MEET_ALEX,"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        // invalid remark"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MEET_ALEX + INVALID_APPOINTMENT_REMARK_DESC + DATE_DESC_MEET_ALEX,"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"                Remark.MESSAGE_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        // invalid date"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MEET_ALEX + REMARK_DESC_MEET_ALEX + INVALID_APPOINTMENT_DATE_DESC,"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"                Date.MESSAGE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_NAME_DESC + REMARK_DESC_MEET_ALEX"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"                + INVALID_APPOINTMENT_DATE_DESC, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        // non-empty preamble"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MEET_ALEX"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"                + REMARK_DESC_MEET_ALEX + DATE_DESC_MEET_ALEX,"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":82}},{"path":"src/test/java/seedu/address/logic/parser/AddPropertyCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MAYFAIR;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DEADLINE_DESC_MAYFAIR;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROPERTY_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROPERTY_DEADLINE_DESC;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROPERTY_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROPERTY_POSTAL_DESC;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PROPERTY_TYPE_DESC;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MAYFAIR;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POSTAL_DESC_MAYFAIR;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_MAYFAIR;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MAYFAIR;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DEADLINE_MAYFAIR;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MAYFAIR;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSTAL_MAYFAIR;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_MAYFAIR;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalProperties.MAYFAIR;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"import seedu.address.logic.commands.AddPropertyCommand;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Address;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Deadline;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.PostalCode;"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Type;"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.PropertyBuilder;"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"public class AddPropertyCommandParserTest {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    private AddPropertyCommandParser parser \u003d new AddPropertyCommandParser();"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        Property expectedProperty \u003d new PropertyBuilder(MAYFAIR).build();"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        assertParseSuccess(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"                        + POSTAL_DESC_MAYFAIR + DEADLINE_DESC_MAYFAIR, new AddPropertyCommand(expectedProperty));"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPropertyCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        // missing name prefix"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, VALID_NAME_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR + POSTAL_DESC_MAYFAIR"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"                + DEADLINE_DESC_MAYFAIR, expectedMessage);"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        // missing type prefix"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + VALID_TYPE_MAYFAIR + ADDRESS_DESC_MAYFAIR + POSTAL_DESC_MAYFAIR"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"                + DEADLINE_DESC_MAYFAIR, expectedMessage);"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        // missing address prefix"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + VALID_ADDRESS_MAYFAIR + POSTAL_DESC_MAYFAIR"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"                + DEADLINE_DESC_MAYFAIR, expectedMessage);"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        // missing postal prefix"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR + VALID_POSTAL_MAYFAIR"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"                + DEADLINE_DESC_MAYFAIR, expectedMessage);"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        // missing deadline prefix"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR + POSTAL_DESC_MAYFAIR"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"                + VALID_DEADLINE_MAYFAIR, expectedMessage);"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"        // all prefixes missing"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, VALID_NAME_MAYFAIR + VALID_TYPE_MAYFAIR + VALID_ADDRESS_MAYFAIR"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"                        + VALID_POSTAL_MAYFAIR + VALID_DEADLINE_MAYFAIR, expectedMessage);"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        // invalid name"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, INVALID_PROPERTY_NAME_DESC + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"                + POSTAL_DESC_MAYFAIR + DEADLINE_DESC_MAYFAIR, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"        // invalid type"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + INVALID_PROPERTY_TYPE_DESC + ADDRESS_DESC_MAYFAIR"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"                + POSTAL_DESC_MAYFAIR + DEADLINE_DESC_MAYFAIR, Type.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"        // invalid address"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + INVALID_PROPERTY_ADDRESS_DESC"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"                + POSTAL_DESC_MAYFAIR + DEADLINE_DESC_MAYFAIR, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"        // invalid postal"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"                + INVALID_PROPERTY_POSTAL_DESC + DEADLINE_DESC_MAYFAIR, PostalCode.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"        // invalid deadline"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"                + POSTAL_DESC_MAYFAIR + INVALID_PROPERTY_DEADLINE_DESC, Deadline.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, INVALID_PROPERTY_NAME_DESC + TYPE_DESC_MAYFAIR + ADDRESS_DESC_MAYFAIR"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"                        + INVALID_PROPERTY_POSTAL_DESC + DEADLINE_DESC_MAYFAIR, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"        // non-empty preamble"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MAYFAIR + TYPE_DESC_MAYFAIR"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"                + ADDRESS_DESC_MAYFAIR + POSTAL_DESC_MAYFAIR + DEADLINE_DESC_MAYFAIR,"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPropertyCommand.MESSAGE_USAGE));"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":106}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":210,"w2vgd":1}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Address;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Deadline;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.PostalCode;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Type;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.AskingPrice;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Contact;"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.client.Email;"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_NAME \u003d \"Mayfair\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_TYPE \u003d \"apartment\"; // \u0027apartment\u0027 is not a valid type"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_ADDRESS \u003d \"\"; // empty string not allowed for addresses"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_POSTAL \u003d \"12a\"; // \u0027a\u0027 not allowed in postal codes"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_DEADLINE \u003d \"31-04-2021\"; // 31st April not valid"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_PROPERTY_REMARK \u003d \"\"; // empty string not allowed for remarks"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_NAME \u003d \"Mayfair\";"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_TYPE \u003d \"Condo\";"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_ADDRESS \u003d \"1 Jurong East Street 32, #08-111\";"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_POSTAL \u003d \"609477\";"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_DEADLINE \u003d \"31-12-2021\";"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public static final LocalDate VALID_PROPERTY_DEADLINE_LOCALDATE \u003d LocalDate.parse(VALID_PROPERTY_DEADLINE,"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            DateTimeFormatter.ofPattern(\"d-M-u\").withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_PROPERTY_REMARK \u003d \"Urgent to sell!\";"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_NAME \u003d \"Meet Alex\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_REMARK \u003d \"\"; // empty string not allowed for remarks"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_DATE \u003d \"31-04-2021\"; // 31st April not valid"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_APPOINTMENT_TIME \u003d \"1860\"; // 1260 not valid"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_APPOINTMENT_NAME \u003d \"Meet Alex\";"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_APPOINTMENT_REMARK \u003d \"At M Hotel\";"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_APPOINTMENT_DATE \u003d \"25-12-2021\";"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    public static final LocalDate VALID_APPOINTMENT_DATE_LOCALDATE \u003d LocalDate.parse(VALID_APPOINTMENT_DATE,"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"            DateTimeFormatter.ofPattern(\"d-M-u\").withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_APPOINTMENT_TIME \u003d \"1900\";"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    public static final LocalTime VALID_APPOINTMENT_TIME_LOCALTIME \u003d LocalTime.parse(VALID_APPOINTMENT_TIME,"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"            DateTimeFormatter.ofPattern(\"HHmm\"));"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_CLIENT_NAME \u003d \"Alice\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_CLIENT_CONTACT \u003d \"+91234567\"; // + not allowed"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_CLIENT_EMAIL \u003d \"alice.example.com\"; // missing @"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"    public static final String INVALID_CLIENT_ASKING_PRICE \u003d \"$00800000\"; // leading zeros not allowed"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_CLIENT_NAME \u003d \"Alice\";"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_CLIENT_CONTACT \u003d \"91234567\";"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_CLIENT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"    public static final String VALID_CLIENT_ASKING_PRICE \u003d \"$800,000\";"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d Tests for general shared parser methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"    public void parseName_null_returnsNull() throws Exception {"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseName((String) null));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_PROPERTY_NAME));"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_APPOINTMENT_NAME));"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_CLIENT_NAME));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"        Name expectedName \u003d new Name(VALID_PROPERTY_NAME);"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_PROPERTY_NAME));"},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"        expectedName \u003d new Name(VALID_APPOINTMENT_NAME);"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_APPOINTMENT_NAME));"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":"        expectedName \u003d new Name(VALID_CLIENT_NAME);"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_CLIENT_NAME));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_NAME + WHITESPACE;"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"        Name expectedName \u003d new Name(VALID_PROPERTY_NAME);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"        nameWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT_NAME + WHITESPACE;"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"        expectedName \u003d new Name(VALID_APPOINTMENT_NAME);"},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"        nameWithWhitespace \u003d WHITESPACE + VALID_CLIENT_NAME + WHITESPACE;"},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"        expectedName \u003d new Name(VALID_CLIENT_NAME);"},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"    public void parseRemark_null_returnsNull() throws Exception {"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseRemark((String) null));"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":"    public void parseRemark_invalidValue_throwsParseException() {"},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRemark(INVALID_PROPERTY_REMARK));"},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRemark(INVALID_APPOINTMENT_REMARK));"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"        Remark expectedRemark \u003d new Remark(VALID_PROPERTY_REMARK);"},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_PROPERTY_REMARK));"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":"        expectedRemark \u003d new Remark(VALID_APPOINTMENT_REMARK);"},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_APPOINTMENT_REMARK));"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":"        String remarkWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_REMARK + WHITESPACE;"},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"        Remark expectedRemark \u003d new Remark(VALID_PROPERTY_REMARK);"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"        remarkWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT_REMARK + WHITESPACE;"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"        expectedRemark \u003d new Remark(VALID_APPOINTMENT_REMARK);"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"},{"lineNumber":181,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":183,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d Tests for property parser methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyType_null_throwsNullPointerException() {"},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePropertyType((String) null));"},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":190,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyType_invalidValue_throwsParseException() {"},{"lineNumber":192,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePropertyType(INVALID_PROPERTY_TYPE));"},{"lineNumber":193,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":195,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyType_validValueWithoutWhitespace_returnsType() throws Exception {"},{"lineNumber":197,"author":{"gitId":"w2vgd"},"content":"        Type expectedType \u003d new Type(VALID_PROPERTY_TYPE);"},{"lineNumber":198,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedType, ParserUtil.parsePropertyType(VALID_PROPERTY_TYPE));"},{"lineNumber":199,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":202,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"},{"lineNumber":203,"author":{"gitId":"w2vgd"},"content":"        String typeWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_TYPE + WHITESPACE;"},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":"        Type expectedType \u003d new Type(VALID_PROPERTY_TYPE);"},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedType, ParserUtil.parsePropertyType(typeWithWhitespace));"},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":208,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":209,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyAddress_null_throwsNullPointerException() {"},{"lineNumber":210,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePropertyAddress((String) null));"},{"lineNumber":211,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":213,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":214,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyAddress_invalidValue_throwsParseException() {"},{"lineNumber":215,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePropertyAddress(INVALID_PROPERTY_ADDRESS));"},{"lineNumber":216,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":218,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":220,"author":{"gitId":"w2vgd"},"content":"        Address expectedAddress \u003d new Address(VALID_PROPERTY_ADDRESS);"},{"lineNumber":221,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedAddress, ParserUtil.parsePropertyAddress(VALID_PROPERTY_ADDRESS));"},{"lineNumber":222,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":224,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":225,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":226,"author":{"gitId":"w2vgd"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_ADDRESS + WHITESPACE;"},{"lineNumber":227,"author":{"gitId":"w2vgd"},"content":"        Address expectedAddress \u003d new Address(VALID_PROPERTY_ADDRESS);"},{"lineNumber":228,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedAddress, ParserUtil.parsePropertyAddress(addressWithWhitespace));"},{"lineNumber":229,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":231,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":232,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyPostal_null_throwsNullPointerException() {"},{"lineNumber":233,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePropertyPostal((String) null));"},{"lineNumber":234,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":236,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":237,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyPostal_invalidValue_throwsParseException() {"},{"lineNumber":238,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePropertyPostal(INVALID_PROPERTY_POSTAL));"},{"lineNumber":239,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":241,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":242,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyPostal_validValueWithoutWhitespace_returnsPostal() throws Exception {"},{"lineNumber":243,"author":{"gitId":"w2vgd"},"content":"        PostalCode expectedPostal \u003d new PostalCode(VALID_PROPERTY_POSTAL);"},{"lineNumber":244,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedPostal, ParserUtil.parsePropertyPostal(VALID_PROPERTY_POSTAL));"},{"lineNumber":245,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":247,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":248,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyPostal_validValueWithWhitespace_returnsTrimmedPostal() throws Exception {"},{"lineNumber":249,"author":{"gitId":"w2vgd"},"content":"        String postalWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_POSTAL + WHITESPACE;"},{"lineNumber":250,"author":{"gitId":"w2vgd"},"content":"        PostalCode expectedPostal \u003d new PostalCode(VALID_PROPERTY_POSTAL);"},{"lineNumber":251,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedPostal, ParserUtil.parsePropertyPostal(postalWithWhitespace));"},{"lineNumber":252,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":254,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":255,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyDeadline_null_throwsNullPointerException() {"},{"lineNumber":256,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePropertyDeadline((String) null));"},{"lineNumber":257,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":259,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":260,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyDeadline_invalidValue_throwsParseException() {"},{"lineNumber":261,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePropertyDeadline(INVALID_PROPERTY_DEADLINE));"},{"lineNumber":262,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":264,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":265,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"},{"lineNumber":266,"author":{"gitId":"w2vgd"},"content":"        Deadline expectedDeadline \u003d new Deadline(VALID_PROPERTY_DEADLINE_LOCALDATE);"},{"lineNumber":267,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedDeadline, ParserUtil.parsePropertyDeadline(VALID_PROPERTY_DEADLINE));"},{"lineNumber":268,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":270,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":271,"author":{"gitId":"w2vgd"},"content":"    public void parsePropertyDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"},{"lineNumber":272,"author":{"gitId":"w2vgd"},"content":"        String deadlineWithWhitespace \u003d WHITESPACE + VALID_PROPERTY_DEADLINE + WHITESPACE;"},{"lineNumber":273,"author":{"gitId":"w2vgd"},"content":"        Deadline expectedDeadline \u003d new Deadline(VALID_PROPERTY_DEADLINE_LOCALDATE);"},{"lineNumber":274,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedDeadline, ParserUtil.parsePropertyDeadline(deadlineWithWhitespace));"},{"lineNumber":275,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":277,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d Tests for client parser methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":278,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":279,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":280,"author":{"gitId":"w2vgd"},"content":"    public void parseClientContact_null_returnsNull() throws Exception {"},{"lineNumber":281,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseClientContact((String) null));"},{"lineNumber":282,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":284,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":285,"author":{"gitId":"w2vgd"},"content":"    public void parseClientContact_invalidValue_throwsParseException() {"},{"lineNumber":286,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClientContact(INVALID_CLIENT_CONTACT));"},{"lineNumber":287,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":289,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":290,"author":{"gitId":"w2vgd"},"content":"    public void parseClientContact_validValueWithoutWhitespace_returnsContact() throws Exception {"},{"lineNumber":291,"author":{"gitId":"w2vgd"},"content":"        Contact expectedContact \u003d new Contact(VALID_CLIENT_CONTACT);"},{"lineNumber":292,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedContact, ParserUtil.parseClientContact(VALID_CLIENT_CONTACT));"},{"lineNumber":293,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":294,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":295,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":296,"author":{"gitId":"w2vgd"},"content":"    public void parseClientContact_validValueWithWhitespace_returnsTrimmedContact() throws Exception {"},{"lineNumber":297,"author":{"gitId":"w2vgd"},"content":"        String contactWithWhitespace \u003d WHITESPACE + VALID_CLIENT_CONTACT + WHITESPACE;"},{"lineNumber":298,"author":{"gitId":"w2vgd"},"content":"        Contact expectedContact \u003d new Contact(VALID_CLIENT_CONTACT);"},{"lineNumber":299,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedContact, ParserUtil.parseClientContact(contactWithWhitespace));"},{"lineNumber":300,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":302,"author":{"gitId":"w2vgd"},"content":"    public void parseClientEmail_null_returnsNull() throws Exception {"},{"lineNumber":303,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseClientEmail((String) null));"},{"lineNumber":304,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":306,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":307,"author":{"gitId":"w2vgd"},"content":"    public void parseClientEmail_invalidValue_throwsParseException() {"},{"lineNumber":308,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClientEmail(INVALID_CLIENT_EMAIL));"},{"lineNumber":309,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":311,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":312,"author":{"gitId":"w2vgd"},"content":"    public void parseClientEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":313,"author":{"gitId":"w2vgd"},"content":"        Email expectedEmail \u003d new Email(VALID_CLIENT_EMAIL);"},{"lineNumber":314,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedEmail, ParserUtil.parseClientEmail(VALID_CLIENT_EMAIL));"},{"lineNumber":315,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":317,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":318,"author":{"gitId":"w2vgd"},"content":"    public void parseClientEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":319,"author":{"gitId":"w2vgd"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_CLIENT_EMAIL + WHITESPACE;"},{"lineNumber":320,"author":{"gitId":"w2vgd"},"content":"        Email expectedEmail \u003d new Email(VALID_CLIENT_EMAIL);"},{"lineNumber":321,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedEmail, ParserUtil.parseClientEmail(emailWithWhitespace));"},{"lineNumber":322,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":324,"author":{"gitId":"w2vgd"},"content":"    public void parseClientAskingPrice_null_returnsNull() throws Exception {"},{"lineNumber":325,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseClientAskingPrice((String) null));"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":329,"author":{"gitId":"w2vgd"},"content":"    public void parseClientAskingPrice_invalidValue_throwsParseException() {"},{"lineNumber":330,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClientAskingPrice(INVALID_CLIENT_ASKING_PRICE));"},{"lineNumber":331,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":332,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":333,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":334,"author":{"gitId":"w2vgd"},"content":"    public void parseClientAskingPrice_validValueWithoutWhitespace_returnsAskingPrice() throws Exception {"},{"lineNumber":335,"author":{"gitId":"w2vgd"},"content":"        AskingPrice expectedAskingPrice \u003d new AskingPrice(VALID_CLIENT_ASKING_PRICE);"},{"lineNumber":336,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedAskingPrice, ParserUtil.parseClientAskingPrice(VALID_CLIENT_ASKING_PRICE));"},{"lineNumber":337,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":339,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":340,"author":{"gitId":"w2vgd"},"content":"    public void parseClientAskingPrice_validValueWithWhitespace_returnsTrimmedAskingPrice() throws Exception {"},{"lineNumber":341,"author":{"gitId":"w2vgd"},"content":"        String askingPriceWithWhitespace \u003d WHITESPACE + VALID_CLIENT_ASKING_PRICE + WHITESPACE;"},{"lineNumber":342,"author":{"gitId":"w2vgd"},"content":"        AskingPrice expectedAskingPrice \u003d new AskingPrice(VALID_CLIENT_ASKING_PRICE);"},{"lineNumber":343,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedAskingPrice, ParserUtil.parseClientAskingPrice(askingPriceWithWhitespace));"},{"lineNumber":344,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d Tests for appointment parser methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":346,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":348,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentDate_null_throwsNullPointerException() {"},{"lineNumber":349,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAppointmentDate((String) null));"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":353,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentDate_invalidValue_throwsParseException() {"},{"lineNumber":354,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAppointmentDate(INVALID_APPOINTMENT_DATE));"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":358,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentDate_validValueWithoutWhitespace_returnsDate() throws Exception {"},{"lineNumber":359,"author":{"gitId":"w2vgd"},"content":"        Date expectedDate \u003d new Date(VALID_APPOINTMENT_DATE_LOCALDATE);"},{"lineNumber":360,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedDate, ParserUtil.parseAppointmentDate(VALID_APPOINTMENT_DATE));"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":364,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"},{"lineNumber":365,"author":{"gitId":"w2vgd"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT_DATE + WHITESPACE;"},{"lineNumber":366,"author":{"gitId":"w2vgd"},"content":"        Date expectedDate \u003d new Date(VALID_APPOINTMENT_DATE_LOCALDATE);"},{"lineNumber":367,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedDate, ParserUtil.parseAppointmentDate(dateWithWhitespace));"},{"lineNumber":368,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":370,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":371,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentTime_null_returnsNull() throws Exception {"},{"lineNumber":372,"author":{"gitId":"w2vgd"},"content":"        assertNull(ParserUtil.parseAppointmentTime((String) null));"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":376,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentTime_invalidValue_throwsParseException() {"},{"lineNumber":377,"author":{"gitId":"w2vgd"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAppointmentTime(INVALID_APPOINTMENT_TIME));"},{"lineNumber":378,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":380,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":381,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentTime_validValueWithoutWhitespace_returnsTime() throws Exception {"},{"lineNumber":382,"author":{"gitId":"w2vgd"},"content":"        Time expectedTime \u003d new Time(VALID_APPOINTMENT_TIME_LOCALTIME);"},{"lineNumber":383,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedTime, ParserUtil.parseAppointmentTime(VALID_APPOINTMENT_TIME));"},{"lineNumber":384,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":386,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":387,"author":{"gitId":"w2vgd"},"content":"    public void parseAppointmentTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"},{"lineNumber":388,"author":{"gitId":"w2vgd"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT_TIME + WHITESPACE;"},{"lineNumber":389,"author":{"gitId":"w2vgd"},"content":"        Time expectedTime \u003d new Time(VALID_APPOINTMENT_TIME_LOCALTIME);"},{"lineNumber":390,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expectedTime, ParserUtil.parseAppointmentTime(timeWithWhitespace));"},{"lineNumber":391,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":393,"author":{"gitId":"w2vgd"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":394,"author":{"gitId":"w2vgd"},"content":"    // Placeholder test cases for Person attributes"},{"lineNumber":395,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":408,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Phone expectedPhone \u003d new seedu.address.model.person.Phone(VALID_PHONE);"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":415,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Phone expectedPhone \u003d new seedu.address.model.person.Phone(VALID_PHONE);"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":431,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Address expectedAddress \u003d new seedu.address.model.person.Address(VALID_ADDRESS);"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":438,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Address expectedAddress \u003d new seedu.address.model.person.Address(VALID_ADDRESS);"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":443,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":448,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":454,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Email expectedEmail \u003d new seedu.address.model.person.Email(VALID_EMAIL);"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":459,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":461,"author":{"gitId":"w2vgd"},"content":"        seedu.address.model.person.Email expectedEmail \u003d new seedu.address.model.person.Email(VALID_EMAIL);"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":466,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":479,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":486,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":490,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":494,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":496,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":500,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":504,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":505,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":507,"author":{"gitId":"-"},"content":""},{"lineNumber":508,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":191,"w2vgd":319}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"        String[] keywords \u003d ALICE.getName().name.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":131,"w2vgd":1}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MEET_ALEX;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MEET_BOB;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_MEET_BOB;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalAppointments.MEET_ALEX;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalAppointments.MEET_BOB;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"public class AppointmentTest {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public void isSameAppointment() {"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MEET_ALEX.isSameAppointment(MEET_ALEX));"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.isSameAppointment(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // same name and date, all other attributes different -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        Appointment editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withRemark(VALID_REMARK_MEET_BOB).build();"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MEET_ALEX.isSameAppointment(editedMeetAlex));"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withName(VALID_NAME_MEET_BOB).build();"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.isSameAppointment(editedMeetAlex));"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        // different date, all other attributes same -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withDate(LocalDate.parse(\"2021-02-25\")).build();"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.isSameAppointment(editedMeetAlex));"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_MEET_ALEX + \" \";"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withName(nameWithTrailingSpaces).build();"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.isSameAppointment(editedMeetAlex));"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        Appointment meetAlexCopy \u003d new AppointmentBuilder(MEET_ALEX).build();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MEET_ALEX.equals(meetAlexCopy));"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MEET_ALEX.equals(MEET_ALEX));"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(null));"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        // different type -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(5));"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"        // different person -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(MEET_BOB));"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        // different name -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        Appointment editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withName(VALID_NAME_MEET_BOB).build();"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(editedMeetAlex));"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        // different remark -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withRemark(VALID_REMARK_MEET_BOB).build();"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(editedMeetAlex));"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        // different date -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        editedMeetAlex \u003d new AppointmentBuilder(MEET_ALEX).withDate(LocalDate.parse(\"2021-12-31\")).build();"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MEET_ALEX.equals(editedMeetAlex));"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":75}},{"path":"src/test/java/seedu/address/model/appointment/DateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class DateTest {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Jan 24 2021\","},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                new Date(LocalDate.parse(\"2021-01-24\")).toString());"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Feb 29 2000\","},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"                new Date(LocalDate.parse(\"2000-02-29\")).toString());"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":24}},{"path":"src/test/java/seedu/address/model/appointment/TimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class TimeTest {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Time(null));"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"9:00AM\","},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                new Time(LocalTime.parse(\"09:00\")).toString());"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"11:59PM\","},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"                new Time(LocalTime.parse(\"23:59\")).toString());"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":24}},{"path":"src/test/java/seedu/address/model/name/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.name;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Name.isValidName(\"mayfair*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Name.isValidName(\"mayfair\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Name.isValidName(\"mayfair 2\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Name.isValidName(\"The Mayfair\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Name.isValidName(\"The Best But Most Expensive Building In Singapore\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"w2vgd":6,"-":34}},{"path":"src/test/java/seedu/address/model/property/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":36}},{"path":"src/test/java/seedu/address/model/property/DeadlineTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Deadline(null));"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Jan 24 2021\","},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                new Deadline(LocalDate.parse(\"2021-01-24\")).toString());"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Feb 29 2000\","},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"                new Deadline(LocalDate.parse(\"2000-02-29\")).toString());"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":24}},{"path":"src/test/java/seedu/address/model/property/PostalCodeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class PostalCodeTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PostalCode(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidPostal_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidPostal \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new PostalCode(invalidPostal));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidPostal() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null postal code"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e PostalCode.isValidPostal(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid postal codes"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\"12\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\"postal\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\"12post34\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertFalse(PostalCode.isValidPostal(\"123 456\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        // valid postal codes"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertTrue(PostalCode.isValidPostal(\"123\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertTrue(PostalCode.isValidPostal(\"123456\"));"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertTrue(PostalCode.isValidPostal(\"123456789123456789\")); // long postal code"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":40}},{"path":"src/test/java/seedu/address/model/property/PropertyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BURGHLEY_DRIVE;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BURGHLEY_DRIVE;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MAYFAIR;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_POSTAL_BURGHLEY_DRIVE;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BURGHLEY_DRIVE;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalProperties.BURGHLEY_DRIVE;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.TypicalProperties.MAYFAIR;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import seedu.address.testutil.PropertyBuilder;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"public class PropertyTest {"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public void isSameProperty() {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MAYFAIR.isSameProperty(MAYFAIR));"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.isSameProperty(null));"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        // same address and postal code, all other attributes different -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        Property editedMayfair \u003d new PropertyBuilder(MAYFAIR).withName(VALID_NAME_BURGHLEY_DRIVE)"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"                .withType(VALID_TYPE_BURGHLEY_DRIVE).withDeadline(LocalDate.parse(\"2021-07-31\"))"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"                .build();"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MAYFAIR.isSameProperty(editedMayfair));"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        // different address, all other attributes same -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withAddress(VALID_ADDRESS_BURGHLEY_DRIVE).build();"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.isSameProperty(editedMayfair));"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        // different postal, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withPostal(VALID_POSTAL_BURGHLEY_DRIVE).build();"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.isSameProperty(editedMayfair));"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        // address has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        String addressWithTrailingSpaces \u003d VALID_NAME_MAYFAIR + \" \";"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withAddress(addressWithTrailingSpaces).build();"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.isSameProperty(editedMayfair));"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public void equals() {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        Property mayfairCopy \u003d new PropertyBuilder(MAYFAIR).build();"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MAYFAIR.equals(mayfairCopy));"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        // same object -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        assertTrue(MAYFAIR.equals(MAYFAIR));"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(null));"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        // different type -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(5));"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        // different person -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(BURGHLEY_DRIVE));"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        // different name -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        Property editedMayfair \u003d new PropertyBuilder(MAYFAIR).withName(VALID_NAME_BURGHLEY_DRIVE).build();"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(editedMayfair));"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        // different type -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withType(VALID_TYPE_BURGHLEY_DRIVE).build();"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(editedMayfair));"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"        // different address -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withAddress(VALID_ADDRESS_BURGHLEY_DRIVE).build();"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(editedMayfair));"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"        // different postal -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withPostal(VALID_POSTAL_BURGHLEY_DRIVE).build();"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(editedMayfair));"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"        // different deadline -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        editedMayfair \u003d new PropertyBuilder(MAYFAIR).withDeadline(LocalDate.parse(\"2021-07-31\"))"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"                .build();"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"        assertFalse(MAYFAIR.equals(editedMayfair));"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":88}},{"path":"src/test/java/seedu/address/model/property/TypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class TypeTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Type(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidType_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidType \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidType));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidType() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null type"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid type"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Type.isValidType(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Type.isValidType(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Type.isValidType(\"hdb \")); // contains extraneous trailing spaces"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Type.isValidType(\"hdb1\")); // contains extraneous trailing characters"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Type.isValidType(\"1hdb\")); // contains extraneous leading characters"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        // valid type"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"hdb\")); // hdb type"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"condo\")); // condo only"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"landed\")); // landed type"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"Hdb\")); // hdb in title case"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"Condo\")); // condo in title case"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"Landed\")); // landed in title case"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"HDB\")); // hdb in uppercase"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"CONDO\")); // condo in uppercase"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Type.isValidType(\"LANDED\")); // landed in uppercase"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":45}},{"path":"src/test/java/seedu/address/model/property/client/AskingPriceTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class AskingPriceTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AskingPrice(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidAskingPrice_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidAskingPrice \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AskingPrice(invalidAskingPrice));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidAskingPrice() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null asking price"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e AskingPrice.isValidAskingPrice(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid asking price"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$01000\")); // leading zeros"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$00\")); // double zeros"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$1000.0\")); // only 1 decimal place"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$1000.000\")); // 3 decimal places"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$100 000\")); // spaces within digits"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$1000,000\")); // inconsistent commas"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$10,00,00\")); // inconsistent commas"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$1,000000\")); // inconsistent commas"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$100K\")); // alphabets within digits"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$100000.\")); // ends with a decimal point"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\" $1000000\")); // leading space"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertFalse(AskingPrice.isValidAskingPrice(\"$1000000 \")); // trailing space"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        // valid asking price without dollar sign"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"1000000\")); // without any commas"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"1000000.00\")); // with cents"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"1,000,000\")); // consistent commas"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"1,000,000.00\")); // consistent commas with cents"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"0\")); // zero dollars"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"99999999999\")); // large number"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        // valid asking price with dollar sign"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$1000000\")); // without any commas"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$1000000.00\")); // with cents"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$1,000,000\")); // consistent commas"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$1,000,000.00\")); // consistent commas with cents"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$0\")); // zero dollars"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        assertTrue(AskingPrice.isValidAskingPrice(\"$99,999,999,999\")); // large number"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":59}},{"path":"src/test/java/seedu/address/model/property/client/ClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class ClientTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    private static final String DEFAULT_CLIENT_NAME_STRING \u003d \"Alice\";"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    private static final String DEFAULT_CLIENT_CONTACT_STRING \u003d \"91234567\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    private static final String DEFAULT_CLIENT_EMAIL_STRING \u003d \"alice@gmail.com\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private static final String DEFAULT_CLIENT_ASKING_PRICE_STRING \u003d \"$800,000\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private static final Name DEFAULT_CLIENT_NAME \u003d new Name(DEFAULT_CLIENT_NAME_STRING);"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    private static final Contact DEFAULT_CLIENT_CONTACT \u003d new Contact(DEFAULT_CLIENT_CONTACT_STRING);"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    private static final Email DEFAULT_CLIENT_EMAIL \u003d new Email(DEFAULT_CLIENT_EMAIL_STRING);"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    private static final AskingPrice DEFAULT_CLIENT_ASKING_PRICE \u003d new AskingPrice(DEFAULT_CLIENT_ASKING_PRICE_STRING);"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        // Missing all fields"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"\","},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"                new Client(null, null, null, null).toString());"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        // All fields present"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice; Client Contact: 91234567; Client Email: alice@gmail.com;\""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"                + \" Client Asking Price: $800,000\","},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, DEFAULT_CLIENT_CONTACT, DEFAULT_CLIENT_EMAIL,"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"                        DEFAULT_CLIENT_ASKING_PRICE).toString());"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        // Missing name"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Contact: 91234567; Client Email: alice@gmail.com; Client Asking Price: $800,000\","},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"                new Client(null, DEFAULT_CLIENT_CONTACT, DEFAULT_CLIENT_EMAIL, DEFAULT_CLIENT_ASKING_PRICE)"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"                        .toString());"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        // Missing contact"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice; Client Email: alice@gmail.com; Client Asking Price: $800,000\","},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, null, DEFAULT_CLIENT_EMAIL, DEFAULT_CLIENT_ASKING_PRICE)"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"                        .toString());"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        // Missing email"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice; Client Contact: 91234567; Client Asking Price: $800,000\","},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, DEFAULT_CLIENT_CONTACT, null, DEFAULT_CLIENT_ASKING_PRICE)"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"                        .toString());"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        // Missing asking price"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice; Client Contact: 91234567; Client Email: alice@gmail.com\","},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, DEFAULT_CLIENT_CONTACT, DEFAULT_CLIENT_EMAIL, null)"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"                        .toString());"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        // Missing two fields"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice; Client Email: alice@gmail.com\","},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, null, DEFAULT_CLIENT_EMAIL, null).toString());"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Contact: 91234567; Client Asking Price: $800,000\","},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"                new Client(null, DEFAULT_CLIENT_CONTACT, null, DEFAULT_CLIENT_ASKING_PRICE).toString());"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        // Missing three fields"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Name: Alice\","},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"                new Client(DEFAULT_CLIENT_NAME, null, null, null).toString());"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Client Asking Price: $800,000\","},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"                new Client(null, null, null, DEFAULT_CLIENT_ASKING_PRICE).toString());"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":64}},{"path":"src/test/java/seedu/address/model/property/client/ContactTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class ContactTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Contact(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidContact_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidContact \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Contact(invalidContact));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidContact() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null contact number"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e Contact.isValidContact(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid contact numbers"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\"91\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\"contact\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\"9123p456\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Contact.isValidContact(\"9123 4567\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        // valid contact numbers"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Contact.isValidContact(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Contact.isValidContact(\"91234567\"));"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Contact.isValidContact(\"8124293842033123\")); // long contact numbers"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":40}},{"path":"src/test/java/seedu/address/model/property/client/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.property.client;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        // missing some parts of the email"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        // valid email"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":61}},{"path":"src/test/java/seedu/address/model/remark/RemarkTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.model.remark;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class RemarkTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void constructor_invalidRemark_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        String invalidRemark \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public void isValidRemark() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        // null remark"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        // invalid remark"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Remark.isValidRemark(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertFalse(Remark.isValidRemark(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        // valid remark"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Remark.isValidRemark(\"Urgent to sell\"));"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Remark.isValidRemark(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertTrue(Remark.isValidRemark(\"The remark for this property is a very very long string\")); // long remark"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":36}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":109,"w2vgd":1}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.remark.Remark;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class AppointmentBuilder {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_NAME \u003d \"Meet Alex\";"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_REMARK \u003d \"At M Hotel\";"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public static final LocalDate DEFAULT_DATE \u003d LocalDate.parse(\"2021-12-25\");"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    private Name name;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    private Remark remark;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    private Date date;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * Creates an {@code AppointmentBuilder} with the default details."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBuilder() {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        date \u003d new Date(DEFAULT_DATE);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        name \u003d appointmentToCopy.getName();"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        remark \u003d appointmentToCopy.getRemarks();"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        date \u003d appointmentToCopy.getDate();"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Name} of the {@code Appointment} that we are building."},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBuilder withName(String name) {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Remark} of the {@code Appointment} that we are building."},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBuilder withRemark(String type) {"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        this.remark \u003d new Remark(type);"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Date} of the {@code Appointment} that we are building."},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    public AppointmentBuilder withDate(LocalDate date) {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        this.date \u003d new Date(date);"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"    public Appointment build() {"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"        return new Appointment(name, remark, date);"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":68}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":86,"w2vgd":1}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":95,"w2vgd":1}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        sb.append(PREFIX_NAME + person.getName().name + \" \");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":30,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.name).append(\" \"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":52,"w2vgd":2}},{"path":"src/test/java/seedu/address/testutil/PropertyBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.name.Name;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Address;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Deadline;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.PostalCode;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Type;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":" * A utility class to help with building Property objects."},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"public class PropertyBuilder {"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_NAME \u003d \"Mayfair\";"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_TYPE \u003d \"condo\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"1 Jurong East Street 32, #08-111\";"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public static final String DEFAULT_POSTAL \u003d \"609477\";"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public static final LocalDate DEFAULT_DEADLINE \u003d LocalDate.parse(\"2021-12-31\");"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    private Name name;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    private Type type;"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    private Address address;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    private PostalCode postal;"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    private Deadline deadline;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Creates a {@code PropertyBuilder} with the default details."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder() {"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        type \u003d new Type(DEFAULT_TYPE);"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        postal \u003d new PostalCode(DEFAULT_POSTAL);"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        deadline \u003d new Deadline(DEFAULT_DEADLINE);"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     * Initializes the PropertyBuilder with the data of {@code propertyToCopy}."},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder(Property propertyToCopy) {"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        name \u003d propertyToCopy.getName();"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        type \u003d propertyToCopy.getPropertyType();"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        address \u003d propertyToCopy.getAddress();"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        postal \u003d propertyToCopy.getPostalCode();"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        deadline \u003d propertyToCopy.getDeadline();"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Name} of the {@code Property} that we are building."},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder withName(String name) {"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Type} of the {@code Property} that we are building."},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder withType(String type) {"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        this.type \u003d new Type(type);"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Address} of the {@code Property} that we are building."},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder withAddress(String address) {"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code PostalCode} of the {@code Property} that we are building."},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder withPostal(String postal) {"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"        this.postal \u003d new PostalCode(postal);"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"     * Sets the {@code Deadline} of the {@code Property} that we are building."},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"    public PropertyBuilder withDeadline(LocalDate deadline) {"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d new Deadline(deadline);"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"        return this;"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"    public Property build() {"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"        return new Property(name, type, address, postal, deadline);"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":94}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.AppointmentBook;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests."},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"public class TypicalAppointments {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public static final Appointment MEET_ALEX \u003d new AppointmentBuilder().withName(\"Meet Alex\")"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"            .withRemark(\"At M Hotel\").withDate(LocalDate.parse(\"2021-12-25\"))"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public static final Appointment MEET_BOB \u003d new AppointmentBuilder().withName(\"Meet Bob\")"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"            .withRemark(\"At Plaza Sing Starbucks\").withDate(LocalDate.parse(\"2021-02-25\"))"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public static final Appointment MEET_CHARLIE \u003d new AppointmentBuilder().withName(\"Meet Charlie\")"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"            .withRemark(\"At client\u0027s house\").withDate(LocalDate.parse(\"2021-08-17\"))"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    private TypicalAppointments() {} // prevents instantiation"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"     * Returns an {@code AppointmentBook} with all the typical appointments."},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    public static AppointmentBook getTypicalAppointmentBook() {"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        AppointmentBook appointmentBook \u003d new AppointmentBook();"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"            appointmentBook.addAppointment(appointment);"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        return appointmentBook;"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEET_ALEX, MEET_BOB, MEET_CHARLIE));"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":42}},{"path":"src/test/java/seedu/address/testutil/TypicalProperties.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.PropertyBook;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import seedu.address.model.property.Property;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" * A utility class containing a list of {@code Property} objects to be used in tests."},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"public class TypicalProperties {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public static final Property WOODLANDS_CRESCENT \u003d new PropertyBuilder().withName(\"Woodlands Crescent\")"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"            .withType(\"Hdb\").withAddress(\"Woodlands Crescent, #01-01\")"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"            .withPostal(\"731784\").withDeadline(LocalDate.parse(\"2021-08-31\"))"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public static final Property MAYFAIR \u003d new PropertyBuilder().withName(\"Mayfair\")"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"            .withType(\"Condo\").withAddress(\"1 Jurong East Street 32, #08-111\")"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"            .withPostal(\"609477\").withDeadline(LocalDate.parse(\"2021-12-31\"))"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public static final Property BURGHLEY_DRIVE \u003d new PropertyBuilder().withName(\"Burghley Drive\")"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            .withType(\"Landed\").withAddress(\"12 Burghley Drive\")"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"            .withPostal(\"123456\").withDeadline(LocalDate.parse(\"2021-07-31\"))"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"            .build();"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    private TypicalProperties() {} // prevents instantiation"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * Returns a {@code PropertyBook} with all the typical properties."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    public static PropertyBook getTypicalPropertyBook() {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        PropertyBook propertyBook \u003d new PropertyBook();"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        for (Property property : getTypicalProperties()) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"            propertyBook.addProperty(property);"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        return propertyBook;"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    public static List\u003cProperty\u003e getTypicalProperties() {"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(WOODLANDS_CRESCENT, MAYFAIR, BURGHLEY_DRIVE));"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":45}}]
