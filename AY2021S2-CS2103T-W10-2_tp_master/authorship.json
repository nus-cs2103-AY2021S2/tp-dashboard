[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-2/tp/actions)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"* This is the CS2103T Project for **Team CS2103T-W10-2**, the name of the project is StoreMando."},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"* This product is a centralized inventory manager that helps to track the location of items in a household, their"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"  individual quantities and respective expiry dates (if applicable). \u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"  The usage of this product can eventually extend to other places outside households, however the core of our"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"  development will surround the usage in a household."},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"* It is named `StoreMando`, a combination of the words Storage and Commando, the goal of our product is to make it the"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"  go-to product to track inventory."},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"* For the detailed documentation of this project, see"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"  the **[StoreMando Product Website](https://ay2021s2-cs2103t-w10-2.github.io/tp/)**."}],"authorContributionMap":{"JayChenYJ":15,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"You can reach us at the email `e0406389@u.nus.edu`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## StoreMando Project Team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"### Chen Yan Jia Jay"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"\u003cimg src\u003d\"images/jaychenyj.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"[[github](https://github.com/JayChenYJ)]"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"[[portfolio](team/jaychenyj.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"* Role \u0026 Responsibilities: Team Lead, Scheduling and tracking, Deliverables and deadlines"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"### Chew Wei Hao"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"\u003cimg src\u003d\"images/chewwh09.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"[[github](http://github.com/chewwh09)]"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"[[portfolio](team/chewwh09.md)]"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"* Roles and Responsibilities: Logic expert, Code Quality, Documentation"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Md-Fazil"},"content":"### Mohamed Fazil"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Md-Fazil"},"content":"\u003cimg src\u003d\"images/md-fazil.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Md-Fazil"},"content":"[[github](http://github.com/Md-Fazil)] [[portfolio](team/mohamedfazil.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Md-Fazil"},"content":"* Roles \u0026 Responsibilities: In charge of documentation and integration. Git Expert."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"### Kumaran S/O Selvvaratnam"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"\u003cimg src\u003d\"images/kumsssss.png\" width\u003d\"200px\"\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"[[github](http://github.com/kumsssss)]"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"[[portfolio](team/kumaran.md)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"* Role \u0026 Responsibilities: In charge of Code Quality and Model, Testing Expert"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"github-amanda"},"content":"### Amanda Ang Yee Min"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"\u003cimg src\u003d\"images/github-amanda.png\" width\u003d\"200px\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"github-amanda"},"content":"[[github](http://github.com/github-amanda)]"},{"lineNumber":52,"author":{"gitId":"github-amanda"},"content":"[[portfolio](team/amandaang.md)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"* Roles \u0026 Responsibilities: UI Expert, Testing Expert \u0026 SourceTree Expert"}],"authorContributionMap":{"kumsssss":4,"github-amanda":5,"JayChenYJ":7,"Md-Fazil":4,"chewwh09":5,"-":29}},{"path":"docs/Configuration.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Configuration guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"Certain properties of the application can be controlled (e.g. user preferences file location, logging level) through the configuration file (default: `config.json`)."}],"authorContributionMap":{"JayChenYJ":1,"-":5}},{"path":"docs/DevOps.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: DevOps guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Build automation"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"Given below are how to use Gradle for some important project tasks."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  e.g. `./gradlew clean`"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"* **`shadowJar`**: Uses the ShadowJar plugin to create a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  e.g. `./gradlew shadowJar`."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **`run`**: Builds and runs the application.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  **`runShadow`**: Builds the application as a fat JAR, and then runs it."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  **`checkstyleTest`**: Runs the code style check for the test code base."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"* **`test`**: Runs all tests.\u003c"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * `./gradlew test` — Runs all tests"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * `./gradlew clean test` — Cleans the project and runs tests"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Continuous integration (CI)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Code coverage"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Once you are inside Codecov web app, add your fork to CodeCov."},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3) in that page reflects the coverage of your project."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"### Repository-wide checks"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"`./config/travis/run-checks.sh`"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Any warnings or errors will be printed out to the console."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"**If adding new checks:**"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need, and the CI will do the rest."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  * SEVERITY is either ERROR or WARN."},{"lineNumber":65,"author":{"gitId":"-"},"content":"  * FILENAME is the path to the file relative to the current directory."},{"lineNumber":66,"author":{"gitId":"-"},"content":"  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Check scripts must exit with a non-zero exit code if any errors occur."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"## Making a release"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/location/MainApp.java)."},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."}],"authorContributionMap":{"JayChenYJ":3,"-":76}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"* Table of Contents {:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"each component."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"the [diagrams](https://github.com/AY2021S2-CS2103T-W10-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"diagrams."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"**`Main`** has two classes"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"called [`Main`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/Main.java)"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"and [`MainApp`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/MainApp.java)."},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"It is responsible for,"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"* [**`UI`**](#ui-component) The UI of the App."},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"* [**`Logic`**](#logic-component) The command executor."},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"* [**`Model`**](#model-component) Holds the data of the App in memory."},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"* [**`Storage`**](#storage-component) Reads data from, and writes data to, the hard disk."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"  API `interface` mentioned in the previous point)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"the command `delete 1`."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"[`Ui.java`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/ui/Ui.java)"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":", `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"in the `src/main/resources/view` folder. For example, the layout of"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"the [`MainWindow`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/ui/MainWindow.java)"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"is specified"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"in [`MainWindow.fxml`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":90,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"[`Logic.java`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/logic/Logic.java)"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"1. The command execution can affect the `Model` (e.g. adding an item)."},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"   help to the user."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"JayChenYJ"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"call."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":"**"},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"API** : [`Model.java`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/model/Model.java)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":124,"author":{"gitId":"JayChenYJ"},"content":"* stores the location book data."},{"lineNumber":125,"author":{"gitId":"JayChenYJ"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that"},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"  the UI automatically updates when the data in the list change."},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"JayChenYJ"},"content":"**"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":"API** : [`Storage.java`](https://github.com/AY2021S2-CS2103T-W10-2/tp/blob/master/src/main/java/seedu/storemando/storage/Storage.java)"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":142,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":144,"author":{"gitId":"JayChenYJ"},"content":"* can save the location book data in json format and read it back."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"JayChenYJ"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with undo/redo"},{"lineNumber":161,"author":{"gitId":"JayChenYJ"},"content":"history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the"},{"lineNumber":162,"author":{"gitId":"JayChenYJ"},"content":"following operations:"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"JayChenYJ"},"content":"* `VersionedAddressBook#commit()` — Saves the current location book state in its history."},{"lineNumber":165,"author":{"gitId":"JayChenYJ"},"content":"* `VersionedAddressBook#undo()` — Restores the previous location book state from its history."},{"lineNumber":166,"author":{"gitId":"JayChenYJ"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone location book state from its history."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"JayChenYJ"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()`"},{"lineNumber":169,"author":{"gitId":"JayChenYJ"},"content":"and `Model#redoAddressBook()` respectively."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"JayChenYJ"},"content":"Given below is an example usage scenario and how undo/redo mechanism behaves at each step."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"JayChenYJ"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the"},{"lineNumber":174,"author":{"gitId":"JayChenYJ"},"content":"initial location book state, and the `currentStatePointer` pointing to that single location book state."},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"JayChenYJ"},"content":"Step 2. The user executes `delete 5` command to delete the 5th item in the address book. The `delete` command"},{"lineNumber":179,"author":{"gitId":"JayChenYJ"},"content":"calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes"},{"lineNumber":180,"author":{"gitId":"JayChenYJ"},"content":"to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book"},{"lineNumber":181,"author":{"gitId":"JayChenYJ"},"content":"state."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"JayChenYJ"},"content":"Step 3. The user executes `add n/David …​` to add a new item. The `add` command also calls `Model#commitAddressBook()`,"},{"lineNumber":186,"author":{"gitId":"JayChenYJ"},"content":"causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"JayChenYJ"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the location book state will not be saved into the `addressBookStateList`."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"JayChenYJ"},"content":"Step 4. The user now decides that adding the item was a mistake, and decides to undo that action by executing the `undo`"},{"lineNumber":195,"author":{"gitId":"JayChenYJ"},"content":"command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the"},{"lineNumber":196,"author":{"gitId":"JayChenYJ"},"content":"left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":201,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"JayChenYJ"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once"},{"lineNumber":214,"author":{"gitId":"JayChenYJ"},"content":"to the right, pointing to the previously undone state, and restores the location book to that state."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"JayChenYJ"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest location book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"JayChenYJ"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the location book, such"},{"lineNumber":221,"author":{"gitId":"JayChenYJ"},"content":"as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`."},{"lineNumber":222,"author":{"gitId":"JayChenYJ"},"content":"Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"JayChenYJ"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not"},{"lineNumber":227,"author":{"gitId":"JayChenYJ"},"content":"pointing at the end of the `addressBookStateList`, all location book states after the `currentStatePointer` will be"},{"lineNumber":228,"author":{"gitId":"JayChenYJ"},"content":"purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern"},{"lineNumber":229,"author":{"gitId":"JayChenYJ"},"content":"desktop applications follow."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"JayChenYJ"},"content":"* **Alternative 1 (current choice):** Saves the entire location book."},{"lineNumber":242,"author":{"gitId":"-"},"content":"    * Pros: Easy to implement."},{"lineNumber":243,"author":{"gitId":"-"},"content":"    * Cons: May have performance issues in terms of memory usage."},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"JayChenYJ"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":246,"author":{"gitId":"kumsssss"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the item being deleted)."},{"lineNumber":247,"author":{"gitId":"-"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"github-amanda"},"content":"* residents in a household"},{"lineNumber":275,"author":{"gitId":"github-amanda"},"content":"* has a need to manage a significant number of household items"},{"lineNumber":276,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":277,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":278,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":279,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"JayChenYJ"},"content":"**Value proposition**: A centralized inventory manager that helps to track the location of items in a household, their"},{"lineNumber":282,"author":{"gitId":"JayChenYJ"},"content":"individual quantities and respective expiry dates."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"chewwh09"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":289,"author":{"gitId":"-"},"content":"| Priority | As a …​                          | I want to …​                    | So that I can…​                                        |"},{"lineNumber":290,"author":{"gitId":"JayChenYJ"},"content":"| -------- | ---------------------------------   | ---------------------------------- | --------------------------------------------------------- |"},{"lineNumber":291,"author":{"gitId":"github-amanda"},"content":"| `* * *`  | user                                | delete an item                     | remove it when it is expired or used up                   |"},{"lineNumber":292,"author":{"gitId":"github-amanda"},"content":"| `* * *`  | impulsive buyer                     | add a new item                     | keep track of it                                          |"},{"lineNumber":293,"author":{"gitId":"JayChenYJ"},"content":"| `* * *`  | user with many items                | list down all items                | know in one glance all the items I have                   |"},{"lineNumber":294,"author":{"gitId":"JayChenYJ"},"content":"| `* * *`  | forgetful user with many items      | search for an item quickly         | locate them easily                                        |"},{"lineNumber":295,"author":{"gitId":"github-amanda"},"content":"| `*`      | user who stocks up items daily      | update my items                    | change the items\u0027 expiry dates and quantities accordingly |"},{"lineNumber":296,"author":{"gitId":"JayChenYJ"},"content":"| `* *`    | user who likes to tidy up my room   | see all items in the same location | see what items I have in that particular location         |"},{"lineNumber":297,"author":{"gitId":"JayChenYJ"},"content":"| `* *`    | user who tags my items meaningfully | see all items with the same tag    | see what items I have with that particular tag            |"},{"lineNumber":298,"author":{"gitId":"chewwh09"},"content":"| \u0027* *\u0027    | forgetful user                      | be aware of my expiring items      | replace them before it is expired                         |"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"github-amanda"},"content":"_**(more to be added)**_"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"JayChenYJ"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified"},{"lineNumber":305,"author":{"gitId":"JayChenYJ"},"content":"otherwise)"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"chewwh09"},"content":"**Use case: UC1 - Add an item**"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"chewwh09"},"content":"1. User requests for the storage list."},{"lineNumber":312,"author":{"gitId":"chewwh09"},"content":"2. StoreMando displays the storage list."},{"lineNumber":313,"author":{"gitId":"chewwh09"},"content":"3. User input the add command with the item details."},{"lineNumber":314,"author":{"gitId":"chewwh09"},"content":"4. StoreMando adds the item into the storage and displays the updated list."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"chewwh09"},"content":"* 3a. The command has invalid date-time format."},{"lineNumber":319,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":320,"author":{"gitId":"chewwh09"},"content":"    * 3a1. StoreMando shows an error message."},{"lineNumber":321,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":322,"author":{"gitId":"chewwh09"},"content":"    * 3a2. StoreMando prompt the user for a correct input."},{"lineNumber":323,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":324,"author":{"gitId":"chewwh09"},"content":"      Use case resumes at step 3."},{"lineNumber":325,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":326,"author":{"gitId":"chewwh09"},"content":"**Use case: UC2 - Delete an item in a specific area**"},{"lineNumber":327,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":328,"author":{"gitId":"chewwh09"},"content":"**MSS**"},{"lineNumber":329,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":330,"author":{"gitId":"chewwh09"},"content":"1. User wants to \u003cu\u003e list all items in a specific location (UC3). \u003c/u\u003e"},{"lineNumber":331,"author":{"gitId":"chewwh09"},"content":"2. StoreMando displays all items in the location."},{"lineNumber":332,"author":{"gitId":"chewwh09"},"content":"3. User deletes the item in the location."},{"lineNumber":333,"author":{"gitId":"chewwh09"},"content":"4. StoreMando displays the updated storage."},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"chewwh09"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":339,"author":{"gitId":"chewwh09"},"content":"* 3a. The item details don\u0027t match any item in the storage."},{"lineNumber":340,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":341,"author":{"gitId":"chewwh09"},"content":"    * 3a1. StoreMando shows an error message."},{"lineNumber":342,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":343,"author":{"gitId":"chewwh09"},"content":"    * 3a2. StoreMando prompt the user for a correct input."},{"lineNumber":344,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":345,"author":{"gitId":"chewwh09"},"content":"      Use case resumes at step 3."},{"lineNumber":346,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":347,"author":{"gitId":"chewwh09"},"content":"* 3b. The command has an out-of-range index."},{"lineNumber":348,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":349,"author":{"gitId":"chewwh09"},"content":"    * 3b1. StoreMando shows an error message."},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"chewwh09"},"content":"    * 3b2. StoreMando prompt the user for a correct input."},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"chewwh09"},"content":"      Use case resumes at step 3."},{"lineNumber":354,"author":{"gitId":"-"},"content":""},{"lineNumber":355,"author":{"gitId":"kumsssss"},"content":"**Use case: UC3 - List all items in a specific location**"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"kumsssss"},"content":"1. User requests to display all items in that specific location."},{"lineNumber":360,"author":{"gitId":"JayChenYJ"},"content":"2. StoreMando displays all items in that specific location, can be 0 item."},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"kumsssss"},"content":"**Use case: UC4 - Find an item**"},{"lineNumber":365,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":366,"author":{"gitId":"kumsssss"},"content":"**MSS**"},{"lineNumber":367,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":368,"author":{"gitId":"kumsssss"},"content":"1. User wants to find a particular item with the item’s name."},{"lineNumber":369,"author":{"gitId":"kumsssss"},"content":"2. StoreMando returns a list of all items whose name contains the given keyword."},{"lineNumber":370,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":371,"author":{"gitId":"kumsssss"},"content":"   Use case ends."},{"lineNumber":372,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":373,"author":{"gitId":"kumsssss"},"content":"**Use case: UC5 - Update an item**"},{"lineNumber":374,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":375,"author":{"gitId":"kumsssss"},"content":"**MSS**"},{"lineNumber":376,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":377,"author":{"gitId":"kumsssss"},"content":"1. User finds a \u003cu\u003especific item (UC4)\u003c/u\u003e that he wants to update."},{"lineNumber":378,"author":{"gitId":"kumsssss"},"content":"2. StoreMando returns a list of all items whose name contains the given keyword."},{"lineNumber":379,"author":{"gitId":"kumsssss"},"content":"3. User requests to update that particular item with the new values."},{"lineNumber":380,"author":{"gitId":"kumsssss"},"content":"4. StoreMando updates and stores the new data, then displays it."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"kumsssss"},"content":"* 3a. The item details do not match any item in the storage."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"kumsssss"},"content":"    * 3a1. StoreMando shows an error message."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"kumsssss"},"content":"    * 3a2. StoreMando prompt the user for a correct input."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"kumsssss"},"content":"      Use case resumes at step 3."},{"lineNumber":393,"author":{"gitId":"-"},"content":"    "},{"lineNumber":394,"author":{"gitId":"chewwh09"},"content":"**Use case: UC6 - Check for expiring items**"},{"lineNumber":395,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":396,"author":{"gitId":"chewwh09"},"content":"**MSS**"},{"lineNumber":397,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":398,"author":{"gitId":"chewwh09"},"content":"1. User wants to look for items that are expiring soon."},{"lineNumber":399,"author":{"gitId":"chewwh09"},"content":"2. StoreMando returns a list of expiring items."},{"lineNumber":400,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":401,"author":{"gitId":"chewwh09"},"content":"    Use case ends."},{"lineNumber":402,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":403,"author":{"gitId":"chewwh09"},"content":"**Use case: UC7 - List all items**"},{"lineNumber":404,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":405,"author":{"gitId":"JayChenYJ"},"content":"**MSS**"},{"lineNumber":406,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":407,"author":{"gitId":"JayChenYJ"},"content":"1. User requests to display all items."},{"lineNumber":408,"author":{"gitId":"JayChenYJ"},"content":"2. StoreMando displays all items, can be 0 item."},{"lineNumber":409,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":410,"author":{"gitId":"JayChenYJ"},"content":"   Use case ends."},{"lineNumber":411,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":412,"author":{"gitId":"chewwh09"},"content":"**Use case: UC8 - List all items with a specific tag**"},{"lineNumber":413,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":414,"author":{"gitId":"JayChenYJ"},"content":"**MSS**"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"JayChenYJ"},"content":"1. User requests to display all items with that specific tag."},{"lineNumber":417,"author":{"gitId":"JayChenYJ"},"content":"2. StoreMando displays all items with that specific tag, can be 0 item."},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"JayChenYJ"},"content":"   Use case ends."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"kumsssss"},"content":"1. Should be able to hold up to 1000 line items in the house without any sluggish performance for typical usage."},{"lineNumber":426,"author":{"gitId":"kumsssss"},"content":"2. Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":427,"author":{"gitId":"JayChenYJ"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be"},{"lineNumber":428,"author":{"gitId":"JayChenYJ"},"content":"   able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":443,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":448,"author":{"gitId":"-"},"content":""},{"lineNumber":449,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"JayChenYJ"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be"},{"lineNumber":454,"author":{"gitId":"JayChenYJ"},"content":"       optimum."},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":461,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":464,"author":{"gitId":"-"},"content":""},{"lineNumber":465,"author":{"gitId":"JayChenYJ"},"content":"### Deleting an item"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"JayChenYJ"},"content":"1. Deleting an item while all items are being shown"},{"lineNumber":468,"author":{"gitId":"-"},"content":""},{"lineNumber":469,"author":{"gitId":"github-amanda"},"content":"    1. Prerequisites: List all household items using the `list` command. Multiple items in the list."},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":472,"author":{"gitId":"JayChenYJ"},"content":"       Expected: First item is deleted from the list. Details of the deleted item shown in the status message. Timestamp"},{"lineNumber":473,"author":{"gitId":"JayChenYJ"},"content":"       in the status bar is updated."},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":476,"author":{"gitId":"kumsssss"},"content":"       Expected: No item is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":479,"author":{"gitId":"-"},"content":"       Expected: Similar to previous."},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":488,"author":{"gitId":"-"},"content":""},{"lineNumber":489,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"kumsssss":27,"github-amanda":7,"JayChenYJ":110,"chewwh09":49,"-":296}},{"path":"docs/Documentation.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Documentation guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"**Setting up and maintaining the project website:**"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* We use [**Jekyll**](https://jekyllrb.com/) to manage documentation."},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"* The `docs/` folder is used for the documentation."},{"lineNumber":10,"author":{"gitId":"-"},"content":"* To learn how set it up and maintain the project website, follow the guide [_[se-edu/guides] **Using Jekyll for project documentation**_](https://se-education.org/guides/tutorials/jekyll.html)."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"**Style guidance:**"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* Follow the [**_Google developer documentation style guide_**](https://developers.google.com/style)."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Also relevant is the [_[se-edu/guides] **Markdown coding standard**_](https://se-education.org/guides/conventions/markdown.html)"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Diagrams:**"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"* See the [_[se-edu/guides] **Using PlantUML**_](https://se-education.org/guides/tutorials/plantUml.html)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**Converting a document to the PDF format:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* See the guide [_[se-edu/guides] **Saving web documents as PDF files**_](https://se-education.org/guides/tutorials/savingPdf.html)"}],"authorContributionMap":{"JayChenYJ":1,"-":24}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"* Table of Contents {:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Setting up the project in your computer"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"   JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to ensure Intellij is configured to use **JDK 11**."},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"   project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"   IDEA.\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."},{"lineNumber":27,"author":{"gitId":"-"},"content":"1. **Verify the setup**:"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    1. Run the `seedu.location.Main` and try a few commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":"    1. [Run the tests](Testing.md) to ensure they all pass."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Before writing code"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. **Configure the coding style**"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"   style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"   ours."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"   Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"   e.g., to report problems _as_ you write code."},{"lineNumber":46,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. **Set up CI**"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"   files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"   required."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"1. **Learn the design**"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"   about [StoreMando’s architecture](DeveloperGuide.md#architecture)."}],"authorContributionMap":{"JayChenYJ":19,"-":38}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"   e.g. `seedu.location.commons.StringUtilTest`"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"   e.g. `seedu.location.storage.StorageManagerTest`"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how they are connected together.\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"   e.g. `seedu.location.logic.LogicManagerTest`"}],"authorContributionMap":{"JayChenYJ":4,"-":32}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"StoreMando is a **desktop app for managing inventory, optimized for use via a Command Line Interface** (CLI) while still"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"having the benefits of a Graphical User Interface (GUI). If you can type fast, StoreMando can get your inventory"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"management tasks done faster than traditional GUI apps."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"* Table of Contents {:toc}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"1. Download the latest `storemando.jar` from [here](https://github.com/AY2021S2-CS2103T-W10-2/tp) **(link not yet"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"   available)**."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your StoreMando."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"   contains some sample data.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"1. Type the command in the command box and press Enter to execute it.\u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"Md-Fazil"},"content":"  e.g. in `add n/ITEM_NAME`, `ITEM_NAME` is a parameter which can be used as `add n/Chocolate Milk`."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"  e.g. `n/ITEM_NAME [e/EXPIRY_DATE]` can be used as `n/Olive Oil e/2020-10-10` or as `n/Olive Oil`."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"Md-Fazil"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/favourite`, `t/favourite t/drink` etc."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"Md-Fazil"},"content":"  e.g. if the command specifies `n/ITEM_NAME l/LOCATION`, `l/LOCATION n/ITEM_NAME` is also acceptable."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"  the parameter will be taken.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"  e.g. if you specify `e/2020-10-10 e/2020-08-08`, only `e/2020-08-08` will be taken."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `exit` and `clear`) will be"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"  ignored.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Md-Fazil"},"content":"### Adding an item: `add`"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"Adds an item to the inventory."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"Md-Fazil"},"content":"Format: `add n/ITEM_NAME l/LOCATION q/QUANTITY [e/EXPIRY_DATE] [t/TAG]…​`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":68,"author":{"gitId":"Md-Fazil"},"content":"An item can have any number of tags (including 0)"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"\u003c/div\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"Expiry date of an item is optional."},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Md-Fazil"},"content":"* `add n/Chocolate Milk l/Kitchen Refrigerator q/2`"},{"lineNumber":80,"author":{"gitId":"Md-Fazil"},"content":"* `add n/Sunshine Bread l/Bedroom q/10 e/2020-01-01 t/favourite`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Md-Fazil"},"content":"### Listing all items : `list`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"Md-Fazil"},"content":"Shows a list of all items in the inventory."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"Format: `list` `list [l/LOCATION]` `list [t/TAG]`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"* You can view all items in the inventory by typing \u0027list\u0027 without specifying location/tag."},{"lineNumber":89,"author":{"gitId":"chewwh09"},"content":"* The search is case-insensitive. e.g \u0027room\u0027 will match \u0027Room\u0027."},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"* The order of keywords for location search does not matter. e.g. \u0027Room Living\u0027 will match \u0027Living Room\u0027."},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":"* Tag keyword only can contain one single word."},{"lineNumber":92,"author":{"gitId":"chewwh09"},"content":"* Only full words will be matched e.g. \u0027Room\u0027 will not match \u0027Bedroom\u0027."},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"* Only location/tag can be searched."},{"lineNumber":94,"author":{"gitId":"JayChenYJ"},"content":"* Location matching uses each word in the String to do \u0027AND\u0027 search e.g. \u0027Room\u0027 will match \u0027Living room\u0027 but \u0027Living"},{"lineNumber":95,"author":{"gitId":"JayChenYJ"},"content":"  room 1\u0027 will not match \u0027Living room\u0027"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"Md-Fazil"},"content":"### Editing an item\u0027s details : `edit`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"Md-Fazil"},"content":"Editing an existing item in the inventory."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"Md-Fazil"},"content":"Format: `edit INDEX [n/ITEM_NAME] [l/LOCATION] [q/QUANTITY] [e/EXPIRY_DATE] [t/TAG]…​`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"* Edits the item at the specified `INDEX`. The index refers to the index number shown in the displayed item list. The"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"  index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":106,"author":{"gitId":"Md-Fazil"},"content":"* Existing values will be updated to the input values **only if input values differ from the existing values**."},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"* When editing tags, the existing tags of the item will be removed i.e. adding of tags is not cumulative."},{"lineNumber":108,"author":{"gitId":"JayChenYJ"},"content":"* You can remove all the items’ tags by typing `t/` without specifying any tags after it."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"JayChenYJ"},"content":"* `edit 1 q/10 e/2020-10-11` Edits the quantity of the 1st item to be `10` and expiry date of the 1st item to"},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"  be `2020-10-11`"},{"lineNumber":114,"author":{"gitId":"Md-Fazil"},"content":"  if the existing quantity and expiry date of the 1st item are both not `10` and `2020-10-11` respectively."},{"lineNumber":115,"author":{"gitId":"Md-Fazil"},"content":"* `edit 2 n/Chocolate Bread t/` Edits the name of the 2nd item to be `Chocolate Bread` and clears all existing tags if"},{"lineNumber":116,"author":{"gitId":"Md-Fazil"},"content":"  there are existing tags and/or existing name of the 2nd item is not `Chocolate Bread`."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Md-Fazil"},"content":"### Locating items by name: `find`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"JayChenYJ"},"content":"Finds items whose names contain any of the given keywords, either in full or partially."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"JayChenYJ"},"content":"* The search is case-insensitive. e.g. `milk` will match `Milk`"},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"* The order of the keywords does not matter. e.g. `Bread Chocolate` will match `Chocolate Bread`"},{"lineNumber":124,"author":{"gitId":"JayChenYJ"},"content":"* Only the item name is searched."},{"lineNumber":125,"author":{"gitId":"JayChenYJ"},"content":"* Items matching at least one keyword will be returned (i.e. `OR` search). e.g. `Chocolate Milk` will"},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"  return `Cadbury Chocolate`, `Almond Milk`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"JayChenYJ"},"content":"Format 1: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"* Only full words will be matched e.g. `Chocolate` will not match `Chocolates`"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"JayChenYJ"},"content":"Format 2: `find */KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":133,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":134,"author":{"gitId":"JayChenYJ"},"content":"* Partial words will be matched e.g. `Choco` will match `Chocolates`"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"Md-Fazil"},"content":"* `find Chocolate` returns `chocolate` and `Chocolate Milk`"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":"* `find potato chip` returns `Potato Biscuit` and `chocolate chip`"},{"lineNumber":140,"author":{"gitId":"JayChenYJ"},"content":"* `find */Burger` returns `CheeseBurger` and `fishburger`"},{"lineNumber":141,"author":{"gitId":"JayChenYJ"},"content":"* `find */cheese egg` returns `MacAndCheese` and `eggs`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"Md-Fazil"},"content":"### Deleting an item : `delete`"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"Md-Fazil"},"content":"Deletes the specified item from the inventory."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"Md-Fazil"},"content":"* Deletes the item at the specified `INDEX`."},{"lineNumber":150,"author":{"gitId":"Md-Fazil"},"content":"* The index refers to the index number shown in the displayed item list."},{"lineNumber":151,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":154,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":155,"author":{"gitId":"github-amanda"},"content":"* `list` followed by `delete 2` deletes the second item in the entire inventory."},{"lineNumber":156,"author":{"gitId":"github-amanda"},"content":"* `find Chocolate` followed by `delete 1` deletes the first item in the result of the `find` command."},{"lineNumber":157,"author":{"gitId":"github-amanda"},"content":"* `list Room 2` followed by `delete 3` deletes the third item in the recorded list of items in Room 2."},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"chewwh09"},"content":"### Reminding user of expiring items: `reminder`"},{"lineNumber":160,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":161,"author":{"gitId":"chewwh09"},"content":"Shows items that are expiring soon."},{"lineNumber":162,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":163,"author":{"gitId":"chewwh09"},"content":"Format 1: `reminder numOfDays`"},{"lineNumber":164,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":165,"author":{"gitId":"chewwh09"},"content":"* `reminder 7` will give you a list containing all items that are expiring within the next 7 days."},{"lineNumber":166,"author":{"gitId":"chewwh09"},"content":"*  Items without expiry date will not be shown."},{"lineNumber":167,"author":{"gitId":"chewwh09"},"content":"*  The numOfDays **must be a positive integer** 1, 2, 3, …​ "},{"lineNumber":168,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":169,"author":{"gitId":"chewwh09"},"content":"Examples:"},{"lineNumber":170,"author":{"gitId":"chewwh09"},"content":"* Given today is 2020-03-10, and the inventory has 2 items: chocolate with expiry date of 2020-03-16 and banana with expiry date of 2020-03-19."},{"lineNumber":171,"author":{"gitId":"chewwh09"},"content":"    * `reminder 7` returns chocolate with expiry date of 2020-03-16 only."},{"lineNumber":172,"author":{"gitId":"chewwh09"},"content":"    * `reminder 10` returns both chocolate with expiry date of 2020-03-16 and banana with expiry date of 2020-03-19."},{"lineNumber":173,"author":{"gitId":"chewwh09"},"content":"    "},{"lineNumber":174,"author":{"gitId":"chewwh09"},"content":"Format 2: `reminder numOfDays [TIME_UNIT]`"},{"lineNumber":175,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":176,"author":{"gitId":"chewwh09"},"content":"* `reminder 2 weeks` will give you a list containing all items that are expiring within the next 2 weeks."},{"lineNumber":177,"author":{"gitId":"chewwh09"},"content":"*  Items without expiry date will not be shown."},{"lineNumber":178,"author":{"gitId":"chewwh09"},"content":"*  The numOfDays **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":179,"author":{"gitId":"chewwh09"},"content":"*  The time unit **must be days or weeks**"},{"lineNumber":180,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":181,"author":{"gitId":"chewwh09"},"content":"Examples:"},{"lineNumber":182,"author":{"gitId":"chewwh09"},"content":"* Given today is 2020-03-10, and the inventory has 2 items: chocolate with expiry date of 2020-03-23 and banana with expiry date of 2020-03-26."},{"lineNumber":183,"author":{"gitId":"chewwh09"},"content":"    * `reminder 2 weeks` returns chocolate with expiry date of 2020-03-23 only."},{"lineNumber":184,"author":{"gitId":"chewwh09"},"content":"    * `reminder 3 weeks` returns both chocolate with expiry date of 2020-03-23 and banana with expiry date of 2020-03-26."},{"lineNumber":185,"author":{"gitId":"chewwh09"},"content":"  "},{"lineNumber":186,"author":{"gitId":"kumsssss"},"content":"### sorting the inventory: `sort`"},{"lineNumber":187,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":188,"author":{"gitId":"kumsssss"},"content":"Sorts the items from the inventory based on quantity or expiry date."},{"lineNumber":189,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":190,"author":{"gitId":"kumsssss"},"content":"Format 1: `sort quantity`"},{"lineNumber":191,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":192,"author":{"gitId":"kumsssss"},"content":"* `sort quantity` display the items in the inventory in ascending order of quantity"},{"lineNumber":193,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":194,"author":{"gitId":"kumsssss"},"content":"Format 2: `sort expiryDate`"},{"lineNumber":195,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":196,"author":{"gitId":"kumsssss"},"content":"* `sort expiryDate` displays items in the inventory from the earliest expiry date to the latest."},{"lineNumber":197,"author":{"gitId":"JayChenYJ"},"content":"* Items without expiry date will be pushed to the back of the sorted list."},{"lineNumber":198,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":199,"author":{"gitId":"kumsssss"},"content":"Examples:"},{"lineNumber":200,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":201,"author":{"gitId":"kumsssss"},"content":"* `find Chocolate` followed by `sort quantity` sorts the items from the result of the `find` command."},{"lineNumber":202,"author":{"gitId":"kumsssss"},"content":"* `list Room 2` followed by `sort expiryDate` sorts the recorded list of items in Room 2 by expiry date."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"JayChenYJ"},"content":"Clears all entries from the location book."},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"JayChenYJ"},"content":"StoreMando data are saved in the hard disk automatically after any command that changes the data. There is no need to"},{"lineNumber":219,"author":{"gitId":"JayChenYJ"},"content":"save manually."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"JayChenYJ"},"content":"StoreMando data are saved as a JSON file `[JAR file location]/data/storemando.json`. Advanced users are welcome to"},{"lineNumber":224,"author":{"gitId":"JayChenYJ"},"content":"update data directly by editing that data file."},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":227,"author":{"gitId":"Md-Fazil"},"content":"If your changes to the data file makes its format invalid, StoreMando will discard all data and start with an empty data file at the next run."},{"lineNumber":228,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"Md-Fazil"},"content":"### Sorting items `[coming in v2.0]`"},{"lineNumber":235,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":236,"author":{"gitId":"Md-Fazil"},"content":"_Details coming soon ..._"},{"lineNumber":237,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":238,"author":{"gitId":"Md-Fazil"},"content":"### Filtering by item category`[coming in v2.0]`"},{"lineNumber":239,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":240,"author":{"gitId":"Md-Fazil"},"content":"_Details coming soon ..._"},{"lineNumber":241,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":242,"author":{"gitId":"Md-Fazil"},"content":"### Viewing reminders `[coming in v2.0]`"},{"lineNumber":243,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":244,"author":{"gitId":"Md-Fazil"},"content":"_Details coming soon ..._"},{"lineNumber":245,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":246,"author":{"gitId":"Md-Fazil"},"content":"### Viewing help`[coming in v2.0]`"},{"lineNumber":247,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":248,"author":{"gitId":"JayChenYJ"},"content":"Opens user guide of StoreMando on a browser or displays the URL of user guide on help window."},{"lineNumber":249,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":250,"author":{"gitId":"Md-Fazil"},"content":"Format: `help`"},{"lineNumber":251,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":252,"author":{"gitId":"JayChenYJ"},"content":"* Opens user guide on a browser only if there is a supporting browser **and** internet connection."},{"lineNumber":253,"author":{"gitId":"Md-Fazil"},"content":"* Otherwise, displays a help window containing the URL of StoreMando\u0027s user guide."},{"lineNumber":254,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":260,"author":{"gitId":"JayChenYJ"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains"},{"lineNumber":261,"author":{"gitId":"JayChenYJ"},"content":"the data of your previous StoreMando home folder."},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"JayChenYJ"},"content":"**Q**: What if I want to have more features implemented in the product?"},{"lineNumber":264,"author":{"gitId":"JayChenYJ"},"content":"**A**: Feel free to contact us at e0406389@u.nus.edu!"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":271,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":272,"author":{"gitId":"Md-Fazil"},"content":"**Add** | `add n/ITEM_NAME l/LOCATION q/QUANTITY [e/EXPIRY_DATE] [t/TAG]…​` \u003cbr\u003e e.g., `add n/koko krunch l/fridge q/1 e/2021-05-27 t/favourite`"},{"lineNumber":273,"author":{"gitId":"JayChenYJ"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 2`"},{"lineNumber":274,"author":{"gitId":"Md-Fazil"},"content":"**Edit** | `edit INDEX [n/ITEM_NAME] [e/EXPIRY_DATE] [l/LOCATION] [q/QUANTITY] [t/TAG]…​`\u003cbr\u003e e.g.,`update 1 l/freezer q/2 `"},{"lineNumber":275,"author":{"gitId":"JayChenYJ"},"content":"**List** | `list` `list [l/LOCATION]` `list [t/TAG]`\u003cbr\u003e e.g., `list` `list l/fridge` `list t/favourite`"},{"lineNumber":276,"author":{"gitId":"JayChenYJ"},"content":"**Find** | `find [*/]KEYWORD [MORE KEYWORDS]`\u003cbr\u003e e.g, `find koko krunch` `find */choco`"},{"lineNumber":277,"author":{"gitId":"chewwh09"},"content":"**Reminder** | `reminder numOfDays [TIMEUNIT]`\u003cbr\u003e e.g., `reminder 7` `reminder 2 weeks`"}],"authorContributionMap":{"kumsssss":18,"github-amanda":3,"JayChenYJ":59,"Md-Fazil":47,"chewwh09":30,"-":120}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(storeMando)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"JayChenYJ":1,"-":37}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"ecp -\u003e ec ++: index, editItemDescriptor"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"kumsssss":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"title: StoreMando"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-2/tp/actions)"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W10-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W10-2/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"**StoreMando is a **desktop app for managing inventory, optimized for use via a Command Line Interface** (CLI) while"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"still having the benefits of a Graphical User Interface (GUI). If you can type fast, StoreMando can get your inventory"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"management tasks done faster than traditional GUI apps."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"* If you are interested in using StoreMando, head over to the [_Quick Start_ section of the **User"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"  Guide**](UserGuide.md#quick-start)."},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"* If you are interested about developing StoreMando, the [**Developer Guide**](DeveloperGuide.md) is a good place to"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"  start."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson),"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"  [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"JayChenYJ":12,"-":11}},{"path":"docs/team/johndoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"AddressBook - Level 3 is a desktop location book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"JayChenYJ":1,"-":45}},{"path":"src/main/java/seedu/storemando/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":61}},{"path":"src/main/java/seedu/storemando/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":24}},{"path":"src/main/java/seedu/storemando/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.JsonStoreMandoStorage;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.JsonUserPrefsStorage;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.Storage;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.StorageManager;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.StoreMandoStorage;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing StoreMando ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        StoreMandoStorage storeMandoStorage \u003d new JsonStoreMandoStorage(userPrefs.getStoreMandoFilePath());"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"        storage \u003d new StorageManager(storeMandoStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s storemando and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"     * The data from the sample storemando will be used instead if {@code storage}\u0027s storemando is not found,"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"     * or an empty storemando will be used instead if errors occur when reading {@code storage}\u0027s storemando."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        Optional\u003cReadOnlyStoreMando\u003e storeMandoOptional;"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"        ReadOnlyStoreMando initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"            storeMandoOptional \u003d storage.readStoreMando();"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"            if (!storeMandoOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"                logger.info(\"Data file not found. Will be starting with a sample StoreMando\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"            initialData \u003d storeMandoOptional.orElseGet(SampleDataUtil::getSampleStoreMando);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty StoreMando\");"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":"            initialData \u003d new StoreMando();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty StoreMando\");"},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"            initialData \u003d new StoreMando();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + \"Using default config properties\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                + \"Using default user prefs\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"JayChenYJ"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty StoreMando\");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":170,"author":{"gitId":"JayChenYJ"},"content":"        logger.info(\"Starting StoreMando \" + MainApp.VERSION);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":176,"author":{"gitId":"JayChenYJ"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping StoreMando ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":43,"-":140}},{"path":"src/main/java/seedu/storemando/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":62}},{"path":"src/main/java/seedu/storemando/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":78}},{"path":"src/main/java/seedu/storemando/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    private static final String LOG_FILE \u003d \"storemando.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":111}},{"path":"src/main/java/seedu/storemando/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The item index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_MORE_THAN_ONE_ITEM_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_LESS_THAN_TWO_ITEMS_LISTED_OVERVIEW \u003d \"%1$d item listed!\";"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    public static final String MESSAGE_NUMBER_OF_ITEMS_EXPIRING \u003d \"%1$d item(s) are expiring!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":1,"JayChenYJ":3,"chewwh09":1,"-":9}},{"path":"src/main/java/seedu/storemando/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param versionString version number string"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return a Version object"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"            versionMatcher.group(4) !\u003d null);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return major - other.major;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return minor - other.minor;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return patch - other.patch;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return -1;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":115}},{"path":"src/main/java/seedu/storemando/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    private final int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":52}},{"path":"src/main/java/seedu/storemando/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":10}},{"path":"src/main/java/seedu/storemando/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause   of the main exception"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":20}},{"path":"src/main/java/seedu/storemando/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.MainApp;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":40}},{"path":"src/main/java/seedu/storemando/commons/util/BrowserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Md-Fazil"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":3,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":4,"author":{"gitId":"Md-Fazil"},"content":"import java.awt.Desktop;"},{"lineNumber":5,"author":{"gitId":"Md-Fazil"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Md-Fazil"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitId":"Md-Fazil"},"content":"import java.net.URISyntaxException;"},{"lineNumber":8,"author":{"gitId":"Md-Fazil"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitId":"Md-Fazil"},"content":"import java.net.URLConnection;"},{"lineNumber":10,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":11,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Md-Fazil"},"content":" * A container for Browser specific utility functions"},{"lineNumber":14,"author":{"gitId":"Md-Fazil"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Md-Fazil"},"content":"public class BrowserUtil {"},{"lineNumber":16,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":17,"author":{"gitId":"Md-Fazil"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w10-2.github.io/tp/UserGuide.html\";"},{"lineNumber":18,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":19,"author":{"gitId":"Md-Fazil"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Md-Fazil"},"content":"     * Checks if the user has a browser installed."},{"lineNumber":21,"author":{"gitId":"Md-Fazil"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Md-Fazil"},"content":"     * @return true if the user has a browser installed, false otherwise."},{"lineNumber":23,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Md-Fazil"},"content":"    public static boolean isBrowserAccessible() {"},{"lineNumber":25,"author":{"gitId":"Md-Fazil"},"content":"        return Desktop.isDesktopSupported() \u0026\u0026 Desktop.getDesktop().isSupported(Desktop.Action.BROWSE);"},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":28,"author":{"gitId":"Md-Fazil"},"content":"    /** Checks if the user is connected to the internet."},{"lineNumber":29,"author":{"gitId":"Md-Fazil"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Md-Fazil"},"content":"     * @return true if the user is connected to the internet, false otherwise."},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Md-Fazil"},"content":"    public static boolean isConnectedToInternet() {"},{"lineNumber":33,"author":{"gitId":"Md-Fazil"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Md-Fazil"},"content":"            URL url \u003d new URL(USERGUIDE_URL);"},{"lineNumber":35,"author":{"gitId":"Md-Fazil"},"content":"            URLConnection connection \u003d url.openConnection();"},{"lineNumber":36,"author":{"gitId":"Md-Fazil"},"content":"            connection.connect();"},{"lineNumber":37,"author":{"gitId":"Md-Fazil"},"content":"            return true;"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"Md-Fazil"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":43,"author":{"gitId":"Md-Fazil"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Md-Fazil"},"content":"     * Opens the specified url in user\u0027s browser."},{"lineNumber":45,"author":{"gitId":"Md-Fazil"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"    public static void displayUserGuideWebsite() {"},{"lineNumber":48,"author":{"gitId":"Md-Fazil"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Md-Fazil"},"content":"            Desktop.getDesktop().browse(new URI(USERGUIDE_URL));"},{"lineNumber":50,"author":{"gitId":"Md-Fazil"},"content":"        } catch (IOException | URISyntaxException e) {"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":"            //This exceptions will only be raised when the supplied url is invalid."},{"lineNumber":52,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"    /** Checks if the desktop is supported and there is internet connection."},{"lineNumber":56,"author":{"gitId":"Md-Fazil"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":"    public static boolean canOpenBrowser() {"},{"lineNumber":59,"author":{"gitId":"Md-Fazil"},"content":"        return isBrowserAccessible() \u0026\u0026 isConnectedToInternet();"},{"lineNumber":60,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":62,"author":{"gitId":"Md-Fazil"},"content":"}"}],"authorContributionMap":{"Md-Fazil":62}},{"path":"src/main/java/seedu/storemando/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @see #requireAllNonNull(Collection)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":36}},{"path":"src/main/java/seedu/storemando/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Config;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":20}},{"path":"src/main/java/seedu/storemando/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Paths.get(path);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            createFile(file);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Files.createFile(file);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Assumes file exists"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Writes given string to a file."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":84}},{"path":"src/main/java/seedu/storemando/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath                   cannot be null."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e      The generic type to create an instance of"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":4,"-":142}},{"path":"src/main/java/seedu/storemando/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"     * Ignores case, a full word match is also not required."},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"     * @param sentence cannot be null"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(sentence);"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(word);"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"            .anyMatch(currentWord -\u003e currentWord.toLowerCase().contains(preppedWord.toLowerCase()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":26,"-":68}},{"path":"src/main/java/seedu/storemando/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"     * Returns the StoreMando."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"     * @see seedu.storemando.model.Model#getStoreMando()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    ReadOnlyStoreMando getStoreMando();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the filtered list of items"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    ObservableList\u003cItem\u003e getFilteredItemList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"     * Returns the user prefs\u0027 storemando file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"    Path getStoreMandoFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":2,"JayChenYJ":12,"-":39}},{"path":"src/main/java/seedu/storemando/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.StoreMandoParser;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMandoParser storeMandoParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"        storeMandoParser \u003d new StoreMandoParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"        Command command \u003d storeMandoParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"            storage.saveStoreMando(model.getStoreMando());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"    public ReadOnlyStoreMando getStoreMando() {"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        return model.getStoreMando();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"    public ObservableList\u003cItem\u003e getFilteredItemList() {"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        return model.getFilteredItemList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"    public Path getStoreMandoFilePath() {"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"        return model.getStoreMandoFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":2,"JayChenYJ":20,"-":59}},{"path":"src/main/java/seedu/storemando/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":" * Adds a item to the storemando."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"Md-Fazil"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the storemando. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        + PREFIX_QUANTITY + \"QUANTITY \""},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        + \"[\" + PREFIX_EXPIRYDATE + \"EXPIRYDATE] \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_NAME + \"Banana \""},{"lineNumber":30,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_QUANTITY + \"2 \""},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_EXPIRYDATE + \"2023-10-10 \""},{"lineNumber":32,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_LOCATION + \"Kitchen \""},{"lineNumber":33,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_TAG + \"favourite \""},{"lineNumber":34,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_TAG + \"expiring\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New item added: %1$s\";"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the storemando\";"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"    public static final String MESSAGE_ITEM_EXPIRED_WARNING \u003d \"\\nWarning: Item has already expired!\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"Md-Fazil"},"content":"    private final Item itemToAdd;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"     * Creates an AddCommand to add the specified {@code Item}"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"    public AddCommand(Item item) {"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(item);"},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"        itemToAdd \u003d item;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Md-Fazil"},"content":"        if (model.hasItem(itemToAdd)) {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":"        model.addItem(itemToAdd);"},{"lineNumber":59,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":60,"author":{"gitId":"Md-Fazil"},"content":"        String feedback \u003d String.format(MESSAGE_SUCCESS, itemToAdd);"},{"lineNumber":61,"author":{"gitId":"Md-Fazil"},"content":"        if (itemToAdd.isExpired()) {"},{"lineNumber":62,"author":{"gitId":"Md-Fazil"},"content":"            feedback +\u003d MESSAGE_ITEM_EXPIRED_WARNING;"},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Md-Fazil"},"content":"        return new CommandResult(feedback);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"Md-Fazil"},"content":"            \u0026\u0026 itemToAdd.equals(((AddCommand) other).itemToAdd));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":7,"JayChenYJ":11,"Md-Fazil":20,"-":35}},{"path":"src/main/java/seedu/storemando/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":" * Clears the storemando."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Location book has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        model.setStoreMando(new StoreMando());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":6,"-":17}},{"path":"src/main/java/seedu/storemando/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":17}},{"path":"src/main/java/seedu/storemando/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Help information should be shown to the user."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The application should exit."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":74}},{"path":"src/main/java/seedu/storemando/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":" * Deletes a item identified using it\u0027s displayed index from the storemando."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        + \": Deletes the item identified by the index number used in the displayed item list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Item: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        Item itemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        model.deleteItem(itemToDelete);"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":7,"JayChenYJ":7,"-":39}},{"path":"src/main/java/seedu/storemando/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.model.Model.PREDICATE_SHOW_ALL_ITEMS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":" * Edits the details of an existing item in the storemando."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item identified \""},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        + \"by the index number used in the displayed item list. \""},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"        + \"Existing values will be overwritten by the input values as long as input values are \""},{"lineNumber":39,"author":{"gitId":"Md-Fazil"},"content":"        + \"not all the same as existing values.\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"        + \"[\" + PREFIX_NAME + \"ITEM NAME] \""},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"        + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""},{"lineNumber":43,"author":{"gitId":"Md-Fazil"},"content":"        + \"[\" + PREFIX_EXPIRYDATE + \"EXPIRYDATE] \""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"        + \"[\" + PREFIX_LOCATION + \"LOCATION] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_QUANTITY + \"5 \""},{"lineNumber":48,"author":{"gitId":"Md-Fazil"},"content":"        + PREFIX_EXPIRYDATE + \"2018-10-10\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"Md-Fazil"},"content":"    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in storemando.\";"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"    public static final String MESSAGE_NO_CHANGE \u003d \"Item not edited! Specified change in item details same as \""},{"lineNumber":54,"author":{"gitId":"Md-Fazil"},"content":"        + \"original.\";"},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"    public static final String MESSAGE_ITEM_EXPIRED_WARNING \u003d \"\\nWarning: Item has already expired!\";"},{"lineNumber":56,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"    private final EditItemDescriptor editItemDescriptor;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"     * @param index              of the item in the filtered item list to edit"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"     * @param editItemDescriptor details to edit the item with"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    public EditCommand(Index index, EditItemDescriptor editItemDescriptor) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(editItemDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        Item itemToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        Item editedItem \u003d createEditedItem(itemToEdit, editItemDescriptor);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        if (!itemToEdit.isSameItem(editedItem) \u0026\u0026 model.hasItem(editedItem)) {"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Md-Fazil"},"content":"        if (itemToEdit.equals(editedItem)) { //if edited item has the same fields as original item"},{"lineNumber":88,"author":{"gitId":"Md-Fazil"},"content":"            throw new CommandException(MESSAGE_NO_CHANGE);"},{"lineNumber":89,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"        model.setItem(itemToEdit, editedItem);"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"        model.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":"        String feedback \u003d String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"},{"lineNumber":94,"author":{"gitId":"Md-Fazil"},"content":"        if (editedItem.isExpired()) {"},{"lineNumber":95,"author":{"gitId":"Md-Fazil"},"content":"            feedback +\u003d MESSAGE_ITEM_EXPIRED_WARNING;"},{"lineNumber":96,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":98,"author":{"gitId":"Md-Fazil"},"content":"        return new CommandResult(feedback);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"     * Creates and returns a {@code Item} with the details of {@code itemToEdit}"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"     * edited with {@code editItemDescriptor}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"    private static Item createEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor) {"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"        assert itemToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"chewwh09"},"content":"        ItemName updatedName \u003d editItemDescriptor.getItemName().orElse(itemToEdit.getItemName());"},{"lineNumber":109,"author":{"gitId":"github-amanda"},"content":"        Quantity updatedQuantity \u003d editItemDescriptor.getQuantity().orElse(itemToEdit.getQuantity());"},{"lineNumber":110,"author":{"gitId":"Md-Fazil"},"content":"        ExpiryDate updatedExpiryDate \u003d editItemDescriptor.getExpiryDate().orElse(itemToEdit.getExpiryDate());"},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"        Location updatedLocation \u003d editItemDescriptor.getLocation().orElse(itemToEdit.getLocation());"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        Set\u003cTag\u003e updatedTags \u003d editItemDescriptor.getTags().orElse(itemToEdit.getTags());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"github-amanda"},"content":"        return new Item(updatedName, updatedQuantity, updatedExpiryDate, updatedLocation, updatedTags);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":132,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 editItemDescriptor.equals(e.editItemDescriptor);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"kumsssss"},"content":"     * Stores the details to edit the item with. Each non-empty field value will replace the"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"     * corresponding field value of the item."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"    public static class EditItemDescriptor {"},{"lineNumber":140,"author":{"gitId":"chewwh09"},"content":"        private ItemName name;"},{"lineNumber":141,"author":{"gitId":"github-amanda"},"content":"        private Quantity quantity;"},{"lineNumber":142,"author":{"gitId":"Md-Fazil"},"content":"        private ExpiryDate expiryDate;"},{"lineNumber":143,"author":{"gitId":"JayChenYJ"},"content":"        private Location location;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"        public EditItemDescriptor() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"kumsssss"},"content":"        public EditItemDescriptor(EditItemDescriptor toCopy) {"},{"lineNumber":154,"author":{"gitId":"chewwh09"},"content":"            setItemName(toCopy.name);"},{"lineNumber":155,"author":{"gitId":"github-amanda"},"content":"            setQuantity(toCopy.quantity);"},{"lineNumber":156,"author":{"gitId":"Md-Fazil"},"content":"            setExpiryDate(toCopy.expiryDate);"},{"lineNumber":157,"author":{"gitId":"JayChenYJ"},"content":"            setLocation(toCopy.location);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":163,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":165,"author":{"gitId":"github-amanda"},"content":"            return CollectionUtil.isAnyNonNull(name, quantity, expiryDate, location, tags);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"chewwh09"},"content":"        public void setItemName(ItemName name) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"chewwh09"},"content":"        public Optional\u003cItemName\u003e getItemName() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"github-amanda"},"content":"        public void setQuantity(Quantity quantity) {"},{"lineNumber":177,"author":{"gitId":"github-amanda"},"content":"            this.quantity \u003d quantity;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"github-amanda"},"content":"        public Optional\u003cQuantity\u003e getQuantity() {"},{"lineNumber":181,"author":{"gitId":"github-amanda"},"content":"            return Optional.ofNullable(quantity);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"Md-Fazil"},"content":"        public void setExpiryDate(ExpiryDate expiryDate) {"},{"lineNumber":185,"author":{"gitId":"Md-Fazil"},"content":"            this.expiryDate \u003d expiryDate;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"Md-Fazil"},"content":"        public Optional\u003cExpiryDate\u003e getExpiryDate() {"},{"lineNumber":189,"author":{"gitId":"Md-Fazil"},"content":"            return Optional.ofNullable(expiryDate);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"JayChenYJ"},"content":"        public void setLocation(Location location) {"},{"lineNumber":193,"author":{"gitId":"JayChenYJ"},"content":"            this.location \u003d location;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"JayChenYJ"},"content":"        public Optional\u003cLocation\u003e getLocation() {"},{"lineNumber":197,"author":{"gitId":"JayChenYJ"},"content":"            return Optional.ofNullable(location);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":203,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":211,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":212,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":225,"author":{"gitId":"kumsssss"},"content":"            if (!(other instanceof EditItemDescriptor)) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":230,"author":{"gitId":"kumsssss"},"content":"            EditItemDescriptor e \u003d (EditItemDescriptor) other;"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"chewwh09"},"content":"            return getItemName().equals(e.getItemName())"},{"lineNumber":233,"author":{"gitId":"github-amanda"},"content":"                \u0026\u0026 getQuantity().equals(e.getQuantity())"},{"lineNumber":234,"author":{"gitId":"Md-Fazil"},"content":"                \u0026\u0026 getExpiryDate().equals(e.getExpiryDate())"},{"lineNumber":235,"author":{"gitId":"JayChenYJ"},"content":"                \u0026\u0026 getLocation().equals(e.getLocation())"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":30,"github-amanda":11,"JayChenYJ":28,"Md-Fazil":28,"chewwh09":7,"-":135}},{"path":"src/main/java/seedu/storemando/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Location Book as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":16}},{"path":"src/main/java/seedu/storemando/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsPartialKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":" * Finds and lists all items in storemando whose item name contains any of the argument keywords."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all items whose names contain any of \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"        + \"Parameters: [*/]KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        + \"Examples:\\n\""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        + \"1. \" + COMMAND_WORD + \" alice bob charlie \\n\""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        + \"2. \" + COMMAND_WORD + \" */alice bob charlie\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    private final Predicate\u003cItem\u003e predicate;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public FindCommand(ItemNameContainsKeywordsPredicate predicate) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    public FindCommand(ItemNameContainsPartialKeywordsPredicate predicate) {"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        model.updateFilteredItemList(predicate);"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        int numberOfItems \u003d model.getFilteredItemList().size();"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"        if (numberOfItems \u003e 1) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return new CommandResult("},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"                String.format(Messages.MESSAGE_MORE_THAN_ONE_ITEM_LISTED_OVERVIEW, numberOfItems));"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"            return new CommandResult("},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"                String.format(Messages.MESSAGE_LESS_THAN_TWO_ITEMS_LISTED_OVERVIEW, numberOfItems));"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":1,"JayChenYJ":27,"-":30}},{"path":"src/main/java/seedu/storemando/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Md-Fazil"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened user guide information.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"Md-Fazil":1,"-":18}},{"path":"src/main/java/seedu/storemando/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.model.Model.PREDICATE_SHOW_ALL_ITEMS;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.LocationContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":" * Lists all items in the storemando to the user."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all items\";"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List items in the storemando. \""},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        + \"[\" + PREFIX_LOCATION + \"LOCATION] \" + \"/ [\" + PREFIX_TAG + \"TAG]\\n\""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        + \"Example:\\n\""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        + \"1. \" + COMMAND_WORD + \"\\n\""},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        + \"2. \" + COMMAND_WORD + \" l/bedroom\\n\""},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        + \"3. \" + COMMAND_WORD + \" t/favourite\\n\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    private final Predicate\u003cItem\u003e predicate;"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    public ListCommand(LocationContainsKeywordsPredicate predicate) {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    public ListCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    public ListCommand() {"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"        this.predicate \u003d PREDICATE_SHOW_ALL_ITEMS;"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        model.updateFilteredItemList(predicate);"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"            || (other instanceof ListCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"            \u0026\u0026 predicate.equals(((ListCommand) other).predicate)); // state check"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":18,"chewwh09":25,"-":17}},{"path":"src/main/java/seedu/storemando/logic/commands/ReminderCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.ItemExpiringPredicate;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" * Finds and lists all items in storemando whose item\u0027s expiry date is within a certain days from today."},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"public class ReminderCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public static final String COMMAND_WORD \u003d \"reminder\";"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters all items whose expiry date is within \""},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"        + \"the user-specified number of days from the current date and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        + \"Parameters: numOfDays (must be a positive integer) [timeUnit] (must either be days or weeks)\\n\""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        + \"Example: \\\"\" + COMMAND_WORD + \" 3\\\" or \\\"\" + COMMAND_WORD + \" 2 weeks\\\"\";"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    private final ItemExpiringPredicate predicate;"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    public ReminderCommand (ItemExpiringPredicate predicate) {"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        requireNonNull(model);"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        model.updateFilteredItemList(predicate);"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        return new CommandResult("},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"            String.format(Messages.MESSAGE_NUMBER_OF_ITEMS_EXPIRING, model.getFilteredItemList().size()));"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"            || (other instanceof ReminderCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"            \u0026\u0026 predicate.equals(((ReminderCommand) other).predicate)); // state check"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":41}},{"path":"src/main/java/seedu/storemando/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"public abstract class SortCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_USAGE \u003d \"sorts the items in StoreMando by quantity or expiry date.\\n\""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        + \"Parameter: quantity OR expiryDate\\n\""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        + \"Examples: \\n\""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        + \"1. \" + COMMAND_WORD + \" quantity\\n\""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        + \"2. \" + COMMAND_WORD + \" expiryDate\";"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"sorted all items\";"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_NO_ITEMS_TO_SORT \u003d \"Empty list cannot be sorted\";"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public abstract boolean equals(Object other);"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":24}},{"path":"src/main/java/seedu/storemando/logic/commands/SortExpiryDateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.item.ItemComparatorByExpiryDate;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"public class SortExpiryDateCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(model);"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        if (lastShownList.size() \u003d\u003d 0) {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        ItemComparatorByExpiryDate comparator \u003d new ItemComparatorByExpiryDate();"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        model.updateSortedItemList(comparator);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        model.setItems(model.getSortedItemList());"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            || (other instanceof SortExpiryDateCommand);"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":34}},{"path":"src/main/java/seedu/storemando/logic/commands/SortQuantityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.item.ItemComparatorByQuantity;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"public class SortQuantityCommand extends SortCommand {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(model);"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        List\u003cItem\u003e lastShownList \u003d model.getFilteredItemList();"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        if (lastShownList.size() \u003d\u003d 0) {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            throw new CommandException(MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        ItemComparatorByQuantity comparator \u003d new ItemComparatorByQuantity();"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        model.updateSortedItemList(comparator);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        model.setItems(model.getSortedItemList());"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            || (other instanceof SortQuantityCommand);"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":34}},{"path":"src/main/java/seedu/storemando/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":" * Represents an error which occurs during execution of a {@link seedu.storemando.logic.commands.Command}."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":15}},{"path":"src/main/java/seedu/storemando/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.model.item.ExpiryDate.NO_EXPIRY_DATE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_QUANTITY, PREFIX_EXPIRYDATE, PREFIX_LOCATION,"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"                PREFIX_TAG);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION, PREFIX_QUANTITY)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        ItemName name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":45,"author":{"gitId":"github-amanda"},"content":"        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        ExpiryDate expiryDate \u003d ParserUtil.parseExpiryDate(argMultimap.getValue(PREFIX_EXPIRYDATE)"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"            .orElse(NO_EXPIRY_DATE));"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"github-amanda"},"content":"        Item item \u003d new Item(name, quantity, expiryDate, location, tagList);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        return new AddCommand(item);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":5,"github-amanda":4,"JayChenYJ":16,"chewwh09":1,"-":38}},{"path":"src/main/java/seedu/storemando/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Prefixes mapped to their respective arguments"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     **/"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":61}},{"path":"src/main/java/seedu/storemando/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * \u003cp\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                               PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                               PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"        private final int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":146}},{"path":"src/main/java/seedu/storemando/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"Md-Fazil"},"content":"    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"},{"lineNumber":11,"author":{"gitId":"Md-Fazil"},"content":"    public static final Prefix PREFIX_EXPIRYDATE \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    public static final Prefix PREFIX_PARTIAL_NAME \u003d new Prefix(\"*/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"Md-Fazil":3,"-":11}},{"path":"src/main/java/seedu/storemando/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":5,"-":25}},{"path":"src/main/java/seedu/storemando/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.model.item.ExpiryDate.NO_EXPIRY_DATE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_QUANTITY, PREFIX_EXPIRYDATE, PREFIX_LOCATION,"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"                PREFIX_TAG);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        EditCommand.EditItemDescriptor editItemDescriptor \u003d new EditCommand.EditItemDescriptor();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"            editItemDescriptor.setItemName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"github-amanda"},"content":"        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"github-amanda"},"content":"            editItemDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"        if (argMultimap.getValue(PREFIX_EXPIRYDATE).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"Md-Fazil"},"content":"            editItemDescriptor.setExpiryDate(ParserUtil.parseExpiryDate("},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"                argMultimap.getValue(PREFIX_EXPIRYDATE).orElse(NO_EXPIRY_DATE)));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"            editItemDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editItemDescriptor::setTags);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        if (!editItemDescriptor.isAnyFieldEdited()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"        return new EditCommand(index, editItemDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":6,"github-amanda":4,"JayChenYJ":13,"Md-Fazil":2,"chewwh09":1,"-":58}},{"path":"src/main/java/seedu/storemando/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_PARTIAL_NAME;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsPartialKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PARTIAL_NAME);"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"        if (argMultimap.getValue(PREFIX_PARTIAL_NAME).isPresent() \u0026\u0026 !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        } else if (argMultimap.getValue(PREFIX_PARTIAL_NAME).isPresent()) {"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"            ItemName name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_PARTIAL_NAME).get());"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"            String[] nameKeywords \u003d name.fullName.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"            return new FindCommand(new ItemNameContainsPartialKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"            return new FindCommand(new ItemNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":26,"-":21}},{"path":"src/main/java/seedu/storemando/logic/parser/ListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ListCommand;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.LocationContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"     * @param args Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"     * @return a ListCommand object for execution."},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"            return new ListCommand();"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LOCATION, PREFIX_TAG);"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        if (argMultimap.getValue(PREFIX_LOCATION).isPresent() \u0026\u0026 argMultimap.getValue(PREFIX_TAG).isEmpty()) {"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"            String locationKeywords \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()).toString();"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"            String[] keywords \u003d locationKeywords.split(\"\\\\s+\");"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"            return new ListCommand(new LocationContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        } else if (argMultimap.getValue(PREFIX_LOCATION).isEmpty() \u0026\u0026 argMultimap.getValue(PREFIX_TAG).isPresent()) {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"            String tagKeywords \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()).tagName;"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"            String[] keywords \u003d tagKeywords.split(\"\\\\s+\");"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"            return new ListCommand(new TagContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"JayChenYJ":27,"chewwh09":21}},{"path":"src/main/java/seedu/storemando/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":14}},{"path":"src/main/java/seedu/storemando/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"     * Parses a {@code String name} into a {@code ItemName}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"    public static ItemName parseName(String name) throws ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        if (!ItemName.isValidName(trimmedName)) {"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"            throw new ParseException(ItemName.MESSAGE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        return new ItemName(trimmedName);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"github-amanda"},"content":"     * Parses a {@code String quantity} into a {@code Quantity}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"github-amanda"},"content":"     * @throws ParseException if the given {@code quantity} is invalid."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"github-amanda"},"content":"    public static Quantity parseQuantity(String quantity) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"github-amanda"},"content":"        requireNonNull(quantity);"},{"lineNumber":62,"author":{"gitId":"github-amanda"},"content":"        String trimmedQuantity \u003d quantity.trim();"},{"lineNumber":63,"author":{"gitId":"github-amanda"},"content":"        if (!Quantity.isValidQuantity(trimmedQuantity)) {"},{"lineNumber":64,"author":{"gitId":"github-amanda"},"content":"            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"github-amanda"},"content":"        return new Quantity(trimmedQuantity);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"     * Parses a {@code String location} into an {@code Location}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"     * @throws ParseException if the given {@code location} is invalid."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"    public static Location parseLocation(String location) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(location);"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        String trimmedLocation \u003d location.trim();"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"        if (!Location.isValidLocation(trimmedLocation)) {"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"        return new Location(trimmedLocation);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Md-Fazil"},"content":"     * Parses a {@code String expiryDate} into an {@code ExpiryDate}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Md-Fazil"},"content":"     * @throws ParseException if the given {@code expiryDate} is invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Md-Fazil"},"content":"    public static ExpiryDate parseExpiryDate(String expiryDate) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"Md-Fazil"},"content":"        requireNonNull(expiryDate);"},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":"        String trimmedExpiryDate \u003d expiryDate.trim();"},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":"        if (!ExpiryDate.isValidExpiryDate(trimmedExpiryDate)) {"},{"lineNumber":94,"author":{"gitId":"Md-Fazil"},"content":"            throw new ParseException(ExpiryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"Md-Fazil"},"content":"        return new ExpiryDate(trimmedExpiryDate);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":8,"JayChenYJ":17,"Md-Fazil":8,"chewwh09":5,"-":87}},{"path":"src/main/java/seedu/storemando/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":38}},{"path":"src/main/java/seedu/storemando/logic/parser/ReminderCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ReminderCommand;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.ItemExpiringPredicate;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" * Parses input arguments and creates a new ReminderCommand object"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * Convert the given number and the time unit to the number of days."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param num The number use to covert to days"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @param timeUnit The time unit in terms of days and weeks"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     * @return The number of days"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"     * @throws ParseException if the user input does not conform the expected keyword"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    private long timeConversation(long num, String timeUnit) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"        String timeUnitLowerCase \u003d timeUnit.toLowerCase();"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"        switch (timeUnitLowerCase) {"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"        case \"days\":"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"            return num;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        case \"weeks\":"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"            return num * 7;"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        default:"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"     * Parses the given {@code String} of arguments in the context of the ReminderCommand"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"     * and returns a ReminderCommand object for execution."},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public ReminderCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"            long numOfDayFromToday \u003d 0;"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"            String[] stringArgsArr \u003d trimmedArgs.split(\" \");"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"            if (stringArgsArr.length \u003d\u003d 1) {"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"                numOfDayFromToday \u003d Long.parseLong(stringArgsArr[0]);"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"            } else if (stringArgsArr.length \u003d\u003d 2) {"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"                Long timeValue \u003d Long.parseLong(stringArgsArr[0]);"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"                String timeUnit \u003d stringArgsArr[1];"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"                numOfDayFromToday \u003d timeConversation(timeValue, timeUnit);"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"            if (trimmedArgs.isEmpty() || stringArgsArr.length \u003e 2 || numOfDayFromToday \u003c\u003d 0) {"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"            return new ReminderCommand(new ItemExpiringPredicate(numOfDayFromToday));"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":62}},{"path":"src/main/java/seedu/storemando/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortExpiryDateCommand;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortQuantityCommand;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public static final String QUANTITY_KEYWORD \u003d \"quantity\";"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    public static final String EXPIRYDATE_KEYWORD \u003d \"expirydate\";"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * and returns a ListCommand object for execution."},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        if (!trimmedArgs.equalsIgnoreCase(QUANTITY_KEYWORD)"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 !trimmedArgs.equalsIgnoreCase(EXPIRYDATE_KEYWORD)) {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        } else if (trimmedArgs.equalsIgnoreCase(QUANTITY_KEYWORD)) {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            return new SortQuantityCommand();"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            return new SortExpiryDateCommand();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":30}},{"path":"src/main/java/seedu/storemando/logic/parser/StoreMandoParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ReminderCommand;"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortCommand;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"public class StoreMandoParser {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":"        case ReminderCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"            return new ReminderCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":4,"JayChenYJ":14,"chewwh09":5,"-":61}},{"path":"src/main/java/seedu/storemando/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":15}},{"path":"src/main/java/seedu/storemando/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    Predicate\u003cItem\u003e PREDICATE_SHOW_ALL_ITEMS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"     * Returns the user prefs\u0027 storemando file path."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    Path getStoreMandoFilePath();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"     * Sets the user prefs\u0027 storemando file path."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"    void setStoreMandoFilePath(Path storeMandoFilePath);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"     * Replaces storemando data with the data in {@code storeMando}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"    void setStoreMando(ReadOnlyStoreMando storeMando);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"     * Returns the StoreMando"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"    ReadOnlyStoreMando getStoreMando();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"     * Returns true if a item with the same identity as {@code item} exists in the storemando."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    boolean hasItem(Item item);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"     * Deletes the given item."},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"     * The item must exist in the storemando."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"    void deleteItem(Item target);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"     * Adds the given item."},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"     * {@code item} must not already exist in the storemando."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"    void addItem(Item item);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"     * Replaces the given item {@code target} with {@code editedItem}."},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"     * {@code target} must exist in the storemando."},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"     * The item identity of {@code editedItem} must not be the same as another existing item in the storemando."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"    void setItem(Item target, Item editedItem);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"     * Replaces every item in StoreMando\u0027s uniqueItemList with items in {@code itemList}."},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"    void setItems(List\u003cItem\u003e itemList);"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the filtered item list"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"    ObservableList\u003cItem\u003e getFilteredItemList();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"     * Updates the filter of the filtered item list to filter by the given {@code predicate}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"kumsssss"},"content":"    void updateFilteredItemList(Predicate\u003cItem\u003e predicate);"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the sorted item list"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"    ObservableList\u003cItem\u003e getSortedItemList();"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"     * Sorts the list"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"     * @param comparator"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"    void updateSortedItemList(Comparator\u003cItem\u003e comparator);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":31,"JayChenYJ":16,"-":66}},{"path":"src/main/java/seedu/storemando/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":" * Represents the in-memory model of the storemando data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMando storeMando;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    private final FilteredList\u003cItem\u003e filteredItems;"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    private final SortedList\u003cItem\u003e sortedItems;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"     * Initializes a ModelManager with the given storeMando and userPrefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    public ModelManager(ReadOnlyStoreMando storeMando, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        requireAllNonNull(storeMando, userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"        logger.fine(\"Initializing with storemando: \" + storeMando + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        this.storeMando \u003d new StoreMando(storeMando);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        filteredItems \u003d new FilteredList\u003c\u003e(this.storeMando.getItemList());"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        sortedItems \u003d new SortedList\u003c\u003e(this.storeMando.getItemList());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        this(new StoreMando(), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"    public Path getStoreMandoFilePath() {"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"        return userPrefs.getStoreMandoFilePath();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMandoFilePath(Path storeMandoFilePath) {"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(storeMandoFilePath);"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"        userPrefs.setStoreMandoFilePath(storeMandoFilePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StoreMando \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMando(ReadOnlyStoreMando storeMando) {"},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"        this.storeMando.resetData(storeMando);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"    public ReadOnlyStoreMando getStoreMando() {"},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"        return storeMando;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"    public boolean hasItem(Item item) {"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(item);"},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"        return storeMando.hasItem(item);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"    public void deleteItem(Item target) {"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"        storeMando.removeItem(target);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"    public void addItem(Item item) {"},{"lineNumber":109,"author":{"gitId":"JayChenYJ"},"content":"        storeMando.addItem(item);"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"        updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"    public void setItem(Item target, Item editedItem) {"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"        requireAllNonNull(target, editedItem);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"JayChenYJ"},"content":"        storeMando.setItem(target, editedItem);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"kumsssss"},"content":"    public void setItems(List\u003cItem\u003e itemList) {"},{"lineNumber":122,"author":{"gitId":"kumsssss"},"content":"        storeMando.setItems(itemList);"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":125,"author":{"gitId":"kumsssss"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"},{"lineNumber":129,"author":{"gitId":"JayChenYJ"},"content":"     * {@code versionedstoreMando}"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"kumsssss"},"content":"    public ObservableList\u003cItem\u003e getFilteredItemList() {"},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"        return filteredItems;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"        filteredItems.setPredicate(predicate);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":144,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":145,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the list of {@code Item} backed by the internal list of"},{"lineNumber":147,"author":{"gitId":"kumsssss"},"content":"     * {@code versionedstoreMando}"},{"lineNumber":148,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":150,"author":{"gitId":"kumsssss"},"content":"    public ObservableList\u003cItem\u003e getSortedItemList() {"},{"lineNumber":151,"author":{"gitId":"kumsssss"},"content":"        return sortedItems;"},{"lineNumber":152,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":154,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":155,"author":{"gitId":"kumsssss"},"content":"    public void updateSortedItemList(Comparator\u003cItem\u003e cmp) {"},{"lineNumber":156,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(cmp);"},{"lineNumber":157,"author":{"gitId":"kumsssss"},"content":"        sortedItems.setComparator(cmp);"},{"lineNumber":158,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":174,"author":{"gitId":"JayChenYJ"},"content":"        return storeMando.equals(other.storeMando)"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":176,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 filteredItems.equals(other.filteredItems);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":43,"JayChenYJ":30,"-":106}},{"path":"src/main/java/seedu/storemando/model/ReadOnlyStoreMando.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * Unmodifiable view of an storemando"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"public interface ReadOnlyStoreMando {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"     * Returns an unmodifiable view of the items list."},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * This list will not contain any duplicate items."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    ObservableList\u003cItem\u003e getItemList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":3,"JayChenYJ":4,"-":10}},{"path":"src/main/java/seedu/storemando/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    Path getStoreMandoFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":13}},{"path":"src/main/java/seedu/storemando/model/StoreMando.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.UniqueItemList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":" * Wraps all data at the storemando level"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":" * Duplicates are not allowed (by .isSameItem comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"public class StoreMando implements ReadOnlyStoreMando {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    private final UniqueItemList items;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        items \u003d new UniqueItemList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMando() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"     * Creates an StoreMando using the Items in the {@code toBeCopied}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMando(ReadOnlyStoreMando toBeCopied) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"     * Replaces the contents of the item list with {@code items}."},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"     * {@code items} must not contain duplicate items."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"    public void setItems(List\u003cItem\u003e items) {"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        this.items.setItems(items);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"     * Resets the existing data of this {@code StoreMando} with {@code newData}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"    public void resetData(ReadOnlyStoreMando newData) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        setItems(newData.getItemList());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"    //// item-level operations"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"     * Returns true if a item with the same identity as {@code item} exists in the storemando."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"    public boolean hasItem(Item item) {"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(item);"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"        return items.contains(item);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"     * Adds a item to the storemando."},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"     * The item must not already exist in the storemando."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"    public void addItem(Item p) {"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        items.add(p);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"     * Replaces the given item {@code target} in the list with {@code editedItem}."},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"     * {@code target} must exist in the storemando."},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"     * The item identity of {@code editedItem} must not be the same as another existing item in the storemando."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"    public void setItem(Item target, Item editedItem) {"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        requireNonNull(editedItem);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        items.setItem(target, editedItem);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"     * Removes {@code key} from this {@code StoreMando}."},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":"     * {@code key} must exist in the storemando."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"    public void removeItem(Item key) {"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        items.remove(key);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"        return items.asUnmodifiableObservableList().size() + \" items\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"    public ObservableList\u003cItem\u003e getItemList() {"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        return items.asUnmodifiableObservableList();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"            || (other instanceof StoreMando // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 items.equals(((StoreMando) other).items));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitId":"kumsssss"},"content":"        return items.hashCode();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":24,"JayChenYJ":21,"-":76}},{"path":"src/main/java/seedu/storemando/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    private Path storeMandoFilePath \u003d Paths.get(\"data\", \"storemando.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        setStoreMandoFilePath(newUserPrefs.getStoreMandoFilePath());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"    public Path getStoreMandoFilePath() {"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        return storeMandoFilePath;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMandoFilePath(Path storeMandoFilePath) {"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(storeMandoFilePath);"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        this.storeMandoFilePath \u003d storeMandoFilePath;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 storeMandoFilePath.equals(o.storeMandoFilePath);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        return Objects.hash(guiSettings, storeMandoFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"        sb.append(\"\\nLocal data file location : \" + storeMandoFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":12,"-":76}},{"path":"src/main/java/seedu/storemando/model/item/ExpiryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Md-Fazil"},"content":" * Represents an Item\u0027s expiry date in the inventory manager."},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidExpiryDate(String)}"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Md-Fazil"},"content":"public class ExpiryDate {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    public static final String NO_EXPIRY_DATE \u003d \"No Expiry Date\";"},{"lineNumber":17,"author":{"gitId":"Md-Fazil"},"content":"    public static final String VALIDATION_REGEX \u003d \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\";"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"-\";"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Expiry dates should be of the format YYYY-MM-DD \""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"and adhere to the following constraints:\\n\""},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        + \"1. YYYY, MM and DD should only contain numeric characters and must be separated by a \""},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        + SPECIAL_CHARACTERS"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        + \" character.\\n\""},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        + \"2. YYYY must:\\n\""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        + \"    - be exactly 4 digits long\\n\""},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        + \"    - be a valid year\\n\""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        + \"3. MM must:\\n\""},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        + \"    - be exactly 2 digits long\\n\""},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        + \"    - be within the range [01, 12]\\n\""},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        + \"4. DD must:\\n\""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        + \"    - be exactly 2 digits long\\n\""},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        + \"    - be a valid expiry date\\n\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"    public final LocalDate expiryDate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Md-Fazil"},"content":"     * Constructs an {@code ExpiryDate}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Md-Fazil"},"content":"     * @param expiryDate A valid expiryDate."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Md-Fazil"},"content":"    public ExpiryDate(String expiryDate) {"},{"lineNumber":44,"author":{"gitId":"Md-Fazil"},"content":"        requireNonNull(expiryDate);"},{"lineNumber":45,"author":{"gitId":"Md-Fazil"},"content":"        checkArgument(isValidExpiryDate(expiryDate), MESSAGE_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        if (expiryDate.equals(NO_EXPIRY_DATE)) {"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"            this.expiryDate \u003d null;"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"            this.expiryDate \u003d LocalDate.parse(expiryDate);"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":"        value \u003d expiryDate;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"    public LocalDate getExpiryDate() {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        return this.expiryDate;"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Md-Fazil"},"content":"     * Returns if a given string is a valid expiryDate."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Md-Fazil"},"content":"    public static boolean isValidExpiryDate(String test) {"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"            if (test.equals(NO_EXPIRY_DATE)) {"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"                return true;"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"            LocalDate.parse(test);"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"            return true;"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Md-Fazil"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Md-Fazil"},"content":"     * Checks if the current expiryDate is past current date"},{"lineNumber":75,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Md-Fazil"},"content":"    public boolean isPastCurrentDate() {"},{"lineNumber":77,"author":{"gitId":"Md-Fazil"},"content":"        return expiryDate !\u003d null \u0026\u0026 expiryDate.isBefore(LocalDate.now());"},{"lineNumber":78,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        return value;"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"    public String toFormattedString() {"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        return expiryDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":"            || (other instanceof ExpiryDate // instanceof handles nulls"},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":"            \u0026\u0026 value.equals(((ExpiryDate) other).value)); // state check"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"     * Compares between 2 ExpiryDate objects by seeing which item expires earlier"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"     * @param anotherExpiryDate ExpiryDate object to be compared to this"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"     * @return an integer to show which ExpiryDate is greater"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"    public int compare(ExpiryDate anotherExpiryDate) {"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"        if (this.expiryDate \u003d\u003d null \u0026\u0026 anotherExpiryDate.expiryDate \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"            return 0;"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"        } else if (this.expiryDate \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":"            return 1;"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        } else if (anotherExpiryDate.expiryDate \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"kumsssss"},"content":"            return -1;"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"            return this.expiryDate.compareTo(anotherExpiryDate.expiryDate);"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":60,"JayChenYJ":2,"Md-Fazil":21,"-":35}},{"path":"src/main/java/seedu/storemando/model/item/Item.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":" * Represents a Item in the storemando."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"public class Item {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    private final ItemName name;"},{"lineNumber":20,"author":{"gitId":"github-amanda"},"content":"    private final Quantity quantity;"},{"lineNumber":21,"author":{"gitId":"Md-Fazil"},"content":"    private final ExpiryDate expiryDate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    private final Location location;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"    public Item(ItemName name, Quantity quantity, ExpiryDate expiryDate, Location location, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        requireAllNonNull(name, quantity, expiryDate, location, tags);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":34,"author":{"gitId":"Md-Fazil"},"content":"        this.expiryDate \u003d expiryDate;"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        this.location \u003d location;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public ItemName getItemName() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"    public Quantity getQuantity() {"},{"lineNumber":44,"author":{"gitId":"github-amanda"},"content":"        return quantity;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"    public ExpiryDate getExpiryDate() {"},{"lineNumber":48,"author":{"gitId":"Md-Fazil"},"content":"        return expiryDate;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"    public Location getLocation() {"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        return location;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Md-Fazil"},"content":"     * Checks if the current item is expired."},{"lineNumber":65,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Md-Fazil"},"content":"    public boolean isExpired() {"},{"lineNumber":67,"author":{"gitId":"Md-Fazil"},"content":"        return expiryDate.isPastCurrentDate();"},{"lineNumber":68,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"     * Returns true if both items have the same name."},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"     * This defines a weaker notion of equality between two items."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"    public boolean isSameItem(Item otherItem) {"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        if (otherItem \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"        return otherItem !\u003d null"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 otherItem.getItemName().equals(this.getItemName())"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 otherItem.getLocation().equals(this.getLocation());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"     * Returns true if both items have the same identity and data fields."},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"     * This defines a stronger notion of equality between two items."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        if (!(other instanceof Item)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"        Item otherItem \u003d (Item) other;"},{"lineNumber":99,"author":{"gitId":"chewwh09"},"content":"        return otherItem.getItemName().equals(getItemName())"},{"lineNumber":100,"author":{"gitId":"github-amanda"},"content":"            \u0026\u0026 otherItem.getQuantity().equals(getQuantity())"},{"lineNumber":101,"author":{"gitId":"Md-Fazil"},"content":"            \u0026\u0026 otherItem.getExpiryDate().equals(getExpiryDate())"},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 otherItem.getLocation().equals(getLocation())"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 otherItem.getTags().equals(getTags());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"        return Objects.hash(name, quantity, location, expiryDate, tags);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitId":"chewwh09"},"content":"        builder.append(getItemName())"},{"lineNumber":116,"author":{"gitId":"github-amanda"},"content":"            .append(\"; Quantity: \")"},{"lineNumber":117,"author":{"gitId":"github-amanda"},"content":"            .append(getQuantity())"},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":"            .append(\"; Location: \")"},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"            .append(getLocation());"},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":"        if (getExpiryDate().getExpiryDate() !\u003d null) {"},{"lineNumber":121,"author":{"gitId":"kumsssss"},"content":"            builder.append(\"; ExpiryDate: \")"},{"lineNumber":122,"author":{"gitId":"kumsssss"},"content":"                .append(getExpiryDate().toFormattedString());"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"    public int compareByItemName(Item anotherItem) {"},{"lineNumber":134,"author":{"gitId":"kumsssss"},"content":"        return this.getItemName().compare(anotherItem.getItemName());"},{"lineNumber":135,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public int compareByLocation(Item anotherItem) {"},{"lineNumber":138,"author":{"gitId":"kumsssss"},"content":"        return this.getLocation().compare(anotherItem.getLocation());"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"    public int compareByQuantity(Item anotherItem) {"},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":"        return this.getQuantity().compare(anotherItem.getQuantity());"},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":145,"author":{"gitId":"kumsssss"},"content":"    public int compareByExpiryDate(Item anotherItem) {"},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"        return this.getExpiryDate().compare(anotherItem.getExpiryDate());"},{"lineNumber":147,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":35,"github-amanda":8,"JayChenYJ":11,"Md-Fazil":12,"chewwh09":4,"-":79}},{"path":"src/main/java/seedu/storemando/model/item/ItemComparatorByExpiryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ItemComparatorByExpiryDate implements Comparator\u003cItem\u003e {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public int compare(Item firstItem, Item secondItem) {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        if (firstItem.compareByExpiryDate(secondItem) !\u003d 0) {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByExpiryDate(secondItem);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        } else if (firstItem.compareByQuantity(secondItem) !\u003d 0) {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByQuantity(secondItem);"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        } else if (firstItem.compareByLocation(secondItem) !\u003d 0) {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByLocation(secondItem);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByItemName(secondItem);"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":19}},{"path":"src/main/java/seedu/storemando/model/item/ItemComparatorByQuantity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ItemComparatorByQuantity implements Comparator\u003cItem\u003e {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public int compare(Item firstItem, Item secondItem) {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        if (firstItem.compareByQuantity(secondItem) !\u003d 0) {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByQuantity(secondItem);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        } else if (firstItem.compareByLocation(secondItem) !\u003d 0) {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByLocation(secondItem);"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            return firstItem.compareByItemName(secondItem);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":17}},{"path":"src/main/java/seedu/storemando/model/item/ItemExpiringPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static java.time.temporal.ChronoUnit.DAYS;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" * Tests that a {@code Item}\u0027s {@code expiry date} is within the stipulated days from today."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"public class ItemExpiringPredicate implements Predicate\u003cItem\u003e {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    private final Long numOfDays;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public ItemExpiringPredicate(Long numOfDays) {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"        this.numOfDays \u003d numOfDays;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    public boolean test(Item item) {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"            LocalDate itemExpiryDate \u003d item.getExpiryDate().expiryDate;"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"            LocalDate today \u003d LocalDate.now();"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"            Long daysDifference \u003d DAYS.between(today, itemExpiryDate);"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"            return daysDifference \u003c\u003d numOfDays;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        } catch (NullPointerException ex) {"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"            return false;"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            || (other instanceof ItemExpiringPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"            \u0026\u0026 numOfDays \u003d\u003d ((ItemExpiringPredicate) other).numOfDays); // state check"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":36}},{"path":"src/main/java/seedu/storemando/model/item/ItemName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * Represents a Item\u0027s name in the storemando."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"public class ItemName {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @param name A valid item name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public ItemName(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"            || (other instanceof ItemName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"            \u0026\u0026 fullName.equals(((ItemName) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"    public int compare(ItemName anotherItemName) {"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        return this.fullName.compareTo(anotherItemName.fullName);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":3,"JayChenYJ":4,"chewwh09":5,"-":50}},{"path":"src/main/java/seedu/storemando/model/item/ItemNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":" * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"public class ItemNameContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"     * @param keywords a list of words to check"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    public ItemNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    public boolean test(Item item) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getItemName().fullName, keyword));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"            || (other instanceof ItemNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 keywords.equals(((ItemNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":2,"JayChenYJ":9,"chewwh09":1,"-":22}},{"path":"src/main/java/seedu/storemando/model/item/ItemNameContainsPartialKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":" * Tests that a {@code Item}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"public class ItemNameContainsPartialKeywordsPredicate implements Predicate\u003cItem\u003e {"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"     * @param keywords a list of words to check"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    public ItemNameContainsPartialKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    public boolean test(Item item) {"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsPartialWordIgnoreCase(item.getItemName().fullName, keyword));"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"            || (other instanceof ItemNameContainsPartialKeywordsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 keywords.equals(((ItemNameContainsPartialKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"}"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":""}],"authorContributionMap":{"JayChenYJ":37}},{"path":"src/main/java/seedu/storemando/model/item/Location.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * Represents an Item\u0027s Location in StoreMando."},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"public class Location {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"     * Constructs an {@code Location}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     * @param location A valid location."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    public Location(String location) {"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(location);"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        value \u003d location;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"     * Returns true if a given string is a valid location."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"            || (other instanceof Location // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 value.equals(((Location) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    public int compare(Location anotherLocation) {"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"        return this.value.compareTo(anotherLocation.value);"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":4,"JayChenYJ":17,"-":40}},{"path":"src/main/java/seedu/storemando/model/item/LocationContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" * Tests that a {@code Item}\u0027s {@code location} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"public class LocationContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public LocationContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    public boolean test(Item item) {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"            .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(item.getLocation().value, keyword));"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"            || (other instanceof LocationContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"            \u0026\u0026 keywords.equals(((LocationContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":31}},{"path":"src/main/java/seedu/storemando/model/item/Quantity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * Represents a Item\u0027s quantity number in the storemando."},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":" * \u003e\u003e\u003e\u003e\u003e\u003e\u003e mid-1.2-base-refactor:src/main/java/seedu/storemando/model/item/Quantity.java"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"public class Quantity {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        \"Quantity should only contain numbers, and it should be a positive integer greater than 0\";"},{"lineNumber":16,"author":{"gitId":"Md-Fazil"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"github-amanda"},"content":"     * Constructs a {@code Quantity}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"     * @param quantity A valid quantity number."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"github-amanda"},"content":"    public Quantity(String quantity) {"},{"lineNumber":26,"author":{"gitId":"github-amanda"},"content":"        requireNonNull(quantity);"},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"        value \u003d quantity;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"     * Returns true if a given string is a valid quantity number."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"    public static boolean isValidQuantity(String test) {"},{"lineNumber":35,"author":{"gitId":"Md-Fazil"},"content":"        return test.matches(VALIDATION_REGEX) \u0026\u0026 Long.valueOf(test) \u003e 0;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"            || (other instanceof Quantity // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"github-amanda"},"content":"            \u0026\u0026 value.equals(((Quantity) other).value)); // state check"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"    public int compare(Quantity anotherQuantity) {"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        return Integer.parseInt(this.value) - Integer.parseInt(anotherQuantity.value);"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":12,"kumsssss":5,"JayChenYJ":4,"Md-Fazil":2,"-":35}},{"path":"src/main/java/seedu/storemando/model/item/UniqueItemList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.exceptions.DuplicateItemException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.exceptions.ItemNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":" * A list of items that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":" * A item is considered unique by comparing using {@code Item#isSameItem(Item)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":" * items uses Item#isSameItem(Item) for equality so as to ensure that the item being added or updated is"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":" * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Item#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":" * as to ensure that the item with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"-"},"content":" * \u003cp\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":" * @see Item#isSameItem(Item)"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"public class UniqueItemList implements Iterable\u003cItem\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    private final ObservableList\u003cItem\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    private final ObservableList\u003cItem\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"     * Returns true if the list contains an equivalent item as the given argument."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"    public boolean contains(Item toCheck) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        return internalList.stream().anyMatch(toCheck::isSameItem);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"     * Adds a item to the list."},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"     * The item must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"    public void add(Item toAdd) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"            throw new DuplicateItemException();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"     * Replaces the item {@code target} in the list with {@code editedItem}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"     * The item identity of {@code editedItem} must not be the same as another existing item in the list."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"    public void setItem(Item target, Item editedItem) {"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        requireAllNonNull(target, editedItem);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"            throw new ItemNotFoundException();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        if (!target.isSameItem(editedItem) \u0026\u0026 contains(editedItem)) {"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"            throw new DuplicateItemException();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        internalList.set(index, editedItem);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"     * Removes the equivalent item from the list."},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"     * The item must exist in the list."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"    public void remove(Item toRemove) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"            throw new ItemNotFoundException();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"    public void setItems(UniqueItemList replacement) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"     * Replaces the contents of this list with {@code items}."},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"     * {@code items} must not contain duplicate items."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"    public void setItems(List\u003cItem\u003e items) {"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        requireAllNonNull(items);"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        if (!itemsAreUnique(items)) {"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"            throw new DuplicateItemException();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"        internalList.setAll(items);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"    public ObservableList\u003cItem\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"    public Iterator\u003cItem\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"            || (other instanceof UniqueItemList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 internalList.equals(((UniqueItemList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"kumsssss"},"content":"     * Returns true if {@code items} contains only unique items."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"kumsssss"},"content":"    private boolean itemsAreUnique(List\u003cItem\u003e items) {"},{"lineNumber":128,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"kumsssss"},"content":"            for (int j \u003d i + 1; j \u003c items.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"kumsssss"},"content":"                if (items.get(i).isSameItem(items.get(j))) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":45,"JayChenYJ":4,"-":88}},{"path":"src/main/java/seedu/storemando/model/item/exceptions/DuplicateItemException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":" * Signals that the operation will result in duplicate Items (Items are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"public class DuplicateItemException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public DuplicateItemException() {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        super(\"Operation would result in duplicate items\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":4,"JayChenYJ":1,"-":6}},{"path":"src/main/java/seedu/storemando/model/item/exceptions/ItemNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item.exceptions;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":" * Signals that the operation is unable to find the specified item."},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"public class ItemNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":6,"JayChenYJ":1}},{"path":"src/main/java/seedu/storemando/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * Represents a Tag in the storemando."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":51}},{"path":"src/main/java/seedu/storemando/model/tag/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.tag;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cItem\u003e {"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    public boolean test(Item item) {"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        Set\u003cTag\u003e tagSet \u003d item.getTags();"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        StringBuilder fullTags \u003d new StringBuilder();"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"        for (Tag tag : tagSet) {"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"            String tagName \u003d tag.tagName;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"            fullTags.append(\" \").append(tagName);"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        String finalFullTags \u003d fullTags.toString();"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        return keywords.stream()"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"            .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(finalFullTags, keyword));"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"            || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"            \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":36}},{"path":"src/main/java/seedu/storemando/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":" * Contains utility methods for populating {@code StoreMando} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    public static Item[] getSampleItems() {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        return new Item[]{"},{"lineNumber":22,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Cooking Oil\"), new Quantity(\"10\"), new ExpiryDate(\"2023-10-10\"),"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Cupboard 3\"),"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"essential\")),"},{"lineNumber":25,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Pail\"), new Quantity(\"4\"), new ExpiryDate(\"No Expiry Date\"),"},{"lineNumber":26,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Toilet\"),"},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"cleaning\")),"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Beer\"), new Quantity(\"10\"),"},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"                new ExpiryDate(\"2021-09-10\"), new Location(\"Room 2\"),"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"favourite\", \"guests\")),"},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"            new Item(new ItemName(\"Chilli Sauce\"), new Quantity(\"2\"), new ExpiryDate(\"2023-10-10\"),"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Cupboard 1\"),"},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"sauces\")),"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Tomato Sauce\"), new Quantity(\"1\"), new ExpiryDate(\"2023-09-10\"),"},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Cupboard 1\"),"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"sauces\")),"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Mahjong Table\"), new Quantity(\"2\"), new ExpiryDate(\"No Expiry Date\"),"},{"lineNumber":38,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Storeroom\"),"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"guests\")),"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"            new Item(new ItemName(\"Chair\"), new Quantity(\"5\"), new ExpiryDate(\"No Expiry Date\"),"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"                new Location(\"Storeroom\"),"},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"                getTagSet(\"guests\"))"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"    public static ReadOnlyStoreMando getSampleStoreMando() {"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando sampleAb \u003d new StoreMando();"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        for (Item sampleItem : getSampleItems()) {"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"            sampleAb.addItem(sampleItem);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .map(Tag::new)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":4,"github-amanda":20,"JayChenYJ":12,"Md-Fazil":1,"-":26}},{"path":"src/main/java/seedu/storemando/storage/JsonAdaptedItem.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":" * Jackson-friendly version of {@link Item}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"class JsonAdaptedItem {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"    private final String quantity;"},{"lineNumber":29,"author":{"gitId":"Md-Fazil"},"content":"    private final String expiryDate;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    private final String location;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"     * Constructs a {@code JsonAdaptedItem} with the given item details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"    public JsonAdaptedItem(@JsonProperty(\"name\") String name, @JsonProperty(\"quantity\") String quantity,"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"                           @JsonProperty(\"expiryDate\") String expiryDate, @JsonProperty(\"location\") String location,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":42,"author":{"gitId":"Md-Fazil"},"content":"        this.expiryDate \u003d expiryDate;"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"        this.location \u003d location;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"     * Converts a given {@code Item} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    public JsonAdaptedItem(Item source) {"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"        name \u003d source.getItemName().fullName;"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"        quantity \u003d source.getQuantity().value;"},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"        expiryDate \u003d source.getExpiryDate().toString();"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        location \u003d source.getLocation().value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"     * Converts this Jackson-friendly adapted item object into the model\u0027s {@code Item} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted item."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"    public Item toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        final List\u003cTag\u003e itemTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"            itemTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":"                ItemName.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":"        if (!ItemName.isValidName(name)) {"},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":"            throw new IllegalValueException(ItemName.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"        final ItemName modelName \u003d new ItemName(name);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"        if (quantity \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"github-amanda"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":84,"author":{"gitId":"github-amanda"},"content":"                Quantity.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"github-amanda"},"content":"        if (!Quantity.isValidQuantity(quantity)) {"},{"lineNumber":87,"author":{"gitId":"github-amanda"},"content":"            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"github-amanda"},"content":"        final Quantity modelQuantity \u003d new Quantity(quantity);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Md-Fazil"},"content":"        if (expiryDate \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":"                ExpiryDate.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"Md-Fazil"},"content":"        if (!ExpiryDate.isValidExpiryDate(expiryDate)) {"},{"lineNumber":96,"author":{"gitId":"Md-Fazil"},"content":"            throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Md-Fazil"},"content":"        final ExpiryDate modelExpiryDate \u003d new ExpiryDate(expiryDate);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"        if (location \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"                Location.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"        if (!Location.isValidLocation(location)) {"},{"lineNumber":105,"author":{"gitId":"JayChenYJ"},"content":"            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"        final Location modelLocation \u003d new Location(location);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(itemTags);"},{"lineNumber":110,"author":{"gitId":"github-amanda"},"content":"        return new Item(modelName, modelQuantity, modelExpiryDate, modelLocation, modelTags);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":12,"github-amanda":11,"JayChenYJ":17,"Md-Fazil":10,"chewwh09":6,"-":57}},{"path":"src/main/java/seedu/storemando/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":45}},{"path":"src/main/java/seedu/storemando/storage/JsonSerializableStoreMando.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":" * An Immutable StoreMando that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"@JsonRootName(value \u003d \"storemando\")"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"class JsonSerializableStoreMando {"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"items list contains duplicate item(s).\";"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    private final List\u003cJsonAdaptedItem\u003e items \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"     * Constructs a {@code JsonSerializableStoreMando} with the given items."},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public JsonSerializableStoreMando(@JsonProperty(\"items\") List\u003cJsonAdaptedItem\u003e items) {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        this.items.addAll(items);"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"     * Converts a given {@code ReadOnlyStoreMando} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableStoreMando}."},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    public JsonSerializableStoreMando(ReadOnlyStoreMando source) {"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        items.addAll(source.getItemList().stream().map(JsonAdaptedItem::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"     * Converts this storemando into the model\u0027s {@code StoreMando} object."},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMando toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando storeMando \u003d new StoreMando();"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"        for (JsonAdaptedItem jsonAdaptedItem : items) {"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"            Item item \u003d jsonAdaptedItem.toModelType();"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"            if (storeMando.hasItem(item)) {"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"            storeMando.addItem(item);"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        return storeMando;"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":60}},{"path":"src/main/java/seedu/storemando/storage/JsonStoreMandoStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":" * A class to access StoreMando data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"public class JsonStoreMandoStorage implements StoreMandoStorage {"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonStoreMandoStorage.class);"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    private final Path filePath;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    public JsonStoreMandoStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public Path getStoreMandoFilePath() {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    public Optional\u003cReadOnlyStoreMando\u003e readStoreMando() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        return readStoreMando(filePath);"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"     * Similar to {@link #readStoreMando()}."},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"    public Optional\u003cReadOnlyStoreMando\u003e readStoreMando(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        Optional\u003cJsonSerializableStoreMando\u003e jsonStoreMando \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"            filePath, JsonSerializableStoreMando.class);"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"        if (!jsonStoreMando.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"            return Optional.of(jsonStoreMando.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando(ReadOnlyStoreMando storeMando) throws IOException {"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"        saveStoreMando(storeMando, filePath);"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"     * Similar to {@link #saveStoreMando(ReadOnlyStoreMando)}."},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando(ReadOnlyStoreMando storeMando, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(storeMando);"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableStoreMando(storeMando), filePath);"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":80}},{"path":"src/main/java/seedu/storemando/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    private final Path filePath;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":6,"-":42}},{"path":"src/main/java/seedu/storemando/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"public interface Storage extends StoreMandoStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    Path getStoreMandoFilePath();"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    Optional\u003cReadOnlyStoreMando\u003e readStoreMando() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    void saveStoreMando(ReadOnlyStoreMando storeMando) throws IOException;"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":32}},{"path":"src/main/java/seedu/storemando/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":" * Manages storage of StoreMando data in local storage."},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMandoStorage storeMandoStorage;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    private final UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     * Creates a {@code StorageManager} with the given {@code StoreMandoStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    public StorageManager(StoreMandoStorage storeMandoStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        this.storeMandoStorage \u003d storeMandoStorage;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StoreMando methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"    public Path getStoreMandoFilePath() {"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"        return storeMandoStorage.getStoreMandoFilePath();"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"    public Optional\u003cReadOnlyStoreMando\u003e readStoreMando() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        return readStoreMando(storeMandoStorage.getStoreMandoFilePath());"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"    public Optional\u003cReadOnlyStoreMando\u003e readStoreMando(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"        return storeMandoStorage.readStoreMando(filePath);"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando(ReadOnlyStoreMando storeMando) throws IOException {"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"        saveStoreMando(storeMando, storeMandoStorage.getStoreMandoFilePath());"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando(ReadOnlyStoreMando storeMando, Path filePath) throws IOException {"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"        storeMandoStorage.saveStoreMando(storeMando, filePath);"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":79}},{"path":"src/main/java/seedu/storemando/storage/StoreMandoStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":" * Represents a storage for {@link StoreMando}."},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"public interface StoreMandoStorage {"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    Path getStoreMandoFilePath();"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"     * Returns StoreMando data as a {@link ReadOnlyStoreMando}."},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    Optional\u003cReadOnlyStoreMando\u003e readStoreMando() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"     * @see #getStoreMandoFilePath()"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    Optional\u003cReadOnlyStoreMando\u003e readStoreMando(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"     * Saves the given {@link ReadOnlyStoreMando} to the storage."},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"     * @param storeMando cannot be null."},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"    void saveStoreMando(ReadOnlyStoreMando storeMando) throws IOException;"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"     * @see #saveStoreMando(ReadOnlyStoreMando)"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"    void saveStoreMando(ReadOnlyStoreMando storeMando, Path filePath) throws IOException;"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":48}},{"path":"src/main/java/seedu/storemando/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":" * Represents a storage for {@link seedu.storemando.model.UserPrefs}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"     * Saves the given {@link seedu.storemando.model.ReadOnlyUserPrefs} to the storage."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":6,"-":32}},{"path":"src/main/java/seedu/storemando/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"         * @see seedu.storemando.logic.Logic#execute(String)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":5,"-":80}},{"path":"src/main/java/seedu/storemando/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w10-2.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"     * @throws IllegalStateException \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *                               if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *                               if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *                               if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *                               if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *                               \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":"     * Opens the help window if it is not already open. If the help window is already open, focuses on the help window."},{"lineNumber":94,"author":{"gitId":"Md-Fazil"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Md-Fazil"},"content":"    public void displayUrl() {"},{"lineNumber":96,"author":{"gitId":"Md-Fazil"},"content":"        if (!isShowing()) {"},{"lineNumber":97,"author":{"gitId":"Md-Fazil"},"content":"            show();"},{"lineNumber":98,"author":{"gitId":"Md-Fazil"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"Md-Fazil"},"content":"            focus();"},{"lineNumber":100,"author":{"gitId":"Md-Fazil"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":5,"Md-Fazil":11,"-":97}},{"path":"src/main/java/seedu/storemando/ui/ItemCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":" * An UI component that displays information of a {@code Item}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"public class ItemCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    private static final String FXML \u003d \"ItemListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/storeMando-level4/issues/336\"\u003eThe issue on StoreMando level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    public final Item item;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"    private Label quantity;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"    private Label locations;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"Md-Fazil"},"content":"    private Label expiryDate;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"     * Creates a {@code ItemCode} with the given {@code Item} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"    public ItemCard(Item item, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        this.item \u003d item;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        name.setText(item.getItemName().fullName);"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        locations.setText(item.getLocation().value);"},{"lineNumber":53,"author":{"gitId":"github-amanda"},"content":"        quantity.setText(\"Quantity: \" + item.getQuantity().value);"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        if (item.getExpiryDate().getExpiryDate() !\u003d null) {"},{"lineNumber":55,"author":{"gitId":"github-amanda"},"content":"            expiryDate.setText(\"Expiry Date: \" + item.getExpiryDate().toFormattedString());"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        item.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        if (!(other instanceof ItemCard)) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        ItemCard card \u003d (ItemCard) other;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"            \u0026\u0026 item.equals(card.item);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"},{"lineNumber":80,"author":{"gitId":"github-amanda"},"content":""}],"authorContributionMap":{"kumsssss":12,"github-amanda":4,"JayChenYJ":6,"Md-Fazil":1,"chewwh09":1,"-":56}},{"path":"src/main/java/seedu/storemando/ui/ItemListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":" * Panel containing the list of items."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"public class ItemListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    private static final String FXML \u003d \"ItemListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ItemListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    private ListView\u003cItem\u003e itemListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"     * Creates a {@code ItemListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    public ItemListPanel(ObservableList\u003cItem\u003e itemList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        itemListView.setItems(itemList);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        itemListView.setCellFactory(listView -\u003e new ItemListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"    class ItemListViewCell extends ListCell\u003cItem\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        protected void updateItem(Item item, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"            super.updateItem(item, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"            if (empty || item \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"                setGraphic(new ItemCard(item, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":15,"JayChenYJ":3,"-":31}},{"path":"src/main/java/seedu/storemando/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"github-amanda"},"content":"import javafx.scene.text.Text;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitId":"Md-Fazil"},"content":"import seedu.storemando.commons.util.BrowserUtil;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    private final Stage primaryStage;"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    private final Logic logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    private ItemListPanel itemListPanel;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"    private final HelpWindow helpWindow;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"    private StackPane itemListPanelPlaceholder;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":93,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":103,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"        itemListPanel \u003d new ItemListPanel(logic.getFilteredItemList());"},{"lineNumber":117,"author":{"gitId":"kumsssss"},"content":"        itemListPanelPlaceholder.getChildren().add(itemListPanel.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"JayChenYJ"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getStoreMandoFilePath());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"github-amanda"},"content":"     * Resizes the resultDisplayPlaceholder vertical size based on text"},{"lineNumber":143,"author":{"gitId":"github-amanda"},"content":"     * @param text the message displayed"},{"lineNumber":144,"author":{"gitId":"github-amanda"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"github-amanda"},"content":"    private void setResultDisplayPlaceholderVerticalSize(Text text) {"},{"lineNumber":146,"author":{"gitId":"github-amanda"},"content":"        resultDisplayPlaceholder.setMinHeight(text.getBoundsInLocal().getHeight() * 2.5);"},{"lineNumber":147,"author":{"gitId":"github-amanda"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"Md-Fazil"},"content":"     * Opens storemando\u0027s user guide on user\u0027s browser if user\u0027s desktop supports it."},{"lineNumber":151,"author":{"gitId":"Md-Fazil"},"content":"     * Otherwise, opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":155,"author":{"gitId":"Md-Fazil"},"content":"        if (BrowserUtil.canOpenBrowser()) {"},{"lineNumber":156,"author":{"gitId":"Md-Fazil"},"content":"            BrowserUtil.displayUserGuideWebsite();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"Md-Fazil"},"content":"            helpWindow.displayUrl();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"kumsssss"},"content":"    public ItemListPanel getItemListPanel() {"},{"lineNumber":179,"author":{"gitId":"kumsssss"},"content":"        return itemListPanel;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":184,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"JayChenYJ"},"content":"     * @see seedu.storemando.logic.Logic#execute(String)"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":192,"author":{"gitId":"github-amanda"},"content":"            setResultDisplayPlaceholderVerticalSize(new Text(commandResult.getFeedbackToUser()));"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":205,"author":{"gitId":"github-amanda"},"content":"            setResultDisplayPlaceholderVerticalSize(new Text(e.getMessage()));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":10,"kumsssss":6,"JayChenYJ":12,"Md-Fazil":6,"-":175}},{"path":"src/main/java/seedu/storemando/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":27}},{"path":"src/main/java/seedu/storemando/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":27}},{"path":"src/main/java/seedu/storemando/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Starts the UI (and the App)."},{"lineNumber":12,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":14}},{"path":"src/main/java/seedu/storemando/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.MainApp;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/storemando_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    private final Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":7,"-":82}},{"path":"src/main/java/seedu/storemando/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.MainApp;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Resource folder where FXML files are stored."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public T getRoot() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param root     Specifies the root of the object hierarchy."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(location);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":91}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":3,"author":{"gitId":"github-amanda"},"content":"   background-color: #ffffff; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"   -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"   -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":16,"author":{"gitId":"github-amanda"},"content":"   -fx-font-weight: bold;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   -fx-opacity: 1;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   -fx-font-size: 32pt;"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   -fx-opacity: 1;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   -fx-font-size: 12pt;"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":31,"author":{"gitId":"github-amanda"},"content":"   -fx-font-weight: bold;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   -fx-padding: 0 0 0 1;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   -fx-padding: 0 0 0 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   -fx-min-height: 0;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   -fx-max-height: 0;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"   -fx-base: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"   -fx-control-inner-background: #1d1d1d;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   -fx-table-cell-border-color: transparent;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   -fx-table-header-border-color: transparent;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   -fx-padding: 5;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   -fx-background-color: transparent;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   -fx-size: 35;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   -fx-border-width: 0 0 1 0;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   -fx-background-color: transparent;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"   -fx-border-color:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"       transparent"},{"lineNumber":63,"author":{"gitId":"-"},"content":"       transparent"},{"lineNumber":64,"author":{"gitId":"-"},"content":"       derive(-fx-base, 80%)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"       transparent;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"   -fx-border-insets: 0 10 1 0;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   -fx-font-size: 20pt;"},{"lineNumber":71,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"   -fx-alignment: center-left;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"   -fx-opacity: 1;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   -fx-background-color: -fx-focus-color;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"   -fx-border-radius: 1;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"   -fx-border-width: 1;"},{"lineNumber":89,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"   -fx-background-insets: 0;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"   -fx-padding: 0;"},{"lineNumber":95,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"   -fx-label-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   -fx-graphic-text-gap : 0;"},{"lineNumber":101,"author":{"gitId":"github-amanda"},"content":"   -fx-padding: 10 0 10 0;"},{"lineNumber":102,"author":{"gitId":"github-amanda"},"content":"   -fx-background-radius: 0;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":106,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#F6AE2D, 20%);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":110,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#F6AE2D, 60%);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":114,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: #F07167;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"github-amanda"},"content":"/*"},{"lineNumber":118,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":119,"author":{"gitId":"github-amanda"},"content":"   -fx-border-color: white;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"   -fx-border-width: 1;"},{"lineNumber":121,"author":{"gitId":"github-amanda"},"content":"} */"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":124,"author":{"gitId":"github-amanda"},"content":"   -fx-text-fill: black;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":128,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":129,"author":{"gitId":"github-amanda"},"content":"   -fx-font-weight: bold;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"   -fx-font-size: 16px;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"   -fx-text-fill: #010504;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":135,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":136,"author":{"gitId":"-"},"content":"   -fx-font-size: 13px;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   -fx-text-fill: #010504;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":141,"author":{"gitId":"github-amanda"},"content":"    -fx-background-color: derive(#ffffff, 20%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"github-amanda"},"content":"/* outline background */"},{"lineNumber":145,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":146,"author":{"gitId":"github-amanda"},"content":"    -fx-background-color: derive(#86BBD8, 20%);"},{"lineNumber":147,"author":{"gitId":"github-amanda"},"content":"    -fx-border-color: derive(#86BBD8, 10%);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":152,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"   -fx-background-color: transparent;"},{"lineNumber":157,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":158,"author":{"gitId":"github-amanda"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   -fx-text-fill: black !important;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":167,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":168,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   -fx-padding: 4px;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   -fx-pref-height: 30px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   -fx-border-width: 1px;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":180,"author":{"gitId":"github-amanda"},"content":"   -fx-text-fill: black;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"   -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"   -fx-border-width: 1px;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":202,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":206,"author":{"gitId":"github-amanda"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":207,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":208,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   -fx-opacity: 0.9;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"   -fx-background-color: black;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":217,"author":{"gitId":"-"},"content":"* Metro style Push Button"},{"lineNumber":218,"author":{"gitId":"-"},"content":"* Author: Pedro Duque Vieira"},{"lineNumber":219,"author":{"gitId":"-"},"content":"* http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":220,"author":{"gitId":"-"},"content":"*/"},{"lineNumber":221,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"   -fx-padding: 5 22 5 22;"},{"lineNumber":223,"author":{"gitId":"github-amanda"},"content":"   -fx-border-color: white;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"   -fx-border-width: 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"   -fx-background-radius: 0;"},{"lineNumber":226,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: white;"},{"lineNumber":227,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\", Helvetica, Arial, sans-serif;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"   -fx-text-fill: #d8d8d8;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"   -fx-background-color: #3a3a3a;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":238,"author":{"gitId":"-"},"content":" -fx-background-color: white;"},{"lineNumber":239,"author":{"gitId":"-"},"content":" -fx-text-fill: #1d1d1d;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   -fx-border-color: white, white;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"   -fx-border-width: 1, 1;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"   -fx-border-style: solid, segments(1, 1);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   -fx-border-radius: 0, 0;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"   -fx-opacity: 0.4;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"   -fx-background-color: -fx-focus-color;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"   -fx-text-fill: #ffffff;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"   -fx-background-color: #1d1d1d;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"   -fx-font-size: 14px;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"   -fx-font-weight: bold;"},{"lineNumber":276,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"   -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"   -fx-font-size: 18px;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"   -fx-font-style: italic;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"   -fx-fill: white;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":291,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#053C5E, 20%);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":295,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: derive(#053C5E, 80%);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"   -fx-background-insets: 3;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"   -fx-background-color: transparent;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"   -fx-padding: 0 0 0 0;"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"   -fx-shape: \" \";"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"   -fx-padding: 1 8 1 8;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"   -fx-padding: 8 1 8 1;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"   -fx-background-color: transparent;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"   -fx-border-width: 0;"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"   -fx-font-size: 11px;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"   -fx-text-fill: #F70D1A;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":327,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: white;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"   -fx-background-insets: 0;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"   -fx-border-insets: 0;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"   -fx-border-width: 1;"},{"lineNumber":331,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":332,"author":{"gitId":"github-amanda"},"content":"   -fx-font-size: 11pt;"},{"lineNumber":333,"author":{"gitId":"github-amanda"},"content":"   -fx-text-fill: black;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"JayChenYJ"},"content":"#filterField, #itemListPanel, #itemWebpage {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"   -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"   -fx-background-radius: 0;"},{"lineNumber":342,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: #053C5E;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"   -fx-hgap: 7;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   -fx-vgap: 3;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":352,"author":{"gitId":"github-amanda"},"content":"   -fx-background-color: #0075C4;"},{"lineNumber":353,"author":{"gitId":"github-amanda"},"content":"   -fx-padding: 2 3 2 3;"},{"lineNumber":354,"author":{"gitId":"github-amanda"},"content":"   -fx-background-radius: 6;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"   -fx-font-size: 11;"},{"lineNumber":356,"author":{"gitId":"github-amanda"},"content":"   -fx-font-family: \"Comic Sans MS\";"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":50,"JayChenYJ":1,"-":306}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {"},{"lineNumber":3,"author":{"gitId":"github-amanda"},"content":"   -fx-text-fill: #f22727 !important; /* The error class should always override the default text-fill style */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"   /* Empty cells will not have alternating colours */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"   -fx-background: #383838;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   -fx-border-width: 1;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   -fx-border-color: white;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   -fx-border-radius: 3;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   -fx-background-radius: 3;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   -fx-text-fill: white;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":1,"-":19}},{"path":"src/main/resources/view/ItemListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003c/Label\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u003cFlowPane fx:id\u003d\"tags\"/\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"            \u003cLabel fx:id\u003d\"locations\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"},{"lineNumber":31,"author":{"gitId":"github-amanda"},"content":"            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"cell_small_label\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"github-amanda":1,"kumsssss":1,"JayChenYJ":1,"-":32}},{"path":"src/main/resources/view/ItemListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    \u003cListView fx:id\u003d\"itemListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"kumsssss":1,"-":6}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"         title\u003d\"STOREMANDO\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cicons\u003e"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"        \u003cImage url\u003d\"@/images/storemando_32.png\"/\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cscene\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cScene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cstylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                \u003cURL value\u003d\"@Extensions.css\"/\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c/stylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/MenuBar\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"                \u003cVBox fx:id\u003d\"itemList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\""},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"                      VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"                    \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"github-amanda"},"content":"                        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"                    \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"                    \u003cStackPane fx:id\u003d\"itemListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"                \u003c/VBox\u003e"},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                \u003c/StackPane\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"github-amanda":8,"JayChenYJ":2,"-":50}},{"path":"src/test/data/JsonSerializableStoreMandoTest/duplicateItemStoreMando.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"  \"items\": ["},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Apples\","},{"lineNumber":5,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"10\","},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-10-10\","},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Basket\","},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"      \"tagged\": ["},{"lineNumber":9,"author":{"gitId":"Md-Fazil"},"content":"        \"favourite\""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"      ]"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Apples\","},{"lineNumber":14,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"10\","},{"lineNumber":15,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-10-10\","},{"lineNumber":16,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Basket\""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"  ]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":6,"JayChenYJ":8,"Md-Fazil":3,"-":2}},{"path":"src/test/data/JsonSerializableStoreMandoTest/invalidItemStoreMando.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"  \"items\": ["},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"Md-Fazil"},"content":"      \"name\": \"Mustard\","},{"lineNumber":5,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"9\","},{"lineNumber":6,"author":{"gitId":"Md-Fazil"},"content":"      \"expirydate\": \"20010-1-1\","},{"lineNumber":7,"author":{"gitId":"Md-Fazil"},"content":"      \"location\": \"Refrigerator\""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"  ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":4,"Md-Fazil":4,"-":2}},{"path":"src/test/data/JsonSerializableStoreMandoTest/typicalItemsStoreMando.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"  \"_comment\": \"StoreMando save file which contains the same item values as in TypicalItems#getTypicalStoreMando()\","},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"  \"items\": ["},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Apples\","},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"9\","},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-04-08\","},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Basket\","},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"      \"tagged\": ["},{"lineNumber":10,"author":{"gitId":"Md-Fazil"},"content":"        \"Expiring\""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"      ]"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":14,"author":{"gitId":"Md-Fazil"},"content":"      \"name\": \"Bread\","},{"lineNumber":15,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"1\","},{"lineNumber":16,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-04-08\","},{"lineNumber":17,"author":{"gitId":"Md-Fazil"},"content":"      \"location\": \"Dining Table\","},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"      \"tagged\": ["},{"lineNumber":19,"author":{"gitId":"Md-Fazil"},"content":"        \"Expiring\","},{"lineNumber":20,"author":{"gitId":"Md-Fazil"},"content":"        \"Favourite\""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"      ]"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Cream Cheese\","},{"lineNumber":25,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"1\","},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":"      \"expiryDate\": \"2023-10-10\","},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Drawer\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \"tagged\": []"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":31,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Donut\","},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"5\","},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-10-10\","},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Refrigerator\","},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"      \"tagged\": ["},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"        \"Favourite\""},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"      ]"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Eggs\","},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"10\","},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-10-10\","},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Drawer\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \"tagged\": []"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":47,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Flour\","},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"3\","},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"      \"expiryDate\": \"2021-10-09\","},{"lineNumber":50,"author":{"gitId":"Md-Fazil"},"content":"      \"location\": \"Kitchen Cabinet\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \"tagged\": []"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Ginger\","},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"      \"quantity\": \"20\","},{"lineNumber":56,"author":{"gitId":"Md-Fazil"},"content":"      \"expiryDate\": \"2021-10-08\","},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"      \"location\": \"Kitchen Basket\","},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":"      \"tagged\": []"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"  ]"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":21,"JayChenYJ":23,"Md-Fazil":12,"-":5}},{"path":"src/test/data/JsonStoreMandoStorageTest/invalidAndValidItemStoreMando.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"  \"items\": ["},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"      \"name\": \"Valid Item\","},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"Md-Fazil"},"content":"      \"expiryDate\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"Md-Fazil"},"content":"      \"location\": \"4th street\""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    },"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":"      \"name\": \"Item With Invalid Quantity Field\","},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"948asdf2424\","},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":"      \"expiryDate\": \"hans@example.com\","},{"lineNumber":13,"author":{"gitId":"Md-Fazil"},"content":"      \"location\": \"4th street\""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"  ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":1,"github-amanda":3,"JayChenYJ":6,"Md-Fazil":4,"-":2}},{"path":"src/test/data/JsonStoreMandoStorageTest/invalidItemStoreMando.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":"  \"items\": ["},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"    {"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"      \"itemName\": \"Item with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"      \"quantity\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"      \"expirydate\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"      \"location\": \"4th street\""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"  ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":1,"JayChenYJ":6,"chewwh09":1,"-":2}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\": 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\": 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\": \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\": {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\": 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\": 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\": 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"  \"storeMandoFilePath\": \"storemando.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\": 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\": 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\": {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\": 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\": 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"  \"storeMandoFilePath\": \"storemando.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":10}},{"path":"src/test/java/seedu/storemando/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        private final Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":56}},{"path":"src/test/java/seedu/storemando/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Preference file Location : preferences.json\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":26}},{"path":"src/test/java/seedu/storemando/commons/core/MessagesTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"class MessagesTest {"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"    public void unknownCommandMessage_correctString() {"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"        String message \u003d \"Unknown command\";"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(message, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public void invalidCommandFormatMessage_correctString() {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"        String message \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(message, Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    public void invalidItemDisplayedIndexMessage_correctString() {"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"        String message \u003d \"The item index provided is invalid\";"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(message, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"    public void moreThanOneItemListedMessage_correctString() {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        String message \u003d \"%1$d items listed!\";"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(message, Messages.MESSAGE_MORE_THAN_ONE_ITEM_LISTED_OVERVIEW);"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    public void lessThanTwoItemsMessage_correctString() {"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        String message \u003d \"%1$d item listed!\";"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(message, Messages.MESSAGE_LESS_THAN_TWO_ITEMS_LISTED_OVERVIEW);"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":38}},{"path":"src/test/java/seedu/storemando/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":133}},{"path":"src/test/java/seedu/storemando/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        final Index fifthItemIndex \u003d Index.fromOneBased(5);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(fifthItemIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(fifthItemIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(fifthItemIndex.equals(fifthItemIndex));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(fifthItemIndex.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(fifthItemIndex.equals(5.0f));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(fifthItemIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":9,"-":51}},{"path":"src/test/java/seedu/storemando/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"        assertNotNull(AppUtil.getImage(\"/images/storemando_32.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":33}},{"path":"src/test/java/seedu/storemando/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":105}},{"path":"src/test/java/seedu/storemando/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Config;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            : null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":4,"-":112}},{"path":"src/test/java/seedu/storemando/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":21}},{"path":"src/test/java/seedu/storemando/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":42}},{"path":"src/test/java/seedu/storemando/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"    //---------------- Tests for containsPartialWordIgnoreCase --------------------------------------"},{"lineNumber":127,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":128,"author":{"gitId":"JayChenYJ"},"content":"    /*"},{"lineNumber":129,"author":{"gitId":"JayChenYJ"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":132,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":134,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"JayChenYJ"},"content":"    public void containsPartialWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":136,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":137,"author":{"gitId":"JayChenYJ"},"content":"            StringUtil.containsPartialWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":138,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":140,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"JayChenYJ"},"content":"    public void containsPartialWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":142,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":143,"author":{"gitId":"JayChenYJ"},"content":"            -\u003e StringUtil.containsPartialWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":144,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":146,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"JayChenYJ"},"content":"    public void containsPartialWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":148,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":149,"author":{"gitId":"JayChenYJ"},"content":"            -\u003e StringUtil.containsPartialWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":150,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":152,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"JayChenYJ"},"content":"    public void containsPartialWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsPartialWordIgnoreCase(null, \"abc\"));"},{"lineNumber":155,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":157,"author":{"gitId":"JayChenYJ"},"content":"    /*"},{"lineNumber":158,"author":{"gitId":"JayChenYJ"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":159,"author":{"gitId":"JayChenYJ"},"content":"     *   - any word"},{"lineNumber":160,"author":{"gitId":"JayChenYJ"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":161,"author":{"gitId":"JayChenYJ"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":162,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"JayChenYJ"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":164,"author":{"gitId":"JayChenYJ"},"content":"     *   - empty string"},{"lineNumber":165,"author":{"gitId":"JayChenYJ"},"content":"     *   - one word"},{"lineNumber":166,"author":{"gitId":"JayChenYJ"},"content":"     *   - multiple words"},{"lineNumber":167,"author":{"gitId":"JayChenYJ"},"content":"     *   - sentence with extra spaces"},{"lineNumber":168,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"JayChenYJ"},"content":"     * Possible scenarios returning true:"},{"lineNumber":170,"author":{"gitId":"JayChenYJ"},"content":"     *   - matches first word in sentence"},{"lineNumber":171,"author":{"gitId":"JayChenYJ"},"content":"     *   - last word in sentence"},{"lineNumber":172,"author":{"gitId":"JayChenYJ"},"content":"     *   - middle word in sentence"},{"lineNumber":173,"author":{"gitId":"JayChenYJ"},"content":"     *   - matches multiple words"},{"lineNumber":174,"author":{"gitId":"JayChenYJ"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":175,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"JayChenYJ"},"content":"     * Possible scenarios returning false:"},{"lineNumber":177,"author":{"gitId":"JayChenYJ"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":178,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"JayChenYJ"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":180,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":182,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"JayChenYJ"},"content":"    public void containsPartialWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":184,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":185,"author":{"gitId":"JayChenYJ"},"content":"        // Empty sentence"},{"lineNumber":186,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":187,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":188,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":189,"author":{"gitId":"JayChenYJ"},"content":"        // Sentence word matches part of the query word"},{"lineNumber":190,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence"},{"lineNumber":191,"author":{"gitId":"JayChenYJ"},"content":"        // word"},{"lineNumber":192,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":193,"author":{"gitId":"JayChenYJ"},"content":"        // Query word matches part of a sentence word"},{"lineNumber":194,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query"},{"lineNumber":195,"author":{"gitId":"JayChenYJ"},"content":"        // word"},{"lineNumber":196,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":197,"author":{"gitId":"JayChenYJ"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":198,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":199,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":200,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":201,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":202,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":203,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":204,"author":{"gitId":"JayChenYJ"},"content":"        // Matches multiple words in sentence"},{"lineNumber":205,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(StringUtil.containsPartialWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":206,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":84,"-":141}},{"path":"src/test/java/seedu/storemando/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.EXPIRYDATE_DESC_CHEESE;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.LOCATION_DESC_CHEESE;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.NAME_DESC_CHEESE;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.QUANTITY_DESC_CHEESE;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.CHEESE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.JsonStoreMandoStorage;"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        JsonStoreMandoStorage storeMandoStorage \u003d"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"            new JsonStoreMandoStorage(temporaryFolder.resolve(\"storeMando.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        StorageManager storage \u003d new StorageManager(storeMandoStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"        // Setup LogicManager with JsonStoreMandoIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"        JsonStoreMandoStorage storeMandoStorage \u003d"},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"            new JsonStoreMandoIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionStoreMando.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"        StorageManager storage \u003d new StorageManager(storeMandoStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CHEESE + QUANTITY_DESC_CHEESE + EXPIRYDATE_DESC_CHEESE"},{"lineNumber":83,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_CHEESE;"},{"lineNumber":84,"author":{"gitId":"github-amanda"},"content":"        Item expectedItem \u003d new ItemBuilder(CHEESE).withTags().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        expectedModel.addItem(expectedItem);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredItemList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {"},{"lineNumber":136,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(model.getStoreMando(), new UserPrefs());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"JayChenYJ"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"JayChenYJ"},"content":"    private static class JsonStoreMandoIoExceptionThrowingStub extends JsonStoreMandoStorage {"},{"lineNumber":158,"author":{"gitId":"JayChenYJ"},"content":"        private JsonStoreMandoIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitId":"JayChenYJ"},"content":"        public void saveStoreMando(ReadOnlyStoreMando storeMando, Path filePath) throws IOException {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":8,"kumsssss":4,"JayChenYJ":35,"-":120}},{"path":"src/test/java/seedu/storemando/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    public void execute_newItem_success() {"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        Item validItem \u003d new ItemBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(model.getStoreMando(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        expectedModel.addItem(validItem);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new AddCommand(validItem), model,"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            String.format(AddCommand.MESSAGE_SUCCESS, validItem), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    public void execute_duplicateItem_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        Item itemInList \u003d model.getStoreMando().getItemList().get(0);"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(new AddCommand(itemInList), model, AddCommand.MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":7,"JayChenYJ":12,"-":26}},{"path":"src/test/java/seedu/storemando/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.model.item.ExpiryDate.NO_EXPIRY_DATE;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyUserPrefs;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"    public void constructor_nullItem_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_itemAcceptedByModel_addSuccessful() throws CommandException {"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"        ModelStubAcceptingItemAdded modelStub \u003d new ModelStubAcceptingItemAdded();"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        Item validItem \u003d new ItemBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        CommandResult commandResult \u003d new AddCommand(validItem).execute(modelStub);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validItem), commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        assertEquals(Arrays.asList(validItem), modelStub.itemsAdded);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_itemAcceptedByModel_addExpiredSuccessful() throws CommandException {"},{"lineNumber":49,"author":{"gitId":"Md-Fazil"},"content":"        ModelStubAcceptingItemAdded modelStub \u003d new ModelStubAcceptingItemAdded();"},{"lineNumber":50,"author":{"gitId":"Md-Fazil"},"content":"        Item validItem \u003d new ItemBuilder().withExpiryDate(\"2010-10-10\").build();"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":52,"author":{"gitId":"Md-Fazil"},"content":"        CommandResult commandResult \u003d new AddCommand(validItem).execute(modelStub);"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":54,"author":{"gitId":"Md-Fazil"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS + AddCommand.MESSAGE_ITEM_EXPIRED_WARNING, validItem),"},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"            commandResult.getFeedbackToUser());"},{"lineNumber":56,"author":{"gitId":"Md-Fazil"},"content":"        assertEquals(Arrays.asList(validItem), modelStub.itemsAdded);"},{"lineNumber":57,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":59,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"    public void execute_duplicateItem_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        Item validItem \u003d new ItemBuilder().build();"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        AddCommand addCommand \u003d new AddCommand(validItem);"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        ModelStub modelStub \u003d new ModelStubWithItem(validItem);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ITEM, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"    public void execute_itemWithoutExpiryDate_success() throws CommandException {"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"        ModelStubAcceptingItemAdded modelStub \u003d new ModelStubAcceptingItemAdded();"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"        Item validItem \u003d new ItemBuilder().withExpiryDate(NO_EXPIRY_DATE).build();"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"        CommandResult commandResult \u003d new AddCommand(validItem).execute(modelStub);"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validItem), commandResult.getFeedbackToUser());"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        assertEquals(Arrays.asList(validItem), modelStub.itemsAdded);"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"        Item alice \u003d new ItemBuilder().withName(\"Alice\").build();"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        Item bob \u003d new ItemBuilder().withName(\"Bob\").build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"        // different item -\u003e returns false"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"        public Path getStoreMandoFilePath() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitId":"JayChenYJ"},"content":"        public void setStoreMandoFilePath(Path storeMandoFilePath) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":"        public void addItem(Item item) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitId":"JayChenYJ"},"content":"        public void setStoreMando(ReadOnlyStoreMando newData) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"JayChenYJ"},"content":"        public ReadOnlyStoreMando getStoreMando() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"kumsssss"},"content":"        public boolean hasItem(Item item) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"kumsssss"},"content":"        public void deleteItem(Item target) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"kumsssss"},"content":"        public void setItem(Item target, Item editedItem) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"kumsssss"},"content":"        @Override"},{"lineNumber":170,"author":{"gitId":"kumsssss"},"content":"        public void setItems(List\u003cItem\u003e itemList) {"},{"lineNumber":171,"author":{"gitId":"kumsssss"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"kumsssss"},"content":"        public ObservableList\u003cItem\u003e getFilteredItemList() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitId":"kumsssss"},"content":"        public void updateFilteredItemList(Predicate\u003cItem\u003e predicate) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":184,"author":{"gitId":"kumsssss"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"kumsssss"},"content":"        public ObservableList\u003cItem\u003e getSortedItemList() {"},{"lineNumber":186,"author":{"gitId":"kumsssss"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":189,"author":{"gitId":"kumsssss"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"kumsssss"},"content":"        public void updateSortedItemList(Comparator\u003cItem\u003e comparator) {"},{"lineNumber":191,"author":{"gitId":"kumsssss"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"kumsssss"},"content":"     * A Model stub that contains a single item."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"kumsssss"},"content":"    private class ModelStubWithItem extends ModelStub {"},{"lineNumber":200,"author":{"gitId":"kumsssss"},"content":"        private final Item item;"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"kumsssss"},"content":"        ModelStubWithItem(Item item) {"},{"lineNumber":203,"author":{"gitId":"kumsssss"},"content":"            requireNonNull(item);"},{"lineNumber":204,"author":{"gitId":"kumsssss"},"content":"            this.item \u003d item;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitId":"kumsssss"},"content":"        public boolean hasItem(Item item) {"},{"lineNumber":209,"author":{"gitId":"kumsssss"},"content":"            requireNonNull(item);"},{"lineNumber":210,"author":{"gitId":"kumsssss"},"content":"            return this.item.isSameItem(item);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"kumsssss"},"content":"     * A Model stub that always accept the item being added."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"kumsssss"},"content":"    private class ModelStubAcceptingItemAdded extends ModelStub {"},{"lineNumber":218,"author":{"gitId":"kumsssss"},"content":"        final ArrayList\u003cItem\u003e itemsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitId":"kumsssss"},"content":"        public boolean hasItem(Item item) {"},{"lineNumber":222,"author":{"gitId":"kumsssss"},"content":"            requireNonNull(item);"},{"lineNumber":223,"author":{"gitId":"kumsssss"},"content":"            return itemsAdded.stream().anyMatch(item::isSameItem);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitId":"kumsssss"},"content":"        public void addItem(Item item) {"},{"lineNumber":228,"author":{"gitId":"kumsssss"},"content":"            requireNonNull(item);"},{"lineNumber":229,"author":{"gitId":"kumsssss"},"content":"            itemsAdded.add(item);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitId":"JayChenYJ"},"content":"        public ReadOnlyStoreMando getStoreMando() {"},{"lineNumber":234,"author":{"gitId":"JayChenYJ"},"content":"            return new StoreMando();"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":69,"JayChenYJ":16,"Md-Fazil":14,"-":139}},{"path":"src/test/java/seedu/storemando/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public void execute_emptyStoreMando_success() {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    public void execute_nonEmptyStoreMando_success() {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        expectedModel.setStoreMando(new StoreMando());"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":32}},{"path":"src/test/java/seedu/storemando/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":53}},{"path":"src/test/java/seedu/storemando/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.EditItemDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_NAME_CHEESE \u003d \"Cheese\";"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_NAME_BANANA \u003d \"Banana\";"},{"lineNumber":31,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_QUANTITY_CHEESE \u003d \"1\";"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_QUANTITY_BANANA \u003d \"2\";"},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_EXPIRED_EXPIRYDATE_BANANA \u003d \"2017-10-11\";"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_EXPIRYDATE_CHEESE \u003d \"2020-10-11\";"},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_EXPIRYDATE_BANANA \u003d \"2019-08-10\";"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_LOCATION_CHEESE \u003d \"Refrigerator\";"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"    public static final String VALID_LOCATION_BANANA \u003d \"Kitchen\";"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"Essential\";"},{"lineNumber":39,"author":{"gitId":"Md-Fazil"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"Favourite\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"    public static final String NAME_DESC_CHEESE \u003d \" \" + PREFIX_NAME + VALID_NAME_CHEESE;"},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"    public static final String NAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_NAME_BANANA;"},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"    public static final String QUANTITY_DESC_CHEESE \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_CHEESE;"},{"lineNumber":44,"author":{"gitId":"github-amanda"},"content":"    public static final String QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BANANA;"},{"lineNumber":45,"author":{"gitId":"github-amanda"},"content":"    public static final String EXPIRYDATE_DESC_CHEESE \u003d \" \" + PREFIX_EXPIRYDATE + VALID_EXPIRYDATE_CHEESE;"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"    public static final String EXPIRYDATE_DESC_BANANA \u003d \" \" + PREFIX_EXPIRYDATE + VALID_EXPIRYDATE_BANANA;"},{"lineNumber":47,"author":{"gitId":"github-amanda"},"content":"    public static final String LOCATION_DESC_CHEESE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_CHEESE;"},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"    public static final String LOCATION_DESC_BANANA \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BANANA;"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":50,"author":{"gitId":"Md-Fazil"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"911a\"; // \u0027a\u0027 not allowed in quantities"},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"    public static final String INVALID_EXPIRYDATE_DESC \u003d \" \" + PREFIX_EXPIRYDATE + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // empty string not allowed for locations"},{"lineNumber":57,"author":{"gitId":"Md-Fazil"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"github-amanda"},"content":"    public static final EditCommand.EditItemDescriptor DESC_CHEESE;"},{"lineNumber":63,"author":{"gitId":"github-amanda"},"content":"    public static final EditCommand.EditItemDescriptor DESC_BANANA;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":66,"author":{"gitId":"github-amanda"},"content":"        DESC_CHEESE \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHEESE)"},{"lineNumber":67,"author":{"gitId":"github-amanda"},"content":"            .withQuantity(VALID_QUANTITY_CHEESE).withExpiryDate(VALID_EXPIRYDATE_CHEESE)"},{"lineNumber":68,"author":{"gitId":"github-amanda"},"content":"            .withLocation(VALID_LOCATION_CHEESE)"},{"lineNumber":69,"author":{"gitId":"Md-Fazil"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"github-amanda"},"content":"        DESC_BANANA \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA)"},{"lineNumber":71,"author":{"gitId":"github-amanda"},"content":"            .withQuantity(VALID_QUANTITY_BANANA).withExpiryDate(VALID_EXPIRYDATE_BANANA)"},{"lineNumber":72,"author":{"gitId":"github-amanda"},"content":"            .withLocation(VALID_LOCATION_BANANA)"},{"lineNumber":73,"author":{"gitId":"Md-Fazil"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"JayChenYJ"},"content":"     * - the storemando, filtered item list and selected item in {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando expectedStoreMando \u003d new StoreMando(actualModel.getStoreMando());"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        List\u003cItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredItemList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":115,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(expectedStoreMando, actualModel.getStoreMando());"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredItemList());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":"     * Updates {@code model}\u0027s filtered list to show only the item at the given {@code targetIndex} in the"},{"lineNumber":121,"author":{"gitId":"JayChenYJ"},"content":"     * {@code model}\u0027s storemando."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"    public static void showItemAtIndex(Model model, Index targetIndex) {"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredItemList().size());"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"kumsssss"},"content":"        Item item \u003d model.getFilteredItemList().get(targetIndex.getZeroBased());"},{"lineNumber":127,"author":{"gitId":"chewwh09"},"content":"        final String[] splitName \u003d item.getItemName().fullName.split(\"\\\\s+\");"},{"lineNumber":128,"author":{"gitId":"JayChenYJ"},"content":"        model.updateFilteredItemList(new ItemNameContainsKeywordsPredicate(Collections.singletonList(splitName[0])));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"kumsssss"},"content":"        assertEquals(1, model.getFilteredItemList().size());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"kumsssss"},"content":"     * Updates {@code model}\u0027s filtered list to show an empty list based on the given {@code item}"},{"lineNumber":135,"author":{"gitId":"kumsssss"},"content":"     * which is not in the {@code model}\u0027s StoreMando."},{"lineNumber":136,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public static void showEmptyListAfterFind(Model model, Item item) {"},{"lineNumber":138,"author":{"gitId":"kumsssss"},"content":"        final String[] splitName \u003d item.getItemName().fullName.split(\"\\\\s+\");"},{"lineNumber":139,"author":{"gitId":"JayChenYJ"},"content":"        model.updateFilteredItemList(new ItemNameContainsKeywordsPredicate(Collections.singletonList(splitName[0])));"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"        assertEquals(0, model.getFilteredItemList().size());"},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":27,"kumsssss":17,"JayChenYJ":23,"Md-Fazil":9,"chewwh09":1,"-":67}},{"path":"src/test/java/seedu/storemando/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.showItemAtIndex;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getStoreMando(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        expectedModel.deleteItem(itemToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItemList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        Item itemToDelete \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ITEM_SUCCESS, itemToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(model.getStoreMando(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        expectedModel.deleteItem(itemToDelete);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"        showNoItem(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        // ensures that outOfBoundIndex is still in bounds of storemando list"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStoreMando().getItemList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ITEM);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ITEM);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"        // different item -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"    private void showNoItem(Model model) {"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"        model.updateFilteredItemList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        assertTrue(model.getFilteredItemList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":22,"JayChenYJ":18,"-":69}},{"path":"src/test/java/seedu/storemando/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.DESC_BANANA;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.DESC_CHEESE;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRED_EXPIRYDATE_BANANA;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":10,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.showItemAtIndex;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.Messages;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand.EditItemDescriptor;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.EditItemDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        Item editedItem \u003d new ItemBuilder().build();"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(editedItem).build();"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(new StoreMando(model.getStoreMando()), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        expectedModel.setItem(model.getFilteredItemList().get(0), editedItem);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_unexpiredSuccess() {"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        Index indexLastItem \u003d Index.fromOneBased(model.getFilteredItemList().size());"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        Item lastItem \u003d model.getFilteredItemList().get(indexLastItem.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        ItemBuilder itemInList \u003d new ItemBuilder(lastItem);"},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"        Item editedItem \u003d itemInList.withName(VALID_NAME_BANANA).withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":"            .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"github-amanda"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA)"},{"lineNumber":61,"author":{"gitId":"github-amanda"},"content":"            .withQuantity(VALID_QUANTITY_BANANA).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastItem, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(new StoreMando(model.getStoreMando()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"        expectedModel.setItem(lastItem, editedItem);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_expiredSuccess() {"},{"lineNumber":74,"author":{"gitId":"Md-Fazil"},"content":"        Index indexLastItem \u003d Index.fromOneBased(model.getFilteredItemList().size());"},{"lineNumber":75,"author":{"gitId":"Md-Fazil"},"content":"        Item lastItem \u003d model.getFilteredItemList().get(indexLastItem.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"Md-Fazil"},"content":"        ItemBuilder itemInList \u003d new ItemBuilder(lastItem);"},{"lineNumber":77,"author":{"gitId":"github-amanda"},"content":"        Item editedItem \u003d itemInList.withName(VALID_NAME_BANANA).withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":78,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRED_EXPIRYDATE_BANANA).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":79,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":80,"author":{"gitId":"github-amanda"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA)"},{"lineNumber":81,"author":{"gitId":"github-amanda"},"content":"            .withQuantity(VALID_QUANTITY_BANANA).withExpiryDate(VALID_EXPIRED_EXPIRYDATE_BANANA)"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"            .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":83,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastItem, descriptor);"},{"lineNumber":84,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":85,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ITEM_SUCCESS"},{"lineNumber":86,"author":{"gitId":"Md-Fazil"},"content":"            + EditCommand.MESSAGE_ITEM_EXPIRED_WARNING, editedItem);"},{"lineNumber":87,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":88,"author":{"gitId":"Md-Fazil"},"content":"        Model expectedModel \u003d new ModelManager(new StoreMando(model.getStoreMando()), new UserPrefs());"},{"lineNumber":89,"author":{"gitId":"Md-Fazil"},"content":"        expectedModel.setItem(lastItem, editedItem);"},{"lineNumber":90,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":91,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_failure() {"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, new EditCommand.EditItemDescriptor());"},{"lineNumber":97,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_NO_CHANGE);"},{"lineNumber":98,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_filteredList_unexpiredsuccess() {"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"        Item itemInFilteredList \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":105,"author":{"gitId":"github-amanda"},"content":"        Item editedItem \u003d new ItemBuilder(itemInFilteredList).withName(VALID_NAME_BANANA).build();"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"},{"lineNumber":107,"author":{"gitId":"github-amanda"},"content":"            new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA).build());"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ITEM_SUCCESS, editedItem);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"        Model expectedModel \u003d new ModelManager(new StoreMando(model.getStoreMando()), new UserPrefs());"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        expectedModel.setItem(model.getFilteredItemList().get(0), editedItem);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_filteredList_expiredsuccess() {"},{"lineNumber":119,"author":{"gitId":"Md-Fazil"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":120,"author":{"gitId":"Md-Fazil"},"content":"        Item itemInFilteredList \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":121,"author":{"gitId":"github-amanda"},"content":"        Item editedItem \u003d new ItemBuilder(itemInFilteredList).withName(VALID_NAME_BANANA)"},{"lineNumber":122,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRED_EXPIRYDATE_BANANA).build();"},{"lineNumber":123,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"},{"lineNumber":124,"author":{"gitId":"github-amanda"},"content":"            new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA).withExpiryDate(VALID_EXPIRED_EXPIRYDATE_BANANA)"},{"lineNumber":125,"author":{"gitId":"Md-Fazil"},"content":"                .build());"},{"lineNumber":126,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":127,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ITEM_SUCCESS"},{"lineNumber":128,"author":{"gitId":"Md-Fazil"},"content":"            + EditCommand.MESSAGE_ITEM_EXPIRED_WARNING, editedItem);"},{"lineNumber":129,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":130,"author":{"gitId":"Md-Fazil"},"content":"        Model expectedModel \u003d new ModelManager(new StoreMando(model.getStoreMando()), new UserPrefs());"},{"lineNumber":131,"author":{"gitId":"Md-Fazil"},"content":"        expectedModel.setItem(model.getFilteredItemList().get(0), editedItem);"},{"lineNumber":132,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":133,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public void execute_duplicateItemUnfilteredList_failure() {"},{"lineNumber":138,"author":{"gitId":"kumsssss"},"content":"        Item firstItem \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(firstItem).build();"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ITEM, descriptor);"},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"kumsssss"},"content":"    public void execute_duplicateItemFilteredList_failure() {"},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"JayChenYJ"},"content":"        // edit item in filtered list into a duplicate in storemando"},{"lineNumber":149,"author":{"gitId":"JayChenYJ"},"content":"        Item itemInList \u003d model.getStoreMando().getItemList().get(INDEX_SECOND_ITEM.getZeroBased());"},{"lineNumber":150,"author":{"gitId":"kumsssss"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"},{"lineNumber":151,"author":{"gitId":"kumsssss"},"content":"            new EditItemDescriptorBuilder(itemInList).build());"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ITEM);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_allSameFieldsSpecifiedUnfilteredList_failure() {"},{"lineNumber":158,"author":{"gitId":"Md-Fazil"},"content":"        Item firstItem \u003d model.getFilteredItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":159,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(firstItem).build();"},{"lineNumber":160,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM, descriptor);"},{"lineNumber":161,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_NO_CHANGE);"},{"lineNumber":162,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":164,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_someSameFieldsSpecifiedUnfilteredList_failure() {"},{"lineNumber":166,"author":{"gitId":"Md-Fazil"},"content":"        Index indexLastItem \u003d Index.fromOneBased(model.getFilteredItemList().size());"},{"lineNumber":167,"author":{"gitId":"Md-Fazil"},"content":"        Item lastItem \u003d model.getFilteredItemList().get(indexLastItem.getZeroBased());"},{"lineNumber":168,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":169,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder()"},{"lineNumber":170,"author":{"gitId":"Md-Fazil"},"content":"            .withName(lastItem.getItemName().toString()).build();"},{"lineNumber":171,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastItem, descriptor);"},{"lineNumber":172,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":173,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_NO_CHANGE);"},{"lineNumber":174,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":175,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandFailure(editCommand, model, expectedMessage);"},{"lineNumber":176,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":178,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":179,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_allSameFieldsSpecifiedFilteredList_failure() {"},{"lineNumber":180,"author":{"gitId":"Md-Fazil"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":181,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":182,"author":{"gitId":"Md-Fazil"},"content":"        // edit item in filtered list into a duplicate in storemando"},{"lineNumber":183,"author":{"gitId":"Md-Fazil"},"content":"        Item itemInList \u003d model.getStoreMando().getItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":184,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"},{"lineNumber":185,"author":{"gitId":"Md-Fazil"},"content":"            new EditItemDescriptorBuilder(itemInList).build());"},{"lineNumber":186,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":187,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_NO_CHANGE);"},{"lineNumber":188,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":190,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":191,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":192,"author":{"gitId":"Md-Fazil"},"content":"    public void execute_someSameFieldsSpecifiedFilteredList_failure() {"},{"lineNumber":193,"author":{"gitId":"Md-Fazil"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":194,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":195,"author":{"gitId":"Md-Fazil"},"content":"        // edit item in filtered list into a duplicate in storemando"},{"lineNumber":196,"author":{"gitId":"Md-Fazil"},"content":"        Item itemInList \u003d model.getStoreMando().getItemList().get(INDEX_FIRST_ITEM.getZeroBased());"},{"lineNumber":197,"author":{"gitId":"Md-Fazil"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ITEM,"},{"lineNumber":198,"author":{"gitId":"Md-Fazil"},"content":"            new EditItemDescriptorBuilder().withQuantity(itemInList.getQuantity().toString()).build());"},{"lineNumber":199,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":200,"author":{"gitId":"Md-Fazil"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_NO_CHANGE);"},{"lineNumber":201,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitId":"kumsssss"},"content":"    public void execute_invalidItemIndexUnfilteredList_failure() {"},{"lineNumber":205,"author":{"gitId":"kumsssss"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItemList().size() + 1);"},{"lineNumber":206,"author":{"gitId":"github-amanda"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA).build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":214,"author":{"gitId":"JayChenYJ"},"content":"     * but smaller than size of storemando"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"kumsssss"},"content":"    public void execute_invalidItemIndexFilteredList_failure() {"},{"lineNumber":218,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":219,"author":{"gitId":"kumsssss"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"},{"lineNumber":220,"author":{"gitId":"JayChenYJ"},"content":"        // ensures that outOfBoundIndex is still in bounds of storemando list"},{"lineNumber":221,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getStoreMando().getItemList().size());"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":224,"author":{"gitId":"github-amanda"},"content":"            new EditItemDescriptorBuilder().withName(VALID_NAME_BANANA).build());"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":231,"author":{"gitId":"github-amanda"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ITEM, DESC_CHEESE);"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":234,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor copyDescriptor \u003d new EditCommand.EditItemDescriptor(DESC_CHEESE);"},{"lineNumber":235,"author":{"gitId":"kumsssss"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ITEM, copyDescriptor);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitId":"github-amanda"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ITEM, DESC_CHEESE)));"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitId":"github-amanda"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ITEM, DESC_BANANA)));"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":24,"kumsssss":35,"JayChenYJ":26,"Md-Fazil":87,"-":82}},{"path":"src/test/java/seedu/storemando/logic/commands/EditItemDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.DESC_BANANA;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.DESC_CHEESE;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_BANANA;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand.EditItemDescriptor;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.EditItemDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"public class EditItemDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor descriptorWithSameValues \u003d new EditCommand.EditItemDescriptor(DESC_CHEESE);"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"        assertTrue(DESC_CHEESE.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"        assertTrue(DESC_CHEESE.equals(DESC_CHEESE));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(DESC_BANANA));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor editedCheese \u003d new EditItemDescriptorBuilder(DESC_CHEESE)"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"            .withName(VALID_NAME_BANANA).build();"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(editedCheese));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"        // different quantity -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"github-amanda"},"content":"        editedCheese \u003d new EditItemDescriptorBuilder(DESC_CHEESE).withQuantity(VALID_QUANTITY_BANANA).build();"},{"lineNumber":45,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(editedCheese));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        // different expirydate -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"        editedCheese \u003d new EditItemDescriptorBuilder(DESC_CHEESE).withExpiryDate(VALID_EXPIRYDATE_BANANA).build();"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(editedCheese));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"        // different location -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"github-amanda"},"content":"        editedCheese \u003d new EditItemDescriptorBuilder(DESC_CHEESE).withLocation(VALID_LOCATION_BANANA).build();"},{"lineNumber":53,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(editedCheese));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"github-amanda"},"content":"        editedCheese \u003d new EditItemDescriptorBuilder(DESC_CHEESE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"        assertFalse(DESC_CHEESE.equals(editedCheese));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":24,"kumsssss":1,"JayChenYJ":6,"-":28}},{"path":"src/test/java/seedu/storemando/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    private final Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":20}},{"path":"src/test/java/seedu/storemando/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_LESS_THAN_TWO_ITEMS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_MORE_THAN_ONE_ITEM_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.CREAM;"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.EGGS;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.FLOUR;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsPartialKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    private final Model expectedModel \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    public void equalsKeywords() {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"        // different item -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    public void equalsPartialKeywords() {"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsPartialKeywordsPredicate firstPredicate \u003d"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsPartialKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsPartialKeywordsPredicate secondPredicate \u003d"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsPartialKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        // different item -\u003e returns false"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"    public void execute_zeroKeywords_noItemFound() {"},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"        String expectedMessage \u003d String.format(MESSAGE_LESS_THAN_TWO_ITEMS_LISTED_OVERVIEW, 0);"},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"        expectedModel.updateFilteredItemList(predicate);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredItemList());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"    public void execute_multipleKeywords_multipleItemsFound() {"},{"lineNumber":98,"author":{"gitId":"JayChenYJ"},"content":"        String expectedMessage \u003d String.format(MESSAGE_MORE_THAN_ONE_ITEM_LISTED_OVERVIEW, 3);"},{"lineNumber":99,"author":{"gitId":"github-amanda"},"content":"        ItemNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cream Eggs Flour\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"        expectedModel.updateFilteredItemList(predicate);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":103,"author":{"gitId":"github-amanda"},"content":"        assertEquals(Arrays.asList(CREAM, EGGS, FLOUR), model.getFilteredItemList());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"     * Parses {@code userInput} into a {@code ItemNameContainsKeywordsPredicate}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"JayChenYJ"},"content":"    private ItemNameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":110,"author":{"gitId":"JayChenYJ"},"content":"        return new ItemNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":5,"kumsssss":6,"JayChenYJ":48,"-":53}},{"path":"src/test/java/seedu/storemando/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    private final Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"    private final Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":20}},{"path":"src/test/java/seedu/storemando/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.showItemAtIndex;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"        expectedModel \u003d new ModelManager(model.getStoreMando(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        showItemAtIndex(model, INDEX_FIRST_ITEM);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":1,"JayChenYJ":10,"-":28}},{"path":"src/test/java/seedu/storemando/logic/commands/ReminderCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.testutil.TypicalItems.BREAD;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.ItemExpiringPredicate;"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"public class ReminderCommandTest {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    private final Model expectedModel \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate firstPredicate \u003d"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"            new ItemExpiringPredicate((long) 3);"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate secondPredicate \u003d"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"            new ItemExpiringPredicate((long) 7);"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        ReminderCommand reminderFirstCommand \u003d new ReminderCommand(firstPredicate);"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        ReminderCommand reminderSecondCommand \u003d new ReminderCommand(secondPredicate);"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        assertTrue(reminderFirstCommand.equals(reminderFirstCommand));"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        ReminderCommand reminderFirstCommandCopy \u003d new ReminderCommand(firstPredicate);"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        assertTrue(reminderFirstCommand.equals(reminderFirstCommandCopy));"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"        // different types -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        assertFalse(reminderFirstCommand.equals(1));"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"        // null -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"        assertFalse(reminderFirstCommand.equals(null));"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        // different Item -\u003e returns false"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        assertFalse(reminderFirstCommand.equals(reminderSecondCommand));"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"    public void execute_multipleItemsFound() {"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate predicate \u003d new ItemExpiringPredicate((long) 30);"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"        expectedModel.updateFilteredItemList(predicate);"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"        assertEquals(Arrays.asList(APPLE, BREAD), expectedModel.getFilteredItemList());"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"    public void execute_noItemsFound() {"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate predicate \u003d new ItemExpiringPredicate(Long.MIN_VALUE);"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"        expectedModel.updateFilteredItemList(predicate);"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"        assertEquals(Arrays.asList(), expectedModel.getFilteredItemList());"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":63}},{"path":"src/test/java/seedu/storemando/logic/commands/SortExpiryDateCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.showEmptyListAfterFind;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.HEATER;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMandoSortedByExpiryDate;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMandoSortedByQuantity;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"class SortExpiryDateCommandTest {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    void execute_sortNonEmptyStoreMandoByExpiryDate_success() {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        expectedModel.setStoreMando(getTypicalStoreMandoSortedByExpiryDate());"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortExpiryDateCommand(), model,"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"    void execute_sortEmptyStoreMandoByExpiryDate_failure() {"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(new SortExpiryDateCommand(), model,"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    void execute_sortSortedStoreMando_success() {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMandoSortedByExpiryDate(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMandoSortedByExpiryDate(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortExpiryDateCommand(), model,"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"    void execute_sortStoreMandoSortedByQuantity_success() {"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMandoSortedByQuantity(), new UserPrefs());"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMandoSortedByExpiryDate(), new UserPrefs());"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortExpiryDateCommand(), model,"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"    void execute_sortEmptyFilteredList_throwsCommandException() {"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"github-amanda"},"content":"        showEmptyListAfterFind(model, HEATER);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(new SortExpiryDateCommand(), model,"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"    void equals() {"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"        final SortExpiryDateCommand standardCommand \u003d new SortExpiryDateCommand();"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"        // same object -\u003e returns true"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"        assertFalse(standardCommand.equals(new SortQuantityCommand()));"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":78,"github-amanda":2}},{"path":"src/test/java/seedu/storemando/logic/commands/SortQuantityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.commands;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.showEmptyListAfterFind;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.HEATER;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMandoSortedByExpiryDate;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMandoSortedByQuantity;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.ModelManager;"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"class SortQuantityCommandTest {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    void execute_sortNonEmptyStoreMandoByQuantity_success() {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        expectedModel.setStoreMando(getTypicalStoreMandoSortedByQuantity());"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortQuantityCommand(), model,"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"    void execute_sortEmptyStoreMandoByQuantity_throwsCommandException() {"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(new SortQuantityCommand(), model,"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    void execute_sortSortedStoreMando_success() {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMandoSortedByQuantity(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMandoSortedByQuantity(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortQuantityCommand(), model,"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"    void execute_sortStoreMandoSortedByExpiryDate_success() {"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMandoSortedByExpiryDate(), new UserPrefs());"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalStoreMandoSortedByQuantity(), new UserPrefs());"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        assertCommandSuccess(new SortQuantityCommand(), model,"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"    void execute_sortEmptyFilteredList_throwsCommandException() {"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        Model model \u003d new ModelManager(getTypicalStoreMando(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"github-amanda"},"content":"        showEmptyListAfterFind(model, HEATER);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        assertCommandFailure(new SortQuantityCommand(), model,"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"            SortCommand.MESSAGE_NO_ITEMS_TO_SORT);"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"    void equals() {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        final SortQuantityCommand standardCommand \u003d new SortQuantityCommand();"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        // different types -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        assertFalse(standardCommand.equals(new SortExpiryDateCommand()));"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":77,"github-amanda":2}},{"path":"src/test/java/seedu/storemando/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.EXPIRYDATE_DESC_BANANA;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.EXPIRYDATE_DESC_CHEESE;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_EXPIRYDATE_DESC;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"},{"lineNumber":12,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.LOCATION_DESC_CHEESE;"},{"lineNumber":13,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.NAME_DESC_BANANA;"},{"lineNumber":14,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.NAME_DESC_CHEESE;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":17,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"},{"lineNumber":18,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.QUANTITY_DESC_CHEESE;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_BANANA;"},{"lineNumber":22,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.BANANA;"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.CHEESE;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    private final AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"        Item expectedItem \u003d new ItemBuilder(BANANA).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":51,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":52,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BANANA + QUANTITY_DESC_BANANA"},{"lineNumber":53,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_BANANA + LOCATION_DESC_BANANA + TAG_DESC_FRIEND, new AddCommand(expectedItem));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":56,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_CHEESE + NAME_DESC_BANANA + QUANTITY_DESC_BANANA"},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_BANANA + LOCATION_DESC_BANANA + TAG_DESC_FRIEND, new AddCommand(expectedItem));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"github-amanda"},"content":"        // multiple quantities - last quantity accepted"},{"lineNumber":60,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + QUANTITY_DESC_CHEESE + QUANTITY_DESC_BANANA"},{"lineNumber":61,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_BANANA + LOCATION_DESC_BANANA + TAG_DESC_FRIEND, new AddCommand(expectedItem));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"        // multiple emails - last expirydate accepted"},{"lineNumber":64,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_CHEESE"},{"lineNumber":65,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_BANANA + LOCATION_DESC_BANANA + TAG_DESC_FRIEND, new AddCommand(expectedItem));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"        // multiple addresses - last location accepted"},{"lineNumber":68,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":69,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_CHEESE + LOCATION_DESC_BANANA + TAG_DESC_FRIEND, new AddCommand(expectedItem));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":72,"author":{"gitId":"github-amanda"},"content":"        Item expectedItemMultipleTags \u003d new ItemBuilder(BANANA).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":74,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":75,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_BANANA + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedItemMultipleTags));"},{"lineNumber":76,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"        Item expectedItem \u003d new ItemBuilder(CHEESE).withTags().build();"},{"lineNumber":83,"author":{"gitId":"github-amanda"},"content":"        assertParseSuccess(parser, NAME_DESC_CHEESE + QUANTITY_DESC_CHEESE + EXPIRYDATE_DESC_CHEESE"},{"lineNumber":84,"author":{"gitId":"github-amanda"},"content":"                + LOCATION_DESC_CHEESE,"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"            new AddCommand(expectedItem));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":93,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":94,"author":{"gitId":"github-amanda"},"content":"                + LOCATION_DESC_BANANA, expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"github-amanda"},"content":"        // missing quantity prefix"},{"lineNumber":97,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + VALID_QUANTITY_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":98,"author":{"gitId":"github-amanda"},"content":"                + LOCATION_DESC_BANANA, expectedMessage);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"        // missing location prefix"},{"lineNumber":101,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":102,"author":{"gitId":"github-amanda"},"content":"                + VALID_LOCATION_BANANA, expectedMessage);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":105,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, VALID_NAME_BANANA + VALID_QUANTITY_BANANA + VALID_EXPIRYDATE_BANANA"},{"lineNumber":106,"author":{"gitId":"github-amanda"},"content":"            + VALID_LOCATION_BANANA, expectedMessage);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":112,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":113,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_BANANA + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ItemName.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"github-amanda"},"content":"        // invalid quantity"},{"lineNumber":116,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + INVALID_QUANTITY_DESC + EXPIRYDATE_DESC_BANANA"},{"lineNumber":117,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_BANANA + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Quantity.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"        // invalid expirydate"},{"lineNumber":120,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + INVALID_EXPIRYDATE_DESC"},{"lineNumber":121,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_BANANA + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ExpiryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"        // invalid location"},{"lineNumber":124,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":125,"author":{"gitId":"github-amanda"},"content":"            + INVALID_LOCATION_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Location.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":128,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, NAME_DESC_BANANA + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":129,"author":{"gitId":"github-amanda"},"content":"            + LOCATION_DESC_BANANA + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":132,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_BANANA"},{"lineNumber":133,"author":{"gitId":"github-amanda"},"content":"            + INVALID_LOCATION_DESC, ItemName.MESSAGE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":136,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BANANA + QUANTITY_DESC_BANANA"},{"lineNumber":137,"author":{"gitId":"github-amanda"},"content":"                + EXPIRYDATE_DESC_BANANA + LOCATION_DESC_BANANA + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":58,"kumsssss":1,"JayChenYJ":30,"-":51}},{"path":"src/test/java/seedu/storemando/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":149}},{"path":"src/test/java/seedu/storemando/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":35}},{"path":"src/test/java/seedu/storemando/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    private final DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":1,"JayChenYJ":7,"-":24}},{"path":"src/test/java/seedu/storemando/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.EXPIRYDATE_DESC_BANANA;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.EXPIRYDATE_DESC_CHEESE;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_EXPIRYDATE_DESC;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.LOCATION_DESC_BANANA;"},{"lineNumber":12,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.LOCATION_DESC_CHEESE;"},{"lineNumber":13,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.NAME_DESC_CHEESE;"},{"lineNumber":14,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.QUANTITY_DESC_BANANA;"},{"lineNumber":15,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.QUANTITY_DESC_CHEESE;"},{"lineNumber":16,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_BANANA;"},{"lineNumber":19,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_CHEESE;"},{"lineNumber":20,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":21,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_CHEESE;"},{"lineNumber":22,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_CHEESE;"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_CHEESE;"},{"lineNumber":25,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand.EditItemDescriptor;"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.EditItemDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"    private final EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, VALID_NAME_CHEESE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_CHEESE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_CHEESE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"chewwh09"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, ItemName.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC, Quantity.MESSAGE_CONSTRAINTS); // invalid quantity"},{"lineNumber":86,"author":{"gitId":"Md-Fazil"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EXPIRYDATE_DESC, ExpiryDate.MESSAGE_CONSTRAINTS); // invalid expirydate"},{"lineNumber":87,"author":{"gitId":"Md-Fazil"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS); // invalid location"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"        // invalid quantity followed by valid expirydate"},{"lineNumber":91,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC + EXPIRYDATE_DESC_CHEESE,"},{"lineNumber":92,"author":{"gitId":"github-amanda"},"content":"            Quantity.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"github-amanda"},"content":"        // valid quantity followed by invalid quantity. The test case for invalid quantity followed by valid quantity"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"1\" + QUANTITY_DESC_BANANA + INVALID_QUANTITY_DESC,"},{"lineNumber":97,"author":{"gitId":"github-amanda"},"content":"            Quantity.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Item} being edited,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":101,"author":{"gitId":"Md-Fazil"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":102,"author":{"gitId":"github-amanda"},"content":"            Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"Md-Fazil"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":104,"author":{"gitId":"github-amanda"},"content":"            Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"Md-Fazil"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":106,"author":{"gitId":"github-amanda"},"content":"            Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":109,"author":{"gitId":"github-amanda"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EXPIRYDATE_DESC + VALID_LOCATION_CHEESE"},{"lineNumber":110,"author":{"gitId":"github-amanda"},"content":"            + VALID_QUANTITY_CHEESE, ItemName.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_SECOND_ITEM;"},{"lineNumber":116,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":117,"author":{"gitId":"github-amanda"},"content":"        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_BANANA + TAG_DESC_HUSBAND"},{"lineNumber":118,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_CHEESE + LOCATION_DESC_CHEESE + NAME_DESC_CHEESE + TAG_DESC_FRIEND;"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHEESE)"},{"lineNumber":121,"author":{"gitId":"github-amanda"},"content":"            .withQuantity(VALID_QUANTITY_BANANA).withExpiryDate(VALID_EXPIRYDATE_CHEESE)"},{"lineNumber":122,"author":{"gitId":"github-amanda"},"content":"            .withLocation(VALID_LOCATION_CHEESE).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":130,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_FIRST_ITEM;"},{"lineNumber":131,"author":{"gitId":"github-amanda"},"content":"        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_BANANA + EXPIRYDATE_DESC_CHEESE;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":134,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRYDATE_CHEESE).build();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_THIRD_ITEM;"},{"lineNumber":144,"author":{"gitId":"github-amanda"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CHEESE;"},{"lineNumber":145,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withName(VALID_NAME_CHEESE).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"github-amanda"},"content":"        // quantity"},{"lineNumber":150,"author":{"gitId":"github-amanda"},"content":"        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_CHEESE;"},{"lineNumber":151,"author":{"gitId":"github-amanda"},"content":"        descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_CHEESE).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"JayChenYJ"},"content":"        // expirydate"},{"lineNumber":156,"author":{"gitId":"github-amanda"},"content":"        userInput \u003d targetIndex.getOneBased() + EXPIRYDATE_DESC_CHEESE;"},{"lineNumber":157,"author":{"gitId":"github-amanda"},"content":"        descriptor \u003d new EditItemDescriptorBuilder().withExpiryDate(VALID_EXPIRYDATE_CHEESE).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"JayChenYJ"},"content":"        // location"},{"lineNumber":162,"author":{"gitId":"github-amanda"},"content":"        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_CHEESE;"},{"lineNumber":163,"author":{"gitId":"github-amanda"},"content":"        descriptor \u003d new EditItemDescriptorBuilder().withLocation(VALID_LOCATION_CHEESE).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":168,"author":{"gitId":"Md-Fazil"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":169,"author":{"gitId":"Md-Fazil"},"content":"        descriptor \u003d new EditItemDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":176,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_FIRST_ITEM;"},{"lineNumber":177,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":178,"author":{"gitId":"github-amanda"},"content":"        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_CHEESE + LOCATION_DESC_CHEESE"},{"lineNumber":179,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_CHEESE + TAG_DESC_FRIEND + QUANTITY_DESC_CHEESE + LOCATION_DESC_CHEESE"},{"lineNumber":180,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_CHEESE + TAG_DESC_FRIEND + QUANTITY_DESC_BANANA + LOCATION_DESC_BANANA"},{"lineNumber":181,"author":{"gitId":"github-amanda"},"content":"            + EXPIRYDATE_DESC_BANANA + TAG_DESC_HUSBAND;"},{"lineNumber":182,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":183,"author":{"gitId":"github-amanda"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":184,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRYDATE_BANANA).withLocation(VALID_LOCATION_BANANA).withTags(VALID_TAG_FRIEND,"},{"lineNumber":185,"author":{"gitId":"Md-Fazil"},"content":"                VALID_TAG_HUSBAND).build();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":194,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_FIRST_ITEM;"},{"lineNumber":195,"author":{"gitId":"github-amanda"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_QUANTITY_DESC + QUANTITY_DESC_BANANA;"},{"lineNumber":196,"author":{"gitId":"github-amanda"},"content":"        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_BANANA).build();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":201,"author":{"gitId":"github-amanda"},"content":"        userInput \u003d targetIndex.getOneBased() + EXPIRYDATE_DESC_BANANA + INVALID_QUANTITY_DESC + LOCATION_DESC_BANANA"},{"lineNumber":202,"author":{"gitId":"github-amanda"},"content":"            + QUANTITY_DESC_BANANA;"},{"lineNumber":203,"author":{"gitId":"github-amanda"},"content":"        descriptor \u003d new EditItemDescriptorBuilder().withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":204,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRYDATE_BANANA).withLocation(VALID_LOCATION_BANANA).build();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":211,"author":{"gitId":"kumsssss"},"content":"        Index targetIndex \u003d INDEX_THIRD_ITEM;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"kumsssss"},"content":"        EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder().withTags().build();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":57,"kumsssss":8,"JayChenYJ":27,"Md-Fazil":15,"chewwh09":1,"-":111}},{"path":"src/test/java/seedu/storemando/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    private final FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    public void parse_validArgs_nonGenericFindReturnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"            new FindCommand(new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Chocolate\", \"Tofu\")));"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        assertParseSuccess(parser, \"Chocolate Tofu\", expectedFindCommand);"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        assertParseSuccess(parser, \" \\n Chocolate \\n \\t Tofu  \\t\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":16,"-":18}},{"path":"src/test/java/seedu/storemando/logic/parser/ListCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ListCommand;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"public class ListCommandParserTest {"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    private final ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"        ListCommand expectedListCommand \u003d new ListCommand();"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"        assertParseSuccess(parser, \"     \", expectedListCommand);"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":18}},{"path":"src/test/java/seedu/storemando/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"Md-Fazil"},"content":"    private static final String INVALID_QUANTITY \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":"    private static final String INVALID_EXPIRYDATE \u003d \"12-12-11\";"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    private static final String INVALID_LOCATION \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"    private static final String VALID_QUANTITY \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"Md-Fazil"},"content":"    private static final String VALID_EXPIRYDATE \u003d \"2020-10-10\";"},{"lineNumber":33,"author":{"gitId":"Md-Fazil"},"content":"    private static final String VALID_LOCATION \u003d \"123 Main Street #0505\";"},{"lineNumber":34,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"        ItemName expectedName \u003d new ItemName(VALID_NAME);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":"        ItemName expectedName \u003d new ItemName(VALID_NAME);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"github-amanda"},"content":"    public void parseQuantity_null_throwsNullPointerException() {"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuantity(null));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"github-amanda"},"content":"    public void parseQuantity_invalidValue_throwsParseException() {"},{"lineNumber":90,"author":{"gitId":"github-amanda"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuantity(INVALID_QUANTITY));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"github-amanda"},"content":"    public void parseQuantity_validValueWithoutWhitespace_returnsQuantity() throws Exception {"},{"lineNumber":95,"author":{"gitId":"github-amanda"},"content":"        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"},{"lineNumber":96,"author":{"gitId":"github-amanda"},"content":"        assertEquals(expectedQuantity, ParserUtil.parseQuantity(VALID_QUANTITY));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"github-amanda"},"content":"    public void parseQuantity_validValueWithWhitespace_returnsTrimmedQuantity() throws Exception {"},{"lineNumber":101,"author":{"gitId":"github-amanda"},"content":"        String quantityWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"},{"lineNumber":102,"author":{"gitId":"github-amanda"},"content":"        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"},{"lineNumber":103,"author":{"gitId":"github-amanda"},"content":"        assertEquals(expectedQuantity, ParserUtil.parseQuantity(quantityWithWhitespace));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"    public void parseLocation_null_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocation(null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"JayChenYJ"},"content":"    public void parseLocation_invalidValue_throwsParseException() {"},{"lineNumber":113,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLocation(INVALID_LOCATION));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"JayChenYJ"},"content":"    public void parseLocation_validValueWithoutWhitespace_returnsLocation() throws Exception {"},{"lineNumber":118,"author":{"gitId":"JayChenYJ"},"content":"        Location expectedLocation \u003d new Location(VALID_LOCATION);"},{"lineNumber":119,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(expectedLocation, ParserUtil.parseLocation(VALID_LOCATION));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"    public void parseLocation_validValueWithWhitespace_returnsTrimmedLocation() throws Exception {"},{"lineNumber":124,"author":{"gitId":"JayChenYJ"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_LOCATION + WHITESPACE;"},{"lineNumber":125,"author":{"gitId":"JayChenYJ"},"content":"        Location expectedLocation \u003d new Location(VALID_LOCATION);"},{"lineNumber":126,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(expectedLocation, ParserUtil.parseLocation(addressWithWhitespace));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"Md-Fazil"},"content":"    public void parseExpiryDate_null_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExpiryDate(null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"Md-Fazil"},"content":"    public void parseExpiryDate_invalidValue_throwsParseException() {"},{"lineNumber":136,"author":{"gitId":"Md-Fazil"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiryDate(INVALID_EXPIRYDATE));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"Md-Fazil"},"content":"    public void parseExpiryDate_validValueWithoutWhitespace_returnsExpiryDate() throws Exception {"},{"lineNumber":141,"author":{"gitId":"Md-Fazil"},"content":"        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRYDATE);"},{"lineNumber":142,"author":{"gitId":"Md-Fazil"},"content":"        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(VALID_EXPIRYDATE));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"Md-Fazil"},"content":"    public void parseExpiryDate_validValueWithWhitespace_returnsTrimmedExpiryDate() throws Exception {"},{"lineNumber":147,"author":{"gitId":"Md-Fazil"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EXPIRYDATE + WHITESPACE;"},{"lineNumber":148,"author":{"gitId":"Md-Fazil"},"content":"        ExpiryDate expectedExpiryDate \u003d new ExpiryDate(VALID_EXPIRYDATE);"},{"lineNumber":149,"author":{"gitId":"Md-Fazil"},"content":"        assertEquals(expectedExpiryDate, ParserUtil.parseExpiryDate(emailWithWhitespace));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":2,"github-amanda":10,"JayChenYJ":25,"Md-Fazil":16,"chewwh09":2,"-":142}},{"path":"src/test/java/seedu/storemando/logic/parser/ReminderCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ReminderCommand;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.model.item.ItemExpiringPredicate;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"public class ReminderCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    private final ReminderCommandParser parser \u003d new ReminderCommandParser();"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        assertParseFailure(parser, \"  \","},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    public void parse_validSingleArg_returnsReminderCommand() {"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        long numOfDays \u003d 3;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        ReminderCommand expectedReminderCommand \u003d new ReminderCommand(new ItemExpiringPredicate(numOfDays));"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        assertParseSuccess(parser, \"3\", expectedReminderCommand);"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    public void parse_validSMultipleArg_returnsReminderCommand() {"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        long numOfDays \u003d 14;"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        ReminderCommand expectedReminderCommand \u003d new ReminderCommand(new ItemExpiringPredicate(numOfDays));"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        assertParseSuccess(parser, \"2 weeks\", expectedReminderCommand);"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"    public void parse_inValidArgs_throwsParseException() {"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        assertParseFailure(parser, \"chocolate\","},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"        assertParseFailure(parser, \"2 chocolate\","},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        assertParseFailure(parser, \"2 chocolate factory\","},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":47}},{"path":"src/test/java/seedu/storemando/logic/parser/SortCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import static seedu.storemando.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortCommand;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortExpiryDateCommand;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortQuantityCommand;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"class SortCommandParserTest {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    private final SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"     \", expectedMessage);"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public void parse_invalidArgument_throwsParseException() {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"location\", expectedMessage);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"name\", expectedMessage);"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"item\", expectedMessage);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"store\", expectedMessage);"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"expiry\", expectedMessage);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"q\", expectedMessage);"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"quantities\", expectedMessage);"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"expirDate\", expectedMessage);"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"quant1ty\", expectedMessage);"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        assertParseFailure(parser, \"room\", expectedMessage);"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    public void parse_validArgment_success() {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        SortExpiryDateCommand expectedExpiryDateCommand \u003d new SortExpiryDateCommand();"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        SortQuantityCommand expectedQuantityCommand \u003d new SortQuantityCommand();"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        //check for valid quantity user inputs"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"quantity\", expectedQuantityCommand);"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"QUANTITY\", expectedQuantityCommand);"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"QuanTITy\", expectedQuantityCommand);"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"qUaNtItY\", expectedQuantityCommand);"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        //check for valid expiryDate user inputs"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"expiryDate\", expectedExpiryDateCommand);"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"expirydate\", expectedExpiryDateCommand);"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"EXPIRYDATE\", expectedExpiryDateCommand);"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"EXPIRYdate\", expectedExpiryDateCommand);"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        assertParseSuccess(parser, \"ExPiRyDaTe\", expectedExpiryDateCommand);"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":57}},{"path":"src/test/java/seedu/storemando/logic/parser/StoreMandoParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.logic.commands.ReminderCommand;"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortCommand;"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"import seedu.storemando.logic.commands.SortQuantityCommand;"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.EditItemDescriptorBuilder;"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemUtil;"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"public class StoreMandoParserTest {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMandoParser parser \u003d new StoreMandoParser();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        Item item \u003d new ItemBuilder().build();"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(ItemUtil.getAddCommand(item));"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        assertEquals(new AddCommand(item), command);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_ITEM), command);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        Item item \u003d new ItemBuilder().build();"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        EditCommand.EditItemDescriptor descriptor \u003d new EditItemDescriptorBuilder(item).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"            + INDEX_FIRST_ITEM.getOneBased() + \" \" + ItemUtil.getEditItemDescriptorDetails(descriptor));"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_ITEM, descriptor), command);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"            FindCommand.COMMAND_WORD + \" \" + String.join(\" \", keywords));"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(new FindCommand(new ItemNameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" expiryDate\") instanceof SortCommand);"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" quantity\") instanceof SortQuantityCommand);"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"chewwh09"},"content":"    public void parseCommand_reminder() throws Exception {"},{"lineNumber":106,"author":{"gitId":"chewwh09"},"content":"        assertTrue(parser.parseCommand(ReminderCommand.COMMAND_WORD + \" 3\") instanceof ReminderCommand);"},{"lineNumber":107,"author":{"gitId":"chewwh09"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":108,"author":{"gitId":"chewwh09"},"content":"            ReminderCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"reminder\"));"},{"lineNumber":109,"author":{"gitId":"chewwh09"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":110,"author":{"gitId":"chewwh09"},"content":"            ReminderCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"reminder xyz\"));"},{"lineNumber":111,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":16,"JayChenYJ":25,"chewwh09":10,"-":66}},{"path":"src/test/java/seedu/storemando/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.model.Model.PREDICATE_SHOW_ALL_ITEMS;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.BREAD;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemNameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.StoreMandoBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(new StoreMando(), new StoreMando(modelManager.getStoreMando()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"        userPrefs.setStoreMandoFilePath(Paths.get(\"storemando/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        userPrefs.setStoreMandoFilePath(Paths.get(\"new/storemando/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMandoFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setStoreMandoFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMandoFilePath_validPath_setsStoreMandoFilePath() {"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"        Path path \u003d Paths.get(\"storemando/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        modelManager.setStoreMandoFilePath(path);"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(path, modelManager.getStoreMandoFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"    public void hasItem_nullItem_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasItem(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_itemNotInStoreMando_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"        assertFalse(modelManager.hasItem(APPLE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_itemInStoreMando_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"github-amanda"},"content":"        modelManager.addItem(APPLE);"},{"lineNumber":88,"author":{"gitId":"github-amanda"},"content":"        assertTrue(modelManager.hasItem(APPLE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"    public void getFilteredItemList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredItemList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"github-amanda"},"content":"        StoreMando storeMando \u003d new StoreMandoBuilder().withItem(APPLE).withItem(BREAD).build();"},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando differentStoreMando \u003d new StoreMando();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"        modelManager \u003d new ModelManager(storeMando, userPrefs);"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(storeMando, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"JayChenYJ"},"content":"        // different storeMando -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentStoreMando, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"github-amanda"},"content":"        String[] keywords \u003d APPLE.getItemName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"JayChenYJ"},"content":"        modelManager.updateFilteredItemList(new ItemNameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":123,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(modelManager.equals(new ModelManager(storeMando, userPrefs)));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":126,"author":{"gitId":"kumsssss"},"content":"        modelManager.updateFilteredItemList(PREDICATE_SHOW_ALL_ITEMS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitId":"JayChenYJ"},"content":"        differentUserPrefs.setStoreMandoFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":131,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(modelManager.equals(new ModelManager(storeMando, differentUserPrefs)));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":8,"kumsssss":5,"JayChenYJ":26,"-":94}},{"path":"src/test/java/seedu/storemando/model/StoreMandoTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.exceptions.DuplicateItemException;"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"public class StoreMandoTest {"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMando storeMando \u003d new StoreMando();"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(Collections.emptyList(), storeMando.getItemList());"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e storeMando.resetData(null));"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"    public void resetData_withValidReadOnlyStoreMando_replacesData() {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando newData \u003d getTypicalStoreMando();"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"        storeMando.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(newData, storeMando);"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"    public void resetData_withDuplicateItems_throwsDuplicateItemException() {"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        // Two items with the same identity fields"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"            .build();"},{"lineNumber":51,"author":{"gitId":"github-amanda"},"content":"        List\u003cItem\u003e newItems \u003d Arrays.asList(APPLE, editedApple);"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        StoreMandoStub newData \u003d new StoreMandoStub(newItems);"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e storeMando.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_nullItem_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e storeMando.hasItem(null));"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_itemNotInStoreMando_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"github-amanda"},"content":"        assertFalse(storeMando.hasItem(APPLE));"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_itemInStoreMando_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"github-amanda"},"content":"        storeMando.addItem(APPLE);"},{"lineNumber":70,"author":{"gitId":"github-amanda"},"content":"        assertTrue(storeMando.hasItem(APPLE));"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":"    public void hasItem_itemWithSameIdentityFieldsInStoreMando_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"github-amanda"},"content":"        storeMando.addItem(APPLE);"},{"lineNumber":76,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"            .build();"},{"lineNumber":78,"author":{"gitId":"github-amanda"},"content":"        assertTrue(storeMando.hasItem(editedApple));"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"    public void getItemList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e storeMando.getItemList().remove(0));"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":"     * A stub ReadOnlyStoreMando whose items list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":"    private static class StoreMandoStub implements ReadOnlyStoreMando {"},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"        private final ObservableList\u003cItem\u003e items \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"        StoreMandoStub(Collection\u003cItem\u003e items) {"},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"            this.items.setAll(items);"},{"lineNumber":94,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":96,"author":{"gitId":"JayChenYJ"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"        public ObservableList\u003cItem\u003e getItemList() {"},{"lineNumber":98,"author":{"gitId":"JayChenYJ"},"content":"            return items;"},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"github-amanda":10,"JayChenYJ":92}},{"path":"src/test/java/seedu/storemando/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    public void setStoreMandoFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setStoreMandoFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":4,"-":17}},{"path":"src/test/java/seedu/storemando/model/item/ExpiryDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":3,"author":{"gitId":"Md-Fazil"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Md-Fazil"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":7,"author":{"gitId":"Md-Fazil"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":9,"author":{"gitId":"Md-Fazil"},"content":"public class ExpiryDateTest {"},{"lineNumber":10,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":11,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"Md-Fazil"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"},{"lineNumber":14,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":16,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Md-Fazil"},"content":"    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"Md-Fazil"},"content":"        String invalidExpiryDate \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"Md-Fazil"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidExpiryDate));"},{"lineNumber":20,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":22,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Md-Fazil"},"content":"    public void isValidExpiryDate() {"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        // null expirydate"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidExpiryDate(null));"},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        // blank expirydate"},{"lineNumber":28,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"        // missing parts"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-10\")); // missing DD"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"20201010\")); // missing \u0027-\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"10-10\")); // missing YYYY"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-1-10\")); // missing digit for MM"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"20-11-01\")); // missing digit for YYYY"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-11-1\")); // missing digit for DD"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":39,"author":{"gitId":"Md-Fazil"},"content":"        // invalid parts"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2010-10-40\")); // invalid DD"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2010-20-01\")); // invalid MM"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-1 0-11\")); // spaces in DD"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"20 20-10-11\")); // spaces in YYYY"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\" 2020-10-10\")); // leading space"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2021-10-10 \")); // trailing space"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"20a1-10-10\")); // alphabets in YYYY"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"2020-02-30\")); // Invalid expiryDate for february"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"20-20-10-10\")); // \u0027-\u0027 symbol in YYYY"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"10-02-2019\")); // expiryDate not in YYYY-MM-DD format"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        assertFalse(ExpiryDate.isValidExpiryDate(\"@2010-07-10\")); // expiryDate starts with symbol"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        // valid expiryDate"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        assertTrue(ExpiryDate.isValidExpiryDate(\"2020-10-10\"));"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        assertTrue(ExpiryDate.isValidExpiryDate(\"2020-01-01\"));"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        assertTrue(ExpiryDate.isValidExpiryDate(\"0001-10-10\"));"},{"lineNumber":57,"author":{"gitId":"Md-Fazil"},"content":"        assertTrue(ExpiryDate.isValidExpiryDate(\"0000-10-10\"));"},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":59,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":61,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Md-Fazil"},"content":"    public void isExpiryDatePastCurrentDate() {"},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"        // no expiryDate"},{"lineNumber":64,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"No Expiry Date\").isPastCurrentDate());"},{"lineNumber":65,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":66,"author":{"gitId":"Md-Fazil"},"content":"        // expiryDates not past current date"},{"lineNumber":67,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"2021-12-02\").isPastCurrentDate());"},{"lineNumber":68,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"2023-10-10\").isPastCurrentDate());"},{"lineNumber":69,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"2021-11-21\").isPastCurrentDate());"},{"lineNumber":70,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"2021-10-09\").isPastCurrentDate());"},{"lineNumber":71,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(new ExpiryDate(\"2022-11-01\").isPastCurrentDate());"},{"lineNumber":72,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":73,"author":{"gitId":"Md-Fazil"},"content":"        // expiryDates past current date"},{"lineNumber":74,"author":{"gitId":"Md-Fazil"},"content":"        assertTrue(new ExpiryDate(\"2012-01-01\").isPastCurrentDate());"},{"lineNumber":75,"author":{"gitId":"Md-Fazil"},"content":"        assertTrue(new ExpiryDate(\"2017-11-20\").isPastCurrentDate());"},{"lineNumber":76,"author":{"gitId":"Md-Fazil"},"content":"        assertTrue(new ExpiryDate(\"2021-03-11\").isPastCurrentDate());"},{"lineNumber":77,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Md-Fazil"},"content":"}"}],"authorContributionMap":{"kumsssss":23,"JayChenYJ":4,"Md-Fazil":51}},{"path":"src/test/java/seedu/storemando/model/item/ItemExpiringPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"public class ItemExpiringPredicateTest {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"        long firstPredicateNumOfDays \u003d 3;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"        long secondPredicateNumOfDays \u003d 7;"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate firstPredicate \u003d"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"            new ItemExpiringPredicate((firstPredicateNumOfDays));"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate secondPredicate \u003d"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"            new ItemExpiringPredicate((secondPredicateNumOfDays));"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        // same values -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate firstPredicateCopy \u003d"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"            new ItemExpiringPredicate(firstPredicateNumOfDays);"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        // different item -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"    public void test_daysToExpiryDate() {"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"        // Item expiring in 3 days and search for items within 3 days"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate predicate \u003d new ItemExpiringPredicate((long) 3);"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        LocalDate threeDayAfterToday \u003d LocalDate.now().plusDays(3);"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withExpiryDate(threeDayAfterToday.toString()).build()));"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        // Item expiring in 1 week and search for items within 3 days"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        LocalDate oneWeekAfterToday \u003d LocalDate.now().plusDays(7);"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"        assertFalse(predicate.test(new ItemBuilder().withExpiryDate(oneWeekAfterToday.toString()).build()));"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"    public void test_itemWithoutExpiringDate() {"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"        ItemExpiringPredicate predicate \u003d new ItemExpiringPredicate((long) 3);"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        assertFalse(predicate.test(new ItemBuilder().withExpiryDate(\"No Expiry Date\").build()));"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":58}},{"path":"src/test/java/seedu/storemando/model/item/ItemNameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"public class ItemNameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        // different item -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"            new ItemNameContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\"));"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Cherry\"));"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Cherry\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"aPPle\", \"bANANA\"));"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"        // One keyword"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"        // Multiple keywords"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Banana\"));"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        // Only one matching keyword"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Cherry\"));"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Cherry\").build()));"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"        // Mixed-case keywords"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"aPPle\", \"bANANA\"));"},{"lineNumber":77,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(predicate.test(new ItemBuilder().withName(\"Apple Banana\").build()));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":83,"author":{"gitId":"JayChenYJ"},"content":"        ItemNameContainsKeywordsPredicate predicate \u003d new ItemNameContainsKeywordsPredicate(Collections.emptyList()"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"        );"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"        assertFalse(predicate.test(new ItemBuilder().withName(\"Alice\").build()));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"        assertFalse(predicate.test(new ItemBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"        // Keywords match quantity, expiryDate and location, but does not match name"},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"        predicate \u003d new ItemNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"2020-10-10\", \"Main\", \"Street\")"},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"        );"},{"lineNumber":94,"author":{"gitId":"github-amanda"},"content":"        assertFalse(predicate.test(new ItemBuilder().withName(\"Alice\").withQuantity(\"12345\")"},{"lineNumber":95,"author":{"gitId":"Md-Fazil"},"content":"            .withExpiryDate(\"2020-10-10\").withLocation(\"Main Street\").build()));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":4,"github-amanda":1,"JayChenYJ":39,"Md-Fazil":1,"-":52}},{"path":"src/test/java/seedu/storemando/model/item/ItemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_BANANA;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":12,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.BANANA;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"public class ItemTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        Item item \u003d new ItemBuilder().build();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e item.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    public void isSameItem() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"        assertTrue(APPLE.isSameItem(APPLE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.isSameItem(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        // same name and location, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"            .withExpiryDate(VALID_EXPIRYDATE_BANANA).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"        assertTrue(APPLE.isSameItem(editedApple));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        // same name, all other attributes different -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).withExpiryDate(VALID_EXPIRYDATE_BANANA)"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"            .withLocation(VALID_LOCATION_BANANA).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.isSameItem(editedApple));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withName(VALID_NAME_BANANA).build();"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.isSameItem(editedApple));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        // different location, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withLocation(VALID_LOCATION_BANANA).build();"},{"lineNumber":50,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.isSameItem(editedApple));"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"github-amanda"},"content":"        Item editedBanana \u003d new ItemBuilder(BANANA).withName(VALID_NAME_BANANA.toLowerCase()).build();"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"        assertFalse(BANANA.isSameItem(editedBanana));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BANANA + \" \";"},{"lineNumber":58,"author":{"gitId":"github-amanda"},"content":"        editedBanana \u003d new ItemBuilder(BANANA).withName(nameWithTrailingSpaces).build();"},{"lineNumber":59,"author":{"gitId":"github-amanda"},"content":"        assertFalse(BANANA.isSameItem(editedBanana));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"Md-Fazil"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"    public void isExpiredItem() {"},{"lineNumber":64,"author":{"gitId":"Md-Fazil"},"content":"        //Item with expired expiry date"},{"lineNumber":65,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withExpiryDate(\"2020-10-10\").build();"},{"lineNumber":66,"author":{"gitId":"github-amanda"},"content":"        assertTrue(editedApple.isExpired());"},{"lineNumber":67,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":68,"author":{"gitId":"Md-Fazil"},"content":"        //Item with non expired expiry date"},{"lineNumber":69,"author":{"gitId":"github-amanda"},"content":"        Item editedBanana \u003d new ItemBuilder(BANANA).withExpiryDate(\"2021-10-10\").build();"},{"lineNumber":70,"author":{"gitId":"github-amanda"},"content":"        assertFalse(editedBanana.isExpired());"},{"lineNumber":71,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":72,"author":{"gitId":"Md-Fazil"},"content":"        //Item with no expiry date"},{"lineNumber":73,"author":{"gitId":"Md-Fazil"},"content":"        Item item \u003d new ItemBuilder().withExpiryDate(\"No Expiry Date\").build();"},{"lineNumber":74,"author":{"gitId":"Md-Fazil"},"content":"        assertFalse(item.isExpired());"},{"lineNumber":75,"author":{"gitId":"Md-Fazil"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitId":"github-amanda"},"content":"        Item appleCopy \u003d new ItemBuilder(APPLE).build();"},{"lineNumber":81,"author":{"gitId":"github-amanda"},"content":"        assertTrue(APPLE.equals(appleCopy));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitId":"github-amanda"},"content":"        assertTrue(APPLE.equals(APPLE));"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(5));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        // different item -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(BANANA));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withName(VALID_NAME_BANANA).build();"},{"lineNumber":97,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(editedApple));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"github-amanda"},"content":"        // different quantity -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).build();"},{"lineNumber":101,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(editedApple));"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"        // different expirydate -\u003e returns false"},{"lineNumber":104,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withExpiryDate(VALID_EXPIRYDATE_BANANA).build();"},{"lineNumber":105,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(editedApple));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"        // different location -\u003e returns false"},{"lineNumber":108,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withLocation(VALID_LOCATION_BANANA).build();"},{"lineNumber":109,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(editedApple));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":112,"author":{"gitId":"github-amanda"},"content":"        editedApple \u003d new ItemBuilder(APPLE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":113,"author":{"gitId":"github-amanda"},"content":"        assertFalse(APPLE.equals(editedApple));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":44,"kumsssss":9,"JayChenYJ":6,"Md-Fazil":11,"-":45}},{"path":"src/test/java/seedu/storemando/model/item/LocationContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"public class LocationContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"        LocationContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"            new LocationContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"        LocationContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"            new LocationContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        LocationContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"            new LocationContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        // different item -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"    public void test_locationContainsKeywords() {"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"        LocationContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"            new LocationContainsKeywordsPredicate(Collections.singletonList(\"Apple\"));"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withLocation(\"Apple Banana\").build()));"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\"));"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withLocation(\"Apple Banana\").build()));"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Cherry\"));"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withLocation(\"Apple Cherry\").build()));"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"aPPle\", \"bANaNa\"));"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withLocation(\"Apple Banana\").build()));"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"        // Not all matching keywords"},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Cherry\"));"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"        assertFalse(predicate.test(new ItemBuilder().withLocation(\"Apple\").build()));"},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":68,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"chewwh09"},"content":"    public void test_locationDoesNotContainKeywords() {"},{"lineNumber":70,"author":{"gitId":"chewwh09"},"content":"        // Zero keywords"},{"lineNumber":71,"author":{"gitId":"chewwh09"},"content":"        LocationContainsKeywordsPredicate predicate \u003d new LocationContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"        assertTrue(predicate.test(new ItemBuilder().withLocation(\"Apple\").build()));"},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"        // Non-matching keyword"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Cherry\"));"},{"lineNumber":76,"author":{"gitId":"chewwh09"},"content":"        assertFalse(predicate.test(new ItemBuilder().withLocation(\"Apple Banana\").build()));"},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":"        // Keywords match quantity, expirydate and name, but does not match location"},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":"        predicate \u003d new LocationContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"2020-01-11\", \"Living\", \"Room\"));"},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"        assertFalse(predicate.test(new ItemBuilder().withName(\"Alice\").withQuantity(\"12345\")"},{"lineNumber":81,"author":{"gitId":"chewwh09"},"content":"            .withExpiryDate(\"2020-02-11\").withLocation(\"Living room\").build()));"},{"lineNumber":82,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":83}},{"path":"src/test/java/seedu/storemando/model/item/LocationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"public class LocationTest {"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Location(null));"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    public void constructor_invalidLocation_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"        String invalidLocation \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    public void isValidLocation() {"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        // null location"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(Location.isValidLocation(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(Location.isValidLocation(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(Location.isValidLocation(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"        assertTrue(Location.isValidLocation(\"Leng Inc; 1 Mark St; San Francis CA 2349879; US\")); // long location"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":36}},{"path":"src/test/java/seedu/storemando/model/item/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ItemName(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ItemName(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        assertThrows(NullPointerException.class, () -\u003e ItemName.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        assertFalse(ItemName.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        assertFalse(ItemName.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        assertFalse(ItemName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        assertFalse(ItemName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        assertTrue(ItemName.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        assertTrue(ItemName.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        assertTrue(ItemName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        assertTrue(ItemName.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        assertTrue(ItemName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"chewwh09":12,"-":26}},{"path":"src/test/java/seedu/storemando/model/item/QuantityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":3,"author":{"gitId":"github-amanda"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"github-amanda"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"public class QuantityTest {"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"github-amanda"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"github-amanda"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"},{"lineNumber":14,"author":{"gitId":"github-amanda"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":16,"author":{"gitId":"github-amanda"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"github-amanda"},"content":"    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"github-amanda"},"content":"        String invalidQuantity \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"github-amanda"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"},{"lineNumber":20,"author":{"gitId":"github-amanda"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":22,"author":{"gitId":"github-amanda"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"    public void isValidQuantity() {"},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"        // null quantity number"},{"lineNumber":25,"author":{"gitId":"github-amanda"},"content":"        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(null));"},{"lineNumber":26,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"        // invalid quantity numbers"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"        assertFalse(Quantity.isValidQuantity(\"quantity\")); // non-numeric"},{"lineNumber":31,"author":{"gitId":"github-amanda"},"content":"        assertFalse(Quantity.isValidQuantity(\"9011p041\")); // alphabets within digits"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"        assertFalse(Quantity.isValidQuantity(\"9312 1534\")); // spaces within digits"},{"lineNumber":33,"author":{"gitId":"github-amanda"},"content":""},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"        // valid quantity numbers"},{"lineNumber":35,"author":{"gitId":"Md-Fazil"},"content":"        assertTrue(Quantity.isValidQuantity(\"9\")); // exactly 1 number"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"        assertTrue(Quantity.isValidQuantity(\"93121534\"));"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"        assertTrue(Quantity.isValidQuantity(\"124293842033123\")); // long quantity numbers"},{"lineNumber":38,"author":{"gitId":"github-amanda"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"}"}],"authorContributionMap":{"github-amanda":36,"JayChenYJ":2,"Md-Fazil":1}},{"path":"src/test/java/seedu/storemando/model/item/UniqueItemListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.item;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":11,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.BANANA;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.exceptions.DuplicateItemException;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.exceptions.ItemNotFoundException;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.ItemBuilder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"public class UniqueItemListTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    private final UniqueItemList uniqueItemList \u003d new UniqueItemList();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    public void contains_nullItem_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.contains(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    public void contains_itemNotInList_returnsFalse() {"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"        assertFalse(uniqueItemList.contains(APPLE));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"    public void contains_itemInList_returnsTrue() {"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"        assertTrue(uniqueItemList.contains(APPLE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":45,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withQuantity(VALID_QUANTITY_BANANA).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"        assertTrue(uniqueItemList.contains(editedApple));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    public void add_nullItem_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.add(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    public void add_duplicateItem_throwsDuplicateItemException() {"},{"lineNumber":58,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":59,"author":{"gitId":"github-amanda"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.add(APPLE));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"    public void setItem_nullTargetItem_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"github-amanda"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(null, APPLE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"    public void setItem_nullEditedItem_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitId":"github-amanda"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItem(APPLE, null));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"    public void setItem_targetItemNotInList_throwsItemNotFoundException() {"},{"lineNumber":74,"author":{"gitId":"github-amanda"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.setItem(APPLE, APPLE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    public void setItem_editedItemIsSameItem_success() {"},{"lineNumber":79,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":80,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.setItem(APPLE, APPLE);"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":82,"author":{"gitId":"github-amanda"},"content":"        expectedUniqueItemList.add(APPLE);"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"    public void setItem_editedItemHasSameIdentity_success() {"},{"lineNumber":88,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":89,"author":{"gitId":"github-amanda"},"content":"        Item editedApple \u003d new ItemBuilder(APPLE).withLocation(VALID_LOCATION_BANANA).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":91,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.setItem(APPLE, editedApple);"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":93,"author":{"gitId":"github-amanda"},"content":"        expectedUniqueItemList.add(editedApple);"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"    public void setItem_editedItemHasDifferentIdentity_success() {"},{"lineNumber":99,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":100,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.setItem(APPLE, BANANA);"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":102,"author":{"gitId":"github-amanda"},"content":"        expectedUniqueItemList.add(BANANA);"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"    public void setItem_editedItemHasNonUniqueIdentity_throwsDuplicateItemException() {"},{"lineNumber":108,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":109,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(BANANA);"},{"lineNumber":110,"author":{"gitId":"github-amanda"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItem(APPLE, BANANA));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"    public void remove_nullItem_throwsNullPointerException() {"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.remove(null));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"kumsssss"},"content":"    public void remove_itemDoesNotExist_throwsItemNotFoundException() {"},{"lineNumber":120,"author":{"gitId":"github-amanda"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e uniqueItemList.remove(APPLE));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":"    public void remove_existingItem_removesItem() {"},{"lineNumber":125,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":126,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.remove(APPLE);"},{"lineNumber":127,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":128,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"kumsssss"},"content":"    public void setItems_nullUniqueItemList_throwsNullPointerException() {"},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((UniqueItemList) null));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public void setItems_uniqueItemList_replacesOwnListWithProvidedUniqueItemList() {"},{"lineNumber":138,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":140,"author":{"gitId":"github-amanda"},"content":"        expectedUniqueItemList.add(BANANA);"},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"        uniqueItemList.setItems(expectedUniqueItemList);"},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"    public void setItems_nullList_throwsNullPointerException() {"},{"lineNumber":147,"author":{"gitId":"kumsssss"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueItemList.setItems((List\u003cItem\u003e) null));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"kumsssss"},"content":"    public void setItems_list_replacesOwnListWithProvidedList() {"},{"lineNumber":152,"author":{"gitId":"github-amanda"},"content":"        uniqueItemList.add(APPLE);"},{"lineNumber":153,"author":{"gitId":"github-amanda"},"content":"        List\u003cItem\u003e itemList \u003d Collections.singletonList(BANANA);"},{"lineNumber":154,"author":{"gitId":"kumsssss"},"content":"        uniqueItemList.setItems(itemList);"},{"lineNumber":155,"author":{"gitId":"kumsssss"},"content":"        UniqueItemList expectedUniqueItemList \u003d new UniqueItemList();"},{"lineNumber":156,"author":{"gitId":"github-amanda"},"content":"        expectedUniqueItemList.add(BANANA);"},{"lineNumber":157,"author":{"gitId":"kumsssss"},"content":"        assertEquals(expectedUniqueItemList, uniqueItemList);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"kumsssss"},"content":"    public void setItems_listWithDuplicateItems_throwsDuplicateItemException() {"},{"lineNumber":162,"author":{"gitId":"github-amanda"},"content":"        List\u003cItem\u003e listWithDuplicateItems \u003d Arrays.asList(APPLE, APPLE);"},{"lineNumber":163,"author":{"gitId":"kumsssss"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniqueItemList.setItems(listWithDuplicateItems));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":169,"author":{"gitId":"kumsssss"},"content":"            -\u003e uniqueItemList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":37,"kumsssss":44,"JayChenYJ":6,"-":84}},{"path":"src/test/java/seedu/storemando/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":2,"-":24}},{"path":"src/test/java/seedu/storemando/storage/JsonAdaptedItemTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.storage.JsonAdaptedItem.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.BREAD;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"public class JsonAdaptedItemTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"github-amanda"},"content":"    private static final String INVALID_QUANTITY \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"Md-Fazil"},"content":"    private static final String INVALID_EXPIRYDATE \u003d \"example.com\";"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    private static final String INVALID_LOCATION \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"github-amanda"},"content":"    private static final String VALID_NAME \u003d BREAD.getItemName().toString();"},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"    private static final String VALID_QUANTITY \u003d BREAD.getQuantity().toString();"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"    private static final String VALID_EXPIRYDATE \u003d BREAD.getExpiryDate().toString();"},{"lineNumber":29,"author":{"gitId":"github-amanda"},"content":"    private static final String VALID_LOCATION \u003d BREAD.getLocation().toString();"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BREAD.getTags().stream()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        .map(JsonAdaptedTag::new)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .collect(Collectors.toList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"    public void toModelType_validItemDetails_returnsItem() throws Exception {"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"        JsonAdaptedItem item \u003d new JsonAdaptedItem(BREAD);"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"        assertEquals(BREAD, item.toModelType());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        JsonAdaptedItem item \u003d"},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"            new JsonAdaptedItem(INVALID_NAME, VALID_QUANTITY, VALID_EXPIRYDATE, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        String expectedMessage \u003d ItemName.MESSAGE_CONSTRAINTS;"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":50,"author":{"gitId":"github-amanda"},"content":"        JsonAdaptedItem item \u003d new JsonAdaptedItem(null, VALID_QUANTITY, VALID_EXPIRYDATE, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItemName.class.getSimpleName());"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"github-amanda"},"content":"    public void toModelType_invalidQuantity_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        JsonAdaptedItem item \u003d"},{"lineNumber":58,"author":{"gitId":"github-amanda"},"content":"            new JsonAdaptedItem(VALID_NAME, INVALID_QUANTITY, VALID_EXPIRYDATE, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":59,"author":{"gitId":"github-amanda"},"content":"        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"github-amanda"},"content":"    public void toModelType_nullQuantity_throwsIllegalValueException() {"},{"lineNumber":65,"author":{"gitId":"Md-Fazil"},"content":"        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, null, VALID_EXPIRYDATE, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":66,"author":{"gitId":"github-amanda"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":72,"author":{"gitId":"Md-Fazil"},"content":"    public void toModelType_invalidExpiryDate_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"        JsonAdaptedItem item \u003d"},{"lineNumber":74,"author":{"gitId":"github-amanda"},"content":"            new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, INVALID_EXPIRYDATE, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Md-Fazil"},"content":"    public void toModelType_nullExpiryDate_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"github-amanda"},"content":"        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, null, VALID_LOCATION, VALID_TAGS);"},{"lineNumber":82,"author":{"gitId":"Md-Fazil"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ExpiryDate.class.getSimpleName());"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"        JsonAdaptedItem item \u003d"},{"lineNumber":89,"author":{"gitId":"github-amanda"},"content":"            new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_EXPIRYDATE, INVALID_LOCATION, VALID_TAGS);"},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"github-amanda"},"content":"        JsonAdaptedItem item \u003d new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_EXPIRYDATE, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, item::toModelType);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"        JsonAdaptedItem item \u003d"},{"lineNumber":106,"author":{"gitId":"github-amanda"},"content":"            new JsonAdaptedItem(VALID_NAME, VALID_QUANTITY, VALID_EXPIRYDATE, VALID_LOCATION, invalidTags);"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        assertThrows(IllegalValueException.class, item::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":21,"kumsssss":16,"JayChenYJ":11,"Md-Fazil":7,"chewwh09":2,"-":53}},{"path":"src/test/java/seedu/storemando/storage/JsonSerializableStoreMandoTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.testutil.TypicalItems;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"public class JsonSerializableStoreMandoTest {"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStoreMandoTest\");"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    private static final Path TYPICAL_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalItemsStoreMando.json\");"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"    private static final Path INVALID_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidItemStoreMando.json\");"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    private static final Path DUPLICATE_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateItemStoreMando.json\");"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"    public void toModelType_typicalItemsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"        JsonSerializableStoreMando dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITEMS_FILE,"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"            JsonSerializableStoreMando.class).get();"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando storeMandoFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando typicalItemsStoreMando \u003d TypicalItems.getTypicalStoreMando();"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(storeMandoFromFile, typicalItemsStoreMando);"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    public void toModelType_invalidItemFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"        JsonSerializableStoreMando dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITEM_FILE,"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"            JsonSerializableStoreMando.class).get();"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"    public void toModelType_duplicateItems_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"        JsonSerializableStoreMando dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ITEM_FILE,"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"            JsonSerializableStoreMando.class).get();"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableStoreMando.MESSAGE_DUPLICATE_ITEM,"},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"            dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":47}},{"path":"src/test/java/seedu/storemando/storage/JsonStoreMandoStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.APPLE;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.HEATER;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.testutil.TypicalItems.IRON;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":"public class JsonStoreMandoStorageTest {"},{"lineNumber":23,"author":{"gitId":"github-amanda"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","},{"lineNumber":24,"author":{"gitId":"github-amanda"},"content":"        \"JsonStoreMandoStorageTest\");"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":"    @TempDir"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    public Path testFolder;"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public void readStoreMando_nullFilePath_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e readStoreMando(null));"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":"    private java.util.Optional\u003cReadOnlyStoreMando\u003e readStoreMando(String filePath) throws Exception {"},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"        return new JsonStoreMandoStorage(Paths.get(filePath)).readStoreMando(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":40,"author":{"gitId":"JayChenYJ"},"content":"            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":41,"author":{"gitId":"JayChenYJ"},"content":"            : null;"},{"lineNumber":42,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":44,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"JayChenYJ"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":46,"author":{"gitId":"JayChenYJ"},"content":"        assertFalse(readStoreMando(\"NonExistentFile.json\").isPresent());"},{"lineNumber":47,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":49,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"JayChenYJ"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(DataConversionException.class, () -\u003e readStoreMando(\"notJsonFormatStoreMando.json\"));"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"    public void readStoreMando_invalidItemStoreMando_throwDataConversionException() {"},{"lineNumber":56,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(DataConversionException.class, () -\u003e readStoreMando(\"invalidItemStoreMando.json\"));"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"    public void readStoreMando_invalidAndValidItemStoreMando_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(DataConversionException.class, () -\u003e readStoreMando(\"invalidAndValidItemStoreMando.json\"));"},{"lineNumber":62,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"    public void readAndSaveStoreMando_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"JayChenYJ"},"content":"        Path filePath \u003d testFolder.resolve(\"TempStoreMando.json\");"},{"lineNumber":67,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando original \u003d getTypicalStoreMando();"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"        JsonStoreMandoStorage jsonStoreMandoStorage \u003d new JsonStoreMandoStorage(filePath);"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"        // Save in new file and read back"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        jsonStoreMandoStorage.saveStoreMando(original, filePath);"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        ReadOnlyStoreMando readBack \u003d jsonStoreMandoStorage.readStoreMando(filePath).get();"},{"lineNumber":73,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(original, new StoreMando(readBack));"},{"lineNumber":74,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":75,"author":{"gitId":"JayChenYJ"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":76,"author":{"gitId":"github-amanda"},"content":"        original.addItem(HEATER);"},{"lineNumber":77,"author":{"gitId":"github-amanda"},"content":"        original.removeItem(APPLE);"},{"lineNumber":78,"author":{"gitId":"JayChenYJ"},"content":"        jsonStoreMandoStorage.saveStoreMando(original, filePath);"},{"lineNumber":79,"author":{"gitId":"JayChenYJ"},"content":"        readBack \u003d jsonStoreMandoStorage.readStoreMando(filePath).get();"},{"lineNumber":80,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(original, new StoreMando(readBack));"},{"lineNumber":81,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":82,"author":{"gitId":"JayChenYJ"},"content":"        // Save and read without specifying file path"},{"lineNumber":83,"author":{"gitId":"github-amanda"},"content":"        original.addItem(IRON);"},{"lineNumber":84,"author":{"gitId":"JayChenYJ"},"content":"        jsonStoreMandoStorage.saveStoreMando(original); // file path not specified"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"        readBack \u003d jsonStoreMandoStorage.readStoreMando().get(); // file path not specified"},{"lineNumber":86,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(original, new StoreMando(readBack));"},{"lineNumber":87,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":88,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":90,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando_nullStoreMando_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveStoreMando(null, \"SomeFile.json\"));"},{"lineNumber":93,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":95,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"JayChenYJ"},"content":"     * Saves {@code storeMando} at the specified {@code filePath}."},{"lineNumber":97,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"JayChenYJ"},"content":"    private void saveStoreMando(ReadOnlyStoreMando storeMando, String filePath) {"},{"lineNumber":99,"author":{"gitId":"JayChenYJ"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"JayChenYJ"},"content":"            new JsonStoreMandoStorage(Paths.get(filePath))"},{"lineNumber":101,"author":{"gitId":"JayChenYJ"},"content":"                .saveStoreMando(storeMando, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":102,"author":{"gitId":"JayChenYJ"},"content":"        } catch (IOException ioe) {"},{"lineNumber":103,"author":{"gitId":"JayChenYJ"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":104,"author":{"gitId":"JayChenYJ"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":107,"author":{"gitId":"JayChenYJ"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"JayChenYJ"},"content":"    public void saveStoreMando_nullFilePath_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitId":"JayChenYJ"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveStoreMando(new StoreMando(), null));"},{"lineNumber":110,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"github-amanda":8,"JayChenYJ":103}},{"path":"src/test/java/seedu/storemando/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"JayChenYJ"},"content":"        userPrefs.setStoreMandoFilePath(Paths.get(\"storemando.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":6,"-":117}},{"path":"src/test/java/seedu/storemando/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.TypicalItems.getTypicalStoreMando;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.ReadOnlyStoreMando;"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"        JsonStoreMandoStorage storeMandoStorage \u003d new JsonStoreMandoStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"        storageManager \u003d new StorageManager(storeMandoStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"JayChenYJ"},"content":"    public void storeMandoReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"JayChenYJ"},"content":"         * {@link JsonStoreMandoStorage} class."},{"lineNumber":55,"author":{"gitId":"JayChenYJ"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonStoreMandoStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando original \u003d getTypicalStoreMando();"},{"lineNumber":58,"author":{"gitId":"JayChenYJ"},"content":"        storageManager.saveStoreMando(original);"},{"lineNumber":59,"author":{"gitId":"JayChenYJ"},"content":"        ReadOnlyStoreMando retrieved \u003d storageManager.readStoreMando().get();"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"        assertEquals(original, new StoreMando(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"    public void getStoreMandoFilePath() {"},{"lineNumber":65,"author":{"gitId":"JayChenYJ"},"content":"        assertNotNull(storageManager.getStoreMandoFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":17,"-":51}},{"path":"src/test/java/seedu/storemando/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                                    Executable executable) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":33}},{"path":"src/test/java/seedu/storemando/testutil/EditItemDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand.EditItemDescriptor;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":" * A utility class to help with building EditItemDescriptor objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"public class EditItemDescriptorBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    private final EditCommand.EditItemDescriptor descriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        descriptor \u003d new EditCommand.EditItemDescriptor();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptorBuilder(EditCommand.EditItemDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        this.descriptor \u003d new EditCommand.EditItemDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"     * Returns an {@code EditItemDescriptor} with fields containing {@code item}\u0027s details"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptorBuilder(Item item) {"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        descriptor \u003d new EditCommand.EditItemDescriptor();"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        descriptor.setItemName(item.getItemName());"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"        descriptor.setQuantity(item.getQuantity());"},{"lineNumber":38,"author":{"gitId":"Md-Fazil"},"content":"        descriptor.setExpiryDate(item.getExpiryDate());"},{"lineNumber":39,"author":{"gitId":"JayChenYJ"},"content":"        descriptor.setLocation(item.getLocation());"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        descriptor.setTags(item.getTags());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"     * Sets the {@code Name} of the {@code EditItemDescriptor} that we are building."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptorBuilder withName(String name) {"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"        descriptor.setItemName(new ItemName(name));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"github-amanda"},"content":"     * Sets the {@code Quantity} of the {@code EditItemDescriptor} that we are building."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"    public EditItemDescriptorBuilder withQuantity(String quantity) {"},{"lineNumber":55,"author":{"gitId":"github-amanda"},"content":"        descriptor.setQuantity(new Quantity(quantity));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"JayChenYJ"},"content":"     * Sets the {@code ExpiryDate} of the {@code EditItemDescriptor} that we are building."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Md-Fazil"},"content":"    public EditItemDescriptorBuilder withExpiryDate(String expiryDate) {"},{"lineNumber":63,"author":{"gitId":"Md-Fazil"},"content":"        descriptor.setExpiryDate(new ExpiryDate(expiryDate));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JayChenYJ"},"content":"     * Sets the {@code Location} of the {@code EditItemDescriptor} that we are building."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"    public EditItemDescriptorBuilder withLocation(String location) {"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"        descriptor.setLocation(new Location(location));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditItemDescriptor}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptorBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"    public EditItemDescriptor build() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":15,"github-amanda":4,"JayChenYJ":15,"Md-Fazil":3,"chewwh09":2,"-":49}},{"path":"src/test/java/seedu/storemando/testutil/ItemBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ExpiryDate;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.ItemName;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Location;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Quantity;"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":" * A utility class to help with building Item objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"public class ItemBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Md-Fazil"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"Md-Fazil"},"content":"    public static final String DEFAULT_QUANTITY \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"Md-Fazil"},"content":"    public static final String DEFAULT_EXPIRYDATE \u003d \"2021-10-10\";"},{"lineNumber":22,"author":{"gitId":"Md-Fazil"},"content":"    public static final String DEFAULT_LOCATION \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    private ItemName name;"},{"lineNumber":25,"author":{"gitId":"github-amanda"},"content":"    private Quantity quantity;"},{"lineNumber":26,"author":{"gitId":"Md-Fazil"},"content":"    private ExpiryDate expiryDate;"},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    private Location location;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"     * Creates a {@code ItemBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    public ItemBuilder() {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        name \u003d new ItemName(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"        quantity \u003d new Quantity(DEFAULT_QUANTITY);"},{"lineNumber":36,"author":{"gitId":"Md-Fazil"},"content":"        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRYDATE);"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"     * Initializes the ItemBuilder with the data of {@code itemToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"    public ItemBuilder(Item itemToCopy) {"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        name \u003d itemToCopy.getItemName();"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"        quantity \u003d itemToCopy.getQuantity();"},{"lineNumber":47,"author":{"gitId":"Md-Fazil"},"content":"        expiryDate \u003d itemToCopy.getExpiryDate();"},{"lineNumber":48,"author":{"gitId":"JayChenYJ"},"content":"        location \u003d itemToCopy.getLocation();"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        tags \u003d new HashSet\u003c\u003e(itemToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"     * Sets the {@code Name} of the {@code Item} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"    public ItemBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        this.name \u003d new ItemName(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Item} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"    public ItemBuilder withTags(String... tags) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"     * Sets the {@code Location} of the {@code Item} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JayChenYJ"},"content":"    public ItemBuilder withLocation(String location) {"},{"lineNumber":72,"author":{"gitId":"JayChenYJ"},"content":"        this.location \u003d new Location(location);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"github-amanda"},"content":"     * Sets the {@code Quantity} of the {@code Item} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"github-amanda"},"content":"    public ItemBuilder withQuantity(String quantity) {"},{"lineNumber":80,"author":{"gitId":"github-amanda"},"content":"        this.quantity \u003d new Quantity(quantity);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"JayChenYJ"},"content":"     * Sets the {@code ExpiryDate} of the {@code Item} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Md-Fazil"},"content":"    public ItemBuilder withExpiryDate(String expiryDate) {"},{"lineNumber":88,"author":{"gitId":"Md-Fazil"},"content":"        this.expiryDate \u003d new ExpiryDate(expiryDate);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"    public Item build() {"},{"lineNumber":93,"author":{"gitId":"github-amanda"},"content":"        return new Item(name, quantity, expiryDate, location, tags);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":12,"github-amanda":7,"JayChenYJ":15,"Md-Fazil":9,"chewwh09":4,"-":49}},{"path":"src/test/java/seedu/storemando/testutil/ItemUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_EXPIRYDATE;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.logic.commands.EditCommand;"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":" * A utility class for Item."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"public class ItemUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * Returns an add command string for adding the {@code item}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    public static String getAddCommand(Item item) {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getItemDetails(item);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"     * Returns the part of command string for the given {@code item}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    public static String getItemDetails(Item item) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        sb.append(PREFIX_NAME + item.getItemName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"        sb.append(PREFIX_QUANTITY + item.getQuantity().value + \" \");"},{"lineNumber":35,"author":{"gitId":"Md-Fazil"},"content":"        sb.append(PREFIX_EXPIRYDATE + item.getExpiryDate().value.toString() + \" \");"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        sb.append(PREFIX_LOCATION + item.getLocation().value + \" \");"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        item.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"     * Returns the part of command string for the given {@code EditItemDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    public static String getEditItemDescriptorDetails(EditCommand.EditItemDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        descriptor.getItemName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"        descriptor.getQuantity().ifPresent(quantity -\u003e sb.append(PREFIX_QUANTITY).append(quantity.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"Md-Fazil"},"content":"        descriptor.getExpiryDate().ifPresent(expiryDate -\u003e sb.append(PREFIX_EXPIRYDATE).append(expiryDate.value)"},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":"            .append(\" \"));"},{"lineNumber":52,"author":{"gitId":"JayChenYJ"},"content":"        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION).append(location.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":10,"github-amanda":2,"JayChenYJ":12,"Md-Fazil":3,"chewwh09":2,"-":34}},{"path":"src/test/java/seedu/storemando/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"  }%n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"}\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":1,"-":71}},{"path":"src/test/java/seedu/storemando/testutil/StoreMandoBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":6,"author":{"gitId":"JayChenYJ"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JayChenYJ"},"content":" * A utility class to help with building StoreMando objects."},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":" * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":" * {@code StoreMando ab \u003d new StoreMandoBuilder().withItem(\"John\", \"Doe\").build();}"},{"lineNumber":11,"author":{"gitId":"JayChenYJ"},"content":" * \u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":12,"author":{"gitId":"JayChenYJ"},"content":" * {@code StoreMando ab \u003d new StoreMandoBuilder().withItem(\"John\", \"Doe\").build();}"},{"lineNumber":13,"author":{"gitId":"JayChenYJ"},"content":" * \u003e\u003e\u003e\u003e\u003e\u003e\u003e mid-1.2-base-refactor"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"public class StoreMandoBuilder {"},{"lineNumber":16,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":17,"author":{"gitId":"JayChenYJ"},"content":"    private final StoreMando storeMando;"},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMandoBuilder() {"},{"lineNumber":20,"author":{"gitId":"JayChenYJ"},"content":"        storeMando \u003d new StoreMando();"},{"lineNumber":21,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":23,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMandoBuilder(StoreMando storeMando) {"},{"lineNumber":24,"author":{"gitId":"JayChenYJ"},"content":"        this.storeMando \u003d storeMando;"},{"lineNumber":25,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":27,"author":{"gitId":"JayChenYJ"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JayChenYJ"},"content":"     * Adds a new {@code Item} to the {@code StoreMando} that we are building."},{"lineNumber":29,"author":{"gitId":"JayChenYJ"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMandoBuilder withItem(Item item) {"},{"lineNumber":31,"author":{"gitId":"JayChenYJ"},"content":"        storeMando.addItem(item);"},{"lineNumber":32,"author":{"gitId":"JayChenYJ"},"content":"        return this;"},{"lineNumber":33,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JayChenYJ"},"content":""},{"lineNumber":35,"author":{"gitId":"JayChenYJ"},"content":"    public StoreMando build() {"},{"lineNumber":36,"author":{"gitId":"JayChenYJ"},"content":"        return storeMando;"},{"lineNumber":37,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JayChenYJ"},"content":"}"}],"authorContributionMap":{"JayChenYJ":38}},{"path":"src/test/java/seedu/storemando/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.Model;"},{"lineNumber":10,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"     * Returns the middle index of the item in the {@code model}\u0027s item list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        return Index.fromOneBased(model.getFilteredItemList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"     * Returns the last index of the item in the {@code model}\u0027s item list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        return Index.fromOneBased(model.getFilteredItemList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"     * Returns the item in the {@code model}\u0027s item list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    public static Item getItem(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        return model.getFilteredItemList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":7,"JayChenYJ":4,"-":44}},{"path":"src/test/java/seedu/storemando/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":3,"JayChenYJ":2,"-":7}},{"path":"src/test/java/seedu/storemando/testutil/TypicalItems.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_BANANA;"},{"lineNumber":4,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_EXPIRYDATE_CHEESE;"},{"lineNumber":5,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_BANANA;"},{"lineNumber":6,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_LOCATION_CHEESE;"},{"lineNumber":7,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_BANANA;"},{"lineNumber":8,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_NAME_CHEESE;"},{"lineNumber":9,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_BANANA;"},{"lineNumber":10,"author":{"gitId":"github-amanda"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_QUANTITY_CHEESE;"},{"lineNumber":11,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitId":"Md-Fazil"},"content":"import static seedu.storemando.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.StoreMando;"},{"lineNumber":19,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.model.item.Item;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":" * A utility class containing a list of {@code Item} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"public class TypicalItems {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"github-amanda"},"content":"    public static final Item APPLE \u003d new ItemBuilder().withName(\"Apples\")"},{"lineNumber":27,"author":{"gitId":"github-amanda"},"content":"        .withLocation(\"Kitchen Basket\").withExpiryDate(\"2021-04-08\")"},{"lineNumber":28,"author":{"gitId":"github-amanda"},"content":"        .withQuantity(\"9\")"},{"lineNumber":29,"author":{"gitId":"Md-Fazil"},"content":"        .withTags(\"Expiring\").build();"},{"lineNumber":30,"author":{"gitId":"github-amanda"},"content":"    public static final Item BREAD \u003d new ItemBuilder().withName(\"Bread\")"},{"lineNumber":31,"author":{"gitId":"Md-Fazil"},"content":"        .withLocation(\"Dining Table\")"},{"lineNumber":32,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2021-04-08\").withQuantity(\"1\")"},{"lineNumber":33,"author":{"gitId":"Md-Fazil"},"content":"        .withTags(\"Expiring\", \"Favourite\").build();"},{"lineNumber":34,"author":{"gitId":"github-amanda"},"content":"    public static final Item CREAM \u003d new ItemBuilder().withName(\"Cream Cheese\").withQuantity(\"1\")"},{"lineNumber":35,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2023-10-10\").withLocation(\"Kitchen Drawer\").build();"},{"lineNumber":36,"author":{"gitId":"github-amanda"},"content":"    public static final Item DONUT \u003d new ItemBuilder().withName(\"Donut\").withQuantity(\"5\")"},{"lineNumber":37,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2021-10-10\").withLocation(\"Refrigerator\").withTags(\"Favourite\").build();"},{"lineNumber":38,"author":{"gitId":"github-amanda"},"content":"    public static final Item EGGS \u003d new ItemBuilder().withName(\"Eggs\").withQuantity(\"10\")"},{"lineNumber":39,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2021-10-10\").withLocation(\"Kitchen Drawer\").build();"},{"lineNumber":40,"author":{"gitId":"github-amanda"},"content":"    public static final Item FLOUR \u003d new ItemBuilder().withName(\"Flour\").withQuantity(\"3\")"},{"lineNumber":41,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2021-10-09\").withLocation(\"Kitchen Cabinet\").build();"},{"lineNumber":42,"author":{"gitId":"github-amanda"},"content":"    public static final Item GINGER \u003d new ItemBuilder().withName(\"Ginger\").withQuantity(\"20\")"},{"lineNumber":43,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"2021-10-08\").withLocation(\"Kitchen Basket\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"github-amanda"},"content":"    public static final Item HEATER \u003d new ItemBuilder().withName(\"Heater\").withQuantity(\"2\")"},{"lineNumber":47,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"No Expiry Date\").withLocation(\"Toilet Cabinet\").build();"},{"lineNumber":48,"author":{"gitId":"github-amanda"},"content":"    public static final Item IRON \u003d new ItemBuilder().withName(\"Ironing Board\").withQuantity(\"6\")"},{"lineNumber":49,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(\"No Expiry Date\").withLocation(\"Storeroom\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Md-Fazil"},"content":""},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    // Manually added - Item\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":53,"author":{"gitId":"github-amanda"},"content":"    public static final Item CHEESE \u003d new ItemBuilder().withName(VALID_NAME_CHEESE)"},{"lineNumber":54,"author":{"gitId":"github-amanda"},"content":"        .withQuantity(VALID_QUANTITY_CHEESE).withExpiryDate(VALID_EXPIRYDATE_CHEESE).withLocation(VALID_LOCATION_CHEESE)"},{"lineNumber":55,"author":{"gitId":"Md-Fazil"},"content":"        .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":56,"author":{"gitId":"github-amanda"},"content":"    public static final Item BANANA \u003d new ItemBuilder().withName(VALID_NAME_BANANA).withQuantity(VALID_QUANTITY_BANANA)"},{"lineNumber":57,"author":{"gitId":"github-amanda"},"content":"        .withExpiryDate(VALID_EXPIRYDATE_BANANA).withLocation(VALID_LOCATION_BANANA).withTags(VALID_TAG_HUSBAND,"},{"lineNumber":58,"author":{"gitId":"Md-Fazil"},"content":"            VALID_TAG_FRIEND)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        .build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"github-amanda"},"content":"    public static final String KEYWORD_MATCHING_TOOTHBRUSH \u003d \"Toothbrush\"; // A keyword that matches TOOTHBRUSH"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"JayChenYJ"},"content":"    private TypicalItems() {"},{"lineNumber":64,"author":{"gitId":"JayChenYJ"},"content":"    } // prevents instantiation"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"     * Returns an {@code StoreMando} with all the typical items."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JayChenYJ"},"content":"    public static StoreMando getTypicalStoreMando() {"},{"lineNumber":70,"author":{"gitId":"JayChenYJ"},"content":"        StoreMando ab \u003d new StoreMando();"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"        for (Item item : getTypicalItems()) {"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"            ab.addItem(item);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"     * Returns an {@code StoreMando} with all the typical items sorted by quantity."},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"    public static StoreMando getTypicalStoreMandoSortedByQuantity() {"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        StoreMando ab \u003d new StoreMando();"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        for (Item item : getSortedByQuantityTypicalItems()) {"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"            ab.addItem(item);"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"        return ab;"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"     * Returns an {@code StoreMando} with all the typical itemss."},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"    public static StoreMando getTypicalStoreMandoSortedByExpiryDate() {"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        StoreMando ab \u003d new StoreMando();"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        for (Item item : getSortedByExpiryDateTypicalItems()) {"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"            ab.addItem(item);"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"        return ab;"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"    public static List\u003cItem\u003e getTypicalItems() {"},{"lineNumber":100,"author":{"gitId":"github-amanda"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BREAD, CREAM, DONUT, EGGS, FLOUR, GINGER));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"    public static List\u003cItem\u003e getSortedByQuantityTypicalItems() {"},{"lineNumber":104,"author":{"gitId":"github-amanda"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BREAD, CREAM, FLOUR, DONUT, APPLE, EGGS, GINGER));"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"    public static List\u003cItem\u003e getSortedByExpiryDateTypicalItems() {"},{"lineNumber":108,"author":{"gitId":"github-amanda"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BREAD, APPLE, GINGER, FLOUR, DONUT, EGGS, CREAM));"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"github-amanda":35,"kumsssss":35,"JayChenYJ":7,"Md-Fazil":8,"-":25}},{"path":"src/test/java/seedu/storemando/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"    public TestFxmlObject() {"},{"lineNumber":15,"author":{"gitId":"JayChenYJ"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        setText(text);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return text;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setText(String text) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.text \u003d text;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":33}},{"path":"src/test/java/seedu/storemando/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JayChenYJ"},"content":"package seedu.storemando.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"JayChenYJ"},"content":"import static seedu.storemando.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"JayChenYJ"},"content":"import seedu.storemando.MainApp;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JayChenYJ":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"\u003c?import seedu.storemando.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"}],"authorContributionMap":{"JayChenYJ":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JayChenYJ"},"content":"\u003c?import seedu.storemando.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"JayChenYJ"},"content":"\u003cfx:root type\u003d\"seedu.storemando.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":5,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JayChenYJ":2,"-":5}}]
